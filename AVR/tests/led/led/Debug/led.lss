
led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000007c  000000f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000007c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000000f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000853  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000882  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000010c  00000000  00000000  000008aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ba  00000000  00000000  000009b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000e7  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000b58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000d2  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000026  00000000  00000000  00000c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	0f d0       	rcall	.+30     	; 0x60 <main>
  42:	1a c0       	rjmp	.+52     	; 0x78 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <turnOn_C>:
	PORTC &= ~(1 << pin);

}

static void turnOn_C(int pin){
	PORTC |= (1 << pin);
  46:	48 b1       	in	r20, 0x08	; 8
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	30 e0       	ldi	r19, 0x00	; 0
  4c:	b9 01       	movw	r22, r18
  4e:	02 c0       	rjmp	.+4      	; 0x54 <turnOn_C+0xe>
  50:	66 0f       	add	r22, r22
  52:	77 1f       	adc	r23, r23
  54:	8a 95       	dec	r24
  56:	e2 f7       	brpl	.-8      	; 0x50 <turnOn_C+0xa>
  58:	cb 01       	movw	r24, r22
  5a:	84 2b       	or	r24, r20
  5c:	88 b9       	out	0x08, r24	; 8
  5e:	08 95       	ret

00000060 <main>:

#include <avr/io.h>


static void setup(){
	DDRC = (1 << PC2) | (1 << PC1) | (1 << PC0);
  60:	87 e0       	ldi	r24, 0x07	; 7
  62:	87 b9       	out	0x07, r24	; 7

int main(void){
    
	setup();
	
	turnOn_C(PC0);
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	ee df       	rcall	.-36     	; 0x46 <turnOn_C>
	turnOn_C(PC1);
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	eb df       	rcall	.-42     	; 0x46 <turnOn_C>
	turnOn_C(PC2);
  70:	82 e0       	ldi	r24, 0x02	; 2
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	e8 df       	rcall	.-48     	; 0x46 <turnOn_C>
  76:	ff cf       	rjmp	.-2      	; 0x76 <main+0x16>

00000078 <_exit>:
  78:	f8 94       	cli

0000007a <__stop_program>:
  7a:	ff cf       	rjmp	.-2      	; 0x7a <__stop_program>
