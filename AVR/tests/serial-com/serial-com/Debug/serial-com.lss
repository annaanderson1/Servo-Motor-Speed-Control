
serial-com.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000009a  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000009a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000110  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000873  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000008a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000ea  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000b9  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000f8  00000000  00000000  00000a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00000b68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000fd  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000075  00000000  00000000  00000cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000d2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__vector_18>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	1c d0       	rcall	.+56     	; 0x7a <main>
  42:	29 c0       	rjmp	.+82     	; 0x96 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <__vector_18>:

	// Set frame format: 8 data, 2 stop, 0 parity
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

ISR(USART_RX_vect){
  46:	1f 92       	push	r1
  48:	0f 92       	push	r0
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	0f 92       	push	r0
  4e:	11 24       	eor	r1, r1
  50:	8f 93       	push	r24
  52:	ef 93       	push	r30
  54:	ff 93       	push	r31
	cli();
  56:	f8 94       	cli
	PORTC &= ~(1 << PC2);
  58:	42 98       	cbi	0x08, 2	; 8
	PORTC |= (1 << PC1);
  5a:	41 9a       	sbi	0x08, 1	; 8
	
	unsigned char recieved_byte;
	recieved_byte = UDR0;
  5c:	e6 ec       	ldi	r30, 0xC6	; 198
  5e:	f0 e0       	ldi	r31, 0x00	; 0
  60:	80 81       	ld	r24, Z
	UDR0 = recieved_byte;
  62:	80 83       	st	Z, r24
	
	PORTC &= ~(1 << PC1);
  64:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (1 << PC2);
  66:	42 9a       	sbi	0x08, 2	; 8
	sei();
  68:	78 94       	sei
}
  6a:	ff 91       	pop	r31
  6c:	ef 91       	pop	r30
  6e:	8f 91       	pop	r24
  70:	0f 90       	pop	r0
  72:	0f be       	out	0x3f, r0	; 63
  74:	0f 90       	pop	r0
  76:	1f 90       	pop	r1
  78:	18 95       	reti

0000007a <main>:
#define F_CPU 1000000UL
#define BAUD 2400


static void setup(){
	DDRD |= (1 << PD1);
  7a:	51 9a       	sbi	0x0a, 1	; 10
	unsigned int ubrr = (((F_CPU / (BAUD * 16UL))) - 1 );

	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
  7c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
  80:	89 e1       	ldi	r24, 0x19	; 25
  82:	80 93 c4 00 	sts	0x00C4, r24

	// Enable reciever for interrupt and transmitter
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0);
  86:	88 e9       	ldi	r24, 0x98	; 152
  88:	80 93 c1 00 	sts	0x00C1, r24

	// Set frame format: 8 data, 2 stop, 0 parity
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  8c:	86 e0       	ldi	r24, 0x06	; 6
  8e:	80 93 c2 00 	sts	0x00C2, r24


int main(void){
	
	setup();
	sei();
  92:	78 94       	sei
  94:	ff cf       	rjmp	.-2      	; 0x94 <main+0x1a>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
