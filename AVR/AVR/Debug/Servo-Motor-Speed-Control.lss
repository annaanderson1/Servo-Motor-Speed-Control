
Servo-Motor-Speed-Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000eec  00000f80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800112  00800112  00000f92  2**0
                  ALLOC
  3 .stab         00000f3c  00000000  00000000  00000f94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000356  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002226  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000188  00000000  00000000  00002255  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a8a  00000000  00000000  000023dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000afe  00000000  00000000  00003e67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c0b  00000000  00000000  00004965  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000430  00000000  00000000  00005570  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005c0  00000000  00000000  000059a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000011ae  00000000  00000000  00005f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f8  00000000  00000000  0000710e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	23 c0       	rjmp	.+70     	; 0x48 <__ctors_end>
   2:	3d c0       	rjmp	.+122    	; 0x7e <__bad_interrupt>
   4:	3c c0       	rjmp	.+120    	; 0x7e <__bad_interrupt>
   6:	3b c0       	rjmp	.+118    	; 0x7e <__bad_interrupt>
   8:	15 c1       	rjmp	.+554    	; 0x234 <__vector_4>
   a:	39 c0       	rjmp	.+114    	; 0x7e <__bad_interrupt>
   c:	38 c0       	rjmp	.+112    	; 0x7e <__bad_interrupt>
   e:	37 c0       	rjmp	.+110    	; 0x7e <__bad_interrupt>
  10:	36 c0       	rjmp	.+108    	; 0x7e <__bad_interrupt>
  12:	35 c0       	rjmp	.+106    	; 0x7e <__bad_interrupt>
  14:	34 c0       	rjmp	.+104    	; 0x7e <__bad_interrupt>
  16:	33 c0       	rjmp	.+102    	; 0x7e <__bad_interrupt>
  18:	32 c0       	rjmp	.+100    	; 0x7e <__bad_interrupt>
  1a:	31 c0       	rjmp	.+98     	; 0x7e <__bad_interrupt>
  1c:	30 c0       	rjmp	.+96     	; 0x7e <__bad_interrupt>
  1e:	2f c0       	rjmp	.+94     	; 0x7e <__bad_interrupt>
  20:	2e c0       	rjmp	.+92     	; 0x7e <__bad_interrupt>
  22:	2d c0       	rjmp	.+90     	; 0x7e <__bad_interrupt>
  24:	5c c1       	rjmp	.+696    	; 0x2de <__vector_18>
  26:	2b c0       	rjmp	.+86     	; 0x7e <__bad_interrupt>
  28:	2a c0       	rjmp	.+84     	; 0x7e <__bad_interrupt>
  2a:	29 c0       	rjmp	.+82     	; 0x7e <__bad_interrupt>
  2c:	28 c0       	rjmp	.+80     	; 0x7e <__bad_interrupt>
  2e:	27 c0       	rjmp	.+78     	; 0x7e <__bad_interrupt>
  30:	26 c0       	rjmp	.+76     	; 0x7e <__bad_interrupt>
  32:	25 c0       	rjmp	.+74     	; 0x7e <__bad_interrupt>
  34:	d6 c1       	rjmp	.+940    	; 0x3e2 <main+0x52>
  36:	d9 c1       	rjmp	.+946    	; 0x3ea <main+0x5a>
  38:	dc c1       	rjmp	.+952    	; 0x3f2 <main+0x62>
  3a:	df c1       	rjmp	.+958    	; 0x3fa <main+0x6a>
  3c:	e2 c1       	rjmp	.+964    	; 0x402 <main+0x72>
  3e:	e5 c1       	rjmp	.+970    	; 0x40a <main+0x7a>
  40:	e8 c1       	rjmp	.+976    	; 0x412 <main+0x82>
  42:	eb c1       	rjmp	.+982    	; 0x41a <main+0x8a>
  44:	ee c1       	rjmp	.+988    	; 0x422 <main+0x92>
  46:	f1 c1       	rjmp	.+994    	; 0x42a <main+0x9a>

00000048 <__ctors_end>:
  48:	11 24       	eor	r1, r1
  4a:	1f be       	out	0x3f, r1	; 63
  4c:	cf ef       	ldi	r28, 0xFF	; 255
  4e:	d4 e0       	ldi	r29, 0x04	; 4
  50:	de bf       	out	0x3e, r29	; 62
  52:	cd bf       	out	0x3d, r28	; 61

00000054 <__do_copy_data>:
  54:	11 e0       	ldi	r17, 0x01	; 1
  56:	a0 e0       	ldi	r26, 0x00	; 0
  58:	b1 e0       	ldi	r27, 0x01	; 1
  5a:	ec ee       	ldi	r30, 0xEC	; 236
  5c:	fe e0       	ldi	r31, 0x0E	; 14
  5e:	02 c0       	rjmp	.+4      	; 0x64 <__do_copy_data+0x10>
  60:	05 90       	lpm	r0, Z+
  62:	0d 92       	st	X+, r0
  64:	a2 31       	cpi	r26, 0x12	; 18
  66:	b1 07       	cpc	r27, r17
  68:	d9 f7       	brne	.-10     	; 0x60 <__do_copy_data+0xc>

0000006a <__do_clear_bss>:
  6a:	21 e0       	ldi	r18, 0x01	; 1
  6c:	a2 e1       	ldi	r26, 0x12	; 18
  6e:	b1 e0       	ldi	r27, 0x01	; 1
  70:	01 c0       	rjmp	.+2      	; 0x74 <.do_clear_bss_start>

00000072 <.do_clear_bss_loop>:
  72:	1d 92       	st	X+, r1

00000074 <.do_clear_bss_start>:
  74:	ab 31       	cpi	r26, 0x1B	; 27
  76:	b2 07       	cpc	r27, r18
  78:	e1 f7       	brne	.-8      	; 0x72 <.do_clear_bss_loop>
  7a:	8a d1       	rcall	.+788    	; 0x390 <main>
  7c:	35 c7       	rjmp	.+3690   	; 0xee8 <_exit>

0000007e <__bad_interrupt>:
  7e:	c0 cf       	rjmp	.-128    	; 0x0 <__vectors>

00000080 <init_shared_data>:
	uint32_t rpm_avg;
	uint32_t rpm_measurements[MEASUREMENTS_SIZE];
	uint32_t delta_time;
} Shared_Data;

void init_shared_data(Shared_Data* shared_ptr){
  80:	fc 01       	movw	r30, r24
	shared_ptr->speed_set = 0;
  82:	11 82       	std	Z+1, r1	; 0x01
  84:	10 82       	st	Z, r1
	shared_ptr->speed_actual = 25;
  86:	89 e1       	ldi	r24, 0x19	; 25
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	93 83       	std	Z+3, r25	; 0x03
  8c:	82 83       	std	Z+2, r24	; 0x02
	shared_ptr->clk_prev = 0;
  8e:	15 82       	std	Z+5, r1	; 0x05
  90:	14 82       	std	Z+4, r1	; 0x04
	shared_ptr->clk_elapsed = 100;
  92:	84 e6       	ldi	r24, 0x64	; 100
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	97 83       	std	Z+7, r25	; 0x07
  98:	86 83       	std	Z+6, r24	; 0x06
	shared_ptr->curr_rpm = 0;
  9a:	11 86       	std	Z+9, r1	; 0x09
  9c:	10 86       	std	Z+8, r1	; 0x08
	shared_ptr->rpm_avg = 70;
  9e:	86 e4       	ldi	r24, 0x46	; 70
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	93 87       	std	Z+11, r25	; 0x0b
  a4:	82 87       	std	Z+10, r24	; 0x0a
	shared_ptr->delta_time = 0;
  a6:	e4 57       	subi	r30, 0x74	; 116
  a8:	ff 4f       	sbci	r31, 0xFF	; 255
  aa:	11 82       	std	Z+1, r1	; 0x01
  ac:	10 82       	st	Z, r1
  ae:	08 95       	ret

000000b0 <calc_latest_rpm>:
}

/*	Calculates the speed for a single encoder-interrupt, using fixed point arithmetics.
 *	Qm.n values defined in shared.h
*/
void calc_latest_rpm(Shared_Data* shared_ptr){
  b0:	af 92       	push	r10
  b2:	bf 92       	push	r11
  b4:	cf 92       	push	r12
  b6:	df 92       	push	r13
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	ec 01       	movw	r28, r24
	// scales based on prescaling
	uint16_t prescale = 8;

	uint32_t temp;

	temp = (uint32_t)delta_clk * prescale;
  c6:	8e 81       	ldd	r24, Y+6	; 0x06
	uint64_t denominator;
	uint64_t rpm;
	
	shared_ptr->delta_time = calc_delta_time(shared_ptr);
	
	shared_ptr->delta_time = shared_ptr->delta_time << N;
  c8:	58 2f       	mov	r21, r24
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	fe 01       	movw	r30, r28
  ce:	e4 57       	subi	r30, 0x74	; 116
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
  d2:	51 83       	std	Z+1, r21	; 0x01
  d4:	40 83       	st	Z, r20
	S_TO_MIN = S_TO_MIN << N;

	numerator = (uint64_t)MS_TO_S * S_TO_MIN;
	numerator = numerator >> N;

	denominator = (uint64_t)delta_rev_inverse * shared_ptr->delta_time;
  d6:	a1 2c       	mov	r10, r1
  d8:	0f 2e       	mov	r0, r31
  da:	fc e0       	ldi	r31, 0x0C	; 12
  dc:	bf 2e       	mov	r11, r31
  de:	f0 2d       	mov	r31, r0
  e0:	c1 2c       	mov	r12, r1
  e2:	d1 2c       	mov	r13, r1
  e4:	e1 2c       	mov	r14, r1
  e6:	f1 2c       	mov	r15, r1
  e8:	00 e0       	ldi	r16, 0x00	; 0
  ea:	10 e0       	ldi	r17, 0x00	; 0
  ec:	24 2f       	mov	r18, r20
  ee:	35 2f       	mov	r19, r21
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	3c d3       	rcall	.+1656   	; 0x776 <__muldi3>
	denominator = denominator >> N;
  fe:	05 e0       	ldi	r16, 0x05	; 5
 100:	ca d3       	rcall	.+1940   	; 0x896 <__lshrdi3>
 102:	a2 2e       	mov	r10, r18
 104:	b3 2e       	mov	r11, r19
 106:	c4 2e       	mov	r12, r20
 108:	d5 2e       	mov	r13, r21
 10a:	e6 2e       	mov	r14, r22
 10c:	f7 2e       	mov	r15, r23
 10e:	e8 2f       	mov	r30, r24
 110:	19 2f       	mov	r17, r25

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1); // For correct rounding
 112:	01 e0       	ldi	r16, 0x01	; 1
 114:	c0 d3       	rcall	.+1920   	; 0x896 <__lshrdi3>
 116:	44 5e       	subi	r20, 0xE4	; 228
 118:	5d 4f       	sbci	r21, 0xFD	; 253
 11a:	6f 4f       	sbci	r22, 0xFF	; 255
 11c:	7f 4f       	sbci	r23, 0xFF	; 255
 11e:	8f 4f       	sbci	r24, 0xFF	; 255
 120:	9f 4f       	sbci	r25, 0xFF	; 255
	rpm = rpm / denominator;
 122:	0e 2f       	mov	r16, r30
 124:	1d d3       	rcall	.+1594   	; 0x760 <__udivdi3>
	
	shared_ptr->curr_rpm = (uint32_t)rpm >> N;
 126:	82 2f       	mov	r24, r18
 128:	93 2f       	mov	r25, r19
 12a:	52 2f       	mov	r21, r18
 12c:	43 2f       	mov	r20, r19
 12e:	96 95       	lsr	r25
 130:	87 95       	ror	r24
 132:	92 95       	swap	r25
 134:	82 95       	swap	r24
 136:	8f 70       	andi	r24, 0x0F	; 15
 138:	89 27       	eor	r24, r25
 13a:	9f 70       	andi	r25, 0x0F	; 15
 13c:	89 27       	eor	r24, r25
 13e:	99 87       	std	Y+9, r25	; 0x09
 140:	88 87       	std	Y+8, r24	; 0x08
}

/*	Calculates the speed for a single encoder-interrupt, using fixed point arithmetics.
 *	Qm.n values defined in shared.h
*/
void calc_latest_rpm(Shared_Data* shared_ptr){
 142:	fe 01       	movw	r30, r28
 144:	e6 57       	subi	r30, 0x76	; 118
 146:	ff 4f       	sbci	r31, 0xFF	; 255

    if(temp < 0 || temp > 130){
        return;
    }
*/
    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
 148:	8f e3       	ldi	r24, 0x3F	; 63
 14a:	90 e0       	ldi	r25, 0x00	; 0
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	32 91       	ld	r19, -Z
 150:	22 91       	ld	r18, -Z
 152:	33 83       	std	Z+3, r19	; 0x03
 154:	22 83       	std	Z+2, r18	; 0x02

    if(temp < 0 || temp > 130){
        return;
    }
*/
    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
 156:	8f 3f       	cpi	r24, 0xFF	; 255
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	92 07       	cpc	r25, r18
 15c:	b9 f7       	brne	.-18     	; 0x14c <calc_latest_rpm+0x9c>
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
    }
    shared_ptr->rpm_measurements[0] = rpm;
 15e:	5c 87       	std	Y+12, r21	; 0x0c
 160:	4d 87       	std	Y+13, r20	; 0x0d
	
	shared_ptr->curr_rpm = (uint32_t)rpm >> N;
	insert_rpm(shared_ptr, rpm);
	
	
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	ff 90       	pop	r15
 16c:	ef 90       	pop	r14
 16e:	df 90       	pop	r13
 170:	cf 90       	pop	r12
 172:	bf 90       	pop	r11
 174:	af 90       	pop	r10
 176:	08 95       	ret

00000178 <calc_avg_rpm>:


void calc_avg_rpm(Shared_Data* shared_ptr){
 178:	2f 92       	push	r2
 17a:	3f 92       	push	r3
 17c:	4f 92       	push	r4
 17e:	5f 92       	push	r5
 180:	6f 92       	push	r6
 182:	7f 92       	push	r7
 184:	8f 92       	push	r8
 186:	9f 92       	push	r9
 188:	af 92       	push	r10
 18a:	bf 92       	push	r11
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	ec 01       	movw	r28, r24
 19e:	dc 01       	movw	r26, r24
 1a0:	1c 96       	adiw	r26, 0x0c	; 12
 1a2:	e0 e4       	ldi	r30, 0x40	; 64
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
	uint64_t temp = 0;
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
	int i;
	
	for(i = 0; i < MEASUREMENTS_SIZE; i++){
		temp = temp + shared_ptr->rpm_measurements[i];
 1b6:	2d 90       	ld	r2, X+
 1b8:	3d 90       	ld	r3, X+
 1ba:	a2 2c       	mov	r10, r2
 1bc:	b3 2c       	mov	r11, r3
 1be:	c1 2c       	mov	r12, r1
 1c0:	d1 2c       	mov	r13, r1
 1c2:	e1 2c       	mov	r14, r1
 1c4:	f1 2c       	mov	r15, r1
 1c6:	00 e0       	ldi	r16, 0x00	; 0
 1c8:	10 e0       	ldi	r17, 0x00	; 0
 1ca:	74 d3       	rcall	.+1768   	; 0x8b4 <__adddi3>
 1cc:	31 97       	sbiw	r30, 0x01	; 1

void calc_avg_rpm(Shared_Data* shared_ptr){
	uint64_t temp = 0;
	int i;
	
	for(i = 0; i < MEASUREMENTS_SIZE; i++){
 1ce:	99 f7       	brne	.-26     	; 0x1b6 <calc_avg_rpm+0x3e>
		temp = temp + shared_ptr->rpm_measurements[i];
	}
	
	// Divide by MEASUREMENTS_SIZE (64)
	temp = temp >> 6;
 1d0:	06 e0       	ldi	r16, 0x06	; 6
 1d2:	61 d3       	rcall	.+1730   	; 0x896 <__lshrdi3>
	
	// convert back from Qm.n to normal int
	temp = temp >> N;
 1d4:	05 e0       	ldi	r16, 0x05	; 5
 1d6:	5f d3       	rcall	.+1726   	; 0x896 <__lshrdi3>
	shared_ptr->rpm_avg = temp;
 1d8:	2a 87       	std	Y+10, r18	; 0x0a
 1da:	3b 87       	std	Y+11, r19	; 0x0b
	
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	ff 90       	pop	r15
 1e6:	ef 90       	pop	r14
 1e8:	df 90       	pop	r13
 1ea:	cf 90       	pop	r12
 1ec:	bf 90       	pop	r11
 1ee:	af 90       	pop	r10
 1f0:	9f 90       	pop	r9
 1f2:	8f 90       	pop	r8
 1f4:	7f 90       	pop	r7
 1f6:	6f 90       	pop	r6
 1f8:	5f 90       	pop	r5
 1fa:	4f 90       	pop	r4
 1fc:	3f 90       	pop	r3
 1fe:	2f 90       	pop	r2
 200:	08 95       	ret

00000202 <calc_time_elapsed>:

void calc_time_elapsed(Shared_Data* shared_ptr){
 202:	fc 01       	movw	r30, r24
	
	if(clk_curr < shared_ptr->clk_prev){
 204:	24 81       	ldd	r18, Z+4	; 0x04
 206:	35 81       	ldd	r19, Z+5	; 0x05
 208:	80 91 18 01 	lds	r24, 0x0118
 20c:	90 91 19 01 	lds	r25, 0x0119
 210:	82 17       	cp	r24, r18
 212:	93 07       	cpc	r25, r19
 214:	38 f4       	brcc	.+14     	; 0x224 <calc_time_elapsed+0x22>
		uint16_t temp = 0xFFFF;
		temp = temp - shared_ptr->clk_prev;
 216:	20 95       	com	r18
 218:	30 95       	com	r19
		temp = temp + clk_curr;
 21a:	28 0f       	add	r18, r24
 21c:	39 1f       	adc	r19, r25
		shared_ptr->clk_elapsed = temp;
 21e:	37 83       	std	Z+7, r19	; 0x07
 220:	26 83       	std	Z+6, r18	; 0x06
 222:	05 c0       	rjmp	.+10     	; 0x22e <calc_time_elapsed+0x2c>
	}
	else{
		shared_ptr->clk_elapsed = clk_curr - shared_ptr->clk_prev;
 224:	ac 01       	movw	r20, r24
 226:	42 1b       	sub	r20, r18
 228:	53 0b       	sbc	r21, r19
 22a:	57 83       	std	Z+7, r21	; 0x07
 22c:	46 83       	std	Z+6, r20	; 0x06
		
	}
	shared_ptr->clk_prev = clk_curr;
 22e:	95 83       	std	Z+5, r25	; 0x05
 230:	84 83       	std	Z+4, r24	; 0x04
 232:	08 95       	ret

00000234 <__vector_4>:
}

/* ISR for PCINT14-8 */
ISR(PCINT1_vect){
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
	cli();
 242:	f8 94       	cli
	
	clk_curr = TCNT1;
 244:	80 91 84 00 	lds	r24, 0x0084
 248:	90 91 85 00 	lds	r25, 0x0085
 24c:	90 93 19 01 	sts	0x0119, r25
 250:	80 93 18 01 	sts	0x0118, r24
	newMeasurement = true;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 1a 01 	sts	0x011A, r24
	
	sei();
 25a:	78 94       	sei
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <USART_transmit>:
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with " "
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	00 d0       	rcall	.+0      	; 0x270 <USART_transmit+0x6>
 270:	00 d0       	rcall	.+0      	; 0x272 <USART_transmit+0x8>
 272:	00 d0       	rcall	.+0      	; 0x274 <USART_transmit+0xa>
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
	char buf[6];
	
	strcpy(buf,"%%%%%");
 278:	26 e0       	ldi	r18, 0x06	; 6
 27a:	e0 e0       	ldi	r30, 0x00	; 0
 27c:	f1 e0       	ldi	r31, 0x01	; 1
 27e:	de 01       	movw	r26, r28
 280:	11 96       	adiw	r26, 0x01	; 1
 282:	01 90       	ld	r0, Z+
 284:	0d 92       	st	X+, r0
 286:	2a 95       	dec	r18
 288:	e1 f7       	brne	.-8      	; 0x282 <USART_transmit+0x18>
	strncpy(buf, data, 5);
 28a:	45 e0       	ldi	r20, 0x05	; 5
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	bc 01       	movw	r22, r24
 290:	ce 01       	movw	r24, r28
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	41 d3       	rcall	.+1666   	; 0x918 <strncpy>
 296:	be 01       	movw	r22, r28
 298:	6f 5f       	subi	r22, 0xFF	; 255
 29a:	7f 4f       	sbci	r23, 0xFF	; 255
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with " "
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
 29c:	9e 01       	movw	r18, r28
 29e:	2a 5f       	subi	r18, 0xFA	; 250
 2a0:	3f 4f       	sbci	r19, 0xFF	; 255
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
 2a2:	e0 ec       	ldi	r30, 0xC0	; 192
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = buf[i];
 2a6:	86 ec       	ldi	r24, 0xC6	; 198
 2a8:	90 e0       	ldi	r25, 0x00	; 0
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
 2aa:	40 81       	ld	r20, Z
 2ac:	45 ff       	sbrs	r20, 5
 2ae:	fd cf       	rjmp	.-6      	; 0x2aa <USART_transmit+0x40>
		UDR0 = buf[i];
 2b0:	db 01       	movw	r26, r22
 2b2:	4d 91       	ld	r20, X+
 2b4:	bd 01       	movw	r22, r26
 2b6:	dc 01       	movw	r26, r24
 2b8:	4c 93       	st	X, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ba:	a1 ee       	ldi	r26, 0xE1	; 225
 2bc:	b4 e0       	ldi	r27, 0x04	; 4
 2be:	11 97       	sbiw	r26, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <USART_transmit+0x54>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <USART_transmit+0x5a>
 2c4:	00 00       	nop
	char buf[6];
	
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
 2c6:	62 17       	cp	r22, r18
 2c8:	73 07       	cpc	r23, r19
 2ca:	79 f7       	brne	.-34     	; 0x2aa <USART_transmit+0x40>
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = buf[i];
		_delay_ms(5);
	}
}
 2cc:	26 96       	adiw	r28, 0x06	; 6
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <__vector_18>:
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	2f 93       	push	r18
 2ea:	8f 93       	push	r24
 2ec:	9f 93       	push	r25
 2ee:	af 93       	push	r26
 2f0:	bf 93       	push	r27
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	ef 93       	push	r30
 2f8:	ff 93       	push	r31
	cli();
 2fa:	f8 94       	cli
	PORTC &= ~(1 << PC2);
 2fc:	42 98       	cbi	0x08, 2	; 8
	PORTC |= (1 << PC1);
 2fe:	41 9a       	sbi	0x08, 1	; 8
 300:	a2 e1       	ldi	r26, 0x12	; 18
 302:	b1 e0       	ldi	r27, 0x01	; 1
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
 304:	87 e1       	ldi	r24, 0x17	; 23
 306:	91 e0       	ldi	r25, 0x01	; 1
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
 308:	e0 ec       	ldi	r30, 0xC0	; 192
 30a:	f0 e0       	ldi	r31, 0x00	; 0
		recieved_bytes[i] = UDR0;
 30c:	c6 ec       	ldi	r28, 0xC6	; 198
 30e:	d0 e0       	ldi	r29, 0x00	; 0
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
 310:	20 81       	ld	r18, Z
 312:	22 23       	and	r18, r18
 314:	ec f7       	brge	.-6      	; 0x310 <__vector_18+0x32>
		recieved_bytes[i] = UDR0;
 316:	28 81       	ld	r18, Y
 318:	2d 93       	st	X+, r18
*/
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
 31a:	a8 17       	cp	r26, r24
 31c:	b9 07       	cpc	r27, r25
 31e:	c1 f7       	brne	.-16     	; 0x310 <__vector_18+0x32>
		while( !(UCSR0A & (1 << RXC0)) );
		recieved_bytes[i] = UDR0;
	}
	PORTC &= ~(1 << PC1);
 320:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (1 << PC2);
 322:	42 9a       	sbi	0x08, 2	; 8
	newCommand = true;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	80 93 17 01 	sts	0x0117, r24
	sei();
 32a:	78 94       	sei
}
 32c:	ff 91       	pop	r31
 32e:	ef 91       	pop	r30
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	bf 91       	pop	r27
 336:	af 91       	pop	r26
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	2f 91       	pop	r18
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <setup_registers>:
 *	PC1, PD5-PD6
 *	See details in datasheet pg. 99-100
*/
static void setup_DDR(){

	DDRB |= 0x00;
 348:	84 b1       	in	r24, 0x04	; 4
 34a:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC2) | (1 << PC1) | (1 << PC0);
 34c:	87 b1       	in	r24, 0x07	; 7
 34e:	87 60       	ori	r24, 0x07	; 7
 350:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PD6) | (1 << PD5) | (1 << PD1);
 352:	8a b1       	in	r24, 0x0a	; 10
 354:	82 66       	ori	r24, 0x62	; 98
 356:	8a b9       	out	0x0a, r24	; 10
 *	PWM-mode: fast PWM, inverted, no prescaling.
 *	See details in datasheet pg. 113-117
*/
static void setup_PWM(){

	TCCR0A = (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0) | (1 << WGM01) | (1 << WGM00);
 358:	83 ef       	ldi	r24, 0xF3	; 243
 35a:	84 bd       	out	0x24, r24	; 36
	TCCR0B =  (0 << CS02) | (0 << CS01) | (1 << CS00);
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	85 bd       	out	0x25, r24	; 37
 * 	Baud rate according to #define in shared.h
 * 	See details in datasheet pg. 201-205
*/
static void setup_USART(){

	DDRD |= (1 << PD1);
 360:	51 9a       	sbi	0x0a, 1	; 10
	unsigned int ubrr = (((F_CPU / (BAUD * 16UL))) - 1 );

	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 362:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 366:	89 e1       	ldi	r24, 0x19	; 25
 368:	80 93 c4 00 	sts	0x00C4, r24

	// Enable reciever for interrupt and transmitter
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0);
 36c:	88 e9       	ldi	r24, 0x98	; 152
 36e:	80 93 c1 00 	sts	0x00C1, r24

	// Set frame format: 8 data, 2 stop, 0 parity
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 372:	86 e0       	ldi	r24, 0x06	; 6
 374:	80 93 c2 00 	sts	0x00C2, r24
 * 	See details in datasheet pg. 81-82
*/
static void setup_interrupts(){

	// Enables possibility of interrupts on pins 14-8
	PCICR = (1 << PCIE1);
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	80 93 68 00 	sts	0x0068, r24
	// Enables interrupts on pin PC4-PC5
	PCMSK1 = (1 << PCINT13) | (1 << PCINT12);
 37e:	80 e3       	ldi	r24, 0x30	; 48
 380:	80 93 6c 00 	sts	0x006C, r24
/*	
 *	Sets up clk/8 prescaling on 16-bit timer OC1
 *	See details in datasheet pg. 141-147
*/	
static void setup_speed_clock(){
	TCCR1B |= (1 << CS11);
 384:	e1 e8       	ldi	r30, 0x81	; 129
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	82 60       	ori	r24, 0x02	; 2
 38c:	80 83       	st	Z, r24
 38e:	08 95       	ret

00000390 <main>:
bool newCommand;
bool newMeasurement;
uint16_t clk_curr;
char recieved_bytes[5];

int main(void){
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	ce 58       	subi	r28, 0x8E	; 142
 39a:	d1 09       	sbc	r29, r1
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	f8 94       	cli
 3a0:	de bf       	out	0x3e, r29	; 62
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	cd bf       	out	0x3d, r28	; 61
	Shared_Data shared_data;
	Shared_Data* shared_ptr = &shared_data;
	init_shared_data(shared_ptr);
 3a6:	ce 01       	movw	r24, r28
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	6a de       	rcall	.-812    	; 0x80 <init_shared_data>
	
	newCommand = false;
 3ac:	10 92 17 01 	sts	0x0117, r1
	newMeasurement = false;
 3b0:	10 92 1a 01 	sts	0x011A, r1
	clk_curr = 0;
 3b4:	10 92 19 01 	sts	0x0119, r1
 3b8:	10 92 18 01 	sts	0x0118, r1

	setup_registers();
 3bc:	c5 df       	rcall	.-118    	; 0x348 <setup_registers>
	sei();
 3be:	78 94       	sei

//shared_ptr->clk_elapsed = 3;
	while(1){

		if(newCommand){
			switch(*recieved_bytes){
 3c0:	02 e1       	ldi	r16, 0x12	; 18
 3c2:	11 e0       	ldi	r17, 0x01	; 1
	sei();

//shared_ptr->clk_elapsed = 3;
	while(1){

		if(newCommand){
 3c4:	80 91 17 01 	lds	r24, 0x0117
 3c8:	88 23       	and	r24, r24
 3ca:	a1 f1       	breq	.+104    	; 0x434 <main+0xa4>
			switch(*recieved_bytes){
 3cc:	f8 01       	movw	r30, r16
 3ce:	80 81       	ld	r24, Z
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	fc 01       	movw	r30, r24
 3d4:	f0 97       	sbiw	r30, 0x30	; 48
 3d6:	ea 30       	cpi	r30, 0x0A	; 10
 3d8:	f1 05       	cpc	r31, r1
 3da:	50 f5       	brcc	.+84     	; 0x430 <main+0xa0>
 3dc:	e6 5e       	subi	r30, 0xE6	; 230
 3de:	ff 4f       	sbci	r31, 0xFF	; 255
 3e0:	09 94       	ijmp
				case '0':
					transmit_0(shared_ptr);
 3e2:	ce 01       	movw	r24, r28
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	36 d0       	rcall	.+108    	; 0x454 <transmit_0>
					break;
 3e8:	23 c0       	rjmp	.+70     	; 0x430 <main+0xa0>
				case '1':
					transmit_1(shared_ptr);
 3ea:	ce 01       	movw	r24, r28
 3ec:	01 96       	adiw	r24, 0x01	; 1
 3ee:	33 d0       	rcall	.+102    	; 0x456 <transmit_1>
					break;
 3f0:	1f c0       	rjmp	.+62     	; 0x430 <main+0xa0>
				case '2':
					transmit_2(shared_ptr);
 3f2:	ce 01       	movw	r24, r28
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	30 d0       	rcall	.+96     	; 0x458 <transmit_2>
					break;
 3f8:	1b c0       	rjmp	.+54     	; 0x430 <main+0xa0>
				case '3':
					transmit_3(shared_ptr);
 3fa:	ce 01       	movw	r24, r28
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	5d d0       	rcall	.+186    	; 0x4ba <transmit_3>
					break;
 400:	17 c0       	rjmp	.+46     	; 0x430 <main+0xa0>
				case '4':
					transmit_4(shared_ptr);
 402:	ce 01       	movw	r24, r28
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	86 d0       	rcall	.+268    	; 0x514 <transmit_4>
					break;
 408:	13 c0       	rjmp	.+38     	; 0x430 <main+0xa0>
				case '5':
					transmit_5(shared_ptr);
 40a:	ce 01       	movw	r24, r28
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	b7 d0       	rcall	.+366    	; 0x57e <transmit_5>
					break;
 410:	0f c0       	rjmp	.+30     	; 0x430 <main+0xa0>
				case '6':
					transmit_6(shared_ptr);
 412:	ce 01       	movw	r24, r28
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	e8 d0       	rcall	.+464    	; 0x5e8 <transmit_6>
					break;
 418:	0b c0       	rjmp	.+22     	; 0x430 <main+0xa0>
				case '7':
					transmit_7(shared_ptr);
 41a:	ce 01       	movw	r24, r28
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	19 d1       	rcall	.+562    	; 0x652 <transmit_7>
					break;
 420:	07 c0       	rjmp	.+14     	; 0x430 <main+0xa0>
				case '8':
					transmit_8(shared_ptr);
 422:	ce 01       	movw	r24, r28
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	31 d1       	rcall	.+610    	; 0x68a <transmit_8>
					break;
 428:	03 c0       	rjmp	.+6      	; 0x430 <main+0xa0>
				case '9':
					transmit_9(shared_ptr);
 42a:	ce 01       	movw	r24, r28
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	61 d1       	rcall	.+706    	; 0x6f2 <transmit_9>
					break;
				
			}
			newCommand = false;
 430:	10 92 17 01 	sts	0x0117, r1
		}
	
		if(newMeasurement){
 434:	80 91 1a 01 	lds	r24, 0x011A
 438:	88 23       	and	r24, r24
 43a:	21 f2       	breq	.-120    	; 0x3c4 <main+0x34>
			calc_time_elapsed(shared_ptr);
 43c:	ce 01       	movw	r24, r28
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	e0 de       	rcall	.-576    	; 0x202 <calc_time_elapsed>
			calc_latest_rpm(shared_ptr);
 442:	ce 01       	movw	r24, r28
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	34 de       	rcall	.-920    	; 0xb0 <calc_latest_rpm>
			calc_avg_rpm(shared_ptr);
 448:	ce 01       	movw	r24, r28
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	95 de       	rcall	.-726    	; 0x178 <calc_avg_rpm>
			newMeasurement = false;
 44e:	10 92 1a 01 	sts	0x011A, r1
 452:	b8 cf       	rjmp	.-144    	; 0x3c4 <main+0x34>

00000454 <transmit_0>:
extern bool newCommand;
extern bool newMeasurement;
extern uint16_t clk_curr;
extern char recieved_bytes[5];

void transmit_0(Shared_Data* shared_ptr){
 454:	08 95       	ret

00000456 <transmit_1>:
	
}

void transmit_1(Shared_Data* shared_ptr){
 456:	08 95       	ret

00000458 <transmit_2>:

}

/* Sets a new set value for the speed. Range: 0-120. Transmits an empty message. */
void transmit_2(Shared_Data* shared_ptr){
 458:	0f 93       	push	r16
 45a:	1f 93       	push	r17
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
 464:	2a 97       	sbiw	r28, 0x0a	; 10
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	de bf       	out	0x3e, r29	; 62
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	cd bf       	out	0x3d, r28	; 61
 470:	8c 01       	movw	r16, r24
	char temp[6];
	char sub_str[4];
	int res;
	strncpy(temp, "#####", 5);
 472:	85 e0       	ldi	r24, 0x05	; 5
 474:	e6 e0       	ldi	r30, 0x06	; 6
 476:	f1 e0       	ldi	r31, 0x01	; 1
 478:	de 01       	movw	r26, r28
 47a:	11 96       	adiw	r26, 0x01	; 1
 47c:	01 90       	ld	r0, Z+
 47e:	0d 92       	st	X+, r0
 480:	8a 95       	dec	r24
 482:	e1 f7       	brne	.-8      	; 0x47c <transmit_2+0x24>
	strncpy(sub_str, recieved_bytes + 1, 3);
 484:	43 e0       	ldi	r20, 0x03	; 3
 486:	50 e0       	ldi	r21, 0x00	; 0
 488:	63 e1       	ldi	r22, 0x13	; 19
 48a:	71 e0       	ldi	r23, 0x01	; 1
 48c:	ce 01       	movw	r24, r28
 48e:	07 96       	adiw	r24, 0x07	; 7
 490:	43 d2       	rcall	.+1158   	; 0x918 <strncpy>
		
	res = atoi(sub_str);
 492:	ce 01       	movw	r24, r28
 494:	07 96       	adiw	r24, 0x07	; 7
 496:	23 d2       	rcall	.+1094   	; 0x8de <atoi>
	shared_ptr->speed_set = res;
 498:	f8 01       	movw	r30, r16
 49a:	91 83       	std	Z+1, r25	; 0x01
 49c:	80 83       	st	Z, r24
	
	USART_transmit(temp);
 49e:	ce 01       	movw	r24, r28
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	e3 de       	rcall	.-570    	; 0x26a <USART_transmit>

}
 4a4:	2a 96       	adiw	r28, 0x0a	; 10
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	f8 94       	cli
 4aa:	de bf       	out	0x3e, r29	; 62
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	cd bf       	out	0x3d, r28	; 61
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	08 95       	ret

000004ba <transmit_3>:

/* Transmits the set speed. */
void transmit_3(Shared_Data* shared_ptr){
 4ba:	0f 93       	push	r16
 4bc:	1f 93       	push	r17
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	00 d0       	rcall	.+0      	; 0x4c4 <transmit_3+0xa>
 4c4:	00 d0       	rcall	.+0      	; 0x4c6 <transmit_3+0xc>
 4c6:	00 d0       	rcall	.+0      	; 0x4c8 <transmit_3+0xe>
 4c8:	cd b7       	in	r28, 0x3d	; 61
 4ca:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	
	snprintf(temp, 5, "%d",  shared_ptr->speed_set);
 4cc:	fc 01       	movw	r30, r24
 4ce:	21 81       	ldd	r18, Z+1	; 0x01
 4d0:	2f 93       	push	r18
 4d2:	80 81       	ld	r24, Z
 4d4:	8f 93       	push	r24
 4d6:	8c e0       	ldi	r24, 0x0C	; 12
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	9f 93       	push	r25
 4dc:	8f 93       	push	r24
 4de:	1f 92       	push	r1
 4e0:	85 e0       	ldi	r24, 0x05	; 5
 4e2:	8f 93       	push	r24
 4e4:	8e 01       	movw	r16, r28
 4e6:	0f 5f       	subi	r16, 0xFF	; 255
 4e8:	1f 4f       	sbci	r17, 0xFF	; 255
 4ea:	1f 93       	push	r17
 4ec:	0f 93       	push	r16
 4ee:	2b d2       	rcall	.+1110   	; 0x946 <snprintf>
	USART_transmit(temp);
 4f0:	c8 01       	movw	r24, r16
 4f2:	bb de       	rcall	.-650    	; 0x26a <USART_transmit>
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	f8 94       	cli
 4f8:	de bf       	out	0x3e, r29	; 62
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	cd bf       	out	0x3d, r28	; 61
}
 4fe:	26 96       	adiw	r28, 0x06	; 6
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	de bf       	out	0x3e, r29	; 62
 506:	0f be       	out	0x3f, r0	; 63
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	1f 91       	pop	r17
 510:	0f 91       	pop	r16
 512:	08 95       	ret

00000514 <transmit_4>:


void transmit_4(Shared_Data* shared_ptr){
 514:	0f 93       	push	r16
 516:	1f 93       	push	r17
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	00 d0       	rcall	.+0      	; 0x51e <transmit_4+0xa>
 51e:	00 d0       	rcall	.+0      	; 0x520 <transmit_4+0xc>
 520:	00 d0       	rcall	.+0      	; 0x522 <transmit_4+0xe>
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "#####", 5);
 526:	25 e0       	ldi	r18, 0x05	; 5
 528:	e6 e0       	ldi	r30, 0x06	; 6
 52a:	f1 e0       	ldi	r31, 0x01	; 1
 52c:	8e 01       	movw	r16, r28
 52e:	0f 5f       	subi	r16, 0xFF	; 255
 530:	1f 4f       	sbci	r17, 0xFF	; 255
 532:	d8 01       	movw	r26, r16
 534:	01 90       	ld	r0, Z+
 536:	0d 92       	st	X+, r0
 538:	2a 95       	dec	r18
 53a:	e1 f7       	brne	.-8      	; 0x534 <transmit_4+0x20>
	
	snprintf(temp, 5, "%d", shared_ptr->speed_actual);
 53c:	fc 01       	movw	r30, r24
 53e:	23 81       	ldd	r18, Z+3	; 0x03
 540:	2f 93       	push	r18
 542:	82 81       	ldd	r24, Z+2	; 0x02
 544:	8f 93       	push	r24
 546:	8c e0       	ldi	r24, 0x0C	; 12
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	9f 93       	push	r25
 54c:	8f 93       	push	r24
 54e:	1f 92       	push	r1
 550:	85 e0       	ldi	r24, 0x05	; 5
 552:	8f 93       	push	r24
 554:	1f 93       	push	r17
 556:	0f 93       	push	r16
 558:	f6 d1       	rcall	.+1004   	; 0x946 <snprintf>
	USART_transmit(temp);
 55a:	c8 01       	movw	r24, r16
 55c:	86 de       	rcall	.-756    	; 0x26a <USART_transmit>
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	f8 94       	cli
 562:	de bf       	out	0x3e, r29	; 62
 564:	0f be       	out	0x3f, r0	; 63
 566:	cd bf       	out	0x3d, r28	; 61
}
 568:	26 96       	adiw	r28, 0x06	; 6
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	f8 94       	cli
 56e:	de bf       	out	0x3e, r29	; 62
 570:	0f be       	out	0x3f, r0	; 63
 572:	cd bf       	out	0x3d, r28	; 61
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	08 95       	ret

0000057e <transmit_5>:

void transmit_5(Shared_Data* shared_ptr){
 57e:	0f 93       	push	r16
 580:	1f 93       	push	r17
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	00 d0       	rcall	.+0      	; 0x588 <transmit_5+0xa>
 588:	00 d0       	rcall	.+0      	; 0x58a <transmit_5+0xc>
 58a:	00 d0       	rcall	.+0      	; 0x58c <transmit_5+0xe>
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "#####", 5);
 590:	25 e0       	ldi	r18, 0x05	; 5
 592:	e6 e0       	ldi	r30, 0x06	; 6
 594:	f1 e0       	ldi	r31, 0x01	; 1
 596:	8e 01       	movw	r16, r28
 598:	0f 5f       	subi	r16, 0xFF	; 255
 59a:	1f 4f       	sbci	r17, 0xFF	; 255
 59c:	d8 01       	movw	r26, r16
 59e:	01 90       	ld	r0, Z+
 5a0:	0d 92       	st	X+, r0
 5a2:	2a 95       	dec	r18
 5a4:	e1 f7       	brne	.-8      	; 0x59e <transmit_5+0x20>

	snprintf(temp, 5, "%" PRIu16, shared_ptr->clk_elapsed);
 5a6:	fc 01       	movw	r30, r24
 5a8:	27 81       	ldd	r18, Z+7	; 0x07
 5aa:	2f 93       	push	r18
 5ac:	86 81       	ldd	r24, Z+6	; 0x06
 5ae:	8f 93       	push	r24
 5b0:	8f e0       	ldi	r24, 0x0F	; 15
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	9f 93       	push	r25
 5b6:	8f 93       	push	r24
 5b8:	1f 92       	push	r1
 5ba:	85 e0       	ldi	r24, 0x05	; 5
 5bc:	8f 93       	push	r24
 5be:	1f 93       	push	r17
 5c0:	0f 93       	push	r16
 5c2:	c1 d1       	rcall	.+898    	; 0x946 <snprintf>
	USART_transmit(temp);
 5c4:	c8 01       	movw	r24, r16
 5c6:	51 de       	rcall	.-862    	; 0x26a <USART_transmit>
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	f8 94       	cli
 5cc:	de bf       	out	0x3e, r29	; 62
 5ce:	0f be       	out	0x3f, r0	; 63
 5d0:	cd bf       	out	0x3d, r28	; 61
}
 5d2:	26 96       	adiw	r28, 0x06	; 6
 5d4:	0f b6       	in	r0, 0x3f	; 63
 5d6:	f8 94       	cli
 5d8:	de bf       	out	0x3e, r29	; 62
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	cd bf       	out	0x3d, r28	; 61
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	08 95       	ret

000005e8 <transmit_6>:

void transmit_6(Shared_Data* shared_ptr){
 5e8:	0f 93       	push	r16
 5ea:	1f 93       	push	r17
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	00 d0       	rcall	.+0      	; 0x5f2 <transmit_6+0xa>
 5f2:	00 d0       	rcall	.+0      	; 0x5f4 <transmit_6+0xc>
 5f4:	00 d0       	rcall	.+0      	; 0x5f6 <transmit_6+0xe>
 5f6:	cd b7       	in	r28, 0x3d	; 61
 5f8:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "#####", 5);
 5fa:	25 e0       	ldi	r18, 0x05	; 5
 5fc:	e6 e0       	ldi	r30, 0x06	; 6
 5fe:	f1 e0       	ldi	r31, 0x01	; 1
 600:	8e 01       	movw	r16, r28
 602:	0f 5f       	subi	r16, 0xFF	; 255
 604:	1f 4f       	sbci	r17, 0xFF	; 255
 606:	d8 01       	movw	r26, r16
 608:	01 90       	ld	r0, Z+
 60a:	0d 92       	st	X+, r0
 60c:	2a 95       	dec	r18
 60e:	e1 f7       	brne	.-8      	; 0x608 <transmit_6+0x20>
	
	snprintf(temp, 5, "%" PRIu32, shared_ptr->rpm_avg);
 610:	fc 01       	movw	r30, r24
 612:	23 85       	ldd	r18, Z+11	; 0x0b
 614:	2f 93       	push	r18
 616:	82 85       	ldd	r24, Z+10	; 0x0a
 618:	8f 93       	push	r24
 61a:	8f e0       	ldi	r24, 0x0F	; 15
 61c:	91 e0       	ldi	r25, 0x01	; 1
 61e:	9f 93       	push	r25
 620:	8f 93       	push	r24
 622:	1f 92       	push	r1
 624:	85 e0       	ldi	r24, 0x05	; 5
 626:	8f 93       	push	r24
 628:	1f 93       	push	r17
 62a:	0f 93       	push	r16
 62c:	8c d1       	rcall	.+792    	; 0x946 <snprintf>
	USART_transmit(temp);
 62e:	c8 01       	movw	r24, r16
 630:	1c de       	rcall	.-968    	; 0x26a <USART_transmit>
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	f8 94       	cli
 636:	de bf       	out	0x3e, r29	; 62
 638:	0f be       	out	0x3f, r0	; 63
 63a:	cd bf       	out	0x3d, r28	; 61
}
 63c:	26 96       	adiw	r28, 0x06	; 6
 63e:	0f b6       	in	r0, 0x3f	; 63
 640:	f8 94       	cli
 642:	de bf       	out	0x3e, r29	; 62
 644:	0f be       	out	0x3f, r0	; 63
 646:	cd bf       	out	0x3d, r28	; 61
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	1f 91       	pop	r17
 64e:	0f 91       	pop	r16
 650:	08 95       	ret

00000652 <transmit_7>:

void transmit_7(Shared_Data* shared_ptr){
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	00 d0       	rcall	.+0      	; 0x658 <transmit_7+0x6>
 658:	00 d0       	rcall	.+0      	; 0x65a <transmit_7+0x8>
 65a:	00 d0       	rcall	.+0      	; 0x65c <transmit_7+0xa>
 65c:	cd b7       	in	r28, 0x3d	; 61
 65e:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "#####", 5);
 660:	85 e0       	ldi	r24, 0x05	; 5
 662:	e6 e0       	ldi	r30, 0x06	; 6
 664:	f1 e0       	ldi	r31, 0x01	; 1
 666:	de 01       	movw	r26, r28
 668:	11 96       	adiw	r26, 0x01	; 1
 66a:	01 90       	ld	r0, Z+
 66c:	0d 92       	st	X+, r0
 66e:	8a 95       	dec	r24
 670:	e1 f7       	brne	.-8      	; 0x66a <transmit_7+0x18>
	
	USART_transmit(temp);
 672:	ce 01       	movw	r24, r28
 674:	01 96       	adiw	r24, 0x01	; 1
 676:	f9 dd       	rcall	.-1038   	; 0x26a <USART_transmit>
}
 678:	26 96       	adiw	r28, 0x06	; 6
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	f8 94       	cli
 67e:	de bf       	out	0x3e, r29	; 62
 680:	0f be       	out	0x3f, r0	; 63
 682:	cd bf       	out	0x3d, r28	; 61
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	08 95       	ret

0000068a <transmit_8>:

void transmit_8(Shared_Data* shared_ptr){
 68a:	0f 93       	push	r16
 68c:	1f 93       	push	r17
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	00 d0       	rcall	.+0      	; 0x694 <transmit_8+0xa>
 694:	00 d0       	rcall	.+0      	; 0x696 <transmit_8+0xc>
 696:	00 d0       	rcall	.+0      	; 0x698 <transmit_8+0xe>
 698:	cd b7       	in	r28, 0x3d	; 61
 69a:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "#####", 5);
 69c:	85 e0       	ldi	r24, 0x05	; 5
 69e:	e6 e0       	ldi	r30, 0x06	; 6
 6a0:	f1 e0       	ldi	r31, 0x01	; 1
 6a2:	8e 01       	movw	r16, r28
 6a4:	0f 5f       	subi	r16, 0xFF	; 255
 6a6:	1f 4f       	sbci	r17, 0xFF	; 255
 6a8:	d8 01       	movw	r26, r16
 6aa:	01 90       	ld	r0, Z+
 6ac:	0d 92       	st	X+, r0
 6ae:	8a 95       	dec	r24
 6b0:	e1 f7       	brne	.-8      	; 0x6aa <transmit_8+0x20>
	uint16_t test = 60000;
	
	snprintf(temp, 6, "%" PRIu16, test);
 6b2:	8a ee       	ldi	r24, 0xEA	; 234
 6b4:	8f 93       	push	r24
 6b6:	80 e6       	ldi	r24, 0x60	; 96
 6b8:	8f 93       	push	r24
 6ba:	8f e0       	ldi	r24, 0x0F	; 15
 6bc:	91 e0       	ldi	r25, 0x01	; 1
 6be:	9f 93       	push	r25
 6c0:	8f 93       	push	r24
 6c2:	1f 92       	push	r1
 6c4:	86 e0       	ldi	r24, 0x06	; 6
 6c6:	8f 93       	push	r24
 6c8:	1f 93       	push	r17
 6ca:	0f 93       	push	r16
 6cc:	3c d1       	rcall	.+632    	; 0x946 <snprintf>
	
	USART_transmit(temp);
 6ce:	c8 01       	movw	r24, r16
 6d0:	cc dd       	rcall	.-1128   	; 0x26a <USART_transmit>
 6d2:	0f b6       	in	r0, 0x3f	; 63
 6d4:	f8 94       	cli
 6d6:	de bf       	out	0x3e, r29	; 62
 6d8:	0f be       	out	0x3f, r0	; 63
 6da:	cd bf       	out	0x3d, r28	; 61
}
 6dc:	26 96       	adiw	r28, 0x06	; 6
 6de:	0f b6       	in	r0, 0x3f	; 63
 6e0:	f8 94       	cli
 6e2:	de bf       	out	0x3e, r29	; 62
 6e4:	0f be       	out	0x3f, r0	; 63
 6e6:	cd bf       	out	0x3d, r28	; 61
 6e8:	df 91       	pop	r29
 6ea:	cf 91       	pop	r28
 6ec:	1f 91       	pop	r17
 6ee:	0f 91       	pop	r16
 6f0:	08 95       	ret

000006f2 <transmit_9>:

void transmit_9(Shared_Data* shared_ptr){
 6f2:	0f 93       	push	r16
 6f4:	1f 93       	push	r17
 6f6:	cf 93       	push	r28
 6f8:	df 93       	push	r29
 6fa:	00 d0       	rcall	.+0      	; 0x6fc <transmit_9+0xa>
 6fc:	00 d0       	rcall	.+0      	; 0x6fe <transmit_9+0xc>
 6fe:	00 d0       	rcall	.+0      	; 0x700 <transmit_9+0xe>
 700:	cd b7       	in	r28, 0x3d	; 61
 702:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "#####", 5);
 704:	25 e0       	ldi	r18, 0x05	; 5
 706:	e6 e0       	ldi	r30, 0x06	; 6
 708:	f1 e0       	ldi	r31, 0x01	; 1
 70a:	8e 01       	movw	r16, r28
 70c:	0f 5f       	subi	r16, 0xFF	; 255
 70e:	1f 4f       	sbci	r17, 0xFF	; 255
 710:	d8 01       	movw	r26, r16
 712:	01 90       	ld	r0, Z+
 714:	0d 92       	st	X+, r0
 716:	2a 95       	dec	r18
 718:	e1 f7       	brne	.-8      	; 0x712 <transmit_9+0x20>
	snprintf(temp, 5, "%" PRIu32, shared_ptr->curr_rpm);
 71a:	fc 01       	movw	r30, r24
 71c:	21 85       	ldd	r18, Z+9	; 0x09
 71e:	2f 93       	push	r18
 720:	80 85       	ldd	r24, Z+8	; 0x08
 722:	8f 93       	push	r24
 724:	8f e0       	ldi	r24, 0x0F	; 15
 726:	91 e0       	ldi	r25, 0x01	; 1
 728:	9f 93       	push	r25
 72a:	8f 93       	push	r24
 72c:	1f 92       	push	r1
 72e:	85 e0       	ldi	r24, 0x05	; 5
 730:	8f 93       	push	r24
 732:	1f 93       	push	r17
 734:	0f 93       	push	r16
 736:	07 d1       	rcall	.+526    	; 0x946 <snprintf>
	//strncpy(buf, temp, 5);
	USART_transmit(temp);
 738:	c8 01       	movw	r24, r16
 73a:	97 dd       	rcall	.-1234   	; 0x26a <USART_transmit>
 73c:	0f b6       	in	r0, 0x3f	; 63
 73e:	f8 94       	cli
 740:	de bf       	out	0x3e, r29	; 62
 742:	0f be       	out	0x3f, r0	; 63
 744:	cd bf       	out	0x3d, r28	; 61
}
 746:	26 96       	adiw	r28, 0x06	; 6
 748:	0f b6       	in	r0, 0x3f	; 63
 74a:	f8 94       	cli
 74c:	de bf       	out	0x3e, r29	; 62
 74e:	0f be       	out	0x3f, r0	; 63
 750:	cd bf       	out	0x3d, r28	; 61
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	1f 91       	pop	r17
 758:	0f 91       	pop	r16
 75a:	08 95       	ret

0000075c <__umoddi3>:
 75c:	68 94       	set
 75e:	01 c0       	rjmp	.+2      	; 0x762 <__udivdi3_umoddi3>

00000760 <__udivdi3>:
 760:	e8 94       	clt

00000762 <__udivdi3_umoddi3>:
 762:	8f 92       	push	r8
 764:	9f 92       	push	r9
 766:	cf 93       	push	r28
 768:	df 93       	push	r29
 76a:	56 d0       	rcall	.+172    	; 0x818 <__udivmod64>
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	9f 90       	pop	r9
 772:	8f 90       	pop	r8
 774:	08 95       	ret

00000776 <__muldi3>:
 776:	df 93       	push	r29
 778:	cf 93       	push	r28
 77a:	1f 93       	push	r17
 77c:	0f 93       	push	r16
 77e:	9a 9d       	mul	r25, r10
 780:	f0 2d       	mov	r31, r0
 782:	21 9f       	mul	r18, r17
 784:	f0 0d       	add	r31, r0
 786:	8b 9d       	mul	r24, r11
 788:	f0 0d       	add	r31, r0
 78a:	8a 9d       	mul	r24, r10
 78c:	e0 2d       	mov	r30, r0
 78e:	f1 0d       	add	r31, r1
 790:	03 9f       	mul	r16, r19
 792:	f0 0d       	add	r31, r0
 794:	02 9f       	mul	r16, r18
 796:	e0 0d       	add	r30, r0
 798:	f1 1d       	adc	r31, r1
 79a:	4e 9d       	mul	r20, r14
 79c:	e0 0d       	add	r30, r0
 79e:	f1 1d       	adc	r31, r1
 7a0:	5e 9d       	mul	r21, r14
 7a2:	f0 0d       	add	r31, r0
 7a4:	4f 9d       	mul	r20, r15
 7a6:	f0 0d       	add	r31, r0
 7a8:	7f 93       	push	r23
 7aa:	6f 93       	push	r22
 7ac:	bf 92       	push	r11
 7ae:	af 92       	push	r10
 7b0:	5f 93       	push	r21
 7b2:	4f 93       	push	r20
 7b4:	d5 01       	movw	r26, r10
 7b6:	87 d0       	rcall	.+270    	; 0x8c6 <__umulhisi3>
 7b8:	8b 01       	movw	r16, r22
 7ba:	ac 01       	movw	r20, r24
 7bc:	d7 01       	movw	r26, r14
 7be:	83 d0       	rcall	.+262    	; 0x8c6 <__umulhisi3>
 7c0:	eb 01       	movw	r28, r22
 7c2:	e8 0f       	add	r30, r24
 7c4:	f9 1f       	adc	r31, r25
 7c6:	d6 01       	movw	r26, r12
 7c8:	1f d0       	rcall	.+62     	; 0x808 <__muldi3_6>
 7ca:	2f 91       	pop	r18
 7cc:	3f 91       	pop	r19
 7ce:	d6 01       	movw	r26, r12
 7d0:	7a d0       	rcall	.+244    	; 0x8c6 <__umulhisi3>
 7d2:	c6 0f       	add	r28, r22
 7d4:	d7 1f       	adc	r29, r23
 7d6:	e8 1f       	adc	r30, r24
 7d8:	f9 1f       	adc	r31, r25
 7da:	af 91       	pop	r26
 7dc:	bf 91       	pop	r27
 7de:	14 d0       	rcall	.+40     	; 0x808 <__muldi3_6>
 7e0:	2f 91       	pop	r18
 7e2:	3f 91       	pop	r19
 7e4:	70 d0       	rcall	.+224    	; 0x8c6 <__umulhisi3>
 7e6:	c6 0f       	add	r28, r22
 7e8:	d7 1f       	adc	r29, r23
 7ea:	e8 1f       	adc	r30, r24
 7ec:	f9 1f       	adc	r31, r25
 7ee:	d6 01       	movw	r26, r12
 7f0:	6a d0       	rcall	.+212    	; 0x8c6 <__umulhisi3>
 7f2:	e6 0f       	add	r30, r22
 7f4:	f7 1f       	adc	r31, r23
 7f6:	98 01       	movw	r18, r16
 7f8:	be 01       	movw	r22, r28
 7fa:	cf 01       	movw	r24, r30
 7fc:	11 24       	eor	r1, r1
 7fe:	0f 91       	pop	r16
 800:	1f 91       	pop	r17
 802:	cf 91       	pop	r28
 804:	df 91       	pop	r29
 806:	08 95       	ret

00000808 <__muldi3_6>:
 808:	5e d0       	rcall	.+188    	; 0x8c6 <__umulhisi3>
 80a:	46 0f       	add	r20, r22
 80c:	57 1f       	adc	r21, r23
 80e:	c8 1f       	adc	r28, r24
 810:	d9 1f       	adc	r29, r25
 812:	08 f4       	brcc	.+2      	; 0x816 <__muldi3_6+0xe>
 814:	31 96       	adiw	r30, 0x01	; 1
 816:	08 95       	ret

00000818 <__udivmod64>:
 818:	88 24       	eor	r8, r8
 81a:	99 24       	eor	r9, r9
 81c:	f4 01       	movw	r30, r8
 81e:	e4 01       	movw	r28, r8
 820:	b0 e4       	ldi	r27, 0x40	; 64
 822:	1b 2e       	mov	r1, r27
 824:	d4 01       	movw	r26, r8
 826:	9d 15       	cp	r25, r13
 828:	8e 04       	cpc	r8, r14
 82a:	9f 04       	cpc	r9, r15
 82c:	e0 07       	cpc	r30, r16
 82e:	f1 07       	cpc	r31, r17
 830:	38 f4       	brcc	.+14     	; 0x840 <__udivmod64+0x28>
 832:	fc 01       	movw	r30, r24
 834:	4b 01       	movw	r8, r22
 836:	ca 01       	movw	r24, r20
 838:	b9 01       	movw	r22, r18
 83a:	ad 01       	movw	r20, r26
 83c:	9e 01       	movw	r18, r28
 83e:	16 94       	lsr	r1
 840:	22 0f       	add	r18, r18
 842:	33 1f       	adc	r19, r19
 844:	44 1f       	adc	r20, r20
 846:	55 1f       	adc	r21, r21
 848:	66 1f       	adc	r22, r22
 84a:	77 1f       	adc	r23, r23
 84c:	88 1f       	adc	r24, r24
 84e:	99 1f       	adc	r25, r25
 850:	88 1c       	adc	r8, r8
 852:	99 1c       	adc	r9, r9
 854:	ee 1f       	adc	r30, r30
 856:	ff 1f       	adc	r31, r31
 858:	cc 1f       	adc	r28, r28
 85a:	dd 1f       	adc	r29, r29
 85c:	aa 1f       	adc	r26, r26
 85e:	bb 1f       	adc	r27, r27
 860:	8a 14       	cp	r8, r10
 862:	9b 04       	cpc	r9, r11
 864:	ec 05       	cpc	r30, r12
 866:	fd 05       	cpc	r31, r13
 868:	ce 05       	cpc	r28, r14
 86a:	df 05       	cpc	r29, r15
 86c:	a0 07       	cpc	r26, r16
 86e:	b1 07       	cpc	r27, r17
 870:	48 f0       	brcs	.+18     	; 0x884 <__udivmod64+0x6c>
 872:	8a 18       	sub	r8, r10
 874:	9b 08       	sbc	r9, r11
 876:	ec 09       	sbc	r30, r12
 878:	fd 09       	sbc	r31, r13
 87a:	ce 09       	sbc	r28, r14
 87c:	df 09       	sbc	r29, r15
 87e:	a0 0b       	sbc	r26, r16
 880:	b1 0b       	sbc	r27, r17
 882:	21 60       	ori	r18, 0x01	; 1
 884:	1a 94       	dec	r1
 886:	e1 f6       	brne	.-72     	; 0x840 <__udivmod64+0x28>
 888:	2e f4       	brtc	.+10     	; 0x894 <__udivmod64+0x7c>
 88a:	94 01       	movw	r18, r8
 88c:	af 01       	movw	r20, r30
 88e:	be 01       	movw	r22, r28
 890:	cd 01       	movw	r24, r26
 892:	00 0c       	add	r0, r0
 894:	08 95       	ret

00000896 <__lshrdi3>:
 896:	0f 93       	push	r16
 898:	0f 73       	andi	r16, 0x3F	; 63
 89a:	51 f0       	breq	.+20     	; 0x8b0 <__lshrdi3+0x1a>
 89c:	96 95       	lsr	r25
 89e:	87 95       	ror	r24
 8a0:	77 95       	ror	r23
 8a2:	67 95       	ror	r22
 8a4:	57 95       	ror	r21
 8a6:	47 95       	ror	r20
 8a8:	37 95       	ror	r19
 8aa:	27 95       	ror	r18
 8ac:	0a 95       	dec	r16
 8ae:	b1 f7       	brne	.-20     	; 0x89c <__lshrdi3+0x6>
 8b0:	0f 91       	pop	r16
 8b2:	08 95       	ret

000008b4 <__adddi3>:
 8b4:	2a 0d       	add	r18, r10
 8b6:	3b 1d       	adc	r19, r11
 8b8:	4c 1d       	adc	r20, r12
 8ba:	5d 1d       	adc	r21, r13
 8bc:	6e 1d       	adc	r22, r14
 8be:	7f 1d       	adc	r23, r15
 8c0:	80 1f       	adc	r24, r16
 8c2:	91 1f       	adc	r25, r17
 8c4:	08 95       	ret

000008c6 <__umulhisi3>:
 8c6:	a2 9f       	mul	r26, r18
 8c8:	b0 01       	movw	r22, r0
 8ca:	b3 9f       	mul	r27, r19
 8cc:	c0 01       	movw	r24, r0
 8ce:	a3 9f       	mul	r26, r19
 8d0:	01 d0       	rcall	.+2      	; 0x8d4 <__umulhisi3+0xe>
 8d2:	b2 9f       	mul	r27, r18
 8d4:	70 0d       	add	r23, r0
 8d6:	81 1d       	adc	r24, r1
 8d8:	11 24       	eor	r1, r1
 8da:	91 1d       	adc	r25, r1
 8dc:	08 95       	ret

000008de <atoi>:
 8de:	fc 01       	movw	r30, r24
 8e0:	88 27       	eor	r24, r24
 8e2:	99 27       	eor	r25, r25
 8e4:	e8 94       	clt
 8e6:	21 91       	ld	r18, Z+
 8e8:	20 32       	cpi	r18, 0x20	; 32
 8ea:	e9 f3       	breq	.-6      	; 0x8e6 <atoi+0x8>
 8ec:	29 30       	cpi	r18, 0x09	; 9
 8ee:	10 f0       	brcs	.+4      	; 0x8f4 <atoi+0x16>
 8f0:	2e 30       	cpi	r18, 0x0E	; 14
 8f2:	c8 f3       	brcs	.-14     	; 0x8e6 <atoi+0x8>
 8f4:	2b 32       	cpi	r18, 0x2B	; 43
 8f6:	39 f0       	breq	.+14     	; 0x906 <atoi+0x28>
 8f8:	2d 32       	cpi	r18, 0x2D	; 45
 8fa:	31 f4       	brne	.+12     	; 0x908 <atoi+0x2a>
 8fc:	68 94       	set
 8fe:	03 c0       	rjmp	.+6      	; 0x906 <atoi+0x28>
 900:	1a d0       	rcall	.+52     	; 0x936 <__mulhi_const_10>
 902:	82 0f       	add	r24, r18
 904:	91 1d       	adc	r25, r1
 906:	21 91       	ld	r18, Z+
 908:	20 53       	subi	r18, 0x30	; 48
 90a:	2a 30       	cpi	r18, 0x0A	; 10
 90c:	c8 f3       	brcs	.-14     	; 0x900 <atoi+0x22>
 90e:	1e f4       	brtc	.+6      	; 0x916 <atoi+0x38>
 910:	90 95       	com	r25
 912:	81 95       	neg	r24
 914:	9f 4f       	sbci	r25, 0xFF	; 255
 916:	08 95       	ret

00000918 <strncpy>:
 918:	fb 01       	movw	r30, r22
 91a:	dc 01       	movw	r26, r24
 91c:	41 50       	subi	r20, 0x01	; 1
 91e:	50 40       	sbci	r21, 0x00	; 0
 920:	48 f0       	brcs	.+18     	; 0x934 <strncpy+0x1c>
 922:	01 90       	ld	r0, Z+
 924:	0d 92       	st	X+, r0
 926:	00 20       	and	r0, r0
 928:	c9 f7       	brne	.-14     	; 0x91c <strncpy+0x4>
 92a:	01 c0       	rjmp	.+2      	; 0x92e <strncpy+0x16>
 92c:	1d 92       	st	X+, r1
 92e:	41 50       	subi	r20, 0x01	; 1
 930:	50 40       	sbci	r21, 0x00	; 0
 932:	e0 f7       	brcc	.-8      	; 0x92c <strncpy+0x14>
 934:	08 95       	ret

00000936 <__mulhi_const_10>:
 936:	7a e0       	ldi	r23, 0x0A	; 10
 938:	97 9f       	mul	r25, r23
 93a:	90 2d       	mov	r25, r0
 93c:	87 9f       	mul	r24, r23
 93e:	80 2d       	mov	r24, r0
 940:	91 0d       	add	r25, r1
 942:	11 24       	eor	r1, r1
 944:	08 95       	ret

00000946 <snprintf>:
 946:	ae e0       	ldi	r26, 0x0E	; 14
 948:	b0 e0       	ldi	r27, 0x00	; 0
 94a:	e8 ea       	ldi	r30, 0xA8	; 168
 94c:	f4 e0       	ldi	r31, 0x04	; 4
 94e:	a3 c2       	rjmp	.+1350   	; 0xe96 <__prologue_saves__+0x1c>
 950:	0d 89       	ldd	r16, Y+21	; 0x15
 952:	1e 89       	ldd	r17, Y+22	; 0x16
 954:	8f 89       	ldd	r24, Y+23	; 0x17
 956:	98 8d       	ldd	r25, Y+24	; 0x18
 958:	26 e0       	ldi	r18, 0x06	; 6
 95a:	2c 83       	std	Y+4, r18	; 0x04
 95c:	1a 83       	std	Y+2, r17	; 0x02
 95e:	09 83       	std	Y+1, r16	; 0x01
 960:	97 ff       	sbrs	r25, 7
 962:	02 c0       	rjmp	.+4      	; 0x968 <snprintf+0x22>
 964:	80 e0       	ldi	r24, 0x00	; 0
 966:	90 e8       	ldi	r25, 0x80	; 128
 968:	01 97       	sbiw	r24, 0x01	; 1
 96a:	9e 83       	std	Y+6, r25	; 0x06
 96c:	8d 83       	std	Y+5, r24	; 0x05
 96e:	ce 01       	movw	r24, r28
 970:	4b 96       	adiw	r24, 0x1b	; 27
 972:	ac 01       	movw	r20, r24
 974:	69 8d       	ldd	r22, Y+25	; 0x19
 976:	7a 8d       	ldd	r23, Y+26	; 0x1a
 978:	ce 01       	movw	r24, r28
 97a:	01 96       	adiw	r24, 0x01	; 1
 97c:	11 d0       	rcall	.+34     	; 0x9a0 <vfprintf>
 97e:	4d 81       	ldd	r20, Y+5	; 0x05
 980:	5e 81       	ldd	r21, Y+6	; 0x06
 982:	57 fd       	sbrc	r21, 7
 984:	0a c0       	rjmp	.+20     	; 0x99a <snprintf+0x54>
 986:	2f 81       	ldd	r18, Y+7	; 0x07
 988:	38 85       	ldd	r19, Y+8	; 0x08
 98a:	42 17       	cp	r20, r18
 98c:	53 07       	cpc	r21, r19
 98e:	0c f4       	brge	.+2      	; 0x992 <snprintf+0x4c>
 990:	9a 01       	movw	r18, r20
 992:	f8 01       	movw	r30, r16
 994:	e2 0f       	add	r30, r18
 996:	f3 1f       	adc	r31, r19
 998:	10 82       	st	Z, r1
 99a:	2e 96       	adiw	r28, 0x0e	; 14
 99c:	e4 e0       	ldi	r30, 0x04	; 4
 99e:	97 c2       	rjmp	.+1326   	; 0xece <__epilogue_restores__+0x1c>

000009a0 <vfprintf>:
 9a0:	ac e0       	ldi	r26, 0x0C	; 12
 9a2:	b0 e0       	ldi	r27, 0x00	; 0
 9a4:	e5 ed       	ldi	r30, 0xD5	; 213
 9a6:	f4 e0       	ldi	r31, 0x04	; 4
 9a8:	68 c2       	rjmp	.+1232   	; 0xe7a <__prologue_saves__>
 9aa:	7c 01       	movw	r14, r24
 9ac:	6b 01       	movw	r12, r22
 9ae:	8a 01       	movw	r16, r20
 9b0:	fc 01       	movw	r30, r24
 9b2:	17 82       	std	Z+7, r1	; 0x07
 9b4:	16 82       	std	Z+6, r1	; 0x06
 9b6:	83 81       	ldd	r24, Z+3	; 0x03
 9b8:	81 ff       	sbrs	r24, 1
 9ba:	b9 c1       	rjmp	.+882    	; 0xd2e <vfprintf+0x38e>
 9bc:	88 24       	eor	r8, r8
 9be:	83 94       	inc	r8
 9c0:	91 2c       	mov	r9, r1
 9c2:	8c 0e       	add	r8, r28
 9c4:	9d 1e       	adc	r9, r29
 9c6:	f7 01       	movw	r30, r14
 9c8:	93 81       	ldd	r25, Z+3	; 0x03
 9ca:	f6 01       	movw	r30, r12
 9cc:	93 fd       	sbrc	r25, 3
 9ce:	85 91       	lpm	r24, Z+
 9d0:	93 ff       	sbrs	r25, 3
 9d2:	81 91       	ld	r24, Z+
 9d4:	6f 01       	movw	r12, r30
 9d6:	88 23       	and	r24, r24
 9d8:	09 f4       	brne	.+2      	; 0x9dc <vfprintf+0x3c>
 9da:	a5 c1       	rjmp	.+842    	; 0xd26 <vfprintf+0x386>
 9dc:	85 32       	cpi	r24, 0x25	; 37
 9de:	39 f4       	brne	.+14     	; 0x9ee <vfprintf+0x4e>
 9e0:	93 fd       	sbrc	r25, 3
 9e2:	85 91       	lpm	r24, Z+
 9e4:	93 ff       	sbrs	r25, 3
 9e6:	81 91       	ld	r24, Z+
 9e8:	6f 01       	movw	r12, r30
 9ea:	85 32       	cpi	r24, 0x25	; 37
 9ec:	21 f4       	brne	.+8      	; 0x9f6 <vfprintf+0x56>
 9ee:	b7 01       	movw	r22, r14
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	b9 d1       	rcall	.+882    	; 0xd66 <fputc>
 9f4:	e8 cf       	rjmp	.-48     	; 0x9c6 <vfprintf+0x26>
 9f6:	51 2c       	mov	r5, r1
 9f8:	31 2c       	mov	r3, r1
 9fa:	20 e0       	ldi	r18, 0x00	; 0
 9fc:	20 32       	cpi	r18, 0x20	; 32
 9fe:	a8 f4       	brcc	.+42     	; 0xa2a <vfprintf+0x8a>
 a00:	8b 32       	cpi	r24, 0x2B	; 43
 a02:	61 f0       	breq	.+24     	; 0xa1c <vfprintf+0x7c>
 a04:	28 f4       	brcc	.+10     	; 0xa10 <vfprintf+0x70>
 a06:	80 32       	cpi	r24, 0x20	; 32
 a08:	51 f0       	breq	.+20     	; 0xa1e <vfprintf+0x7e>
 a0a:	83 32       	cpi	r24, 0x23	; 35
 a0c:	71 f4       	brne	.+28     	; 0xa2a <vfprintf+0x8a>
 a0e:	0b c0       	rjmp	.+22     	; 0xa26 <vfprintf+0x86>
 a10:	8d 32       	cpi	r24, 0x2D	; 45
 a12:	39 f0       	breq	.+14     	; 0xa22 <vfprintf+0x82>
 a14:	80 33       	cpi	r24, 0x30	; 48
 a16:	49 f4       	brne	.+18     	; 0xa2a <vfprintf+0x8a>
 a18:	21 60       	ori	r18, 0x01	; 1
 a1a:	28 c0       	rjmp	.+80     	; 0xa6c <vfprintf+0xcc>
 a1c:	22 60       	ori	r18, 0x02	; 2
 a1e:	24 60       	ori	r18, 0x04	; 4
 a20:	25 c0       	rjmp	.+74     	; 0xa6c <vfprintf+0xcc>
 a22:	28 60       	ori	r18, 0x08	; 8
 a24:	23 c0       	rjmp	.+70     	; 0xa6c <vfprintf+0xcc>
 a26:	20 61       	ori	r18, 0x10	; 16
 a28:	21 c0       	rjmp	.+66     	; 0xa6c <vfprintf+0xcc>
 a2a:	27 fd       	sbrc	r18, 7
 a2c:	27 c0       	rjmp	.+78     	; 0xa7c <vfprintf+0xdc>
 a2e:	38 2f       	mov	r19, r24
 a30:	30 53       	subi	r19, 0x30	; 48
 a32:	3a 30       	cpi	r19, 0x0A	; 10
 a34:	78 f4       	brcc	.+30     	; 0xa54 <vfprintf+0xb4>
 a36:	26 ff       	sbrs	r18, 6
 a38:	06 c0       	rjmp	.+12     	; 0xa46 <vfprintf+0xa6>
 a3a:	fa e0       	ldi	r31, 0x0A	; 10
 a3c:	5f 9e       	mul	r5, r31
 a3e:	30 0d       	add	r19, r0
 a40:	11 24       	eor	r1, r1
 a42:	53 2e       	mov	r5, r19
 a44:	13 c0       	rjmp	.+38     	; 0xa6c <vfprintf+0xcc>
 a46:	8a e0       	ldi	r24, 0x0A	; 10
 a48:	38 9e       	mul	r3, r24
 a4a:	30 0d       	add	r19, r0
 a4c:	11 24       	eor	r1, r1
 a4e:	33 2e       	mov	r3, r19
 a50:	20 62       	ori	r18, 0x20	; 32
 a52:	0c c0       	rjmp	.+24     	; 0xa6c <vfprintf+0xcc>
 a54:	8e 32       	cpi	r24, 0x2E	; 46
 a56:	21 f4       	brne	.+8      	; 0xa60 <vfprintf+0xc0>
 a58:	26 fd       	sbrc	r18, 6
 a5a:	65 c1       	rjmp	.+714    	; 0xd26 <vfprintf+0x386>
 a5c:	20 64       	ori	r18, 0x40	; 64
 a5e:	06 c0       	rjmp	.+12     	; 0xa6c <vfprintf+0xcc>
 a60:	8c 36       	cpi	r24, 0x6C	; 108
 a62:	11 f4       	brne	.+4      	; 0xa68 <vfprintf+0xc8>
 a64:	20 68       	ori	r18, 0x80	; 128
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <vfprintf+0xcc>
 a68:	88 36       	cpi	r24, 0x68	; 104
 a6a:	41 f4       	brne	.+16     	; 0xa7c <vfprintf+0xdc>
 a6c:	f6 01       	movw	r30, r12
 a6e:	93 fd       	sbrc	r25, 3
 a70:	85 91       	lpm	r24, Z+
 a72:	93 ff       	sbrs	r25, 3
 a74:	81 91       	ld	r24, Z+
 a76:	6f 01       	movw	r12, r30
 a78:	81 11       	cpse	r24, r1
 a7a:	c0 cf       	rjmp	.-128    	; 0x9fc <vfprintf+0x5c>
 a7c:	98 2f       	mov	r25, r24
 a7e:	95 54       	subi	r25, 0x45	; 69
 a80:	93 30       	cpi	r25, 0x03	; 3
 a82:	18 f0       	brcs	.+6      	; 0xa8a <vfprintf+0xea>
 a84:	90 52       	subi	r25, 0x20	; 32
 a86:	93 30       	cpi	r25, 0x03	; 3
 a88:	28 f4       	brcc	.+10     	; 0xa94 <vfprintf+0xf4>
 a8a:	0c 5f       	subi	r16, 0xFC	; 252
 a8c:	1f 4f       	sbci	r17, 0xFF	; 255
 a8e:	ff e3       	ldi	r31, 0x3F	; 63
 a90:	f9 83       	std	Y+1, r31	; 0x01
 a92:	0d c0       	rjmp	.+26     	; 0xaae <vfprintf+0x10e>
 a94:	83 36       	cpi	r24, 0x63	; 99
 a96:	31 f0       	breq	.+12     	; 0xaa4 <vfprintf+0x104>
 a98:	83 37       	cpi	r24, 0x73	; 115
 a9a:	71 f0       	breq	.+28     	; 0xab8 <vfprintf+0x118>
 a9c:	83 35       	cpi	r24, 0x53	; 83
 a9e:	09 f0       	breq	.+2      	; 0xaa2 <vfprintf+0x102>
 aa0:	5a c0       	rjmp	.+180    	; 0xb56 <vfprintf+0x1b6>
 aa2:	22 c0       	rjmp	.+68     	; 0xae8 <vfprintf+0x148>
 aa4:	f8 01       	movw	r30, r16
 aa6:	80 81       	ld	r24, Z
 aa8:	89 83       	std	Y+1, r24	; 0x01
 aaa:	0e 5f       	subi	r16, 0xFE	; 254
 aac:	1f 4f       	sbci	r17, 0xFF	; 255
 aae:	44 24       	eor	r4, r4
 ab0:	43 94       	inc	r4
 ab2:	51 2c       	mov	r5, r1
 ab4:	54 01       	movw	r10, r8
 ab6:	14 c0       	rjmp	.+40     	; 0xae0 <vfprintf+0x140>
 ab8:	38 01       	movw	r6, r16
 aba:	f2 e0       	ldi	r31, 0x02	; 2
 abc:	6f 0e       	add	r6, r31
 abe:	71 1c       	adc	r7, r1
 ac0:	f8 01       	movw	r30, r16
 ac2:	a0 80       	ld	r10, Z
 ac4:	b1 80       	ldd	r11, Z+1	; 0x01
 ac6:	26 ff       	sbrs	r18, 6
 ac8:	03 c0       	rjmp	.+6      	; 0xad0 <vfprintf+0x130>
 aca:	65 2d       	mov	r22, r5
 acc:	70 e0       	ldi	r23, 0x00	; 0
 ace:	02 c0       	rjmp	.+4      	; 0xad4 <vfprintf+0x134>
 ad0:	6f ef       	ldi	r22, 0xFF	; 255
 ad2:	7f ef       	ldi	r23, 0xFF	; 255
 ad4:	c5 01       	movw	r24, r10
 ad6:	2c 87       	std	Y+12, r18	; 0x0c
 ad8:	3b d1       	rcall	.+630    	; 0xd50 <strnlen>
 ada:	2c 01       	movw	r4, r24
 adc:	83 01       	movw	r16, r6
 ade:	2c 85       	ldd	r18, Y+12	; 0x0c
 ae0:	6f e7       	ldi	r22, 0x7F	; 127
 ae2:	26 2e       	mov	r2, r22
 ae4:	22 22       	and	r2, r18
 ae6:	17 c0       	rjmp	.+46     	; 0xb16 <vfprintf+0x176>
 ae8:	38 01       	movw	r6, r16
 aea:	f2 e0       	ldi	r31, 0x02	; 2
 aec:	6f 0e       	add	r6, r31
 aee:	71 1c       	adc	r7, r1
 af0:	f8 01       	movw	r30, r16
 af2:	a0 80       	ld	r10, Z
 af4:	b1 80       	ldd	r11, Z+1	; 0x01
 af6:	26 ff       	sbrs	r18, 6
 af8:	03 c0       	rjmp	.+6      	; 0xb00 <vfprintf+0x160>
 afa:	65 2d       	mov	r22, r5
 afc:	70 e0       	ldi	r23, 0x00	; 0
 afe:	02 c0       	rjmp	.+4      	; 0xb04 <vfprintf+0x164>
 b00:	6f ef       	ldi	r22, 0xFF	; 255
 b02:	7f ef       	ldi	r23, 0xFF	; 255
 b04:	c5 01       	movw	r24, r10
 b06:	2c 87       	std	Y+12, r18	; 0x0c
 b08:	18 d1       	rcall	.+560    	; 0xd3a <strnlen_P>
 b0a:	2c 01       	movw	r4, r24
 b0c:	2c 85       	ldd	r18, Y+12	; 0x0c
 b0e:	50 e8       	ldi	r21, 0x80	; 128
 b10:	25 2e       	mov	r2, r21
 b12:	22 2a       	or	r2, r18
 b14:	83 01       	movw	r16, r6
 b16:	23 fc       	sbrc	r2, 3
 b18:	1a c0       	rjmp	.+52     	; 0xb4e <vfprintf+0x1ae>
 b1a:	05 c0       	rjmp	.+10     	; 0xb26 <vfprintf+0x186>
 b1c:	b7 01       	movw	r22, r14
 b1e:	80 e2       	ldi	r24, 0x20	; 32
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	21 d1       	rcall	.+578    	; 0xd66 <fputc>
 b24:	3a 94       	dec	r3
 b26:	83 2d       	mov	r24, r3
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	48 16       	cp	r4, r24
 b2c:	59 06       	cpc	r5, r25
 b2e:	b0 f3       	brcs	.-20     	; 0xb1c <vfprintf+0x17c>
 b30:	0e c0       	rjmp	.+28     	; 0xb4e <vfprintf+0x1ae>
 b32:	f5 01       	movw	r30, r10
 b34:	27 fc       	sbrc	r2, 7
 b36:	85 91       	lpm	r24, Z+
 b38:	27 fe       	sbrs	r2, 7
 b3a:	81 91       	ld	r24, Z+
 b3c:	5f 01       	movw	r10, r30
 b3e:	b7 01       	movw	r22, r14
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	11 d1       	rcall	.+546    	; 0xd66 <fputc>
 b44:	31 10       	cpse	r3, r1
 b46:	3a 94       	dec	r3
 b48:	f1 e0       	ldi	r31, 0x01	; 1
 b4a:	4f 1a       	sub	r4, r31
 b4c:	51 08       	sbc	r5, r1
 b4e:	41 14       	cp	r4, r1
 b50:	51 04       	cpc	r5, r1
 b52:	79 f7       	brne	.-34     	; 0xb32 <vfprintf+0x192>
 b54:	e5 c0       	rjmp	.+458    	; 0xd20 <vfprintf+0x380>
 b56:	84 36       	cpi	r24, 0x64	; 100
 b58:	11 f0       	breq	.+4      	; 0xb5e <vfprintf+0x1be>
 b5a:	89 36       	cpi	r24, 0x69	; 105
 b5c:	39 f5       	brne	.+78     	; 0xbac <vfprintf+0x20c>
 b5e:	f8 01       	movw	r30, r16
 b60:	27 ff       	sbrs	r18, 7
 b62:	07 c0       	rjmp	.+14     	; 0xb72 <vfprintf+0x1d2>
 b64:	60 81       	ld	r22, Z
 b66:	71 81       	ldd	r23, Z+1	; 0x01
 b68:	82 81       	ldd	r24, Z+2	; 0x02
 b6a:	93 81       	ldd	r25, Z+3	; 0x03
 b6c:	0c 5f       	subi	r16, 0xFC	; 252
 b6e:	1f 4f       	sbci	r17, 0xFF	; 255
 b70:	08 c0       	rjmp	.+16     	; 0xb82 <vfprintf+0x1e2>
 b72:	60 81       	ld	r22, Z
 b74:	71 81       	ldd	r23, Z+1	; 0x01
 b76:	88 27       	eor	r24, r24
 b78:	77 fd       	sbrc	r23, 7
 b7a:	80 95       	com	r24
 b7c:	98 2f       	mov	r25, r24
 b7e:	0e 5f       	subi	r16, 0xFE	; 254
 b80:	1f 4f       	sbci	r17, 0xFF	; 255
 b82:	4f e6       	ldi	r20, 0x6F	; 111
 b84:	b4 2e       	mov	r11, r20
 b86:	b2 22       	and	r11, r18
 b88:	97 ff       	sbrs	r25, 7
 b8a:	09 c0       	rjmp	.+18     	; 0xb9e <vfprintf+0x1fe>
 b8c:	90 95       	com	r25
 b8e:	80 95       	com	r24
 b90:	70 95       	com	r23
 b92:	61 95       	neg	r22
 b94:	7f 4f       	sbci	r23, 0xFF	; 255
 b96:	8f 4f       	sbci	r24, 0xFF	; 255
 b98:	9f 4f       	sbci	r25, 0xFF	; 255
 b9a:	f0 e8       	ldi	r31, 0x80	; 128
 b9c:	bf 2a       	or	r11, r31
 b9e:	2a e0       	ldi	r18, 0x0A	; 10
 ba0:	30 e0       	ldi	r19, 0x00	; 0
 ba2:	a4 01       	movw	r20, r8
 ba4:	0c d1       	rcall	.+536    	; 0xdbe <__ultoa_invert>
 ba6:	a8 2e       	mov	r10, r24
 ba8:	a8 18       	sub	r10, r8
 baa:	42 c0       	rjmp	.+132    	; 0xc30 <vfprintf+0x290>
 bac:	85 37       	cpi	r24, 0x75	; 117
 bae:	31 f4       	brne	.+12     	; 0xbbc <vfprintf+0x21c>
 bb0:	3f ee       	ldi	r19, 0xEF	; 239
 bb2:	b3 2e       	mov	r11, r19
 bb4:	b2 22       	and	r11, r18
 bb6:	2a e0       	ldi	r18, 0x0A	; 10
 bb8:	30 e0       	ldi	r19, 0x00	; 0
 bba:	24 c0       	rjmp	.+72     	; 0xc04 <vfprintf+0x264>
 bbc:	99 ef       	ldi	r25, 0xF9	; 249
 bbe:	b9 2e       	mov	r11, r25
 bc0:	b2 22       	and	r11, r18
 bc2:	8f 36       	cpi	r24, 0x6F	; 111
 bc4:	b9 f0       	breq	.+46     	; 0xbf4 <vfprintf+0x254>
 bc6:	20 f4       	brcc	.+8      	; 0xbd0 <vfprintf+0x230>
 bc8:	88 35       	cpi	r24, 0x58	; 88
 bca:	09 f0       	breq	.+2      	; 0xbce <vfprintf+0x22e>
 bcc:	ac c0       	rjmp	.+344    	; 0xd26 <vfprintf+0x386>
 bce:	0d c0       	rjmp	.+26     	; 0xbea <vfprintf+0x24a>
 bd0:	80 37       	cpi	r24, 0x70	; 112
 bd2:	21 f0       	breq	.+8      	; 0xbdc <vfprintf+0x23c>
 bd4:	88 37       	cpi	r24, 0x78	; 120
 bd6:	09 f0       	breq	.+2      	; 0xbda <vfprintf+0x23a>
 bd8:	a6 c0       	rjmp	.+332    	; 0xd26 <vfprintf+0x386>
 bda:	02 c0       	rjmp	.+4      	; 0xbe0 <vfprintf+0x240>
 bdc:	20 e1       	ldi	r18, 0x10	; 16
 bde:	b2 2a       	or	r11, r18
 be0:	b4 fe       	sbrs	r11, 4
 be2:	0b c0       	rjmp	.+22     	; 0xbfa <vfprintf+0x25a>
 be4:	84 e0       	ldi	r24, 0x04	; 4
 be6:	b8 2a       	or	r11, r24
 be8:	08 c0       	rjmp	.+16     	; 0xbfa <vfprintf+0x25a>
 bea:	24 ff       	sbrs	r18, 4
 bec:	09 c0       	rjmp	.+18     	; 0xc00 <vfprintf+0x260>
 bee:	e6 e0       	ldi	r30, 0x06	; 6
 bf0:	be 2a       	or	r11, r30
 bf2:	06 c0       	rjmp	.+12     	; 0xc00 <vfprintf+0x260>
 bf4:	28 e0       	ldi	r18, 0x08	; 8
 bf6:	30 e0       	ldi	r19, 0x00	; 0
 bf8:	05 c0       	rjmp	.+10     	; 0xc04 <vfprintf+0x264>
 bfa:	20 e1       	ldi	r18, 0x10	; 16
 bfc:	30 e0       	ldi	r19, 0x00	; 0
 bfe:	02 c0       	rjmp	.+4      	; 0xc04 <vfprintf+0x264>
 c00:	20 e1       	ldi	r18, 0x10	; 16
 c02:	32 e0       	ldi	r19, 0x02	; 2
 c04:	f8 01       	movw	r30, r16
 c06:	b7 fe       	sbrs	r11, 7
 c08:	07 c0       	rjmp	.+14     	; 0xc18 <vfprintf+0x278>
 c0a:	60 81       	ld	r22, Z
 c0c:	71 81       	ldd	r23, Z+1	; 0x01
 c0e:	82 81       	ldd	r24, Z+2	; 0x02
 c10:	93 81       	ldd	r25, Z+3	; 0x03
 c12:	0c 5f       	subi	r16, 0xFC	; 252
 c14:	1f 4f       	sbci	r17, 0xFF	; 255
 c16:	06 c0       	rjmp	.+12     	; 0xc24 <vfprintf+0x284>
 c18:	60 81       	ld	r22, Z
 c1a:	71 81       	ldd	r23, Z+1	; 0x01
 c1c:	80 e0       	ldi	r24, 0x00	; 0
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	0e 5f       	subi	r16, 0xFE	; 254
 c22:	1f 4f       	sbci	r17, 0xFF	; 255
 c24:	a4 01       	movw	r20, r8
 c26:	cb d0       	rcall	.+406    	; 0xdbe <__ultoa_invert>
 c28:	a8 2e       	mov	r10, r24
 c2a:	a8 18       	sub	r10, r8
 c2c:	ff e7       	ldi	r31, 0x7F	; 127
 c2e:	bf 22       	and	r11, r31
 c30:	b6 fe       	sbrs	r11, 6
 c32:	0b c0       	rjmp	.+22     	; 0xc4a <vfprintf+0x2aa>
 c34:	2b 2d       	mov	r18, r11
 c36:	2e 7f       	andi	r18, 0xFE	; 254
 c38:	a5 14       	cp	r10, r5
 c3a:	50 f4       	brcc	.+20     	; 0xc50 <vfprintf+0x2b0>
 c3c:	b4 fe       	sbrs	r11, 4
 c3e:	0a c0       	rjmp	.+20     	; 0xc54 <vfprintf+0x2b4>
 c40:	b2 fc       	sbrc	r11, 2
 c42:	08 c0       	rjmp	.+16     	; 0xc54 <vfprintf+0x2b4>
 c44:	2b 2d       	mov	r18, r11
 c46:	2e 7e       	andi	r18, 0xEE	; 238
 c48:	05 c0       	rjmp	.+10     	; 0xc54 <vfprintf+0x2b4>
 c4a:	7a 2c       	mov	r7, r10
 c4c:	2b 2d       	mov	r18, r11
 c4e:	03 c0       	rjmp	.+6      	; 0xc56 <vfprintf+0x2b6>
 c50:	7a 2c       	mov	r7, r10
 c52:	01 c0       	rjmp	.+2      	; 0xc56 <vfprintf+0x2b6>
 c54:	75 2c       	mov	r7, r5
 c56:	24 ff       	sbrs	r18, 4
 c58:	0d c0       	rjmp	.+26     	; 0xc74 <vfprintf+0x2d4>
 c5a:	fe 01       	movw	r30, r28
 c5c:	ea 0d       	add	r30, r10
 c5e:	f1 1d       	adc	r31, r1
 c60:	80 81       	ld	r24, Z
 c62:	80 33       	cpi	r24, 0x30	; 48
 c64:	11 f4       	brne	.+4      	; 0xc6a <vfprintf+0x2ca>
 c66:	29 7e       	andi	r18, 0xE9	; 233
 c68:	09 c0       	rjmp	.+18     	; 0xc7c <vfprintf+0x2dc>
 c6a:	22 ff       	sbrs	r18, 2
 c6c:	06 c0       	rjmp	.+12     	; 0xc7a <vfprintf+0x2da>
 c6e:	73 94       	inc	r7
 c70:	73 94       	inc	r7
 c72:	04 c0       	rjmp	.+8      	; 0xc7c <vfprintf+0x2dc>
 c74:	82 2f       	mov	r24, r18
 c76:	86 78       	andi	r24, 0x86	; 134
 c78:	09 f0       	breq	.+2      	; 0xc7c <vfprintf+0x2dc>
 c7a:	73 94       	inc	r7
 c7c:	23 fd       	sbrc	r18, 3
 c7e:	13 c0       	rjmp	.+38     	; 0xca6 <vfprintf+0x306>
 c80:	20 ff       	sbrs	r18, 0
 c82:	0e c0       	rjmp	.+28     	; 0xca0 <vfprintf+0x300>
 c84:	5a 2c       	mov	r5, r10
 c86:	73 14       	cp	r7, r3
 c88:	58 f4       	brcc	.+22     	; 0xca0 <vfprintf+0x300>
 c8a:	53 0c       	add	r5, r3
 c8c:	57 18       	sub	r5, r7
 c8e:	73 2c       	mov	r7, r3
 c90:	07 c0       	rjmp	.+14     	; 0xca0 <vfprintf+0x300>
 c92:	b7 01       	movw	r22, r14
 c94:	80 e2       	ldi	r24, 0x20	; 32
 c96:	90 e0       	ldi	r25, 0x00	; 0
 c98:	2c 87       	std	Y+12, r18	; 0x0c
 c9a:	65 d0       	rcall	.+202    	; 0xd66 <fputc>
 c9c:	73 94       	inc	r7
 c9e:	2c 85       	ldd	r18, Y+12	; 0x0c
 ca0:	73 14       	cp	r7, r3
 ca2:	b8 f3       	brcs	.-18     	; 0xc92 <vfprintf+0x2f2>
 ca4:	04 c0       	rjmp	.+8      	; 0xcae <vfprintf+0x30e>
 ca6:	73 14       	cp	r7, r3
 ca8:	10 f4       	brcc	.+4      	; 0xcae <vfprintf+0x30e>
 caa:	37 18       	sub	r3, r7
 cac:	01 c0       	rjmp	.+2      	; 0xcb0 <vfprintf+0x310>
 cae:	31 2c       	mov	r3, r1
 cb0:	24 ff       	sbrs	r18, 4
 cb2:	11 c0       	rjmp	.+34     	; 0xcd6 <vfprintf+0x336>
 cb4:	b7 01       	movw	r22, r14
 cb6:	80 e3       	ldi	r24, 0x30	; 48
 cb8:	90 e0       	ldi	r25, 0x00	; 0
 cba:	2c 87       	std	Y+12, r18	; 0x0c
 cbc:	54 d0       	rcall	.+168    	; 0xd66 <fputc>
 cbe:	2c 85       	ldd	r18, Y+12	; 0x0c
 cc0:	22 ff       	sbrs	r18, 2
 cc2:	1c c0       	rjmp	.+56     	; 0xcfc <vfprintf+0x35c>
 cc4:	21 ff       	sbrs	r18, 1
 cc6:	03 c0       	rjmp	.+6      	; 0xcce <vfprintf+0x32e>
 cc8:	88 e5       	ldi	r24, 0x58	; 88
 cca:	90 e0       	ldi	r25, 0x00	; 0
 ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <vfprintf+0x332>
 cce:	88 e7       	ldi	r24, 0x78	; 120
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	b7 01       	movw	r22, r14
 cd4:	0c c0       	rjmp	.+24     	; 0xcee <vfprintf+0x34e>
 cd6:	82 2f       	mov	r24, r18
 cd8:	86 78       	andi	r24, 0x86	; 134
 cda:	81 f0       	breq	.+32     	; 0xcfc <vfprintf+0x35c>
 cdc:	21 fd       	sbrc	r18, 1
 cde:	02 c0       	rjmp	.+4      	; 0xce4 <vfprintf+0x344>
 ce0:	80 e2       	ldi	r24, 0x20	; 32
 ce2:	01 c0       	rjmp	.+2      	; 0xce6 <vfprintf+0x346>
 ce4:	8b e2       	ldi	r24, 0x2B	; 43
 ce6:	27 fd       	sbrc	r18, 7
 ce8:	8d e2       	ldi	r24, 0x2D	; 45
 cea:	b7 01       	movw	r22, r14
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	3b d0       	rcall	.+118    	; 0xd66 <fputc>
 cf0:	05 c0       	rjmp	.+10     	; 0xcfc <vfprintf+0x35c>
 cf2:	b7 01       	movw	r22, r14
 cf4:	80 e3       	ldi	r24, 0x30	; 48
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	36 d0       	rcall	.+108    	; 0xd66 <fputc>
 cfa:	5a 94       	dec	r5
 cfc:	a5 14       	cp	r10, r5
 cfe:	c8 f3       	brcs	.-14     	; 0xcf2 <vfprintf+0x352>
 d00:	aa 94       	dec	r10
 d02:	f4 01       	movw	r30, r8
 d04:	ea 0d       	add	r30, r10
 d06:	f1 1d       	adc	r31, r1
 d08:	b7 01       	movw	r22, r14
 d0a:	80 81       	ld	r24, Z
 d0c:	90 e0       	ldi	r25, 0x00	; 0
 d0e:	2b d0       	rcall	.+86     	; 0xd66 <fputc>
 d10:	a1 10       	cpse	r10, r1
 d12:	f6 cf       	rjmp	.-20     	; 0xd00 <vfprintf+0x360>
 d14:	05 c0       	rjmp	.+10     	; 0xd20 <vfprintf+0x380>
 d16:	b7 01       	movw	r22, r14
 d18:	80 e2       	ldi	r24, 0x20	; 32
 d1a:	90 e0       	ldi	r25, 0x00	; 0
 d1c:	24 d0       	rcall	.+72     	; 0xd66 <fputc>
 d1e:	3a 94       	dec	r3
 d20:	31 10       	cpse	r3, r1
 d22:	f9 cf       	rjmp	.-14     	; 0xd16 <vfprintf+0x376>
 d24:	50 ce       	rjmp	.-864    	; 0x9c6 <vfprintf+0x26>
 d26:	f7 01       	movw	r30, r14
 d28:	26 81       	ldd	r18, Z+6	; 0x06
 d2a:	37 81       	ldd	r19, Z+7	; 0x07
 d2c:	02 c0       	rjmp	.+4      	; 0xd32 <vfprintf+0x392>
 d2e:	2f ef       	ldi	r18, 0xFF	; 255
 d30:	3f ef       	ldi	r19, 0xFF	; 255
 d32:	c9 01       	movw	r24, r18
 d34:	2c 96       	adiw	r28, 0x0c	; 12
 d36:	e2 e1       	ldi	r30, 0x12	; 18
 d38:	bc c0       	rjmp	.+376    	; 0xeb2 <__epilogue_restores__>

00000d3a <strnlen_P>:
 d3a:	fc 01       	movw	r30, r24
 d3c:	05 90       	lpm	r0, Z+
 d3e:	61 50       	subi	r22, 0x01	; 1
 d40:	70 40       	sbci	r23, 0x00	; 0
 d42:	01 10       	cpse	r0, r1
 d44:	d8 f7       	brcc	.-10     	; 0xd3c <strnlen_P+0x2>
 d46:	80 95       	com	r24
 d48:	90 95       	com	r25
 d4a:	8e 0f       	add	r24, r30
 d4c:	9f 1f       	adc	r25, r31
 d4e:	08 95       	ret

00000d50 <strnlen>:
 d50:	fc 01       	movw	r30, r24
 d52:	61 50       	subi	r22, 0x01	; 1
 d54:	70 40       	sbci	r23, 0x00	; 0
 d56:	01 90       	ld	r0, Z+
 d58:	01 10       	cpse	r0, r1
 d5a:	d8 f7       	brcc	.-10     	; 0xd52 <strnlen+0x2>
 d5c:	80 95       	com	r24
 d5e:	90 95       	com	r25
 d60:	8e 0f       	add	r24, r30
 d62:	9f 1f       	adc	r25, r31
 d64:	08 95       	ret

00000d66 <fputc>:
 d66:	0f 93       	push	r16
 d68:	1f 93       	push	r17
 d6a:	cf 93       	push	r28
 d6c:	df 93       	push	r29
 d6e:	8c 01       	movw	r16, r24
 d70:	eb 01       	movw	r28, r22
 d72:	8b 81       	ldd	r24, Y+3	; 0x03
 d74:	81 fd       	sbrc	r24, 1
 d76:	03 c0       	rjmp	.+6      	; 0xd7e <fputc+0x18>
 d78:	0f ef       	ldi	r16, 0xFF	; 255
 d7a:	1f ef       	ldi	r17, 0xFF	; 255
 d7c:	1a c0       	rjmp	.+52     	; 0xdb2 <fputc+0x4c>
 d7e:	82 ff       	sbrs	r24, 2
 d80:	0d c0       	rjmp	.+26     	; 0xd9c <fputc+0x36>
 d82:	2e 81       	ldd	r18, Y+6	; 0x06
 d84:	3f 81       	ldd	r19, Y+7	; 0x07
 d86:	8c 81       	ldd	r24, Y+4	; 0x04
 d88:	9d 81       	ldd	r25, Y+5	; 0x05
 d8a:	28 17       	cp	r18, r24
 d8c:	39 07       	cpc	r19, r25
 d8e:	64 f4       	brge	.+24     	; 0xda8 <fputc+0x42>
 d90:	e8 81       	ld	r30, Y
 d92:	f9 81       	ldd	r31, Y+1	; 0x01
 d94:	01 93       	st	Z+, r16
 d96:	f9 83       	std	Y+1, r31	; 0x01
 d98:	e8 83       	st	Y, r30
 d9a:	06 c0       	rjmp	.+12     	; 0xda8 <fputc+0x42>
 d9c:	e8 85       	ldd	r30, Y+8	; 0x08
 d9e:	f9 85       	ldd	r31, Y+9	; 0x09
 da0:	80 2f       	mov	r24, r16
 da2:	09 95       	icall
 da4:	89 2b       	or	r24, r25
 da6:	41 f7       	brne	.-48     	; 0xd78 <fputc+0x12>
 da8:	8e 81       	ldd	r24, Y+6	; 0x06
 daa:	9f 81       	ldd	r25, Y+7	; 0x07
 dac:	01 96       	adiw	r24, 0x01	; 1
 dae:	9f 83       	std	Y+7, r25	; 0x07
 db0:	8e 83       	std	Y+6, r24	; 0x06
 db2:	c8 01       	movw	r24, r16
 db4:	df 91       	pop	r29
 db6:	cf 91       	pop	r28
 db8:	1f 91       	pop	r17
 dba:	0f 91       	pop	r16
 dbc:	08 95       	ret

00000dbe <__ultoa_invert>:
 dbe:	fa 01       	movw	r30, r20
 dc0:	aa 27       	eor	r26, r26
 dc2:	28 30       	cpi	r18, 0x08	; 8
 dc4:	51 f1       	breq	.+84     	; 0xe1a <__ultoa_invert+0x5c>
 dc6:	20 31       	cpi	r18, 0x10	; 16
 dc8:	81 f1       	breq	.+96     	; 0xe2a <__ultoa_invert+0x6c>
 dca:	e8 94       	clt
 dcc:	6f 93       	push	r22
 dce:	6e 7f       	andi	r22, 0xFE	; 254
 dd0:	6e 5f       	subi	r22, 0xFE	; 254
 dd2:	7f 4f       	sbci	r23, 0xFF	; 255
 dd4:	8f 4f       	sbci	r24, 0xFF	; 255
 dd6:	9f 4f       	sbci	r25, 0xFF	; 255
 dd8:	af 4f       	sbci	r26, 0xFF	; 255
 dda:	b1 e0       	ldi	r27, 0x01	; 1
 ddc:	3e d0       	rcall	.+124    	; 0xe5a <__ultoa_invert+0x9c>
 dde:	b4 e0       	ldi	r27, 0x04	; 4
 de0:	3c d0       	rcall	.+120    	; 0xe5a <__ultoa_invert+0x9c>
 de2:	67 0f       	add	r22, r23
 de4:	78 1f       	adc	r23, r24
 de6:	89 1f       	adc	r24, r25
 de8:	9a 1f       	adc	r25, r26
 dea:	a1 1d       	adc	r26, r1
 dec:	68 0f       	add	r22, r24
 dee:	79 1f       	adc	r23, r25
 df0:	8a 1f       	adc	r24, r26
 df2:	91 1d       	adc	r25, r1
 df4:	a1 1d       	adc	r26, r1
 df6:	6a 0f       	add	r22, r26
 df8:	71 1d       	adc	r23, r1
 dfa:	81 1d       	adc	r24, r1
 dfc:	91 1d       	adc	r25, r1
 dfe:	a1 1d       	adc	r26, r1
 e00:	20 d0       	rcall	.+64     	; 0xe42 <__ultoa_invert+0x84>
 e02:	09 f4       	brne	.+2      	; 0xe06 <__ultoa_invert+0x48>
 e04:	68 94       	set
 e06:	3f 91       	pop	r19
 e08:	2a e0       	ldi	r18, 0x0A	; 10
 e0a:	26 9f       	mul	r18, r22
 e0c:	11 24       	eor	r1, r1
 e0e:	30 19       	sub	r19, r0
 e10:	30 5d       	subi	r19, 0xD0	; 208
 e12:	31 93       	st	Z+, r19
 e14:	de f6       	brtc	.-74     	; 0xdcc <__ultoa_invert+0xe>
 e16:	cf 01       	movw	r24, r30
 e18:	08 95       	ret
 e1a:	46 2f       	mov	r20, r22
 e1c:	47 70       	andi	r20, 0x07	; 7
 e1e:	40 5d       	subi	r20, 0xD0	; 208
 e20:	41 93       	st	Z+, r20
 e22:	b3 e0       	ldi	r27, 0x03	; 3
 e24:	0f d0       	rcall	.+30     	; 0xe44 <__ultoa_invert+0x86>
 e26:	c9 f7       	brne	.-14     	; 0xe1a <__ultoa_invert+0x5c>
 e28:	f6 cf       	rjmp	.-20     	; 0xe16 <__ultoa_invert+0x58>
 e2a:	46 2f       	mov	r20, r22
 e2c:	4f 70       	andi	r20, 0x0F	; 15
 e2e:	40 5d       	subi	r20, 0xD0	; 208
 e30:	4a 33       	cpi	r20, 0x3A	; 58
 e32:	18 f0       	brcs	.+6      	; 0xe3a <__ultoa_invert+0x7c>
 e34:	49 5d       	subi	r20, 0xD9	; 217
 e36:	31 fd       	sbrc	r19, 1
 e38:	40 52       	subi	r20, 0x20	; 32
 e3a:	41 93       	st	Z+, r20
 e3c:	02 d0       	rcall	.+4      	; 0xe42 <__ultoa_invert+0x84>
 e3e:	a9 f7       	brne	.-22     	; 0xe2a <__ultoa_invert+0x6c>
 e40:	ea cf       	rjmp	.-44     	; 0xe16 <__ultoa_invert+0x58>
 e42:	b4 e0       	ldi	r27, 0x04	; 4
 e44:	a6 95       	lsr	r26
 e46:	97 95       	ror	r25
 e48:	87 95       	ror	r24
 e4a:	77 95       	ror	r23
 e4c:	67 95       	ror	r22
 e4e:	ba 95       	dec	r27
 e50:	c9 f7       	brne	.-14     	; 0xe44 <__ultoa_invert+0x86>
 e52:	00 97       	sbiw	r24, 0x00	; 0
 e54:	61 05       	cpc	r22, r1
 e56:	71 05       	cpc	r23, r1
 e58:	08 95       	ret
 e5a:	9b 01       	movw	r18, r22
 e5c:	ac 01       	movw	r20, r24
 e5e:	0a 2e       	mov	r0, r26
 e60:	06 94       	lsr	r0
 e62:	57 95       	ror	r21
 e64:	47 95       	ror	r20
 e66:	37 95       	ror	r19
 e68:	27 95       	ror	r18
 e6a:	ba 95       	dec	r27
 e6c:	c9 f7       	brne	.-14     	; 0xe60 <__ultoa_invert+0xa2>
 e6e:	62 0f       	add	r22, r18
 e70:	73 1f       	adc	r23, r19
 e72:	84 1f       	adc	r24, r20
 e74:	95 1f       	adc	r25, r21
 e76:	a0 1d       	adc	r26, r0
 e78:	08 95       	ret

00000e7a <__prologue_saves__>:
 e7a:	2f 92       	push	r2
 e7c:	3f 92       	push	r3
 e7e:	4f 92       	push	r4
 e80:	5f 92       	push	r5
 e82:	6f 92       	push	r6
 e84:	7f 92       	push	r7
 e86:	8f 92       	push	r8
 e88:	9f 92       	push	r9
 e8a:	af 92       	push	r10
 e8c:	bf 92       	push	r11
 e8e:	cf 92       	push	r12
 e90:	df 92       	push	r13
 e92:	ef 92       	push	r14
 e94:	ff 92       	push	r15
 e96:	0f 93       	push	r16
 e98:	1f 93       	push	r17
 e9a:	cf 93       	push	r28
 e9c:	df 93       	push	r29
 e9e:	cd b7       	in	r28, 0x3d	; 61
 ea0:	de b7       	in	r29, 0x3e	; 62
 ea2:	ca 1b       	sub	r28, r26
 ea4:	db 0b       	sbc	r29, r27
 ea6:	0f b6       	in	r0, 0x3f	; 63
 ea8:	f8 94       	cli
 eaa:	de bf       	out	0x3e, r29	; 62
 eac:	0f be       	out	0x3f, r0	; 63
 eae:	cd bf       	out	0x3d, r28	; 61
 eb0:	09 94       	ijmp

00000eb2 <__epilogue_restores__>:
 eb2:	2a 88       	ldd	r2, Y+18	; 0x12
 eb4:	39 88       	ldd	r3, Y+17	; 0x11
 eb6:	48 88       	ldd	r4, Y+16	; 0x10
 eb8:	5f 84       	ldd	r5, Y+15	; 0x0f
 eba:	6e 84       	ldd	r6, Y+14	; 0x0e
 ebc:	7d 84       	ldd	r7, Y+13	; 0x0d
 ebe:	8c 84       	ldd	r8, Y+12	; 0x0c
 ec0:	9b 84       	ldd	r9, Y+11	; 0x0b
 ec2:	aa 84       	ldd	r10, Y+10	; 0x0a
 ec4:	b9 84       	ldd	r11, Y+9	; 0x09
 ec6:	c8 84       	ldd	r12, Y+8	; 0x08
 ec8:	df 80       	ldd	r13, Y+7	; 0x07
 eca:	ee 80       	ldd	r14, Y+6	; 0x06
 ecc:	fd 80       	ldd	r15, Y+5	; 0x05
 ece:	0c 81       	ldd	r16, Y+4	; 0x04
 ed0:	1b 81       	ldd	r17, Y+3	; 0x03
 ed2:	aa 81       	ldd	r26, Y+2	; 0x02
 ed4:	b9 81       	ldd	r27, Y+1	; 0x01
 ed6:	ce 0f       	add	r28, r30
 ed8:	d1 1d       	adc	r29, r1
 eda:	0f b6       	in	r0, 0x3f	; 63
 edc:	f8 94       	cli
 ede:	de bf       	out	0x3e, r29	; 62
 ee0:	0f be       	out	0x3f, r0	; 63
 ee2:	cd bf       	out	0x3d, r28	; 61
 ee4:	ed 01       	movw	r28, r26
 ee6:	08 95       	ret

00000ee8 <_exit>:
 ee8:	f8 94       	cli

00000eea <__stop_program>:
 eea:	ff cf       	rjmp	.-2      	; 0xeea <__stop_program>
