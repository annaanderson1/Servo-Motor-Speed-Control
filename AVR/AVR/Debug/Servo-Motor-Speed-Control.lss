
Servo-Motor-Speed-Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001620  000016b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001620  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800120  00800120  000016d4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000144e  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d4  00000000  00000000  00002cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000603  00000000  00000000  00003382  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000484  00000000  00000000  00003988  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049f  00000000  00000000  00003e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001468  00000000  00000000  000042ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00005713  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	23 c0       	rjmp	.+70     	; 0x48 <__ctors_end>
       2:	3d c0       	rjmp	.+122    	; 0x7e <__bad_interrupt>
       4:	3c c0       	rjmp	.+120    	; 0x7e <__bad_interrupt>
       6:	3b c0       	rjmp	.+118    	; 0x7e <__bad_interrupt>
       8:	73 c3       	rjmp	.+1766   	; 0x6f0 <__vector_4>
       a:	39 c0       	rjmp	.+114    	; 0x7e <__bad_interrupt>
       c:	38 c0       	rjmp	.+112    	; 0x7e <__bad_interrupt>
       e:	37 c0       	rjmp	.+110    	; 0x7e <__bad_interrupt>
      10:	36 c0       	rjmp	.+108    	; 0x7e <__bad_interrupt>
      12:	35 c0       	rjmp	.+106    	; 0x7e <__bad_interrupt>
      14:	34 c0       	rjmp	.+104    	; 0x7e <__bad_interrupt>
      16:	33 c0       	rjmp	.+102    	; 0x7e <__bad_interrupt>
      18:	32 c0       	rjmp	.+100    	; 0x7e <__bad_interrupt>
      1a:	31 c0       	rjmp	.+98     	; 0x7e <__bad_interrupt>
      1c:	30 c0       	rjmp	.+96     	; 0x7e <__bad_interrupt>
      1e:	2f c0       	rjmp	.+94     	; 0x7e <__bad_interrupt>
      20:	2e c0       	rjmp	.+92     	; 0x7e <__bad_interrupt>
      22:	2d c0       	rjmp	.+90     	; 0x7e <__bad_interrupt>
      24:	dd c3       	rjmp	.+1978   	; 0x7e0 <__vector_18>
      26:	2b c0       	rjmp	.+86     	; 0x7e <__bad_interrupt>
      28:	2a c0       	rjmp	.+84     	; 0x7e <__bad_interrupt>
      2a:	29 c0       	rjmp	.+82     	; 0x7e <__bad_interrupt>
      2c:	28 c0       	rjmp	.+80     	; 0x7e <__bad_interrupt>
      2e:	27 c0       	rjmp	.+78     	; 0x7e <__bad_interrupt>
      30:	26 c0       	rjmp	.+76     	; 0x7e <__bad_interrupt>
      32:	25 c0       	rjmp	.+74     	; 0x7e <__bad_interrupt>
      34:	77 c4       	rjmp	.+2286   	; 0x924 <main+0x6a>
      36:	7a c4       	rjmp	.+2292   	; 0x92c <main+0x72>
      38:	7d c4       	rjmp	.+2298   	; 0x934 <main+0x7a>
      3a:	80 c4       	rjmp	.+2304   	; 0x93c <main+0x82>
      3c:	83 c4       	rjmp	.+2310   	; 0x944 <main+0x8a>
      3e:	86 c4       	rjmp	.+2316   	; 0x94c <main+0x92>
      40:	89 c4       	rjmp	.+2322   	; 0x954 <main+0x9a>
      42:	8c c4       	rjmp	.+2328   	; 0x95c <main+0xa2>
      44:	8f c4       	rjmp	.+2334   	; 0x964 <main+0xaa>
      46:	92 c4       	rjmp	.+2340   	; 0x96c <main+0xb2>

00000048 <__ctors_end>:
      48:	11 24       	eor	r1, r1
      4a:	1f be       	out	0x3f, r1	; 63
      4c:	cf ef       	ldi	r28, 0xFF	; 255
      4e:	d4 e0       	ldi	r29, 0x04	; 4
      50:	de bf       	out	0x3e, r29	; 62
      52:	cd bf       	out	0x3d, r28	; 61

00000054 <__do_copy_data>:
      54:	11 e0       	ldi	r17, 0x01	; 1
      56:	a0 e0       	ldi	r26, 0x00	; 0
      58:	b1 e0       	ldi	r27, 0x01	; 1
      5a:	e0 e2       	ldi	r30, 0x20	; 32
      5c:	f6 e1       	ldi	r31, 0x16	; 22
      5e:	02 c0       	rjmp	.+4      	; 0x64 <__do_copy_data+0x10>
      60:	05 90       	lpm	r0, Z+
      62:	0d 92       	st	X+, r0
      64:	a0 32       	cpi	r26, 0x20	; 32
      66:	b1 07       	cpc	r27, r17
      68:	d9 f7       	brne	.-10     	; 0x60 <__do_copy_data+0xc>

0000006a <__do_clear_bss>:
      6a:	21 e0       	ldi	r18, 0x01	; 1
      6c:	a0 e2       	ldi	r26, 0x20	; 32
      6e:	b1 e0       	ldi	r27, 0x01	; 1
      70:	01 c0       	rjmp	.+2      	; 0x74 <.do_clear_bss_start>

00000072 <.do_clear_bss_loop>:
      72:	1d 92       	st	X+, r1

00000074 <.do_clear_bss_start>:
      74:	ad 32       	cpi	r26, 0x2D	; 45
      76:	b2 07       	cpc	r27, r18
      78:	e1 f7       	brne	.-8      	; 0x72 <.do_clear_bss_loop>
      7a:	1f d4       	rcall	.+2110   	; 0x8ba <main>
      7c:	cf ca       	rjmp	.-2658   	; 0xfffff61c <__eeprom_end+0xff7ef61c>

0000007e <__bad_interrupt>:
      7e:	c0 cf       	rjmp	.-128    	; 0x0 <__vectors>

00000080 <init_shared_data>:
	long long integral;
	short error;
	short fine_tuning;
} Shared_Data;

void init_shared_data(Shared_Data* shared_ptr){
      80:	fc 01       	movw	r30, r24
	shared_ptr->speed_set = 0;
      82:	11 82       	std	Z+1, r1	; 0x01
      84:	10 82       	st	Z, r1
	shared_ptr->speed_actual = 0;
      86:	13 82       	std	Z+3, r1	; 0x03
      88:	12 82       	std	Z+2, r1	; 0x02
	shared_ptr->curr_rpm = 0;
      8a:	14 82       	std	Z+4, r1	; 0x04
      8c:	15 82       	std	Z+5, r1	; 0x05
      8e:	16 82       	std	Z+6, r1	; 0x06
      90:	17 82       	std	Z+7, r1	; 0x07
	shared_ptr->rpm_avg = 0;
      92:	10 86       	std	Z+8, r1	; 0x08
      94:	11 86       	std	Z+9, r1	; 0x09
      96:	12 86       	std	Z+10, r1	; 0x0a
      98:	13 86       	std	Z+11, r1	; 0x0b
	shared_ptr->delta_time = 0;
      9a:	dc 01       	movw	r26, r24
      9c:	a4 5f       	subi	r26, 0xF4	; 244
      9e:	bd 4f       	sbci	r27, 0xFD	; 253
      a0:	1d 92       	st	X+, r1
      a2:	1d 92       	st	X+, r1
      a4:	1d 92       	st	X+, r1
      a6:	1c 92       	st	X, r1
      a8:	13 97       	sbiw	r26, 0x03	; 3
	shared_ptr->integral = 0;
      aa:	14 96       	adiw	r26, 0x04	; 4
      ac:	1c 92       	st	X, r1
      ae:	11 96       	adiw	r26, 0x01	; 1
      b0:	1c 92       	st	X, r1
      b2:	11 97       	sbiw	r26, 0x01	; 1
      b4:	12 96       	adiw	r26, 0x02	; 2
      b6:	1c 92       	st	X, r1
      b8:	12 97       	sbiw	r26, 0x02	; 2
      ba:	13 96       	adiw	r26, 0x03	; 3
      bc:	1c 92       	st	X, r1
      be:	13 97       	sbiw	r26, 0x03	; 3
      c0:	14 96       	adiw	r26, 0x04	; 4
      c2:	1c 92       	st	X, r1
      c4:	14 97       	sbiw	r26, 0x04	; 4
      c6:	15 96       	adiw	r26, 0x05	; 5
      c8:	1c 92       	st	X, r1
      ca:	15 97       	sbiw	r26, 0x05	; 5
      cc:	16 96       	adiw	r26, 0x06	; 6
      ce:	1c 92       	st	X, r1
      d0:	16 97       	sbiw	r26, 0x06	; 6
      d2:	17 96       	adiw	r26, 0x07	; 7
      d4:	1c 92       	st	X, r1
      d6:	17 97       	sbiw	r26, 0x07	; 7
	shared_ptr->error = 0;
      d8:	18 96       	adiw	r26, 0x08	; 8
      da:	1d 92       	st	X+, r1
      dc:	1c 92       	st	X, r1
	shared_ptr->fine_tuning = 0;
      de:	e6 5e       	subi	r30, 0xE6	; 230
      e0:	fd 4f       	sbci	r31, 0xFD	; 253
      e2:	11 82       	std	Z+1, r1	; 0x01
      e4:	10 82       	st	Z, r1
      e6:	08 95       	ret

000000e8 <calc_latest_rpm>:
}

/*	Calculates the speed between two encoder-interrupts, using fixed point arithmetics.
 *	Qm.n values defined in shared.h
*/
void calc_latest_rpm(Shared_Data* shared_ptr){
      e8:	2f 92       	push	r2
      ea:	3f 92       	push	r3
      ec:	4f 92       	push	r4
      ee:	5f 92       	push	r5
      f0:	6f 92       	push	r6
      f2:	7f 92       	push	r7
      f4:	8f 92       	push	r8
      f6:	9f 92       	push	r9
      f8:	af 92       	push	r10
      fa:	bf 92       	push	r11
      fc:	cf 92       	push	r12
      fe:	df 92       	push	r13
     100:	ef 92       	push	r14
     102:	ff 92       	push	r15
     104:	0f 93       	push	r16
     106:	1f 93       	push	r17
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
     110:	2c 97       	sbiw	r28, 0x0c	; 12
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	f8 94       	cli
     116:	de bf       	out	0x3e, r29	; 62
     118:	0f be       	out	0x3f, r0	; 63
     11a:	cd bf       	out	0x3d, r28	; 61
     11c:	9a 87       	std	Y+10, r25	; 0x0a
     11e:	89 87       	std	Y+9, r24	; 0x09
		TCCR1B = (1 << CS11);
	}
}
/*	Converts the difference in clk increments to microseconds */
static unsigned long calc_delta_time(Shared_Data* shared_ptr){
	unsigned short delta_clk = clk_elapsed;
     120:	a0 91 2b 01 	lds	r26, 0x012B
     124:	b0 91 2c 01 	lds	r27, 0x012C

	// scales based on prescaling
	unsigned short prescale;
	
	if(shared_ptr->speed_set <= 20){
     128:	fc 01       	movw	r30, r24
     12a:	80 81       	ld	r24, Z
     12c:	91 81       	ldd	r25, Z+1	; 0x01
     12e:	45 97       	sbiw	r24, 0x15	; 21
     130:	4c f4       	brge	.+18     	; 0x144 <calc_latest_rpm+0x5c>
	if (ps == 1){
		TCCR1B &= ~ 0xff;
		TCCR1B = (1 << CS10);
	}
	else if(ps == 8){
		TCCR1B &= ~ 0xff;
     132:	e1 e8       	ldi	r30, 0x81	; 129
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	10 82       	st	Z, r1
		TCCR1B = (1 << CS11);
     13a:	82 e0       	ldi	r24, 0x02	; 2
     13c:	80 83       	st	Z, r24

	// scales based on prescaling
	unsigned short prescale;
	
	if(shared_ptr->speed_set <= 20){
		prescale = 8;
     13e:	28 e0       	ldi	r18, 0x08	; 8
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	08 c0       	rjmp	.+16     	; 0x154 <calc_latest_rpm+0x6c>
	clk_prev = clk_curr;
}

static void set_prescale(int ps){
	if (ps == 1){
		TCCR1B &= ~ 0xff;
     144:	e1 e8       	ldi	r30, 0x81	; 129
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	10 82       	st	Z, r1
		TCCR1B = (1 << CS10);
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	80 83       	st	Z, r24
	if(shared_ptr->speed_set <= 20){
		prescale = 8;
		set_prescale(8);
	}
	else{
		prescale = 1;
     150:	21 e0       	ldi	r18, 0x01	; 1
     152:	30 e0       	ldi	r19, 0x00	; 0
		set_prescale(1);
	}

	unsigned long temp;

	temp = (unsigned long)delta_clk * prescale;
     154:	97 d6       	rcall	.+3374   	; 0xe84 <__umulhisi3>
	unsigned long long denominator;
	unsigned long long rpm;
	
	delta_time = calc_delta_time(shared_ptr);
	
	delta_time = delta_time << N;
     156:	dc 01       	movw	r26, r24
     158:	cb 01       	movw	r24, r22
     15a:	88 0f       	add	r24, r24
     15c:	99 1f       	adc	r25, r25
     15e:	aa 1f       	adc	r26, r26
     160:	bb 1f       	adc	r27, r27
     162:	88 0f       	add	r24, r24
     164:	99 1f       	adc	r25, r25
     166:	aa 1f       	adc	r26, r26
     168:	bb 1f       	adc	r27, r27
     16a:	9c 01       	movw	r18, r24
     16c:	ad 01       	movw	r20, r26
     16e:	22 0f       	add	r18, r18
     170:	33 1f       	adc	r19, r19
     172:	44 1f       	adc	r20, r20
     174:	55 1f       	adc	r21, r21
     176:	22 0f       	add	r18, r18
     178:	33 1f       	adc	r19, r19
     17a:	44 1f       	adc	r20, r20
     17c:	55 1f       	adc	r21, r21
     17e:	29 83       	std	Y+1, r18	; 0x01
     180:	3a 83       	std	Y+2, r19	; 0x02
     182:	4b 83       	std	Y+3, r20	; 0x03
     184:	5c 83       	std	Y+4, r21	; 0x04
	S_TO_MIN = S_TO_MIN << N;

	numerator = (unsigned long long)MS_TO_S * S_TO_MIN;
	numerator = numerator >> N;

	denominator = (unsigned long long)delta_rev_inverse * delta_time;
     186:	19 01       	movw	r2, r18
     188:	2a 01       	movw	r4, r20
     18a:	33 2d       	mov	r19, r3
     18c:	44 2d       	mov	r20, r4
     18e:	55 2d       	mov	r21, r5
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	02 e0       	ldi	r16, 0x02	; 2
     19a:	d6 d6       	rcall	.+3500   	; 0xf48 <__ashldi3>
     19c:	a2 2c       	mov	r10, r2
     19e:	b3 2c       	mov	r11, r3
     1a0:	c4 2c       	mov	r12, r4
     1a2:	d5 2c       	mov	r13, r5
     1a4:	e1 2c       	mov	r14, r1
     1a6:	f1 2c       	mov	r15, r1
     1a8:	00 e0       	ldi	r16, 0x00	; 0
     1aa:	10 e0       	ldi	r17, 0x00	; 0
     1ac:	0d d7       	rcall	.+3610   	; 0xfc8 <__subdi3>
     1ae:	02 e0       	ldi	r16, 0x02	; 2
     1b0:	cb d6       	rcall	.+3478   	; 0xf48 <__ashldi3>
     1b2:	00 e0       	ldi	r16, 0x00	; 0
     1b4:	09 d7       	rcall	.+3602   	; 0xfc8 <__subdi3>
     1b6:	a2 2e       	mov	r10, r18
     1b8:	b3 2e       	mov	r11, r19
     1ba:	c4 2e       	mov	r12, r20
     1bc:	d5 2e       	mov	r13, r21
     1be:	e6 2e       	mov	r14, r22
     1c0:	f7 2e       	mov	r15, r23
     1c2:	e8 2f       	mov	r30, r24
     1c4:	19 2f       	mov	r17, r25
     1c6:	03 e0       	ldi	r16, 0x03	; 3
     1c8:	bf d6       	rcall	.+3454   	; 0xf48 <__ashldi3>
     1ca:	0e 2f       	mov	r16, r30
     1cc:	fd d6       	rcall	.+3578   	; 0xfc8 <__subdi3>
     1ce:	02 e0       	ldi	r16, 0x02	; 2
     1d0:	bb d6       	rcall	.+3446   	; 0xf48 <__ashldi3>
     1d2:	a2 2c       	mov	r10, r2
     1d4:	b3 2c       	mov	r11, r3
     1d6:	c4 2c       	mov	r12, r4
     1d8:	d5 2c       	mov	r13, r5
     1da:	e1 2c       	mov	r14, r1
     1dc:	f1 2c       	mov	r15, r1
     1de:	00 e0       	ldi	r16, 0x00	; 0
     1e0:	10 e0       	ldi	r17, 0x00	; 0
     1e2:	f2 d6       	rcall	.+3556   	; 0xfc8 <__subdi3>
     1e4:	e2 2f       	mov	r30, r18
     1e6:	f3 2f       	mov	r31, r19
     1e8:	b4 2f       	mov	r27, r20
     1ea:	a5 2f       	mov	r26, r21
     1ec:	6b 87       	std	Y+11, r22	; 0x0b
     1ee:	7c 87       	std	Y+12, r23	; 0x0c
     1f0:	8f 83       	std	Y+7, r24	; 0x07
     1f2:	98 87       	std	Y+8, r25	; 0x08
     1f4:	02 e0       	ldi	r16, 0x02	; 2
     1f6:	a8 d6       	rcall	.+3408   	; 0xf48 <__ashldi3>
     1f8:	a2 2e       	mov	r10, r18
     1fa:	b3 2e       	mov	r11, r19
     1fc:	c4 2e       	mov	r12, r20
     1fe:	d5 2e       	mov	r13, r21
     200:	e6 2e       	mov	r14, r22
     202:	f7 2e       	mov	r15, r23
     204:	08 2f       	mov	r16, r24
     206:	19 2f       	mov	r17, r25
     208:	2e 2f       	mov	r18, r30
     20a:	3f 2f       	mov	r19, r31
     20c:	4b 2f       	mov	r20, r27
     20e:	5a 2f       	mov	r21, r26
     210:	6b 85       	ldd	r22, Y+11	; 0x0b
     212:	7c 85       	ldd	r23, Y+12	; 0x0c
     214:	8f 81       	ldd	r24, Y+7	; 0x07
     216:	98 85       	ldd	r25, Y+8	; 0x08
     218:	ce d6       	rcall	.+3484   	; 0xfb6 <__adddi3>
     21a:	a2 2c       	mov	r10, r2
     21c:	b3 2c       	mov	r11, r3
     21e:	c4 2c       	mov	r12, r4
     220:	d5 2c       	mov	r13, r5
     222:	e1 2c       	mov	r14, r1
     224:	f1 2c       	mov	r15, r1
     226:	00 e0       	ldi	r16, 0x00	; 0
     228:	10 e0       	ldi	r17, 0x00	; 0
     22a:	c5 d6       	rcall	.+3466   	; 0xfb6 <__adddi3>
	denominator = denominator >> N;
     22c:	04 e0       	ldi	r16, 0x04	; 4
     22e:	a7 d6       	rcall	.+3406   	; 0xf7e <__lshrdi3>
     230:	a2 2e       	mov	r10, r18
     232:	b3 2e       	mov	r11, r19
     234:	c4 2e       	mov	r12, r20
     236:	d5 2e       	mov	r13, r21
     238:	e6 2e       	mov	r14, r22
     23a:	f7 2e       	mov	r15, r23
     23c:	a8 2f       	mov	r26, r24
     23e:	19 2f       	mov	r17, r25

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1);
     240:	01 e0       	ldi	r16, 0x01	; 1
     242:	9d d6       	rcall	.+3386   	; 0xf7e <__lshrdi3>
     244:	49 57       	subi	r20, 0x79	; 121
     246:	5c 46       	sbci	r21, 0x6C	; 108
     248:	6c 4f       	sbci	r22, 0xFC	; 252
     24a:	7f 4f       	sbci	r23, 0xFF	; 255
     24c:	8f 4f       	sbci	r24, 0xFF	; 255
     24e:	9f 4f       	sbci	r25, 0xFF	; 255
	rpm = rpm / denominator;
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
     250:	89 84       	ldd	r8, Y+9	; 0x09
     252:	9a 84       	ldd	r9, Y+10	; 0x0a
     254:	b0 ef       	ldi	r27, 0xF0	; 240
     256:	8b 1a       	sub	r8, r27
     258:	bd ef       	ldi	r27, 0xFD	; 253
     25a:	9b 0a       	sbc	r9, r27
     25c:	49 80       	ldd	r4, Y+1	; 0x01
     25e:	5a 80       	ldd	r5, Y+2	; 0x02
     260:	6b 80       	ldd	r6, Y+3	; 0x03
     262:	7c 80       	ldd	r7, Y+4	; 0x04
     264:	68 94       	set
     266:	13 f8       	bld	r1, 3
     268:	76 94       	lsr	r7
     26a:	67 94       	ror	r6
     26c:	57 94       	ror	r5
     26e:	47 94       	ror	r4
     270:	16 94       	lsr	r1
     272:	d1 f7       	brne	.-12     	; 0x268 <calc_latest_rpm+0x180>
     274:	f4 01       	movw	r30, r8
     276:	40 82       	st	Z, r4
     278:	51 82       	std	Z+1, r5	; 0x01
     27a:	62 82       	std	Z+2, r6	; 0x02
     27c:	73 82       	std	Z+3, r7	; 0x03
	denominator = (unsigned long long)delta_rev_inverse * delta_time;
	denominator = denominator >> N;

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1);
	rpm = rpm / denominator;
     27e:	0a 2f       	mov	r16, r26
     280:	19 d6       	rcall	.+3122   	; 0xeb4 <__udivdi3>
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
	shared_ptr->curr_rpm = (unsigned long)rpm >> N;	// Used for debugging
     282:	82 2f       	mov	r24, r18
     284:	93 2f       	mov	r25, r19
     286:	a4 2f       	mov	r26, r20
     288:	b5 2f       	mov	r27, r21
     28a:	72 2f       	mov	r23, r18
     28c:	63 2f       	mov	r22, r19
     28e:	54 2f       	mov	r21, r20
     290:	4b 2f       	mov	r20, r27
     292:	68 94       	set
     294:	13 f8       	bld	r1, 3
     296:	b6 95       	lsr	r27
     298:	a7 95       	ror	r26
     29a:	97 95       	ror	r25
     29c:	87 95       	ror	r24
     29e:	16 94       	lsr	r1
     2a0:	d1 f7       	brne	.-12     	; 0x296 <calc_latest_rpm+0x1ae>
     2a2:	e9 85       	ldd	r30, Y+9	; 0x09
     2a4:	fa 85       	ldd	r31, Y+10	; 0x0a
     2a6:	80 87       	std	Z+8, r24	; 0x08
     2a8:	91 87       	std	Z+9, r25	; 0x09
     2aa:	a2 87       	std	Z+10, r26	; 0x0a
     2ac:	b3 87       	std	Z+11, r27	; 0x0b
    int i;
    unsigned long temp;

    temp = rpm >> N;

    if(temp < 0 || temp > 250 ){
     2ae:	8b 3f       	cpi	r24, 0xFB	; 251
     2b0:	91 05       	cpc	r25, r1
     2b2:	a1 05       	cpc	r26, r1
     2b4:	b1 05       	cpc	r27, r1
     2b6:	08 f5       	brcc	.+66     	; 0x2fa <calc_latest_rpm+0x212>
     2b8:	e4 5f       	subi	r30, 0xF4	; 244
     2ba:	fd 4f       	sbci	r31, 0xFD	; 253
     2bc:	20 e8       	ldi	r18, 0x80	; 128
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	09 85       	ldd	r16, Y+9	; 0x09
     2c2:	1a 85       	ldd	r17, Y+10	; 0x0a
        return;
    }

    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
     2c4:	b2 91       	ld	r27, -Z
     2c6:	a2 91       	ld	r26, -Z
     2c8:	92 91       	ld	r25, -Z
     2ca:	82 91       	ld	r24, -Z
     2cc:	84 83       	std	Z+4, r24	; 0x04
     2ce:	95 83       	std	Z+5, r25	; 0x05
     2d0:	a6 83       	std	Z+6, r26	; 0x06
     2d2:	b7 83       	std	Z+7, r27	; 0x07
     2d4:	21 50       	subi	r18, 0x01	; 1
     2d6:	31 09       	sbc	r19, r1

    if(temp < 0 || temp > 250 ){
        return;
    }

    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
     2d8:	21 15       	cp	r18, r1
     2da:	31 05       	cpc	r19, r1
     2dc:	99 f7       	brne	.-26     	; 0x2c4 <calc_latest_rpm+0x1dc>
     2de:	1a 87       	std	Y+10, r17	; 0x0a
     2e0:	09 87       	std	Y+9, r16	; 0x09
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
    }
    shared_ptr->rpm_measurements[0] = rpm;
     2e2:	d8 01       	movw	r26, r16
     2e4:	50 96       	adiw	r26, 0x10	; 16
     2e6:	7c 93       	st	X, r23
     2e8:	50 97       	sbiw	r26, 0x10	; 16
     2ea:	51 96       	adiw	r26, 0x11	; 17
     2ec:	6c 93       	st	X, r22
     2ee:	51 97       	sbiw	r26, 0x11	; 17
     2f0:	52 96       	adiw	r26, 0x12	; 18
     2f2:	5c 93       	st	X, r21
     2f4:	52 97       	sbiw	r26, 0x12	; 18
     2f6:	53 96       	adiw	r26, 0x13	; 19
     2f8:	4c 93       	st	X, r20
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
	shared_ptr->curr_rpm = (unsigned long)rpm >> N;	// Used for debugging
	insert_rpm(shared_ptr, rpm);
	
}
     2fa:	2c 96       	adiw	r28, 0x0c	; 12
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	ff 90       	pop	r15
     310:	ef 90       	pop	r14
     312:	df 90       	pop	r13
     314:	cf 90       	pop	r12
     316:	bf 90       	pop	r11
     318:	af 90       	pop	r10
     31a:	9f 90       	pop	r9
     31c:	8f 90       	pop	r8
     31e:	7f 90       	pop	r7
     320:	6f 90       	pop	r6
     322:	5f 90       	pop	r5
     324:	4f 90       	pop	r4
     326:	3f 90       	pop	r3
     328:	2f 90       	pop	r2
     32a:	08 95       	ret

0000032c <calc_avg_rpm>:


void calc_avg_rpm(Shared_Data* shared_ptr){
     32c:	2f 92       	push	r2
     32e:	3f 92       	push	r3
     330:	4f 92       	push	r4
     332:	5f 92       	push	r5
     334:	6f 92       	push	r6
     336:	7f 92       	push	r7
     338:	8f 92       	push	r8
     33a:	9f 92       	push	r9
     33c:	af 92       	push	r10
     33e:	bf 92       	push	r11
     340:	cf 92       	push	r12
     342:	df 92       	push	r13
     344:	ef 92       	push	r14
     346:	ff 92       	push	r15
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	00 d0       	rcall	.+0      	; 0x352 <calc_avg_rpm+0x26>
     352:	00 d0       	rcall	.+0      	; 0x354 <calc_avg_rpm+0x28>
     354:	1f 92       	push	r1
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
     35a:	9a 83       	std	Y+2, r25	; 0x02
     35c:	89 83       	std	Y+1, r24	; 0x01
	int i;
	int size;
	int size_shift;
	
	
	if(shared_ptr->speed_set <=20){
     35e:	fc 01       	movw	r30, r24
     360:	80 81       	ld	r24, Z
     362:	91 81       	ldd	r25, Z+1	; 0x01
     364:	85 31       	cpi	r24, 0x15	; 21
     366:	91 05       	cpc	r25, r1
     368:	44 f1       	brlt	.+80     	; 0x3ba <calc_avg_rpm+0x8e>
		size = 16;
		size_shift = 4;
	}
	else if(shared_ptr->speed_set <=50){
     36a:	c3 97       	sbiw	r24, 0x33	; 51
     36c:	c2 97       	sbiw	r24, 0x32	; 50
     36e:	60 f5       	brcc	.+88     	; 0x3c8 <calc_avg_rpm+0x9c>
		size = 64;
		size_shift = 6;
	}
	else if(shared_ptr->speed_set <= 100){
		size = 32;
		size_shift = 5;
     370:	f5 e0       	ldi	r31, 0x05	; 5
     372:	fb 83       	std	Y+3, r31	; 0x03
	else if(shared_ptr->speed_set <=50){
		size = 64;
		size_shift = 6;
	}
	else if(shared_ptr->speed_set <= 100){
		size = 32;
     374:	e0 e2       	ldi	r30, 0x20	; 32
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	fd 83       	std	Y+5, r31	; 0x05
     37a:	ec 83       	std	Y+4, r30	; 0x04
     37c:	2b c0       	rjmp	.+86     	; 0x3d4 <calc_avg_rpm+0xa8>
		size = 64;
		size_shift = 6;
	}
	
	for(i = 0; i < size; i++){
		temp = temp + shared_ptr->rpm_measurements[i];
     37e:	cd 90       	ld	r12, X+
     380:	dd 90       	ld	r13, X+
     382:	ed 90       	ld	r14, X+
     384:	fd 90       	ld	r15, X+
     386:	16 01       	movw	r2, r12
     388:	27 01       	movw	r4, r14
     38a:	ac 2c       	mov	r10, r12
     38c:	b3 2c       	mov	r11, r3
     38e:	c4 2c       	mov	r12, r4
     390:	d5 2c       	mov	r13, r5
     392:	e1 2c       	mov	r14, r1
     394:	f1 2c       	mov	r15, r1
     396:	00 e0       	ldi	r16, 0x00	; 0
     398:	10 e0       	ldi	r17, 0x00	; 0
     39a:	0d d6       	rcall	.+3098   	; 0xfb6 <__adddi3>
	else if(shared_ptr->speed_set > 100){
		size = 64;
		size_shift = 6;
	}
	
	for(i = 0; i < size; i++){
     39c:	31 96       	adiw	r30, 0x01	; 1
     39e:	0c 81       	ldd	r16, Y+4	; 0x04
     3a0:	1d 81       	ldd	r17, Y+5	; 0x05
     3a2:	e0 17       	cp	r30, r16
     3a4:	f1 07       	cpc	r31, r17
     3a6:	5c f3       	brlt	.-42     	; 0x37e <calc_avg_rpm+0x52>
		temp = temp + shared_ptr->rpm_measurements[i];
	}
	
	// Divide by MEASUREMENTS_SIZE (32)
	temp = temp >> size_shift;
     3a8:	0b 81       	ldd	r16, Y+3	; 0x03
     3aa:	e9 d5       	rcall	.+3026   	; 0xf7e <__lshrdi3>
	
	// convert back from Qm.n to normal int
	//temp = temp >> N;
	shared_ptr->rpm_avg = temp;
     3ac:	e9 81       	ldd	r30, Y+1	; 0x01
     3ae:	fa 81       	ldd	r31, Y+2	; 0x02
     3b0:	24 87       	std	Z+12, r18	; 0x0c
     3b2:	35 87       	std	Z+13, r19	; 0x0d
     3b4:	46 87       	std	Z+14, r20	; 0x0e
     3b6:	57 87       	std	Z+15, r21	; 0x0f
     3b8:	1b c0       	rjmp	.+54     	; 0x3f0 <calc_avg_rpm+0xc4>
	int size_shift;
	
	
	if(shared_ptr->speed_set <=20){
		size = 16;
		size_shift = 4;
     3ba:	f4 e0       	ldi	r31, 0x04	; 4
     3bc:	fb 83       	std	Y+3, r31	; 0x03
	int size;
	int size_shift;
	
	
	if(shared_ptr->speed_set <=20){
		size = 16;
     3be:	e0 e1       	ldi	r30, 0x10	; 16
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	fd 83       	std	Y+5, r31	; 0x05
     3c4:	ec 83       	std	Y+4, r30	; 0x04
     3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <calc_avg_rpm+0xa8>
		size_shift = 4;
	}
	else if(shared_ptr->speed_set <=50){
		size = 64;
		size_shift = 6;
     3c8:	f6 e0       	ldi	r31, 0x06	; 6
     3ca:	fb 83       	std	Y+3, r31	; 0x03
	if(shared_ptr->speed_set <=20){
		size = 16;
		size_shift = 4;
	}
	else if(shared_ptr->speed_set <=50){
		size = 64;
     3cc:	e0 e4       	ldi	r30, 0x40	; 64
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	fd 83       	std	Y+5, r31	; 0x05
     3d2:	ec 83       	std	Y+4, r30	; 0x04
     3d4:	a9 81       	ldd	r26, Y+1	; 0x01
     3d6:	ba 81       	ldd	r27, Y+2	; 0x02
     3d8:	50 96       	adiw	r26, 0x10	; 16
	else if(shared_ptr->speed_set > 100){
		size = 64;
		size_shift = 6;
	}
	
	for(i = 0; i < size; i++){
     3da:	e0 e0       	ldi	r30, 0x00	; 0
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
	
}


void calc_avg_rpm(Shared_Data* shared_ptr){
	unsigned long long temp = 0;
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	40 e0       	ldi	r20, 0x00	; 0
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	c7 cf       	rjmp	.-114    	; 0x37e <calc_avg_rpm+0x52>
	
	// convert back from Qm.n to normal int
	//temp = temp >> N;
	shared_ptr->rpm_avg = temp;
	
}
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	1f 91       	pop	r17
     400:	0f 91       	pop	r16
     402:	ff 90       	pop	r15
     404:	ef 90       	pop	r14
     406:	df 90       	pop	r13
     408:	cf 90       	pop	r12
     40a:	bf 90       	pop	r11
     40c:	af 90       	pop	r10
     40e:	9f 90       	pop	r9
     410:	8f 90       	pop	r8
     412:	7f 90       	pop	r7
     414:	6f 90       	pop	r6
     416:	5f 90       	pop	r5
     418:	4f 90       	pop	r4
     41a:	3f 90       	pop	r3
     41c:	2f 90       	pop	r2
     41e:	08 95       	ret

00000420 <control>:


void control(Shared_Data* shared_ptr){
     420:	2f 92       	push	r2
     422:	3f 92       	push	r3
     424:	4f 92       	push	r4
     426:	5f 92       	push	r5
     428:	6f 92       	push	r6
     42a:	7f 92       	push	r7
     42c:	8f 92       	push	r8
     42e:	9f 92       	push	r9
     430:	af 92       	push	r10
     432:	bf 92       	push	r11
     434:	cf 92       	push	r12
     436:	df 92       	push	r13
     438:	ef 92       	push	r14
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
     448:	60 97       	sbiw	r28, 0x10	; 16
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	de bf       	out	0x3e, r29	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	cd bf       	out	0x3d, r28	; 61
     454:	4c 01       	movw	r8, r24
}

static void update_fine_tuning(Shared_Data* shared_ptr){
	short fine_tuning;
	
	fine_tuning = ADCL;	// value: 0-1024
     456:	80 91 78 00 	lds	r24, 0x0078
	fine_tuning |= (ADCH << 8);
     45a:	20 91 79 00 	lds	r18, 0x0079
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	92 2b       	or	r25, r18
	TIFR1 |= (1 << TOV0);	// clear timer1 overflow flag
     462:	b0 9a       	sbi	0x16, 0	; 22
	fine_tuning = (fine_tuning << 1);   // value: 0 - 2048
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
	fine_tuning = fine_tuning - 1024;   // value: -1028 - 1028
     468:	94 50       	subi	r25, 0x04	; 4
	fine_tuning = fine_tuning/100;		// value: -10 - 10
     46a:	64 e6       	ldi	r22, 0x64	; 100
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	f7 d4       	rcall	.+2542   	; 0xe5e <__divmodhi4>
     470:	2b 01       	movw	r4, r22
	shared_ptr->fine_tuning = fine_tuning;	// for debuggning
     472:	f4 01       	movw	r30, r8
     474:	e2 5e       	subi	r30, 0xE2	; 226
     476:	fd 4f       	sbci	r31, 0xFD	; 253
     478:	71 83       	std	Z+1, r23	; 0x01
     47a:	60 83       	st	Z, r22
	long Kp;
	long Ki;
	
	update_fine_tuning(shared_ptr);
	
	long e = ((long)shared_ptr->speed_set << N) - (long)shared_ptr->rpm_avg;
     47c:	d4 01       	movw	r26, r8
     47e:	8d 91       	ld	r24, X+
     480:	9c 91       	ld	r25, X
     482:	11 97       	sbiw	r26, 0x01	; 1
     484:	ac 01       	movw	r20, r24
     486:	66 27       	eor	r22, r22
     488:	57 fd       	sbrc	r21, 7
     48a:	60 95       	com	r22
     48c:	76 2f       	mov	r23, r22
     48e:	44 0f       	add	r20, r20
     490:	55 1f       	adc	r21, r21
     492:	66 1f       	adc	r22, r22
     494:	77 1f       	adc	r23, r23
     496:	44 0f       	add	r20, r20
     498:	55 1f       	adc	r21, r21
     49a:	66 1f       	adc	r22, r22
     49c:	77 1f       	adc	r23, r23
     49e:	44 0f       	add	r20, r20
     4a0:	55 1f       	adc	r21, r21
     4a2:	66 1f       	adc	r22, r22
     4a4:	77 1f       	adc	r23, r23
     4a6:	44 0f       	add	r20, r20
     4a8:	55 1f       	adc	r21, r21
     4aa:	66 1f       	adc	r22, r22
     4ac:	77 1f       	adc	r23, r23
     4ae:	1c 96       	adiw	r26, 0x0c	; 12
     4b0:	0d 91       	ld	r16, X+
     4b2:	1d 91       	ld	r17, X+
     4b4:	2d 91       	ld	r18, X+
     4b6:	3c 91       	ld	r19, X
     4b8:	1f 97       	sbiw	r26, 0x0f	; 15
     4ba:	40 1b       	sub	r20, r16
     4bc:	51 0b       	sbc	r21, r17
     4be:	62 0b       	sbc	r22, r18
     4c0:	73 0b       	sbc	r23, r19
	e = e + ((long)shared_ptr->fine_tuning << N);
     4c2:	66 24       	eor	r6, r6
     4c4:	57 fc       	sbrc	r5, 7
     4c6:	60 94       	com	r6
     4c8:	76 2c       	mov	r7, r6
     4ca:	44 0c       	add	r4, r4
     4cc:	55 1c       	adc	r5, r5
     4ce:	66 1c       	adc	r6, r6
     4d0:	77 1c       	adc	r7, r7
     4d2:	44 0c       	add	r4, r4
     4d4:	55 1c       	adc	r5, r5
     4d6:	66 1c       	adc	r6, r6
     4d8:	77 1c       	adc	r7, r7
     4da:	44 0c       	add	r4, r4
     4dc:	55 1c       	adc	r5, r5
     4de:	66 1c       	adc	r6, r6
     4e0:	77 1c       	adc	r7, r7
     4e2:	44 0c       	add	r4, r4
     4e4:	55 1c       	adc	r5, r5
     4e6:	66 1c       	adc	r6, r6
     4e8:	77 1c       	adc	r7, r7
     4ea:	44 0e       	add	r4, r20
     4ec:	55 1e       	adc	r5, r21
     4ee:	66 1e       	adc	r6, r22
     4f0:	77 1e       	adc	r7, r23
	shared_ptr->error = (short)e;	// For debugging
     4f2:	32 97       	sbiw	r30, 0x02	; 2
     4f4:	51 82       	std	Z+1, r5	; 0x01
     4f6:	40 82       	st	Z, r4
	
	e = e << (N_CTRL-N);
     4f8:	44 0c       	add	r4, r4
     4fa:	55 1c       	adc	r5, r5
     4fc:	66 1c       	adc	r6, r6
     4fe:	77 1c       	adc	r7, r7
     500:	44 0c       	add	r4, r4
     502:	55 1c       	adc	r5, r5
     504:	66 1c       	adc	r6, r6
     506:	77 1c       	adc	r7, r7
     508:	44 0c       	add	r4, r4
     50a:	55 1c       	adc	r5, r5
     50c:	66 1c       	adc	r6, r6
     50e:	77 1c       	adc	r7, r7
	
	if(shared_ptr->speed_set >= 100){
     510:	84 36       	cpi	r24, 0x64	; 100
     512:	91 05       	cpc	r25, r1
     514:	4c f4       	brge	.+18     	; 0x528 <__stack+0x29>
	}
	else if(shared_ptr->speed_set >= 80){
		Kp = 100;
		Ki = 550;
	}
	else if(shared_ptr->speed_set >= 10){
     516:	0a 97       	sbiw	r24, 0x0a	; 10
     518:	86 34       	cpi	r24, 0x46	; 70
     51a:	91 05       	cpc	r25, r1
     51c:	50 f4       	brcc	.+20     	; 0x532 <__stack+0x33>
		Kp = 100;
		Ki = 1000;
     51e:	28 ee       	ldi	r18, 0xE8	; 232
     520:	33 e0       	ldi	r19, 0x03	; 3
     522:	40 e0       	ldi	r20, 0x00	; 0
     524:	50 e0       	ldi	r21, 0x00	; 0
     526:	09 c0       	rjmp	.+18     	; 0x53a <__stack+0x3b>
	
	e = e << (N_CTRL-N);
	
	if(shared_ptr->speed_set >= 100){
		Kp = 100;
		Ki = 500;
     528:	24 ef       	ldi	r18, 0xF4	; 244
     52a:	31 e0       	ldi	r19, 0x01	; 1
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	04 c0       	rjmp	.+8      	; 0x53a <__stack+0x3b>
		Kp = 100;
		Ki = 1000;
	}
	else{
		Kp = 100;
		Ki = 550;
     532:	26 e2       	ldi	r18, 0x26	; 38
     534:	32 e0       	ldi	r19, 0x02	; 2
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	50 e0       	ldi	r21, 0x00	; 0
	}
	
	long integral = Ki*e;
     53a:	c3 01       	movw	r24, r6
     53c:	b2 01       	movw	r22, r4
     53e:	80 d4       	rcall	.+2304   	; 0xe40 <__mulsi3>
	integral = integral >> N_CTRL;
     540:	9b 01       	movw	r18, r22
     542:	ac 01       	movw	r20, r24
     544:	68 94       	set
     546:	16 f8       	bld	r1, 6
     548:	55 95       	asr	r21
     54a:	47 95       	ror	r20
     54c:	37 95       	ror	r19
     54e:	27 95       	ror	r18
     550:	16 94       	lsr	r1
     552:	d1 f7       	brne	.-12     	; 0x548 <__stack+0x49>
     554:	29 83       	std	Y+1, r18	; 0x01
     556:	3a 83       	std	Y+2, r19	; 0x02
     558:	4b 83       	std	Y+3, r20	; 0x03
     55a:	5c 83       	std	Y+4, r21	; 0x04
	shared_ptr->integral = shared_ptr->integral + integral;
     55c:	6b 01       	movw	r12, r22
     55e:	7c 01       	movw	r14, r24
     560:	ff 0c       	add	r15, r15
     562:	cc 08       	sbc	r12, r12
     564:	dc 2c       	mov	r13, r12
     566:	76 01       	movw	r14, r12
     568:	29 81       	ldd	r18, Y+1	; 0x01
     56a:	3a 81       	ldd	r19, Y+2	; 0x02
     56c:	4b 81       	ldd	r20, Y+3	; 0x03
     56e:	5c 81       	ldd	r21, Y+4	; 0x04
     570:	6c 2d       	mov	r22, r12
     572:	7c 2d       	mov	r23, r12
     574:	8c 2d       	mov	r24, r12
     576:	9c 2d       	mov	r25, r12
     578:	f4 01       	movw	r30, r8
     57a:	ec 5e       	subi	r30, 0xEC	; 236
     57c:	fd 4f       	sbci	r31, 0xFD	; 253
     57e:	a0 80       	ld	r10, Z
     580:	b1 80       	ldd	r11, Z+1	; 0x01
     582:	c2 80       	ldd	r12, Z+2	; 0x02
     584:	d3 80       	ldd	r13, Z+3	; 0x03
     586:	e4 80       	ldd	r14, Z+4	; 0x04
     588:	f5 80       	ldd	r15, Z+5	; 0x05
     58a:	06 81       	ldd	r16, Z+6	; 0x06
     58c:	17 81       	ldd	r17, Z+7	; 0x07
     58e:	13 d5       	rcall	.+2598   	; 0xfb6 <__adddi3>
     590:	32 2e       	mov	r3, r18
     592:	23 2e       	mov	r2, r19
     594:	4d 83       	std	Y+5, r20	; 0x05
     596:	5e 83       	std	Y+6, r21	; 0x06
     598:	6f 83       	std	Y+7, r22	; 0x07
     59a:	78 87       	std	Y+8, r23	; 0x08
     59c:	89 87       	std	Y+9, r24	; 0x09
     59e:	9a 87       	std	Y+10, r25	; 0x0a
     5a0:	20 83       	st	Z, r18
     5a2:	31 83       	std	Z+1, r19	; 0x01
     5a4:	42 83       	std	Z+2, r20	; 0x02
     5a6:	53 83       	std	Z+3, r21	; 0x03
     5a8:	64 83       	std	Z+4, r22	; 0x04
     5aa:	75 83       	std	Z+5, r23	; 0x05
     5ac:	86 83       	std	Z+6, r24	; 0x06
     5ae:	97 83       	std	Z+7, r25	; 0x07
	
	long long pwm = (long long)e * Kp + shared_ptr->integral;
     5b0:	a3 01       	movw	r20, r6
     5b2:	92 01       	movw	r18, r4
     5b4:	55 0f       	add	r21, r21
     5b6:	22 0b       	sbc	r18, r18
     5b8:	32 2f       	mov	r19, r18
     5ba:	a9 01       	movw	r20, r18
     5bc:	29 83       	std	Y+1, r18	; 0x01
     5be:	3a 83       	std	Y+2, r19	; 0x02
     5c0:	4b 83       	std	Y+3, r20	; 0x03
     5c2:	5c 83       	std	Y+4, r21	; 0x04
     5c4:	24 2d       	mov	r18, r4
     5c6:	35 2d       	mov	r19, r5
     5c8:	46 2d       	mov	r20, r6
     5ca:	57 2d       	mov	r21, r7
     5cc:	69 81       	ldd	r22, Y+1	; 0x01
     5ce:	76 2f       	mov	r23, r22
     5d0:	86 2f       	mov	r24, r22
     5d2:	96 2f       	mov	r25, r22
     5d4:	02 e0       	ldi	r16, 0x02	; 2
     5d6:	b8 d4       	rcall	.+2416   	; 0xf48 <__ashldi3>
     5d8:	a4 2c       	mov	r10, r4
     5da:	b5 2c       	mov	r11, r5
     5dc:	c6 2c       	mov	r12, r6
     5de:	d7 2c       	mov	r13, r7
     5e0:	e9 80       	ldd	r14, Y+1	; 0x01
     5e2:	fe 2c       	mov	r15, r14
     5e4:	0e 2d       	mov	r16, r14
     5e6:	1e 2d       	mov	r17, r14
     5e8:	ef d4       	rcall	.+2526   	; 0xfc8 <__subdi3>
     5ea:	e2 2f       	mov	r30, r18
     5ec:	f3 2f       	mov	r31, r19
     5ee:	48 8b       	std	Y+16, r20	; 0x10
     5f0:	5d 87       	std	Y+13, r21	; 0x0d
     5f2:	b6 2f       	mov	r27, r22
     5f4:	a7 2f       	mov	r26, r23
     5f6:	8e 87       	std	Y+14, r24	; 0x0e
     5f8:	9f 87       	std	Y+15, r25	; 0x0f
     5fa:	05 e0       	ldi	r16, 0x05	; 5
     5fc:	a5 d4       	rcall	.+2378   	; 0xf48 <__ashldi3>
     5fe:	a2 2e       	mov	r10, r18
     600:	b3 2e       	mov	r11, r19
     602:	c4 2e       	mov	r12, r20
     604:	d5 2e       	mov	r13, r21
     606:	e6 2e       	mov	r14, r22
     608:	f7 2e       	mov	r15, r23
     60a:	08 2f       	mov	r16, r24
     60c:	19 2f       	mov	r17, r25
     60e:	2e 2f       	mov	r18, r30
     610:	3f 2f       	mov	r19, r31
     612:	48 89       	ldd	r20, Y+16	; 0x10
     614:	5d 85       	ldd	r21, Y+13	; 0x0d
     616:	6b 2f       	mov	r22, r27
     618:	7a 2f       	mov	r23, r26
     61a:	8e 85       	ldd	r24, Y+14	; 0x0e
     61c:	9f 85       	ldd	r25, Y+15	; 0x0f
     61e:	cb d4       	rcall	.+2454   	; 0xfb6 <__adddi3>
     620:	a4 2c       	mov	r10, r4
     622:	b5 2c       	mov	r11, r5
     624:	c6 2c       	mov	r12, r6
     626:	d7 2c       	mov	r13, r7
     628:	e9 80       	ldd	r14, Y+1	; 0x01
     62a:	fe 2c       	mov	r15, r14
     62c:	0e 2d       	mov	r16, r14
     62e:	1e 2d       	mov	r17, r14
     630:	c2 d4       	rcall	.+2436   	; 0xfb6 <__adddi3>
     632:	a2 2e       	mov	r10, r18
     634:	b3 2e       	mov	r11, r19
     636:	c4 2e       	mov	r12, r20
     638:	d5 2e       	mov	r13, r21
     63a:	e6 2e       	mov	r14, r22
     63c:	f7 2e       	mov	r15, r23
     63e:	08 2f       	mov	r16, r24
     640:	19 2f       	mov	r17, r25
     642:	23 2d       	mov	r18, r3
     644:	32 2d       	mov	r19, r2
     646:	4d 81       	ldd	r20, Y+5	; 0x05
     648:	5e 81       	ldd	r21, Y+6	; 0x06
     64a:	6f 81       	ldd	r22, Y+7	; 0x07
     64c:	78 85       	ldd	r23, Y+8	; 0x08
     64e:	89 85       	ldd	r24, Y+9	; 0x09
     650:	9a 85       	ldd	r25, Y+10	; 0x0a
     652:	b1 d4       	rcall	.+2402   	; 0xfb6 <__adddi3>
	pwm = pwm >> N_CTRL;
     654:	07 e0       	ldi	r16, 0x07	; 7
     656:	91 d4       	rcall	.+2338   	; 0xf7a <__ashrdi3>
	
	
	pwm = pwm >> N_CTRL;	// Convert to regular number
     658:	90 d4       	rcall	.+2336   	; 0xf7a <__ashrdi3>
     65a:	a2 2f       	mov	r26, r18
     65c:	f3 2f       	mov	r31, r19
     65e:	e4 2e       	mov	r14, r20
     660:	f5 2e       	mov	r15, r21
     662:	06 2f       	mov	r16, r22
     664:	17 2f       	mov	r17, r23
     666:	c8 2e       	mov	r12, r24
     668:	d9 2e       	mov	r13, r25
     66a:	2f 3f       	cpi	r18, 0xFF	; 255
     66c:	31 05       	cpc	r19, r1
     66e:	41 05       	cpc	r20, r1
     670:	51 05       	cpc	r21, r1
     672:	61 05       	cpc	r22, r1
     674:	71 05       	cpc	r23, r1
     676:	81 05       	cpc	r24, r1
     678:	91 05       	cpc	r25, r1
     67a:	49 f0       	breq	.+18     	; 0x68e <__stack+0x18f>
     67c:	44 f0       	brlt	.+16     	; 0x68e <__stack+0x18f>
     67e:	af ef       	ldi	r26, 0xFF	; 255
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	e1 2c       	mov	r14, r1
     684:	f1 2c       	mov	r15, r1
     686:	00 e0       	ldi	r16, 0x00	; 0
     688:	10 e0       	ldi	r17, 0x00	; 0
     68a:	c1 2c       	mov	r12, r1
     68c:	d1 2c       	mov	r13, r1
     68e:	ea 2f       	mov	r30, r26
     690:	bf 2f       	mov	r27, r31
     692:	2a 2f       	mov	r18, r26
     694:	3f 2f       	mov	r19, r31
     696:	4e 2d       	mov	r20, r14
     698:	5f 2d       	mov	r21, r15
     69a:	60 2f       	mov	r22, r16
     69c:	71 2f       	mov	r23, r17
     69e:	8c 2d       	mov	r24, r12
     6a0:	9d 2d       	mov	r25, r13
     6a2:	a0 e0       	ldi	r26, 0x00	; 0
     6a4:	9a d4       	rcall	.+2356   	; 0xfda <__cmpdi2_s8>
     6a6:	14 f4       	brge	.+4      	; 0x6ac <__stack+0x1ad>
     6a8:	e0 e0       	ldi	r30, 0x00	; 0
     6aa:	b0 e0       	ldi	r27, 0x00	; 0
		pwm = 0;		
	}
	else if(pwm > 255){
		pwm = 255;
	}
	shared_ptr->speed_actual = (int)pwm;
     6ac:	8b 2f       	mov	r24, r27
     6ae:	d4 01       	movw	r26, r8
     6b0:	12 96       	adiw	r26, 0x02	; 2
     6b2:	ec 93       	st	X, r30
     6b4:	12 97       	sbiw	r26, 0x02	; 2
     6b6:	13 96       	adiw	r26, 0x03	; 3
     6b8:	8c 93       	st	X, r24
	OCR0A = pwm;
     6ba:	e7 bd       	out	0x27, r30	; 39
	OCR0B = pwm;
     6bc:	e8 bd       	out	0x28, r30	; 40
	
}
     6be:	60 96       	adiw	r28, 0x10	; 16
     6c0:	0f b6       	in	r0, 0x3f	; 63
     6c2:	f8 94       	cli
     6c4:	de bf       	out	0x3e, r29	; 62
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	cd bf       	out	0x3d, r28	; 61
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	ff 90       	pop	r15
     6d4:	ef 90       	pop	r14
     6d6:	df 90       	pop	r13
     6d8:	cf 90       	pop	r12
     6da:	bf 90       	pop	r11
     6dc:	af 90       	pop	r10
     6de:	9f 90       	pop	r9
     6e0:	8f 90       	pop	r8
     6e2:	7f 90       	pop	r7
     6e4:	6f 90       	pop	r6
     6e6:	5f 90       	pop	r5
     6e8:	4f 90       	pop	r4
     6ea:	3f 90       	pop	r3
     6ec:	2f 90       	pop	r2
     6ee:	08 95       	ret

000006f0 <__vector_4>:

ISR(PCINT1_vect){
     6f0:	1f 92       	push	r1
     6f2:	0f 92       	push	r0
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	0f 92       	push	r0
     6f8:	11 24       	eor	r1, r1
     6fa:	2f 93       	push	r18
     6fc:	3f 93       	push	r19
     6fe:	4f 93       	push	r20
     700:	5f 93       	push	r21
     702:	8f 93       	push	r24
     704:	9f 93       	push	r25
	cli();
     706:	f8 94       	cli
	
	clk_curr = TCNT1;
     708:	80 91 84 00 	lds	r24, 0x0084
     70c:	90 91 85 00 	lds	r25, 0x0085
     710:	90 93 29 01 	sts	0x0129, r25
     714:	80 93 28 01 	sts	0x0128, r24
extern unsigned short clk_prev;
extern unsigned short clk_elapsed;

static void calc_clk_elapsed(){
	
	if(clk_curr < clk_prev){
     718:	20 91 20 01 	lds	r18, 0x0120
     71c:	30 91 21 01 	lds	r19, 0x0121
     720:	82 17       	cp	r24, r18
     722:	93 07       	cpc	r25, r19
     724:	48 f4       	brcc	.+18     	; 0x738 <__vector_4+0x48>
		unsigned short temp = 0xFFFF;
		temp = temp - clk_prev;
     726:	20 95       	com	r18
     728:	30 95       	com	r19
		temp = temp + clk_curr;
     72a:	28 0f       	add	r18, r24
     72c:	39 1f       	adc	r19, r25
		clk_elapsed = temp;
     72e:	30 93 2c 01 	sts	0x012C, r19
     732:	20 93 2b 01 	sts	0x012B, r18
     736:	07 c0       	rjmp	.+14     	; 0x746 <__vector_4+0x56>
	}
	else{
		clk_elapsed = clk_curr - clk_prev;
     738:	ac 01       	movw	r20, r24
     73a:	42 1b       	sub	r20, r18
     73c:	53 0b       	sbc	r21, r19
     73e:	50 93 2c 01 	sts	0x012C, r21
     742:	40 93 2b 01 	sts	0x012B, r20
		
	}
	clk_prev = clk_curr;
     746:	90 93 21 01 	sts	0x0121, r25
     74a:	80 93 20 01 	sts	0x0120, r24
ISR(PCINT1_vect){
	cli();
	
	clk_curr = TCNT1;
	calc_clk_elapsed();
	newMeasurement = true;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 2a 01 	sts	0x012A, r24
	
	sei();
     754:	78 94       	sei
     756:	9f 91       	pop	r25
     758:	8f 91       	pop	r24
     75a:	5f 91       	pop	r21
     75c:	4f 91       	pop	r20
     75e:	3f 91       	pop	r19
     760:	2f 91       	pop	r18
     762:	0f 90       	pop	r0
     764:	0f be       	out	0x3f, r0	; 63
     766:	0f 90       	pop	r0
     768:	1f 90       	pop	r1
     76a:	18 95       	reti

0000076c <USART_transmit>:
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with " "
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	00 d0       	rcall	.+0      	; 0x772 <USART_transmit+0x6>
     772:	00 d0       	rcall	.+0      	; 0x774 <USART_transmit+0x8>
     774:	00 d0       	rcall	.+0      	; 0x776 <USART_transmit+0xa>
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
	char buf[6];
	
	strcpy(buf,"%%%%%");
     77a:	26 e0       	ldi	r18, 0x06	; 6
     77c:	e0 e0       	ldi	r30, 0x00	; 0
     77e:	f1 e0       	ldi	r31, 0x01	; 1
     780:	de 01       	movw	r26, r28
     782:	11 96       	adiw	r26, 0x01	; 1
     784:	01 90       	ld	r0, Z+
     786:	0d 92       	st	X+, r0
     788:	2a 95       	dec	r18
     78a:	e1 f7       	brne	.-8      	; 0x784 <USART_transmit+0x18>
	strncpy(buf, data, 5);
     78c:	45 e0       	ldi	r20, 0x05	; 5
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	bc 01       	movw	r22, r24
     792:	ce 01       	movw	r24, r28
     794:	01 96       	adiw	r24, 0x01	; 1
     796:	5e d4       	rcall	.+2236   	; 0x1054 <strncpy>
     798:	be 01       	movw	r22, r28
     79a:	6f 5f       	subi	r22, 0xFF	; 255
     79c:	7f 4f       	sbci	r23, 0xFF	; 255
     79e:	9e 01       	movw	r18, r28
     7a0:	2a 5f       	subi	r18, 0xFA	; 250
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
     7a4:	e0 ec       	ldi	r30, 0xC0	; 192
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = buf[i];
     7a8:	86 ec       	ldi	r24, 0xC6	; 198
     7aa:	90 e0       	ldi	r25, 0x00	; 0
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
     7ac:	40 81       	ld	r20, Z
     7ae:	45 ff       	sbrs	r20, 5
     7b0:	fd cf       	rjmp	.-6      	; 0x7ac <USART_transmit+0x40>
		UDR0 = buf[i];
     7b2:	db 01       	movw	r26, r22
     7b4:	4d 91       	ld	r20, X+
     7b6:	bd 01       	movw	r22, r26
     7b8:	dc 01       	movw	r26, r24
     7ba:	4c 93       	st	X, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7bc:	a1 ee       	ldi	r26, 0xE1	; 225
     7be:	b4 e0       	ldi	r27, 0x04	; 4
     7c0:	11 97       	sbiw	r26, 0x01	; 1
     7c2:	f1 f7       	brne	.-4      	; 0x7c0 <USART_transmit+0x54>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <USART_transmit+0x5a>
     7c6:	00 00       	nop
	char buf[6];
	
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
     7c8:	62 17       	cp	r22, r18
     7ca:	73 07       	cpc	r23, r19
     7cc:	79 f7       	brne	.-34     	; 0x7ac <USART_transmit+0x40>
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = buf[i];
		_delay_ms(5);
	}
}
     7ce:	26 96       	adiw	r28, 0x06	; 6
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <__vector_18>:
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
     7e0:	1f 92       	push	r1
     7e2:	0f 92       	push	r0
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	0f 92       	push	r0
     7e8:	11 24       	eor	r1, r1
     7ea:	2f 93       	push	r18
     7ec:	8f 93       	push	r24
     7ee:	9f 93       	push	r25
     7f0:	af 93       	push	r26
     7f2:	bf 93       	push	r27
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	ef 93       	push	r30
     7fa:	ff 93       	push	r31
	cli();
     7fc:	f8 94       	cli
	PORTC &= ~(1 << PC2);
     7fe:	42 98       	cbi	0x08, 2	; 8
	PORTC |= (1 << PC1);
     800:	41 9a       	sbi	0x08, 1	; 8
     802:	a2 e2       	ldi	r26, 0x22	; 34
     804:	b1 e0       	ldi	r27, 0x01	; 1
     806:	87 e2       	ldi	r24, 0x27	; 39
     808:	91 e0       	ldi	r25, 0x01	; 1
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
     80a:	e0 ec       	ldi	r30, 0xC0	; 192
     80c:	f0 e0       	ldi	r31, 0x00	; 0
		recieved_bytes[i] = UDR0;
     80e:	c6 ec       	ldi	r28, 0xC6	; 198
     810:	d0 e0       	ldi	r29, 0x00	; 0
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
     812:	20 81       	ld	r18, Z
     814:	22 23       	and	r18, r18
     816:	ec f7       	brge	.-6      	; 0x812 <__vector_18+0x32>
		recieved_bytes[i] = UDR0;
     818:	28 81       	ld	r18, Y
     81a:	2d 93       	st	X+, r18
*/
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
     81c:	a8 17       	cp	r26, r24
     81e:	b9 07       	cpc	r27, r25
     820:	c1 f7       	brne	.-16     	; 0x812 <__vector_18+0x32>
		while( !(UCSR0A & (1 << RXC0)) );
		recieved_bytes[i] = UDR0;
	}
	PORTC &= ~(1 << PC1);
     822:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (1 << PC2);
     824:	42 9a       	sbi	0x08, 2	; 8
	newCommand = true;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	80 93 27 01 	sts	0x0127, r24
	sei();
     82c:	78 94       	sei
}
     82e:	ff 91       	pop	r31
     830:	ef 91       	pop	r30
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	bf 91       	pop	r27
     838:	af 91       	pop	r26
     83a:	9f 91       	pop	r25
     83c:	8f 91       	pop	r24
     83e:	2f 91       	pop	r18
     840:	0f 90       	pop	r0
     842:	0f be       	out	0x3f, r0	; 63
     844:	0f 90       	pop	r0
     846:	1f 90       	pop	r1
     848:	18 95       	reti

0000084a <setup_registers>:
 *	PC1, PD5-PD6
 *	See details in datasheet pg. 99-100
*/
static void setup_DDR(){

	DDRB |= 0x00;
     84a:	84 b1       	in	r24, 0x04	; 4
     84c:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC2) | (1 << PC1) | (1 << PC0);
     84e:	87 b1       	in	r24, 0x07	; 7
     850:	87 60       	ori	r24, 0x07	; 7
     852:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PD6) | (1 << PD5) | (1 << PD1);
     854:	8a b1       	in	r24, 0x0a	; 10
     856:	82 66       	ori	r24, 0x62	; 98
     858:	8a b9       	out	0x0a, r24	; 10
 *	PWM-mode: fast PWM, inverted, no prescaling.
 *	See details in datasheet pg. 113-117
*/
static void setup_PWM(){

	TCCR0A = (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0) | (1 << WGM01) | (1 << WGM00);
     85a:	83 ef       	ldi	r24, 0xF3	; 243
     85c:	84 bd       	out	0x24, r24	; 36
	TCCR0B =  (0 << CS02) | (0 << CS01) | (1 << CS00);
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	85 bd       	out	0x25, r24	; 37
 * 	Baud rate according to #define in shared.h
 * 	See details in datasheet pg. 201-205
*/
static void setup_USART(){

	DDRD |= (1 << PD1);
     862:	51 9a       	sbi	0x0a, 1	; 10
	unsigned int ubrr = (((F_CPU / (BAUD * 16UL))) - 1 );

	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
     864:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
     868:	89 e1       	ldi	r24, 0x19	; 25
     86a:	80 93 c4 00 	sts	0x00C4, r24

	// Enable reciever for interrupt and transmitter
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0);
     86e:	88 e9       	ldi	r24, 0x98	; 152
     870:	80 93 c1 00 	sts	0x00C1, r24

	// Set frame format: 8 data, 2 stop, 0 parity
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     874:	86 e0       	ldi	r24, 0x06	; 6
     876:	80 93 c2 00 	sts	0x00C2, r24
 * 	See details in datasheet pg. 81-82
*/
static void setup_interrupts(){

	// Enables possibility of interrupts on pins 14-8
	PCICR = (1 << PCIE1);
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	80 93 68 00 	sts	0x0068, r24
	// Enables interrupts on pin PC4-PC5
	PCMSK1 = (1 << PCINT13) | (1 << PCINT12);
     880:	80 e3       	ldi	r24, 0x30	; 48
     882:	80 93 6c 00 	sts	0x006C, r24
/*	
 *	Sets up clk/8 prescaling on 16-bit timer OC1
 *	See details in datasheet pg. 141-147
*/	
static void setup_speed_clock(){
	TCCR1B |= (1 << CS11);
     886:	e1 e8       	ldi	r30, 0x81	; 129
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	80 81       	ld	r24, Z
     88c:	82 60       	ori	r24, 0x02	; 2
     88e:	80 83       	st	Z, r24
}

/* pg. 268-272*/
static void setup_ADC(){
	ADMUX |= (1 << REFS0) | (1 << MUX1) | (1 << MUX0);
     890:	ec e7       	ldi	r30, 0x7C	; 124
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	80 81       	ld	r24, Z
     896:	83 64       	ori	r24, 0x43	; 67
     898:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADATE);
     89a:	ea e7       	ldi	r30, 0x7A	; 122
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	80 6a       	ori	r24, 0xA0	; 160
     8a2:	80 83       	st	Z, r24
	ADCSRB |= (1 << ADTS2) | (1 << ADTS1);
     8a4:	eb e7       	ldi	r30, 0x7B	; 123
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	80 81       	ld	r24, Z
     8aa:	86 60       	ori	r24, 0x06	; 6
     8ac:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC3D);
     8ae:	ee e7       	ldi	r30, 0x7E	; 126
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	88 60       	ori	r24, 0x08	; 8
     8b6:	80 83       	st	Z, r24
     8b8:	08 95       	ret

000008ba <main>:
unsigned short clk_curr;
char recieved_bytes[5];
unsigned short clk_prev;
unsigned short clk_elapsed;

int main(void){
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	c0 52       	subi	r28, 0x20	; 32
     8c4:	d2 40       	sbci	r29, 0x02	; 2
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
	Shared_Data shared_data;
	Shared_Data* shared_ptr = &shared_data;
	init_shared_data(shared_ptr);
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	d5 db       	rcall	.-2134   	; 0x80 <init_shared_data>
	
	newCommand = false;
     8d6:	10 92 27 01 	sts	0x0127, r1
	newMeasurement = false;
     8da:	10 92 2a 01 	sts	0x012A, r1
	clk_curr = 0;
     8de:	10 92 29 01 	sts	0x0129, r1
     8e2:	10 92 28 01 	sts	0x0128, r1
	clk_prev = 0;
     8e6:	10 92 21 01 	sts	0x0121, r1
     8ea:	10 92 20 01 	sts	0x0120, r1
	clk_elapsed = 0;
     8ee:	10 92 2c 01 	sts	0x012C, r1
     8f2:	10 92 2b 01 	sts	0x012B, r1
	//OCR0A = 150;
	//OCR0B = 150;
	shared_ptr->speed_set = 110;
     8f6:	8e e6       	ldi	r24, 0x6E	; 110
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	9a 83       	std	Y+2, r25	; 0x02
     8fc:	89 83       	std	Y+1, r24	; 0x01
	
	setup_registers();
     8fe:	a5 df       	rcall	.-182    	; 0x84a <setup_registers>
	sei();
     900:	78 94       	sei
			transmit_8(shared_ptr);
			transmit_0(shared_ptr);
			i = 0;
		}*/
		if(newCommand){
			switch(*recieved_bytes){
     902:	02 e2       	ldi	r16, 0x22	; 34
     904:	11 e0       	ldi	r17, 0x01	; 1
		if(i == 10000){
			transmit_8(shared_ptr);
			transmit_0(shared_ptr);
			i = 0;
		}*/
		if(newCommand){
     906:	80 91 27 01 	lds	r24, 0x0127
     90a:	88 23       	and	r24, r24
     90c:	b1 f1       	breq	.+108    	; 0x97a <main+0xc0>
			switch(*recieved_bytes){
     90e:	f8 01       	movw	r30, r16
     910:	80 81       	ld	r24, Z
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	fc 01       	movw	r30, r24
     916:	f0 97       	sbiw	r30, 0x30	; 48
     918:	ea 30       	cpi	r30, 0x0A	; 10
     91a:	f1 05       	cpc	r31, r1
     91c:	58 f5       	brcc	.+86     	; 0x974 <main+0xba>
     91e:	e6 5e       	subi	r30, 0xE6	; 230
     920:	ff 4f       	sbci	r31, 0xFF	; 255
     922:	09 94       	ijmp
				case '0':
					transmit_0(shared_ptr);
     924:	ce 01       	movw	r24, r28
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	38 d0       	rcall	.+112    	; 0x99a <transmit_0>
					break;
     92a:	25 c0       	rjmp	.+74     	; 0x976 <main+0xbc>
				case '1':
					transmit_1(shared_ptr);
     92c:	ce 01       	movw	r24, r28
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	6b d0       	rcall	.+214    	; 0xa08 <transmit_1>
					break;
     932:	21 c0       	rjmp	.+66     	; 0x976 <main+0xbc>
				case '2':
					transmit_2(shared_ptr);
     934:	ce 01       	movw	r24, r28
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	aa d0       	rcall	.+340    	; 0xa8e <transmit_2>
					break;
     93a:	1d c0       	rjmp	.+58     	; 0x976 <main+0xbc>
				case '3':
					transmit_3(shared_ptr);
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	d7 d0       	rcall	.+430    	; 0xaf0 <transmit_3>
					break;
     942:	19 c0       	rjmp	.+50     	; 0x976 <main+0xbc>
				case '4':
					transmit_4(shared_ptr);
     944:	ce 01       	movw	r24, r28
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	00 d1       	rcall	.+512    	; 0xb4a <transmit_4>
					break;
     94a:	15 c0       	rjmp	.+42     	; 0x976 <main+0xbc>
				case '5':
					transmit_5(shared_ptr);
     94c:	ce 01       	movw	r24, r28
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	31 d1       	rcall	.+610    	; 0xbb4 <transmit_5>
					break;
     952:	11 c0       	rjmp	.+34     	; 0x976 <main+0xbc>
				case '6':
					transmit_6(shared_ptr);
     954:	ce 01       	movw	r24, r28
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	63 d1       	rcall	.+710    	; 0xc20 <transmit_6>
					break;
     95a:	0d c0       	rjmp	.+26     	; 0x976 <main+0xbc>
				case '7':
					transmit_7(shared_ptr);
     95c:	ce 01       	movw	r24, r28
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	9a d1       	rcall	.+820    	; 0xc96 <transmit_7>
					break;
     962:	09 c0       	rjmp	.+18     	; 0x976 <main+0xbc>
				case '8':
					transmit_8(shared_ptr);
     964:	ce 01       	movw	r24, r28
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	d5 d1       	rcall	.+938    	; 0xd14 <transmit_8>
					break;
     96a:	05 c0       	rjmp	.+10     	; 0x976 <main+0xbc>
				case '9':
					transmit_9(shared_ptr);
     96c:	ce 01       	movw	r24, r28
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	12 d2       	rcall	.+1060   	; 0xd96 <transmit_9>
					break;
     972:	01 c0       	rjmp	.+2      	; 0x976 <main+0xbc>
				default:
					transmit_empty();
     974:	49 d2       	rcall	.+1170   	; 0xe08 <transmit_empty>
			}
			newCommand = false;
     976:	10 92 27 01 	sts	0x0127, r1
		}
		if(newMeasurement){
     97a:	80 91 2a 01 	lds	r24, 0x012A
     97e:	88 23       	and	r24, r24
     980:	11 f2       	breq	.-124    	; 0x906 <main+0x4c>
			calc_latest_rpm(shared_ptr);
     982:	ce 01       	movw	r24, r28
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	b0 db       	rcall	.-2208   	; 0xe8 <calc_latest_rpm>
			calc_avg_rpm(shared_ptr);
     988:	ce 01       	movw	r24, r28
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	cf dc       	rcall	.-1634   	; 0x32c <calc_avg_rpm>
			newMeasurement = false;
     98e:	10 92 2a 01 	sts	0x012A, r1
			control(shared_ptr);
     992:	ce 01       	movw	r24, r28
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	44 dd       	rcall	.-1400   	; 0x420 <control>
     998:	b6 cf       	rjmp	.-148    	; 0x906 <main+0x4c>

0000099a <transmit_0>:
extern bool newMeasurement;
extern unsigned short clk_curr;
extern char recieved_bytes[5];
extern unsigned short clk_elapsed;

void transmit_0(Shared_Data* shared_ptr){
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	00 d0       	rcall	.+0      	; 0x9a4 <transmit_0+0xa>
     9a4:	00 d0       	rcall	.+0      	; 0x9a6 <transmit_0+0xc>
     9a6:	00 d0       	rcall	.+0      	; 0x9a8 <transmit_0+0xe>
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     9ac:	25 e0       	ldi	r18, 0x05	; 5
     9ae:	e6 e0       	ldi	r30, 0x06	; 6
     9b0:	f1 e0       	ldi	r31, 0x01	; 1
     9b2:	8e 01       	movw	r16, r28
     9b4:	0f 5f       	subi	r16, 0xFF	; 255
     9b6:	1f 4f       	sbci	r17, 0xFF	; 255
     9b8:	d8 01       	movw	r26, r16
     9ba:	01 90       	ld	r0, Z+
     9bc:	0d 92       	st	X+, r0
     9be:	2a 95       	dec	r18
     9c0:	e1 f7       	brne	.-8      	; 0x9ba <transmit_0+0x20>
	snprintf(temp, 6, "%hd", shared_ptr->fine_tuning);
     9c2:	fc 01       	movw	r30, r24
     9c4:	e2 5e       	subi	r30, 0xE2	; 226
     9c6:	fd 4f       	sbci	r31, 0xFD	; 253
     9c8:	81 81       	ldd	r24, Z+1	; 0x01
     9ca:	8f 93       	push	r24
     9cc:	80 81       	ld	r24, Z
     9ce:	8f 93       	push	r24
     9d0:	8c e0       	ldi	r24, 0x0C	; 12
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	9f 93       	push	r25
     9d6:	8f 93       	push	r24
     9d8:	1f 92       	push	r1
     9da:	86 e0       	ldi	r24, 0x06	; 6
     9dc:	8f 93       	push	r24
     9de:	1f 93       	push	r17
     9e0:	0f 93       	push	r16
     9e2:	4f d3       	rcall	.+1694   	; 0x1082 <snprintf>
	USART_transmit(temp);
     9e4:	c8 01       	movw	r24, r16
     9e6:	c2 de       	rcall	.-636    	; 0x76c <USART_transmit>
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
}
     9f2:	26 96       	adiw	r28, 0x06	; 6
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	de bf       	out	0x3e, r29	; 62
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	cd bf       	out	0x3d, r28	; 61
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	08 95       	ret

00000a08 <transmit_1>:

void transmit_1(Shared_Data* shared_ptr){
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	00 d0       	rcall	.+0      	; 0xa12 <transmit_1+0xa>
     a12:	00 d0       	rcall	.+0      	; 0xa14 <transmit_1+0xc>
     a14:	00 d0       	rcall	.+0      	; 0xa16 <transmit_1+0xe>
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     a1a:	25 e0       	ldi	r18, 0x05	; 5
     a1c:	e6 e0       	ldi	r30, 0x06	; 6
     a1e:	f1 e0       	ldi	r31, 0x01	; 1
     a20:	8e 01       	movw	r16, r28
     a22:	0f 5f       	subi	r16, 0xFF	; 255
     a24:	1f 4f       	sbci	r17, 0xFF	; 255
     a26:	d8 01       	movw	r26, r16
     a28:	01 90       	ld	r0, Z+
     a2a:	0d 92       	st	X+, r0
     a2c:	2a 95       	dec	r18
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <transmit_1+0x20>
	snprintf(temp, 6, "%lld", shared_ptr->integral);
     a30:	fc 01       	movw	r30, r24
     a32:	ec 5e       	subi	r30, 0xEC	; 236
     a34:	fd 4f       	sbci	r31, 0xFD	; 253
     a36:	87 81       	ldd	r24, Z+7	; 0x07
     a38:	8f 93       	push	r24
     a3a:	86 81       	ldd	r24, Z+6	; 0x06
     a3c:	8f 93       	push	r24
     a3e:	85 81       	ldd	r24, Z+5	; 0x05
     a40:	8f 93       	push	r24
     a42:	84 81       	ldd	r24, Z+4	; 0x04
     a44:	8f 93       	push	r24
     a46:	83 81       	ldd	r24, Z+3	; 0x03
     a48:	8f 93       	push	r24
     a4a:	82 81       	ldd	r24, Z+2	; 0x02
     a4c:	8f 93       	push	r24
     a4e:	81 81       	ldd	r24, Z+1	; 0x01
     a50:	8f 93       	push	r24
     a52:	80 81       	ld	r24, Z
     a54:	8f 93       	push	r24
     a56:	80 e1       	ldi	r24, 0x10	; 16
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	9f 93       	push	r25
     a5c:	8f 93       	push	r24
     a5e:	1f 92       	push	r1
     a60:	86 e0       	ldi	r24, 0x06	; 6
     a62:	8f 93       	push	r24
     a64:	1f 93       	push	r17
     a66:	0f 93       	push	r16
     a68:	0c d3       	rcall	.+1560   	; 0x1082 <snprintf>
	USART_transmit(temp);
     a6a:	c8 01       	movw	r24, r16
     a6c:	7f de       	rcall	.-770    	; 0x76c <USART_transmit>
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
}
     a78:	26 96       	adiw	r28, 0x06	; 6
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	08 95       	ret

00000a8e <transmit_2>:

/* Sets a new set value for the speed. Range: 0-120. Transmits an empty message. */
void transmit_2(Shared_Data* shared_ptr){
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	2a 97       	sbiw	r28, 0x0a	; 10
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	8c 01       	movw	r16, r24
	char temp[6];
	char sub_str[4];
	int res;
	strncpy(temp, "     ", 5);
     aa8:	85 e0       	ldi	r24, 0x05	; 5
     aaa:	e6 e0       	ldi	r30, 0x06	; 6
     aac:	f1 e0       	ldi	r31, 0x01	; 1
     aae:	de 01       	movw	r26, r28
     ab0:	11 96       	adiw	r26, 0x01	; 1
     ab2:	01 90       	ld	r0, Z+
     ab4:	0d 92       	st	X+, r0
     ab6:	8a 95       	dec	r24
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <transmit_2+0x24>
	strncpy(sub_str, recieved_bytes + 1, 3);
     aba:	43 e0       	ldi	r20, 0x03	; 3
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	63 e2       	ldi	r22, 0x23	; 35
     ac0:	71 e0       	ldi	r23, 0x01	; 1
     ac2:	ce 01       	movw	r24, r28
     ac4:	07 96       	adiw	r24, 0x07	; 7
     ac6:	c6 d2       	rcall	.+1420   	; 0x1054 <strncpy>
		
	res = atoi(sub_str);
     ac8:	ce 01       	movw	r24, r28
     aca:	07 96       	adiw	r24, 0x07	; 7
     acc:	a6 d2       	rcall	.+1356   	; 0x101a <atoi>
	shared_ptr->speed_set = res;
     ace:	f8 01       	movw	r30, r16
     ad0:	91 83       	std	Z+1, r25	; 0x01
     ad2:	80 83       	st	Z, r24
	USART_transmit(temp);
     ad4:	ce 01       	movw	r24, r28
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	49 de       	rcall	.-878    	; 0x76c <USART_transmit>

}
     ada:	2a 96       	adiw	r28, 0x0a	; 10
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	f8 94       	cli
     ae0:	de bf       	out	0x3e, r29	; 62
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	08 95       	ret

00000af0 <transmit_3>:

/* Transmits the set speed. */
void transmit_3(Shared_Data* shared_ptr){
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	00 d0       	rcall	.+0      	; 0xafa <transmit_3+0xa>
     afa:	00 d0       	rcall	.+0      	; 0xafc <transmit_3+0xc>
     afc:	00 d0       	rcall	.+0      	; 0xafe <transmit_3+0xe>
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	
	snprintf(temp, 6, "%hd",  shared_ptr->speed_set);
     b02:	fc 01       	movw	r30, r24
     b04:	21 81       	ldd	r18, Z+1	; 0x01
     b06:	2f 93       	push	r18
     b08:	80 81       	ld	r24, Z
     b0a:	8f 93       	push	r24
     b0c:	8c e0       	ldi	r24, 0x0C	; 12
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	9f 93       	push	r25
     b12:	8f 93       	push	r24
     b14:	1f 92       	push	r1
     b16:	86 e0       	ldi	r24, 0x06	; 6
     b18:	8f 93       	push	r24
     b1a:	8e 01       	movw	r16, r28
     b1c:	0f 5f       	subi	r16, 0xFF	; 255
     b1e:	1f 4f       	sbci	r17, 0xFF	; 255
     b20:	1f 93       	push	r17
     b22:	0f 93       	push	r16
     b24:	ae d2       	rcall	.+1372   	; 0x1082 <snprintf>
	USART_transmit(temp);
     b26:	c8 01       	movw	r24, r16
     b28:	21 de       	rcall	.-958    	; 0x76c <USART_transmit>
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	de bf       	out	0x3e, r29	; 62
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	cd bf       	out	0x3d, r28	; 61
}
     b34:	26 96       	adiw	r28, 0x06	; 6
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	cd bf       	out	0x3d, r28	; 61
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <transmit_4>:


void transmit_4(Shared_Data* shared_ptr){
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	00 d0       	rcall	.+0      	; 0xb54 <transmit_4+0xa>
     b54:	00 d0       	rcall	.+0      	; 0xb56 <transmit_4+0xc>
     b56:	00 d0       	rcall	.+0      	; 0xb58 <transmit_4+0xe>
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     b5c:	25 e0       	ldi	r18, 0x05	; 5
     b5e:	e6 e0       	ldi	r30, 0x06	; 6
     b60:	f1 e0       	ldi	r31, 0x01	; 1
     b62:	8e 01       	movw	r16, r28
     b64:	0f 5f       	subi	r16, 0xFF	; 255
     b66:	1f 4f       	sbci	r17, 0xFF	; 255
     b68:	d8 01       	movw	r26, r16
     b6a:	01 90       	ld	r0, Z+
     b6c:	0d 92       	st	X+, r0
     b6e:	2a 95       	dec	r18
     b70:	e1 f7       	brne	.-8      	; 0xb6a <transmit_4+0x20>
	
	snprintf(temp, 6, "%d", shared_ptr->speed_actual);
     b72:	fc 01       	movw	r30, r24
     b74:	23 81       	ldd	r18, Z+3	; 0x03
     b76:	2f 93       	push	r18
     b78:	82 81       	ldd	r24, Z+2	; 0x02
     b7a:	8f 93       	push	r24
     b7c:	85 e1       	ldi	r24, 0x15	; 21
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	9f 93       	push	r25
     b82:	8f 93       	push	r24
     b84:	1f 92       	push	r1
     b86:	86 e0       	ldi	r24, 0x06	; 6
     b88:	8f 93       	push	r24
     b8a:	1f 93       	push	r17
     b8c:	0f 93       	push	r16
     b8e:	79 d2       	rcall	.+1266   	; 0x1082 <snprintf>
	USART_transmit(temp);
     b90:	c8 01       	movw	r24, r16
     b92:	ec dd       	rcall	.-1064   	; 0x76c <USART_transmit>
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
}
     b9e:	26 96       	adiw	r28, 0x06	; 6
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	08 95       	ret

00000bb4 <transmit_5>:

void transmit_5(Shared_Data* shared_ptr){
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <transmit_5+0xa>
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <transmit_5+0xc>
     bc0:	00 d0       	rcall	.+0      	; 0xbc2 <transmit_5+0xe>
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     bc6:	85 e0       	ldi	r24, 0x05	; 5
     bc8:	e6 e0       	ldi	r30, 0x06	; 6
     bca:	f1 e0       	ldi	r31, 0x01	; 1
     bcc:	8e 01       	movw	r16, r28
     bce:	0f 5f       	subi	r16, 0xFF	; 255
     bd0:	1f 4f       	sbci	r17, 0xFF	; 255
     bd2:	d8 01       	movw	r26, r16
     bd4:	01 90       	ld	r0, Z+
     bd6:	0d 92       	st	X+, r0
     bd8:	8a 95       	dec	r24
     bda:	e1 f7       	brne	.-8      	; 0xbd4 <transmit_5+0x20>

	snprintf(temp, 6, "%hu", clk_elapsed);
     bdc:	80 91 2c 01 	lds	r24, 0x012C
     be0:	8f 93       	push	r24
     be2:	80 91 2b 01 	lds	r24, 0x012B
     be6:	8f 93       	push	r24
     be8:	88 e1       	ldi	r24, 0x18	; 24
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	9f 93       	push	r25
     bee:	8f 93       	push	r24
     bf0:	1f 92       	push	r1
     bf2:	86 e0       	ldi	r24, 0x06	; 6
     bf4:	8f 93       	push	r24
     bf6:	1f 93       	push	r17
     bf8:	0f 93       	push	r16
     bfa:	43 d2       	rcall	.+1158   	; 0x1082 <snprintf>
	USART_transmit(temp);
     bfc:	c8 01       	movw	r24, r16
     bfe:	b6 dd       	rcall	.-1172   	; 0x76c <USART_transmit>
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
}
     c0a:	26 96       	adiw	r28, 0x06	; 6
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	08 95       	ret

00000c20 <transmit_6>:

void transmit_6(Shared_Data* shared_ptr){
     c20:	0f 93       	push	r16
     c22:	1f 93       	push	r17
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	00 d0       	rcall	.+0      	; 0xc2a <transmit_6+0xa>
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <transmit_6+0xc>
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <transmit_6+0xe>
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     c32:	25 e0       	ldi	r18, 0x05	; 5
     c34:	e6 e0       	ldi	r30, 0x06	; 6
     c36:	f1 e0       	ldi	r31, 0x01	; 1
     c38:	8e 01       	movw	r16, r28
     c3a:	0f 5f       	subi	r16, 0xFF	; 255
     c3c:	1f 4f       	sbci	r17, 0xFF	; 255
     c3e:	d8 01       	movw	r26, r16
     c40:	01 90       	ld	r0, Z+
     c42:	0d 92       	st	X+, r0
     c44:	2a 95       	dec	r18
     c46:	e1 f7       	brne	.-8      	; 0xc40 <transmit_6+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->delta_time);
     c48:	fc 01       	movw	r30, r24
     c4a:	e0 5f       	subi	r30, 0xF0	; 240
     c4c:	fd 4f       	sbci	r31, 0xFD	; 253
     c4e:	83 81       	ldd	r24, Z+3	; 0x03
     c50:	8f 93       	push	r24
     c52:	82 81       	ldd	r24, Z+2	; 0x02
     c54:	8f 93       	push	r24
     c56:	81 81       	ldd	r24, Z+1	; 0x01
     c58:	8f 93       	push	r24
     c5a:	80 81       	ld	r24, Z
     c5c:	8f 93       	push	r24
     c5e:	8c e1       	ldi	r24, 0x1C	; 28
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	9f 93       	push	r25
     c64:	8f 93       	push	r24
     c66:	1f 92       	push	r1
     c68:	86 e0       	ldi	r24, 0x06	; 6
     c6a:	8f 93       	push	r24
     c6c:	1f 93       	push	r17
     c6e:	0f 93       	push	r16
     c70:	08 d2       	rcall	.+1040   	; 0x1082 <snprintf>
	USART_transmit(temp);
     c72:	c8 01       	movw	r24, r16
     c74:	7b dd       	rcall	.-1290   	; 0x76c <USART_transmit>
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
}
     c80:	26 96       	adiw	r28, 0x06	; 6
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	08 95       	ret

00000c96 <transmit_7>:

void transmit_7(Shared_Data* shared_ptr){
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <transmit_7+0xa>
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <transmit_7+0xc>
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <transmit_7+0xe>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     ca8:	25 e0       	ldi	r18, 0x05	; 5
     caa:	e6 e0       	ldi	r30, 0x06	; 6
     cac:	f1 e0       	ldi	r31, 0x01	; 1
     cae:	8e 01       	movw	r16, r28
     cb0:	0f 5f       	subi	r16, 0xFF	; 255
     cb2:	1f 4f       	sbci	r17, 0xFF	; 255
     cb4:	d8 01       	movw	r26, r16
     cb6:	01 90       	ld	r0, Z+
     cb8:	0d 92       	st	X+, r0
     cba:	2a 95       	dec	r18
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <transmit_7+0x20>
	snprintf(temp, 6, "%hd", (shared_ptr->error >> N));
     cbe:	84 5e       	subi	r24, 0xE4	; 228
     cc0:	9d 4f       	sbci	r25, 0xFD	; 253
     cc2:	fc 01       	movw	r30, r24
     cc4:	80 81       	ld	r24, Z
     cc6:	91 81       	ldd	r25, Z+1	; 0x01
     cc8:	95 95       	asr	r25
     cca:	87 95       	ror	r24
     ccc:	95 95       	asr	r25
     cce:	87 95       	ror	r24
     cd0:	95 95       	asr	r25
     cd2:	87 95       	ror	r24
     cd4:	95 95       	asr	r25
     cd6:	87 95       	ror	r24
     cd8:	9f 93       	push	r25
     cda:	8f 93       	push	r24
     cdc:	8c e0       	ldi	r24, 0x0C	; 12
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	9f 93       	push	r25
     ce2:	8f 93       	push	r24
     ce4:	1f 92       	push	r1
     ce6:	86 e0       	ldi	r24, 0x06	; 6
     ce8:	8f 93       	push	r24
     cea:	1f 93       	push	r17
     cec:	0f 93       	push	r16
     cee:	c9 d1       	rcall	.+914    	; 0x1082 <snprintf>
	USART_transmit(temp);
     cf0:	c8 01       	movw	r24, r16
     cf2:	3c dd       	rcall	.-1416   	; 0x76c <USART_transmit>
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
}
     cfe:	26 96       	adiw	r28, 0x06	; 6
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	1f 91       	pop	r17
     d10:	0f 91       	pop	r16
     d12:	08 95       	ret

00000d14 <transmit_8>:

void transmit_8(Shared_Data* shared_ptr){
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <transmit_8+0xa>
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <transmit_8+0xc>
     d20:	00 d0       	rcall	.+0      	; 0xd22 <transmit_8+0xe>
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     d26:	25 e0       	ldi	r18, 0x05	; 5
     d28:	e6 e0       	ldi	r30, 0x06	; 6
     d2a:	f1 e0       	ldi	r31, 0x01	; 1
     d2c:	8e 01       	movw	r16, r28
     d2e:	0f 5f       	subi	r16, 0xFF	; 255
     d30:	1f 4f       	sbci	r17, 0xFF	; 255
     d32:	d8 01       	movw	r26, r16
     d34:	01 90       	ld	r0, Z+
     d36:	0d 92       	st	X+, r0
     d38:	2a 95       	dec	r18
     d3a:	e1 f7       	brne	.-8      	; 0xd34 <transmit_8+0x20>
	snprintf(temp, 6, "%lu", (shared_ptr->rpm_avg >> N));
     d3c:	fc 01       	movw	r30, r24
     d3e:	44 85       	ldd	r20, Z+12	; 0x0c
     d40:	55 85       	ldd	r21, Z+13	; 0x0d
     d42:	66 85       	ldd	r22, Z+14	; 0x0e
     d44:	77 85       	ldd	r23, Z+15	; 0x0f
     d46:	68 94       	set
     d48:	13 f8       	bld	r1, 3
     d4a:	76 95       	lsr	r23
     d4c:	67 95       	ror	r22
     d4e:	57 95       	ror	r21
     d50:	47 95       	ror	r20
     d52:	16 94       	lsr	r1
     d54:	d1 f7       	brne	.-12     	; 0xd4a <transmit_8+0x36>
     d56:	7f 93       	push	r23
     d58:	6f 93       	push	r22
     d5a:	5f 93       	push	r21
     d5c:	4f 93       	push	r20
     d5e:	8c e1       	ldi	r24, 0x1C	; 28
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	9f 93       	push	r25
     d64:	8f 93       	push	r24
     d66:	1f 92       	push	r1
     d68:	86 e0       	ldi	r24, 0x06	; 6
     d6a:	8f 93       	push	r24
     d6c:	1f 93       	push	r17
     d6e:	0f 93       	push	r16
     d70:	88 d1       	rcall	.+784    	; 0x1082 <snprintf>
	USART_transmit(temp);
     d72:	c8 01       	movw	r24, r16
     d74:	fb dc       	rcall	.-1546   	; 0x76c <USART_transmit>
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
}
     d80:	26 96       	adiw	r28, 0x06	; 6
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	08 95       	ret

00000d96 <transmit_9>:

void transmit_9(Shared_Data* shared_ptr){
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <transmit_9+0xa>
     da0:	00 d0       	rcall	.+0      	; 0xda2 <transmit_9+0xc>
     da2:	00 d0       	rcall	.+0      	; 0xda4 <transmit_9+0xe>
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     da8:	25 e0       	ldi	r18, 0x05	; 5
     daa:	e6 e0       	ldi	r30, 0x06	; 6
     dac:	f1 e0       	ldi	r31, 0x01	; 1
     dae:	8e 01       	movw	r16, r28
     db0:	0f 5f       	subi	r16, 0xFF	; 255
     db2:	1f 4f       	sbci	r17, 0xFF	; 255
     db4:	d8 01       	movw	r26, r16
     db6:	01 90       	ld	r0, Z+
     db8:	0d 92       	st	X+, r0
     dba:	2a 95       	dec	r18
     dbc:	e1 f7       	brne	.-8      	; 0xdb6 <transmit_9+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->curr_rpm);
     dbe:	fc 01       	movw	r30, r24
     dc0:	23 85       	ldd	r18, Z+11	; 0x0b
     dc2:	2f 93       	push	r18
     dc4:	22 85       	ldd	r18, Z+10	; 0x0a
     dc6:	2f 93       	push	r18
     dc8:	21 85       	ldd	r18, Z+9	; 0x09
     dca:	2f 93       	push	r18
     dcc:	80 85       	ldd	r24, Z+8	; 0x08
     dce:	8f 93       	push	r24
     dd0:	8c e1       	ldi	r24, 0x1C	; 28
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	9f 93       	push	r25
     dd6:	8f 93       	push	r24
     dd8:	1f 92       	push	r1
     dda:	86 e0       	ldi	r24, 0x06	; 6
     ddc:	8f 93       	push	r24
     dde:	1f 93       	push	r17
     de0:	0f 93       	push	r16
     de2:	4f d1       	rcall	.+670    	; 0x1082 <snprintf>
	USART_transmit(temp);
     de4:	c8 01       	movw	r24, r16
     de6:	c2 dc       	rcall	.-1660   	; 0x76c <USART_transmit>
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
}
     df2:	26 96       	adiw	r28, 0x06	; 6
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	08 95       	ret

00000e08 <transmit_empty>:

void transmit_empty(){
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <transmit_empty+0x6>
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <transmit_empty+0x8>
     e10:	00 d0       	rcall	.+0      	; 0xe12 <transmit_empty+0xa>
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     e16:	85 e0       	ldi	r24, 0x05	; 5
     e18:	e6 e0       	ldi	r30, 0x06	; 6
     e1a:	f1 e0       	ldi	r31, 0x01	; 1
     e1c:	de 01       	movw	r26, r28
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	01 90       	ld	r0, Z+
     e22:	0d 92       	st	X+, r0
     e24:	8a 95       	dec	r24
     e26:	e1 f7       	brne	.-8      	; 0xe20 <transmit_empty+0x18>
	USART_transmit(temp);
     e28:	ce 01       	movw	r24, r28
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	9f dc       	rcall	.-1730   	; 0x76c <USART_transmit>
}
     e2e:	26 96       	adiw	r28, 0x06	; 6
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	08 95       	ret

00000e40 <__mulsi3>:
     e40:	db 01       	movw	r26, r22
     e42:	8f 93       	push	r24
     e44:	9f 93       	push	r25
     e46:	2a d0       	rcall	.+84     	; 0xe9c <__muluhisi3>
     e48:	bf 91       	pop	r27
     e4a:	af 91       	pop	r26
     e4c:	a2 9f       	mul	r26, r18
     e4e:	80 0d       	add	r24, r0
     e50:	91 1d       	adc	r25, r1
     e52:	a3 9f       	mul	r26, r19
     e54:	90 0d       	add	r25, r0
     e56:	b2 9f       	mul	r27, r18
     e58:	90 0d       	add	r25, r0
     e5a:	11 24       	eor	r1, r1
     e5c:	08 95       	ret

00000e5e <__divmodhi4>:
     e5e:	97 fb       	bst	r25, 7
     e60:	07 2e       	mov	r0, r23
     e62:	16 f4       	brtc	.+4      	; 0xe68 <__divmodhi4+0xa>
     e64:	00 94       	com	r0
     e66:	06 d0       	rcall	.+12     	; 0xe74 <__divmodhi4_neg1>
     e68:	77 fd       	sbrc	r23, 7
     e6a:	08 d0       	rcall	.+16     	; 0xe7c <__divmodhi4_neg2>
     e6c:	c2 d0       	rcall	.+388    	; 0xff2 <__udivmodhi4>
     e6e:	07 fc       	sbrc	r0, 7
     e70:	05 d0       	rcall	.+10     	; 0xe7c <__divmodhi4_neg2>
     e72:	3e f4       	brtc	.+14     	; 0xe82 <__divmodhi4_exit>

00000e74 <__divmodhi4_neg1>:
     e74:	90 95       	com	r25
     e76:	81 95       	neg	r24
     e78:	9f 4f       	sbci	r25, 0xFF	; 255
     e7a:	08 95       	ret

00000e7c <__divmodhi4_neg2>:
     e7c:	70 95       	com	r23
     e7e:	61 95       	neg	r22
     e80:	7f 4f       	sbci	r23, 0xFF	; 255

00000e82 <__divmodhi4_exit>:
     e82:	08 95       	ret

00000e84 <__umulhisi3>:
     e84:	a2 9f       	mul	r26, r18
     e86:	b0 01       	movw	r22, r0
     e88:	b3 9f       	mul	r27, r19
     e8a:	c0 01       	movw	r24, r0
     e8c:	a3 9f       	mul	r26, r19
     e8e:	01 d0       	rcall	.+2      	; 0xe92 <__umulhisi3+0xe>
     e90:	b2 9f       	mul	r27, r18
     e92:	70 0d       	add	r23, r0
     e94:	81 1d       	adc	r24, r1
     e96:	11 24       	eor	r1, r1
     e98:	91 1d       	adc	r25, r1
     e9a:	08 95       	ret

00000e9c <__muluhisi3>:
     e9c:	f3 df       	rcall	.-26     	; 0xe84 <__umulhisi3>
     e9e:	a5 9f       	mul	r26, r21
     ea0:	90 0d       	add	r25, r0
     ea2:	b4 9f       	mul	r27, r20
     ea4:	90 0d       	add	r25, r0
     ea6:	a4 9f       	mul	r26, r20
     ea8:	80 0d       	add	r24, r0
     eaa:	91 1d       	adc	r25, r1
     eac:	11 24       	eor	r1, r1
     eae:	08 95       	ret

00000eb0 <__umoddi3>:
     eb0:	68 94       	set
     eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <__udivdi3_umoddi3>

00000eb4 <__udivdi3>:
     eb4:	e8 94       	clt

00000eb6 <__udivdi3_umoddi3>:
     eb6:	8f 92       	push	r8
     eb8:	9f 92       	push	r9
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	05 d0       	rcall	.+10     	; 0xeca <__udivmod64>
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	9f 90       	pop	r9
     ec6:	8f 90       	pop	r8
     ec8:	08 95       	ret

00000eca <__udivmod64>:
     eca:	88 24       	eor	r8, r8
     ecc:	99 24       	eor	r9, r9
     ece:	f4 01       	movw	r30, r8
     ed0:	e4 01       	movw	r28, r8
     ed2:	b0 e4       	ldi	r27, 0x40	; 64
     ed4:	1b 2e       	mov	r1, r27
     ed6:	d4 01       	movw	r26, r8
     ed8:	9d 15       	cp	r25, r13
     eda:	8e 04       	cpc	r8, r14
     edc:	9f 04       	cpc	r9, r15
     ede:	e0 07       	cpc	r30, r16
     ee0:	f1 07       	cpc	r31, r17
     ee2:	38 f4       	brcc	.+14     	; 0xef2 <__udivmod64+0x28>
     ee4:	fc 01       	movw	r30, r24
     ee6:	4b 01       	movw	r8, r22
     ee8:	ca 01       	movw	r24, r20
     eea:	b9 01       	movw	r22, r18
     eec:	ad 01       	movw	r20, r26
     eee:	9e 01       	movw	r18, r28
     ef0:	16 94       	lsr	r1
     ef2:	22 0f       	add	r18, r18
     ef4:	33 1f       	adc	r19, r19
     ef6:	44 1f       	adc	r20, r20
     ef8:	55 1f       	adc	r21, r21
     efa:	66 1f       	adc	r22, r22
     efc:	77 1f       	adc	r23, r23
     efe:	88 1f       	adc	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	88 1c       	adc	r8, r8
     f04:	99 1c       	adc	r9, r9
     f06:	ee 1f       	adc	r30, r30
     f08:	ff 1f       	adc	r31, r31
     f0a:	cc 1f       	adc	r28, r28
     f0c:	dd 1f       	adc	r29, r29
     f0e:	aa 1f       	adc	r26, r26
     f10:	bb 1f       	adc	r27, r27
     f12:	8a 14       	cp	r8, r10
     f14:	9b 04       	cpc	r9, r11
     f16:	ec 05       	cpc	r30, r12
     f18:	fd 05       	cpc	r31, r13
     f1a:	ce 05       	cpc	r28, r14
     f1c:	df 05       	cpc	r29, r15
     f1e:	a0 07       	cpc	r26, r16
     f20:	b1 07       	cpc	r27, r17
     f22:	48 f0       	brcs	.+18     	; 0xf36 <__udivmod64+0x6c>
     f24:	8a 18       	sub	r8, r10
     f26:	9b 08       	sbc	r9, r11
     f28:	ec 09       	sbc	r30, r12
     f2a:	fd 09       	sbc	r31, r13
     f2c:	ce 09       	sbc	r28, r14
     f2e:	df 09       	sbc	r29, r15
     f30:	a0 0b       	sbc	r26, r16
     f32:	b1 0b       	sbc	r27, r17
     f34:	21 60       	ori	r18, 0x01	; 1
     f36:	1a 94       	dec	r1
     f38:	e1 f6       	brne	.-72     	; 0xef2 <__udivmod64+0x28>
     f3a:	2e f4       	brtc	.+10     	; 0xf46 <__udivmod64+0x7c>
     f3c:	94 01       	movw	r18, r8
     f3e:	af 01       	movw	r20, r30
     f40:	be 01       	movw	r22, r28
     f42:	cd 01       	movw	r24, r26
     f44:	00 0c       	add	r0, r0
     f46:	08 95       	ret

00000f48 <__ashldi3>:
     f48:	0f 93       	push	r16
     f4a:	08 30       	cpi	r16, 0x08	; 8
     f4c:	90 f0       	brcs	.+36     	; 0xf72 <__ashldi3+0x2a>
     f4e:	98 2f       	mov	r25, r24
     f50:	87 2f       	mov	r24, r23
     f52:	76 2f       	mov	r23, r22
     f54:	65 2f       	mov	r22, r21
     f56:	54 2f       	mov	r21, r20
     f58:	43 2f       	mov	r20, r19
     f5a:	32 2f       	mov	r19, r18
     f5c:	22 27       	eor	r18, r18
     f5e:	08 50       	subi	r16, 0x08	; 8
     f60:	f4 cf       	rjmp	.-24     	; 0xf4a <__ashldi3+0x2>
     f62:	22 0f       	add	r18, r18
     f64:	33 1f       	adc	r19, r19
     f66:	44 1f       	adc	r20, r20
     f68:	55 1f       	adc	r21, r21
     f6a:	66 1f       	adc	r22, r22
     f6c:	77 1f       	adc	r23, r23
     f6e:	88 1f       	adc	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 95       	dec	r16
     f74:	b2 f7       	brpl	.-20     	; 0xf62 <__ashldi3+0x1a>
     f76:	0f 91       	pop	r16
     f78:	08 95       	ret

00000f7a <__ashrdi3>:
     f7a:	97 fb       	bst	r25, 7
     f7c:	10 f8       	bld	r1, 0

00000f7e <__lshrdi3>:
     f7e:	16 94       	lsr	r1
     f80:	00 08       	sbc	r0, r0
     f82:	0f 93       	push	r16
     f84:	08 30       	cpi	r16, 0x08	; 8
     f86:	98 f0       	brcs	.+38     	; 0xfae <__lshrdi3+0x30>
     f88:	08 50       	subi	r16, 0x08	; 8
     f8a:	23 2f       	mov	r18, r19
     f8c:	34 2f       	mov	r19, r20
     f8e:	45 2f       	mov	r20, r21
     f90:	56 2f       	mov	r21, r22
     f92:	67 2f       	mov	r22, r23
     f94:	78 2f       	mov	r23, r24
     f96:	89 2f       	mov	r24, r25
     f98:	90 2d       	mov	r25, r0
     f9a:	f4 cf       	rjmp	.-24     	; 0xf84 <__lshrdi3+0x6>
     f9c:	05 94       	asr	r0
     f9e:	97 95       	ror	r25
     fa0:	87 95       	ror	r24
     fa2:	77 95       	ror	r23
     fa4:	67 95       	ror	r22
     fa6:	57 95       	ror	r21
     fa8:	47 95       	ror	r20
     faa:	37 95       	ror	r19
     fac:	27 95       	ror	r18
     fae:	0a 95       	dec	r16
     fb0:	aa f7       	brpl	.-22     	; 0xf9c <__lshrdi3+0x1e>
     fb2:	0f 91       	pop	r16
     fb4:	08 95       	ret

00000fb6 <__adddi3>:
     fb6:	2a 0d       	add	r18, r10
     fb8:	3b 1d       	adc	r19, r11
     fba:	4c 1d       	adc	r20, r12
     fbc:	5d 1d       	adc	r21, r13
     fbe:	6e 1d       	adc	r22, r14
     fc0:	7f 1d       	adc	r23, r15
     fc2:	80 1f       	adc	r24, r16
     fc4:	91 1f       	adc	r25, r17
     fc6:	08 95       	ret

00000fc8 <__subdi3>:
     fc8:	2a 19       	sub	r18, r10
     fca:	3b 09       	sbc	r19, r11
     fcc:	4c 09       	sbc	r20, r12
     fce:	5d 09       	sbc	r21, r13
     fd0:	6e 09       	sbc	r22, r14
     fd2:	7f 09       	sbc	r23, r15
     fd4:	80 0b       	sbc	r24, r16
     fd6:	91 0b       	sbc	r25, r17
     fd8:	08 95       	ret

00000fda <__cmpdi2_s8>:
     fda:	00 24       	eor	r0, r0
     fdc:	a7 fd       	sbrc	r26, 7
     fde:	00 94       	com	r0
     fe0:	2a 17       	cp	r18, r26
     fe2:	30 05       	cpc	r19, r0
     fe4:	40 05       	cpc	r20, r0
     fe6:	50 05       	cpc	r21, r0
     fe8:	60 05       	cpc	r22, r0
     fea:	70 05       	cpc	r23, r0
     fec:	80 05       	cpc	r24, r0
     fee:	90 05       	cpc	r25, r0
     ff0:	08 95       	ret

00000ff2 <__udivmodhi4>:
     ff2:	aa 1b       	sub	r26, r26
     ff4:	bb 1b       	sub	r27, r27
     ff6:	51 e1       	ldi	r21, 0x11	; 17
     ff8:	07 c0       	rjmp	.+14     	; 0x1008 <__udivmodhi4_ep>

00000ffa <__udivmodhi4_loop>:
     ffa:	aa 1f       	adc	r26, r26
     ffc:	bb 1f       	adc	r27, r27
     ffe:	a6 17       	cp	r26, r22
    1000:	b7 07       	cpc	r27, r23
    1002:	10 f0       	brcs	.+4      	; 0x1008 <__udivmodhi4_ep>
    1004:	a6 1b       	sub	r26, r22
    1006:	b7 0b       	sbc	r27, r23

00001008 <__udivmodhi4_ep>:
    1008:	88 1f       	adc	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	5a 95       	dec	r21
    100e:	a9 f7       	brne	.-22     	; 0xffa <__udivmodhi4_loop>
    1010:	80 95       	com	r24
    1012:	90 95       	com	r25
    1014:	bc 01       	movw	r22, r24
    1016:	cd 01       	movw	r24, r26
    1018:	08 95       	ret

0000101a <atoi>:
    101a:	fc 01       	movw	r30, r24
    101c:	88 27       	eor	r24, r24
    101e:	99 27       	eor	r25, r25
    1020:	e8 94       	clt
    1022:	21 91       	ld	r18, Z+
    1024:	20 32       	cpi	r18, 0x20	; 32
    1026:	e9 f3       	breq	.-6      	; 0x1022 <atoi+0x8>
    1028:	29 30       	cpi	r18, 0x09	; 9
    102a:	10 f0       	brcs	.+4      	; 0x1030 <atoi+0x16>
    102c:	2e 30       	cpi	r18, 0x0E	; 14
    102e:	c8 f3       	brcs	.-14     	; 0x1022 <atoi+0x8>
    1030:	2b 32       	cpi	r18, 0x2B	; 43
    1032:	39 f0       	breq	.+14     	; 0x1042 <atoi+0x28>
    1034:	2d 32       	cpi	r18, 0x2D	; 45
    1036:	31 f4       	brne	.+12     	; 0x1044 <atoi+0x2a>
    1038:	68 94       	set
    103a:	03 c0       	rjmp	.+6      	; 0x1042 <atoi+0x28>
    103c:	1a d0       	rcall	.+52     	; 0x1072 <__mulhi_const_10>
    103e:	82 0f       	add	r24, r18
    1040:	91 1d       	adc	r25, r1
    1042:	21 91       	ld	r18, Z+
    1044:	20 53       	subi	r18, 0x30	; 48
    1046:	2a 30       	cpi	r18, 0x0A	; 10
    1048:	c8 f3       	brcs	.-14     	; 0x103c <atoi+0x22>
    104a:	1e f4       	brtc	.+6      	; 0x1052 <atoi+0x38>
    104c:	90 95       	com	r25
    104e:	81 95       	neg	r24
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	08 95       	ret

00001054 <strncpy>:
    1054:	fb 01       	movw	r30, r22
    1056:	dc 01       	movw	r26, r24
    1058:	41 50       	subi	r20, 0x01	; 1
    105a:	50 40       	sbci	r21, 0x00	; 0
    105c:	48 f0       	brcs	.+18     	; 0x1070 <strncpy+0x1c>
    105e:	01 90       	ld	r0, Z+
    1060:	0d 92       	st	X+, r0
    1062:	00 20       	and	r0, r0
    1064:	c9 f7       	brne	.-14     	; 0x1058 <strncpy+0x4>
    1066:	01 c0       	rjmp	.+2      	; 0x106a <strncpy+0x16>
    1068:	1d 92       	st	X+, r1
    106a:	41 50       	subi	r20, 0x01	; 1
    106c:	50 40       	sbci	r21, 0x00	; 0
    106e:	e0 f7       	brcc	.-8      	; 0x1068 <strncpy+0x14>
    1070:	08 95       	ret

00001072 <__mulhi_const_10>:
    1072:	7a e0       	ldi	r23, 0x0A	; 10
    1074:	97 9f       	mul	r25, r23
    1076:	90 2d       	mov	r25, r0
    1078:	87 9f       	mul	r24, r23
    107a:	80 2d       	mov	r24, r0
    107c:	91 0d       	add	r25, r1
    107e:	11 24       	eor	r1, r1
    1080:	08 95       	ret

00001082 <snprintf>:
    1082:	ae e0       	ldi	r26, 0x0E	; 14
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e6 e4       	ldi	r30, 0x46	; 70
    1088:	f8 e0       	ldi	r31, 0x08	; 8
    108a:	9f c2       	rjmp	.+1342   	; 0x15ca <__prologue_saves__+0x1c>
    108c:	0d 89       	ldd	r16, Y+21	; 0x15
    108e:	1e 89       	ldd	r17, Y+22	; 0x16
    1090:	8f 89       	ldd	r24, Y+23	; 0x17
    1092:	98 8d       	ldd	r25, Y+24	; 0x18
    1094:	26 e0       	ldi	r18, 0x06	; 6
    1096:	2c 83       	std	Y+4, r18	; 0x04
    1098:	1a 83       	std	Y+2, r17	; 0x02
    109a:	09 83       	std	Y+1, r16	; 0x01
    109c:	97 ff       	sbrs	r25, 7
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <snprintf+0x22>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e8       	ldi	r25, 0x80	; 128
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	9e 83       	std	Y+6, r25	; 0x06
    10a8:	8d 83       	std	Y+5, r24	; 0x05
    10aa:	ae 01       	movw	r20, r28
    10ac:	45 5e       	subi	r20, 0xE5	; 229
    10ae:	5f 4f       	sbci	r21, 0xFF	; 255
    10b0:	69 8d       	ldd	r22, Y+25	; 0x19
    10b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10b4:	ce 01       	movw	r24, r28
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	11 d0       	rcall	.+34     	; 0x10dc <vfprintf>
    10ba:	4d 81       	ldd	r20, Y+5	; 0x05
    10bc:	5e 81       	ldd	r21, Y+6	; 0x06
    10be:	57 fd       	sbrc	r21, 7
    10c0:	0a c0       	rjmp	.+20     	; 0x10d6 <snprintf+0x54>
    10c2:	2f 81       	ldd	r18, Y+7	; 0x07
    10c4:	38 85       	ldd	r19, Y+8	; 0x08
    10c6:	42 17       	cp	r20, r18
    10c8:	53 07       	cpc	r21, r19
    10ca:	0c f4       	brge	.+2      	; 0x10ce <snprintf+0x4c>
    10cc:	9a 01       	movw	r18, r20
    10ce:	f8 01       	movw	r30, r16
    10d0:	e2 0f       	add	r30, r18
    10d2:	f3 1f       	adc	r31, r19
    10d4:	10 82       	st	Z, r1
    10d6:	2e 96       	adiw	r28, 0x0e	; 14
    10d8:	e4 e0       	ldi	r30, 0x04	; 4
    10da:	93 c2       	rjmp	.+1318   	; 0x1602 <__epilogue_restores__+0x1c>

000010dc <vfprintf>:
    10dc:	ac e0       	ldi	r26, 0x0C	; 12
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e3 e7       	ldi	r30, 0x73	; 115
    10e2:	f8 e0       	ldi	r31, 0x08	; 8
    10e4:	64 c2       	rjmp	.+1224   	; 0x15ae <__prologue_saves__>
    10e6:	7c 01       	movw	r14, r24
    10e8:	6b 01       	movw	r12, r22
    10ea:	8a 01       	movw	r16, r20
    10ec:	fc 01       	movw	r30, r24
    10ee:	17 82       	std	Z+7, r1	; 0x07
    10f0:	16 82       	std	Z+6, r1	; 0x06
    10f2:	83 81       	ldd	r24, Z+3	; 0x03
    10f4:	81 ff       	sbrs	r24, 1
    10f6:	b0 c1       	rjmp	.+864    	; 0x1458 <vfprintf+0x37c>
    10f8:	ce 01       	movw	r24, r28
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	4c 01       	movw	r8, r24
    10fe:	f7 01       	movw	r30, r14
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	f6 01       	movw	r30, r12
    1104:	93 fd       	sbrc	r25, 3
    1106:	85 91       	lpm	r24, Z+
    1108:	93 ff       	sbrs	r25, 3
    110a:	81 91       	ld	r24, Z+
    110c:	6f 01       	movw	r12, r30
    110e:	88 23       	and	r24, r24
    1110:	09 f4       	brne	.+2      	; 0x1114 <vfprintf+0x38>
    1112:	9e c1       	rjmp	.+828    	; 0x1450 <vfprintf+0x374>
    1114:	85 32       	cpi	r24, 0x25	; 37
    1116:	39 f4       	brne	.+14     	; 0x1126 <vfprintf+0x4a>
    1118:	93 fd       	sbrc	r25, 3
    111a:	85 91       	lpm	r24, Z+
    111c:	93 ff       	sbrs	r25, 3
    111e:	81 91       	ld	r24, Z+
    1120:	6f 01       	movw	r12, r30
    1122:	85 32       	cpi	r24, 0x25	; 37
    1124:	21 f4       	brne	.+8      	; 0x112e <vfprintf+0x52>
    1126:	b7 01       	movw	r22, r14
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	b1 d1       	rcall	.+866    	; 0x148e <fputc>
    112c:	e8 cf       	rjmp	.-48     	; 0x10fe <vfprintf+0x22>
    112e:	51 2c       	mov	r5, r1
    1130:	31 2c       	mov	r3, r1
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	20 32       	cpi	r18, 0x20	; 32
    1136:	a0 f4       	brcc	.+40     	; 0x1160 <vfprintf+0x84>
    1138:	8b 32       	cpi	r24, 0x2B	; 43
    113a:	69 f0       	breq	.+26     	; 0x1156 <vfprintf+0x7a>
    113c:	30 f4       	brcc	.+12     	; 0x114a <vfprintf+0x6e>
    113e:	80 32       	cpi	r24, 0x20	; 32
    1140:	59 f0       	breq	.+22     	; 0x1158 <vfprintf+0x7c>
    1142:	83 32       	cpi	r24, 0x23	; 35
    1144:	69 f4       	brne	.+26     	; 0x1160 <vfprintf+0x84>
    1146:	20 61       	ori	r18, 0x10	; 16
    1148:	2c c0       	rjmp	.+88     	; 0x11a2 <vfprintf+0xc6>
    114a:	8d 32       	cpi	r24, 0x2D	; 45
    114c:	39 f0       	breq	.+14     	; 0x115c <vfprintf+0x80>
    114e:	80 33       	cpi	r24, 0x30	; 48
    1150:	39 f4       	brne	.+14     	; 0x1160 <vfprintf+0x84>
    1152:	21 60       	ori	r18, 0x01	; 1
    1154:	26 c0       	rjmp	.+76     	; 0x11a2 <vfprintf+0xc6>
    1156:	22 60       	ori	r18, 0x02	; 2
    1158:	24 60       	ori	r18, 0x04	; 4
    115a:	23 c0       	rjmp	.+70     	; 0x11a2 <vfprintf+0xc6>
    115c:	28 60       	ori	r18, 0x08	; 8
    115e:	21 c0       	rjmp	.+66     	; 0x11a2 <vfprintf+0xc6>
    1160:	27 fd       	sbrc	r18, 7
    1162:	27 c0       	rjmp	.+78     	; 0x11b2 <vfprintf+0xd6>
    1164:	30 ed       	ldi	r19, 0xD0	; 208
    1166:	38 0f       	add	r19, r24
    1168:	3a 30       	cpi	r19, 0x0A	; 10
    116a:	78 f4       	brcc	.+30     	; 0x118a <vfprintf+0xae>
    116c:	26 ff       	sbrs	r18, 6
    116e:	06 c0       	rjmp	.+12     	; 0x117c <vfprintf+0xa0>
    1170:	fa e0       	ldi	r31, 0x0A	; 10
    1172:	5f 9e       	mul	r5, r31
    1174:	30 0d       	add	r19, r0
    1176:	11 24       	eor	r1, r1
    1178:	53 2e       	mov	r5, r19
    117a:	13 c0       	rjmp	.+38     	; 0x11a2 <vfprintf+0xc6>
    117c:	8a e0       	ldi	r24, 0x0A	; 10
    117e:	38 9e       	mul	r3, r24
    1180:	30 0d       	add	r19, r0
    1182:	11 24       	eor	r1, r1
    1184:	33 2e       	mov	r3, r19
    1186:	20 62       	ori	r18, 0x20	; 32
    1188:	0c c0       	rjmp	.+24     	; 0x11a2 <vfprintf+0xc6>
    118a:	8e 32       	cpi	r24, 0x2E	; 46
    118c:	21 f4       	brne	.+8      	; 0x1196 <vfprintf+0xba>
    118e:	26 fd       	sbrc	r18, 6
    1190:	5f c1       	rjmp	.+702    	; 0x1450 <vfprintf+0x374>
    1192:	20 64       	ori	r18, 0x40	; 64
    1194:	06 c0       	rjmp	.+12     	; 0x11a2 <vfprintf+0xc6>
    1196:	8c 36       	cpi	r24, 0x6C	; 108
    1198:	11 f4       	brne	.+4      	; 0x119e <vfprintf+0xc2>
    119a:	20 68       	ori	r18, 0x80	; 128
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <vfprintf+0xc6>
    119e:	88 36       	cpi	r24, 0x68	; 104
    11a0:	41 f4       	brne	.+16     	; 0x11b2 <vfprintf+0xd6>
    11a2:	f6 01       	movw	r30, r12
    11a4:	93 fd       	sbrc	r25, 3
    11a6:	85 91       	lpm	r24, Z+
    11a8:	93 ff       	sbrs	r25, 3
    11aa:	81 91       	ld	r24, Z+
    11ac:	6f 01       	movw	r12, r30
    11ae:	81 11       	cpse	r24, r1
    11b0:	c1 cf       	rjmp	.-126    	; 0x1134 <vfprintf+0x58>
    11b2:	98 2f       	mov	r25, r24
    11b4:	9f 7d       	andi	r25, 0xDF	; 223
    11b6:	95 54       	subi	r25, 0x45	; 69
    11b8:	93 30       	cpi	r25, 0x03	; 3
    11ba:	28 f4       	brcc	.+10     	; 0x11c6 <vfprintf+0xea>
    11bc:	0c 5f       	subi	r16, 0xFC	; 252
    11be:	1f 4f       	sbci	r17, 0xFF	; 255
    11c0:	ff e3       	ldi	r31, 0x3F	; 63
    11c2:	f9 83       	std	Y+1, r31	; 0x01
    11c4:	0d c0       	rjmp	.+26     	; 0x11e0 <vfprintf+0x104>
    11c6:	83 36       	cpi	r24, 0x63	; 99
    11c8:	31 f0       	breq	.+12     	; 0x11d6 <vfprintf+0xfa>
    11ca:	83 37       	cpi	r24, 0x73	; 115
    11cc:	71 f0       	breq	.+28     	; 0x11ea <vfprintf+0x10e>
    11ce:	83 35       	cpi	r24, 0x53	; 83
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <vfprintf+0xf8>
    11d2:	57 c0       	rjmp	.+174    	; 0x1282 <vfprintf+0x1a6>
    11d4:	21 c0       	rjmp	.+66     	; 0x1218 <vfprintf+0x13c>
    11d6:	f8 01       	movw	r30, r16
    11d8:	80 81       	ld	r24, Z
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	0e 5f       	subi	r16, 0xFE	; 254
    11de:	1f 4f       	sbci	r17, 0xFF	; 255
    11e0:	44 24       	eor	r4, r4
    11e2:	43 94       	inc	r4
    11e4:	51 2c       	mov	r5, r1
    11e6:	54 01       	movw	r10, r8
    11e8:	14 c0       	rjmp	.+40     	; 0x1212 <vfprintf+0x136>
    11ea:	38 01       	movw	r6, r16
    11ec:	f2 e0       	ldi	r31, 0x02	; 2
    11ee:	6f 0e       	add	r6, r31
    11f0:	71 1c       	adc	r7, r1
    11f2:	f8 01       	movw	r30, r16
    11f4:	a0 80       	ld	r10, Z
    11f6:	b1 80       	ldd	r11, Z+1	; 0x01
    11f8:	26 ff       	sbrs	r18, 6
    11fa:	03 c0       	rjmp	.+6      	; 0x1202 <vfprintf+0x126>
    11fc:	65 2d       	mov	r22, r5
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <vfprintf+0x12a>
    1202:	6f ef       	ldi	r22, 0xFF	; 255
    1204:	7f ef       	ldi	r23, 0xFF	; 255
    1206:	c5 01       	movw	r24, r10
    1208:	2c 87       	std	Y+12, r18	; 0x0c
    120a:	36 d1       	rcall	.+620    	; 0x1478 <strnlen>
    120c:	2c 01       	movw	r4, r24
    120e:	83 01       	movw	r16, r6
    1210:	2c 85       	ldd	r18, Y+12	; 0x0c
    1212:	2f 77       	andi	r18, 0x7F	; 127
    1214:	22 2e       	mov	r2, r18
    1216:	16 c0       	rjmp	.+44     	; 0x1244 <vfprintf+0x168>
    1218:	38 01       	movw	r6, r16
    121a:	f2 e0       	ldi	r31, 0x02	; 2
    121c:	6f 0e       	add	r6, r31
    121e:	71 1c       	adc	r7, r1
    1220:	f8 01       	movw	r30, r16
    1222:	a0 80       	ld	r10, Z
    1224:	b1 80       	ldd	r11, Z+1	; 0x01
    1226:	26 ff       	sbrs	r18, 6
    1228:	03 c0       	rjmp	.+6      	; 0x1230 <vfprintf+0x154>
    122a:	65 2d       	mov	r22, r5
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <vfprintf+0x158>
    1230:	6f ef       	ldi	r22, 0xFF	; 255
    1232:	7f ef       	ldi	r23, 0xFF	; 255
    1234:	c5 01       	movw	r24, r10
    1236:	2c 87       	std	Y+12, r18	; 0x0c
    1238:	14 d1       	rcall	.+552    	; 0x1462 <strnlen_P>
    123a:	2c 01       	movw	r4, r24
    123c:	2c 85       	ldd	r18, Y+12	; 0x0c
    123e:	20 68       	ori	r18, 0x80	; 128
    1240:	22 2e       	mov	r2, r18
    1242:	83 01       	movw	r16, r6
    1244:	23 fc       	sbrc	r2, 3
    1246:	19 c0       	rjmp	.+50     	; 0x127a <vfprintf+0x19e>
    1248:	83 2d       	mov	r24, r3
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	48 16       	cp	r4, r24
    124e:	59 06       	cpc	r5, r25
    1250:	a0 f4       	brcc	.+40     	; 0x127a <vfprintf+0x19e>
    1252:	b7 01       	movw	r22, r14
    1254:	80 e2       	ldi	r24, 0x20	; 32
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	1a d1       	rcall	.+564    	; 0x148e <fputc>
    125a:	3a 94       	dec	r3
    125c:	f5 cf       	rjmp	.-22     	; 0x1248 <vfprintf+0x16c>
    125e:	f5 01       	movw	r30, r10
    1260:	27 fc       	sbrc	r2, 7
    1262:	85 91       	lpm	r24, Z+
    1264:	27 fe       	sbrs	r2, 7
    1266:	81 91       	ld	r24, Z+
    1268:	5f 01       	movw	r10, r30
    126a:	b7 01       	movw	r22, r14
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0f d1       	rcall	.+542    	; 0x148e <fputc>
    1270:	31 10       	cpse	r3, r1
    1272:	3a 94       	dec	r3
    1274:	f1 e0       	ldi	r31, 0x01	; 1
    1276:	4f 1a       	sub	r4, r31
    1278:	51 08       	sbc	r5, r1
    127a:	41 14       	cp	r4, r1
    127c:	51 04       	cpc	r5, r1
    127e:	79 f7       	brne	.-34     	; 0x125e <vfprintf+0x182>
    1280:	de c0       	rjmp	.+444    	; 0x143e <vfprintf+0x362>
    1282:	84 36       	cpi	r24, 0x64	; 100
    1284:	11 f0       	breq	.+4      	; 0x128a <vfprintf+0x1ae>
    1286:	89 36       	cpi	r24, 0x69	; 105
    1288:	31 f5       	brne	.+76     	; 0x12d6 <vfprintf+0x1fa>
    128a:	f8 01       	movw	r30, r16
    128c:	27 ff       	sbrs	r18, 7
    128e:	07 c0       	rjmp	.+14     	; 0x129e <vfprintf+0x1c2>
    1290:	60 81       	ld	r22, Z
    1292:	71 81       	ldd	r23, Z+1	; 0x01
    1294:	82 81       	ldd	r24, Z+2	; 0x02
    1296:	93 81       	ldd	r25, Z+3	; 0x03
    1298:	0c 5f       	subi	r16, 0xFC	; 252
    129a:	1f 4f       	sbci	r17, 0xFF	; 255
    129c:	08 c0       	rjmp	.+16     	; 0x12ae <vfprintf+0x1d2>
    129e:	60 81       	ld	r22, Z
    12a0:	71 81       	ldd	r23, Z+1	; 0x01
    12a2:	88 27       	eor	r24, r24
    12a4:	77 fd       	sbrc	r23, 7
    12a6:	80 95       	com	r24
    12a8:	98 2f       	mov	r25, r24
    12aa:	0e 5f       	subi	r16, 0xFE	; 254
    12ac:	1f 4f       	sbci	r17, 0xFF	; 255
    12ae:	2f 76       	andi	r18, 0x6F	; 111
    12b0:	b2 2e       	mov	r11, r18
    12b2:	97 ff       	sbrs	r25, 7
    12b4:	09 c0       	rjmp	.+18     	; 0x12c8 <vfprintf+0x1ec>
    12b6:	90 95       	com	r25
    12b8:	80 95       	com	r24
    12ba:	70 95       	com	r23
    12bc:	61 95       	neg	r22
    12be:	7f 4f       	sbci	r23, 0xFF	; 255
    12c0:	8f 4f       	sbci	r24, 0xFF	; 255
    12c2:	9f 4f       	sbci	r25, 0xFF	; 255
    12c4:	20 68       	ori	r18, 0x80	; 128
    12c6:	b2 2e       	mov	r11, r18
    12c8:	2a e0       	ldi	r18, 0x0A	; 10
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	a4 01       	movw	r20, r8
    12ce:	11 d1       	rcall	.+546    	; 0x14f2 <__ultoa_invert>
    12d0:	a8 2e       	mov	r10, r24
    12d2:	a8 18       	sub	r10, r8
    12d4:	43 c0       	rjmp	.+134    	; 0x135c <vfprintf+0x280>
    12d6:	85 37       	cpi	r24, 0x75	; 117
    12d8:	29 f4       	brne	.+10     	; 0x12e4 <vfprintf+0x208>
    12da:	2f 7e       	andi	r18, 0xEF	; 239
    12dc:	b2 2e       	mov	r11, r18
    12de:	2a e0       	ldi	r18, 0x0A	; 10
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	25 c0       	rjmp	.+74     	; 0x132e <vfprintf+0x252>
    12e4:	f2 2f       	mov	r31, r18
    12e6:	f9 7f       	andi	r31, 0xF9	; 249
    12e8:	bf 2e       	mov	r11, r31
    12ea:	8f 36       	cpi	r24, 0x6F	; 111
    12ec:	c1 f0       	breq	.+48     	; 0x131e <vfprintf+0x242>
    12ee:	18 f4       	brcc	.+6      	; 0x12f6 <vfprintf+0x21a>
    12f0:	88 35       	cpi	r24, 0x58	; 88
    12f2:	79 f0       	breq	.+30     	; 0x1312 <vfprintf+0x236>
    12f4:	ad c0       	rjmp	.+346    	; 0x1450 <vfprintf+0x374>
    12f6:	80 37       	cpi	r24, 0x70	; 112
    12f8:	19 f0       	breq	.+6      	; 0x1300 <vfprintf+0x224>
    12fa:	88 37       	cpi	r24, 0x78	; 120
    12fc:	21 f0       	breq	.+8      	; 0x1306 <vfprintf+0x22a>
    12fe:	a8 c0       	rjmp	.+336    	; 0x1450 <vfprintf+0x374>
    1300:	2f 2f       	mov	r18, r31
    1302:	20 61       	ori	r18, 0x10	; 16
    1304:	b2 2e       	mov	r11, r18
    1306:	b4 fe       	sbrs	r11, 4
    1308:	0d c0       	rjmp	.+26     	; 0x1324 <vfprintf+0x248>
    130a:	8b 2d       	mov	r24, r11
    130c:	84 60       	ori	r24, 0x04	; 4
    130e:	b8 2e       	mov	r11, r24
    1310:	09 c0       	rjmp	.+18     	; 0x1324 <vfprintf+0x248>
    1312:	24 ff       	sbrs	r18, 4
    1314:	0a c0       	rjmp	.+20     	; 0x132a <vfprintf+0x24e>
    1316:	9f 2f       	mov	r25, r31
    1318:	96 60       	ori	r25, 0x06	; 6
    131a:	b9 2e       	mov	r11, r25
    131c:	06 c0       	rjmp	.+12     	; 0x132a <vfprintf+0x24e>
    131e:	28 e0       	ldi	r18, 0x08	; 8
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	05 c0       	rjmp	.+10     	; 0x132e <vfprintf+0x252>
    1324:	20 e1       	ldi	r18, 0x10	; 16
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	02 c0       	rjmp	.+4      	; 0x132e <vfprintf+0x252>
    132a:	20 e1       	ldi	r18, 0x10	; 16
    132c:	32 e0       	ldi	r19, 0x02	; 2
    132e:	f8 01       	movw	r30, r16
    1330:	b7 fe       	sbrs	r11, 7
    1332:	07 c0       	rjmp	.+14     	; 0x1342 <vfprintf+0x266>
    1334:	60 81       	ld	r22, Z
    1336:	71 81       	ldd	r23, Z+1	; 0x01
    1338:	82 81       	ldd	r24, Z+2	; 0x02
    133a:	93 81       	ldd	r25, Z+3	; 0x03
    133c:	0c 5f       	subi	r16, 0xFC	; 252
    133e:	1f 4f       	sbci	r17, 0xFF	; 255
    1340:	06 c0       	rjmp	.+12     	; 0x134e <vfprintf+0x272>
    1342:	60 81       	ld	r22, Z
    1344:	71 81       	ldd	r23, Z+1	; 0x01
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 5f       	subi	r16, 0xFE	; 254
    134c:	1f 4f       	sbci	r17, 0xFF	; 255
    134e:	a4 01       	movw	r20, r8
    1350:	d0 d0       	rcall	.+416    	; 0x14f2 <__ultoa_invert>
    1352:	a8 2e       	mov	r10, r24
    1354:	a8 18       	sub	r10, r8
    1356:	fb 2d       	mov	r31, r11
    1358:	ff 77       	andi	r31, 0x7F	; 127
    135a:	bf 2e       	mov	r11, r31
    135c:	b6 fe       	sbrs	r11, 6
    135e:	0b c0       	rjmp	.+22     	; 0x1376 <vfprintf+0x29a>
    1360:	2b 2d       	mov	r18, r11
    1362:	2e 7f       	andi	r18, 0xFE	; 254
    1364:	a5 14       	cp	r10, r5
    1366:	50 f4       	brcc	.+20     	; 0x137c <vfprintf+0x2a0>
    1368:	b4 fe       	sbrs	r11, 4
    136a:	0a c0       	rjmp	.+20     	; 0x1380 <vfprintf+0x2a4>
    136c:	b2 fc       	sbrc	r11, 2
    136e:	08 c0       	rjmp	.+16     	; 0x1380 <vfprintf+0x2a4>
    1370:	2b 2d       	mov	r18, r11
    1372:	2e 7e       	andi	r18, 0xEE	; 238
    1374:	05 c0       	rjmp	.+10     	; 0x1380 <vfprintf+0x2a4>
    1376:	7a 2c       	mov	r7, r10
    1378:	2b 2d       	mov	r18, r11
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <vfprintf+0x2a6>
    137c:	7a 2c       	mov	r7, r10
    137e:	01 c0       	rjmp	.+2      	; 0x1382 <vfprintf+0x2a6>
    1380:	75 2c       	mov	r7, r5
    1382:	24 ff       	sbrs	r18, 4
    1384:	0d c0       	rjmp	.+26     	; 0x13a0 <vfprintf+0x2c4>
    1386:	fe 01       	movw	r30, r28
    1388:	ea 0d       	add	r30, r10
    138a:	f1 1d       	adc	r31, r1
    138c:	80 81       	ld	r24, Z
    138e:	80 33       	cpi	r24, 0x30	; 48
    1390:	11 f4       	brne	.+4      	; 0x1396 <vfprintf+0x2ba>
    1392:	29 7e       	andi	r18, 0xE9	; 233
    1394:	09 c0       	rjmp	.+18     	; 0x13a8 <vfprintf+0x2cc>
    1396:	22 ff       	sbrs	r18, 2
    1398:	06 c0       	rjmp	.+12     	; 0x13a6 <vfprintf+0x2ca>
    139a:	73 94       	inc	r7
    139c:	73 94       	inc	r7
    139e:	04 c0       	rjmp	.+8      	; 0x13a8 <vfprintf+0x2cc>
    13a0:	82 2f       	mov	r24, r18
    13a2:	86 78       	andi	r24, 0x86	; 134
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <vfprintf+0x2cc>
    13a6:	73 94       	inc	r7
    13a8:	23 fd       	sbrc	r18, 3
    13aa:	12 c0       	rjmp	.+36     	; 0x13d0 <vfprintf+0x2f4>
    13ac:	20 ff       	sbrs	r18, 0
    13ae:	06 c0       	rjmp	.+12     	; 0x13bc <vfprintf+0x2e0>
    13b0:	5a 2c       	mov	r5, r10
    13b2:	73 14       	cp	r7, r3
    13b4:	18 f4       	brcc	.+6      	; 0x13bc <vfprintf+0x2e0>
    13b6:	53 0c       	add	r5, r3
    13b8:	57 18       	sub	r5, r7
    13ba:	73 2c       	mov	r7, r3
    13bc:	73 14       	cp	r7, r3
    13be:	60 f4       	brcc	.+24     	; 0x13d8 <vfprintf+0x2fc>
    13c0:	b7 01       	movw	r22, r14
    13c2:	80 e2       	ldi	r24, 0x20	; 32
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	2c 87       	std	Y+12, r18	; 0x0c
    13c8:	62 d0       	rcall	.+196    	; 0x148e <fputc>
    13ca:	73 94       	inc	r7
    13cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    13ce:	f6 cf       	rjmp	.-20     	; 0x13bc <vfprintf+0x2e0>
    13d0:	73 14       	cp	r7, r3
    13d2:	10 f4       	brcc	.+4      	; 0x13d8 <vfprintf+0x2fc>
    13d4:	37 18       	sub	r3, r7
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <vfprintf+0x2fe>
    13d8:	31 2c       	mov	r3, r1
    13da:	24 ff       	sbrs	r18, 4
    13dc:	11 c0       	rjmp	.+34     	; 0x1400 <vfprintf+0x324>
    13de:	b7 01       	movw	r22, r14
    13e0:	80 e3       	ldi	r24, 0x30	; 48
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	2c 87       	std	Y+12, r18	; 0x0c
    13e6:	53 d0       	rcall	.+166    	; 0x148e <fputc>
    13e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    13ea:	22 ff       	sbrs	r18, 2
    13ec:	16 c0       	rjmp	.+44     	; 0x141a <vfprintf+0x33e>
    13ee:	21 ff       	sbrs	r18, 1
    13f0:	03 c0       	rjmp	.+6      	; 0x13f8 <vfprintf+0x31c>
    13f2:	88 e5       	ldi	r24, 0x58	; 88
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <vfprintf+0x320>
    13f8:	88 e7       	ldi	r24, 0x78	; 120
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	b7 01       	movw	r22, r14
    13fe:	0c c0       	rjmp	.+24     	; 0x1418 <vfprintf+0x33c>
    1400:	82 2f       	mov	r24, r18
    1402:	86 78       	andi	r24, 0x86	; 134
    1404:	51 f0       	breq	.+20     	; 0x141a <vfprintf+0x33e>
    1406:	21 fd       	sbrc	r18, 1
    1408:	02 c0       	rjmp	.+4      	; 0x140e <vfprintf+0x332>
    140a:	80 e2       	ldi	r24, 0x20	; 32
    140c:	01 c0       	rjmp	.+2      	; 0x1410 <vfprintf+0x334>
    140e:	8b e2       	ldi	r24, 0x2B	; 43
    1410:	27 fd       	sbrc	r18, 7
    1412:	8d e2       	ldi	r24, 0x2D	; 45
    1414:	b7 01       	movw	r22, r14
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	3a d0       	rcall	.+116    	; 0x148e <fputc>
    141a:	a5 14       	cp	r10, r5
    141c:	30 f4       	brcc	.+12     	; 0x142a <vfprintf+0x34e>
    141e:	b7 01       	movw	r22, r14
    1420:	80 e3       	ldi	r24, 0x30	; 48
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	34 d0       	rcall	.+104    	; 0x148e <fputc>
    1426:	5a 94       	dec	r5
    1428:	f8 cf       	rjmp	.-16     	; 0x141a <vfprintf+0x33e>
    142a:	aa 94       	dec	r10
    142c:	f4 01       	movw	r30, r8
    142e:	ea 0d       	add	r30, r10
    1430:	f1 1d       	adc	r31, r1
    1432:	80 81       	ld	r24, Z
    1434:	b7 01       	movw	r22, r14
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	2a d0       	rcall	.+84     	; 0x148e <fputc>
    143a:	a1 10       	cpse	r10, r1
    143c:	f6 cf       	rjmp	.-20     	; 0x142a <vfprintf+0x34e>
    143e:	33 20       	and	r3, r3
    1440:	09 f4       	brne	.+2      	; 0x1444 <vfprintf+0x368>
    1442:	5d ce       	rjmp	.-838    	; 0x10fe <vfprintf+0x22>
    1444:	b7 01       	movw	r22, r14
    1446:	80 e2       	ldi	r24, 0x20	; 32
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	21 d0       	rcall	.+66     	; 0x148e <fputc>
    144c:	3a 94       	dec	r3
    144e:	f7 cf       	rjmp	.-18     	; 0x143e <vfprintf+0x362>
    1450:	f7 01       	movw	r30, r14
    1452:	86 81       	ldd	r24, Z+6	; 0x06
    1454:	97 81       	ldd	r25, Z+7	; 0x07
    1456:	02 c0       	rjmp	.+4      	; 0x145c <vfprintf+0x380>
    1458:	8f ef       	ldi	r24, 0xFF	; 255
    145a:	9f ef       	ldi	r25, 0xFF	; 255
    145c:	2c 96       	adiw	r28, 0x0c	; 12
    145e:	e2 e1       	ldi	r30, 0x12	; 18
    1460:	c2 c0       	rjmp	.+388    	; 0x15e6 <__epilogue_restores__>

00001462 <strnlen_P>:
    1462:	fc 01       	movw	r30, r24
    1464:	05 90       	lpm	r0, Z+
    1466:	61 50       	subi	r22, 0x01	; 1
    1468:	70 40       	sbci	r23, 0x00	; 0
    146a:	01 10       	cpse	r0, r1
    146c:	d8 f7       	brcc	.-10     	; 0x1464 <strnlen_P+0x2>
    146e:	80 95       	com	r24
    1470:	90 95       	com	r25
    1472:	8e 0f       	add	r24, r30
    1474:	9f 1f       	adc	r25, r31
    1476:	08 95       	ret

00001478 <strnlen>:
    1478:	fc 01       	movw	r30, r24
    147a:	61 50       	subi	r22, 0x01	; 1
    147c:	70 40       	sbci	r23, 0x00	; 0
    147e:	01 90       	ld	r0, Z+
    1480:	01 10       	cpse	r0, r1
    1482:	d8 f7       	brcc	.-10     	; 0x147a <strnlen+0x2>
    1484:	80 95       	com	r24
    1486:	90 95       	com	r25
    1488:	8e 0f       	add	r24, r30
    148a:	9f 1f       	adc	r25, r31
    148c:	08 95       	ret

0000148e <fputc>:
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	18 2f       	mov	r17, r24
    1498:	09 2f       	mov	r16, r25
    149a:	eb 01       	movw	r28, r22
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	81 fd       	sbrc	r24, 1
    14a0:	03 c0       	rjmp	.+6      	; 0x14a8 <fputc+0x1a>
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	9f ef       	ldi	r25, 0xFF	; 255
    14a6:	20 c0       	rjmp	.+64     	; 0x14e8 <fputc+0x5a>
    14a8:	82 ff       	sbrs	r24, 2
    14aa:	10 c0       	rjmp	.+32     	; 0x14cc <fputc+0x3e>
    14ac:	4e 81       	ldd	r20, Y+6	; 0x06
    14ae:	5f 81       	ldd	r21, Y+7	; 0x07
    14b0:	2c 81       	ldd	r18, Y+4	; 0x04
    14b2:	3d 81       	ldd	r19, Y+5	; 0x05
    14b4:	42 17       	cp	r20, r18
    14b6:	53 07       	cpc	r21, r19
    14b8:	7c f4       	brge	.+30     	; 0x14d8 <fputc+0x4a>
    14ba:	e8 81       	ld	r30, Y
    14bc:	f9 81       	ldd	r31, Y+1	; 0x01
    14be:	9f 01       	movw	r18, r30
    14c0:	2f 5f       	subi	r18, 0xFF	; 255
    14c2:	3f 4f       	sbci	r19, 0xFF	; 255
    14c4:	39 83       	std	Y+1, r19	; 0x01
    14c6:	28 83       	st	Y, r18
    14c8:	10 83       	st	Z, r17
    14ca:	06 c0       	rjmp	.+12     	; 0x14d8 <fputc+0x4a>
    14cc:	e8 85       	ldd	r30, Y+8	; 0x08
    14ce:	f9 85       	ldd	r31, Y+9	; 0x09
    14d0:	81 2f       	mov	r24, r17
    14d2:	09 95       	icall
    14d4:	89 2b       	or	r24, r25
    14d6:	29 f7       	brne	.-54     	; 0x14a2 <fputc+0x14>
    14d8:	2e 81       	ldd	r18, Y+6	; 0x06
    14da:	3f 81       	ldd	r19, Y+7	; 0x07
    14dc:	2f 5f       	subi	r18, 0xFF	; 255
    14de:	3f 4f       	sbci	r19, 0xFF	; 255
    14e0:	3f 83       	std	Y+7, r19	; 0x07
    14e2:	2e 83       	std	Y+6, r18	; 0x06
    14e4:	81 2f       	mov	r24, r17
    14e6:	90 2f       	mov	r25, r16
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	08 95       	ret

000014f2 <__ultoa_invert>:
    14f2:	fa 01       	movw	r30, r20
    14f4:	aa 27       	eor	r26, r26
    14f6:	28 30       	cpi	r18, 0x08	; 8
    14f8:	51 f1       	breq	.+84     	; 0x154e <__ultoa_invert+0x5c>
    14fa:	20 31       	cpi	r18, 0x10	; 16
    14fc:	81 f1       	breq	.+96     	; 0x155e <__ultoa_invert+0x6c>
    14fe:	e8 94       	clt
    1500:	6f 93       	push	r22
    1502:	6e 7f       	andi	r22, 0xFE	; 254
    1504:	6e 5f       	subi	r22, 0xFE	; 254
    1506:	7f 4f       	sbci	r23, 0xFF	; 255
    1508:	8f 4f       	sbci	r24, 0xFF	; 255
    150a:	9f 4f       	sbci	r25, 0xFF	; 255
    150c:	af 4f       	sbci	r26, 0xFF	; 255
    150e:	b1 e0       	ldi	r27, 0x01	; 1
    1510:	3e d0       	rcall	.+124    	; 0x158e <__ultoa_invert+0x9c>
    1512:	b4 e0       	ldi	r27, 0x04	; 4
    1514:	3c d0       	rcall	.+120    	; 0x158e <__ultoa_invert+0x9c>
    1516:	67 0f       	add	r22, r23
    1518:	78 1f       	adc	r23, r24
    151a:	89 1f       	adc	r24, r25
    151c:	9a 1f       	adc	r25, r26
    151e:	a1 1d       	adc	r26, r1
    1520:	68 0f       	add	r22, r24
    1522:	79 1f       	adc	r23, r25
    1524:	8a 1f       	adc	r24, r26
    1526:	91 1d       	adc	r25, r1
    1528:	a1 1d       	adc	r26, r1
    152a:	6a 0f       	add	r22, r26
    152c:	71 1d       	adc	r23, r1
    152e:	81 1d       	adc	r24, r1
    1530:	91 1d       	adc	r25, r1
    1532:	a1 1d       	adc	r26, r1
    1534:	20 d0       	rcall	.+64     	; 0x1576 <__ultoa_invert+0x84>
    1536:	09 f4       	brne	.+2      	; 0x153a <__ultoa_invert+0x48>
    1538:	68 94       	set
    153a:	3f 91       	pop	r19
    153c:	2a e0       	ldi	r18, 0x0A	; 10
    153e:	26 9f       	mul	r18, r22
    1540:	11 24       	eor	r1, r1
    1542:	30 19       	sub	r19, r0
    1544:	30 5d       	subi	r19, 0xD0	; 208
    1546:	31 93       	st	Z+, r19
    1548:	de f6       	brtc	.-74     	; 0x1500 <__ultoa_invert+0xe>
    154a:	cf 01       	movw	r24, r30
    154c:	08 95       	ret
    154e:	46 2f       	mov	r20, r22
    1550:	47 70       	andi	r20, 0x07	; 7
    1552:	40 5d       	subi	r20, 0xD0	; 208
    1554:	41 93       	st	Z+, r20
    1556:	b3 e0       	ldi	r27, 0x03	; 3
    1558:	0f d0       	rcall	.+30     	; 0x1578 <__ultoa_invert+0x86>
    155a:	c9 f7       	brne	.-14     	; 0x154e <__ultoa_invert+0x5c>
    155c:	f6 cf       	rjmp	.-20     	; 0x154a <__ultoa_invert+0x58>
    155e:	46 2f       	mov	r20, r22
    1560:	4f 70       	andi	r20, 0x0F	; 15
    1562:	40 5d       	subi	r20, 0xD0	; 208
    1564:	4a 33       	cpi	r20, 0x3A	; 58
    1566:	18 f0       	brcs	.+6      	; 0x156e <__ultoa_invert+0x7c>
    1568:	49 5d       	subi	r20, 0xD9	; 217
    156a:	31 fd       	sbrc	r19, 1
    156c:	40 52       	subi	r20, 0x20	; 32
    156e:	41 93       	st	Z+, r20
    1570:	02 d0       	rcall	.+4      	; 0x1576 <__ultoa_invert+0x84>
    1572:	a9 f7       	brne	.-22     	; 0x155e <__ultoa_invert+0x6c>
    1574:	ea cf       	rjmp	.-44     	; 0x154a <__ultoa_invert+0x58>
    1576:	b4 e0       	ldi	r27, 0x04	; 4
    1578:	a6 95       	lsr	r26
    157a:	97 95       	ror	r25
    157c:	87 95       	ror	r24
    157e:	77 95       	ror	r23
    1580:	67 95       	ror	r22
    1582:	ba 95       	dec	r27
    1584:	c9 f7       	brne	.-14     	; 0x1578 <__ultoa_invert+0x86>
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	61 05       	cpc	r22, r1
    158a:	71 05       	cpc	r23, r1
    158c:	08 95       	ret
    158e:	9b 01       	movw	r18, r22
    1590:	ac 01       	movw	r20, r24
    1592:	0a 2e       	mov	r0, r26
    1594:	06 94       	lsr	r0
    1596:	57 95       	ror	r21
    1598:	47 95       	ror	r20
    159a:	37 95       	ror	r19
    159c:	27 95       	ror	r18
    159e:	ba 95       	dec	r27
    15a0:	c9 f7       	brne	.-14     	; 0x1594 <__ultoa_invert+0xa2>
    15a2:	62 0f       	add	r22, r18
    15a4:	73 1f       	adc	r23, r19
    15a6:	84 1f       	adc	r24, r20
    15a8:	95 1f       	adc	r25, r21
    15aa:	a0 1d       	adc	r26, r0
    15ac:	08 95       	ret

000015ae <__prologue_saves__>:
    15ae:	2f 92       	push	r2
    15b0:	3f 92       	push	r3
    15b2:	4f 92       	push	r4
    15b4:	5f 92       	push	r5
    15b6:	6f 92       	push	r6
    15b8:	7f 92       	push	r7
    15ba:	8f 92       	push	r8
    15bc:	9f 92       	push	r9
    15be:	af 92       	push	r10
    15c0:	bf 92       	push	r11
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	ca 1b       	sub	r28, r26
    15d8:	db 0b       	sbc	r29, r27
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	09 94       	ijmp

000015e6 <__epilogue_restores__>:
    15e6:	2a 88       	ldd	r2, Y+18	; 0x12
    15e8:	39 88       	ldd	r3, Y+17	; 0x11
    15ea:	48 88       	ldd	r4, Y+16	; 0x10
    15ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    15ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    15f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    15f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    15f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    15f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    15f8:	b9 84       	ldd	r11, Y+9	; 0x09
    15fa:	c8 84       	ldd	r12, Y+8	; 0x08
    15fc:	df 80       	ldd	r13, Y+7	; 0x07
    15fe:	ee 80       	ldd	r14, Y+6	; 0x06
    1600:	fd 80       	ldd	r15, Y+5	; 0x05
    1602:	0c 81       	ldd	r16, Y+4	; 0x04
    1604:	1b 81       	ldd	r17, Y+3	; 0x03
    1606:	aa 81       	ldd	r26, Y+2	; 0x02
    1608:	b9 81       	ldd	r27, Y+1	; 0x01
    160a:	ce 0f       	add	r28, r30
    160c:	d1 1d       	adc	r29, r1
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	ed 01       	movw	r28, r26
    161a:	08 95       	ret

0000161c <_exit>:
    161c:	f8 94       	cli

0000161e <__stop_program>:
    161e:	ff cf       	rjmp	.-2      	; 0x161e <__stop_program>
