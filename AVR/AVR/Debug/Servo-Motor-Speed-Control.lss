
Servo-Motor-Speed-Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000011fc  00001290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080011a  0080011a  000012aa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012aa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00001306  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001332  00000000  00000000  00001436  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f8  00000000  00000000  00002768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c3  00000000  00000000  00002e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000428  00000000  00000000  00003424  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046e  00000000  00000000  0000384c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f18  00000000  00000000  00003cba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00004bd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	23 c0       	rjmp	.+70     	; 0x48 <__ctors_end>
       2:	3d c0       	rjmp	.+122    	; 0x7e <__bad_interrupt>
       4:	3c c0       	rjmp	.+120    	; 0x7e <__bad_interrupt>
       6:	3b c0       	rjmp	.+118    	; 0x7e <__bad_interrupt>
       8:	2e c2       	rjmp	.+1116   	; 0x466 <__vector_4>
       a:	39 c0       	rjmp	.+114    	; 0x7e <__bad_interrupt>
       c:	38 c0       	rjmp	.+112    	; 0x7e <__bad_interrupt>
       e:	37 c0       	rjmp	.+110    	; 0x7e <__bad_interrupt>
      10:	36 c0       	rjmp	.+108    	; 0x7e <__bad_interrupt>
      12:	35 c0       	rjmp	.+106    	; 0x7e <__bad_interrupt>
      14:	34 c0       	rjmp	.+104    	; 0x7e <__bad_interrupt>
      16:	33 c0       	rjmp	.+102    	; 0x7e <__bad_interrupt>
      18:	32 c0       	rjmp	.+100    	; 0x7e <__bad_interrupt>
      1a:	31 c0       	rjmp	.+98     	; 0x7e <__bad_interrupt>
      1c:	30 c0       	rjmp	.+96     	; 0x7e <__bad_interrupt>
      1e:	2f c0       	rjmp	.+94     	; 0x7e <__bad_interrupt>
      20:	2e c0       	rjmp	.+92     	; 0x7e <__bad_interrupt>
      22:	2d c0       	rjmp	.+90     	; 0x7e <__bad_interrupt>
      24:	98 c2       	rjmp	.+1328   	; 0x556 <__vector_18>
      26:	2b c0       	rjmp	.+86     	; 0x7e <__bad_interrupt>
      28:	2a c0       	rjmp	.+84     	; 0x7e <__bad_interrupt>
      2a:	29 c0       	rjmp	.+82     	; 0x7e <__bad_interrupt>
      2c:	28 c0       	rjmp	.+80     	; 0x7e <__bad_interrupt>
      2e:	27 c0       	rjmp	.+78     	; 0x7e <__bad_interrupt>
      30:	26 c0       	rjmp	.+76     	; 0x7e <__bad_interrupt>
      32:	25 c0       	rjmp	.+74     	; 0x7e <__bad_interrupt>
      34:	1e c3       	rjmp	.+1596   	; 0x672 <main+0x6a>
      36:	21 c3       	rjmp	.+1602   	; 0x67a <main+0x72>
      38:	24 c3       	rjmp	.+1608   	; 0x682 <main+0x7a>
      3a:	27 c3       	rjmp	.+1614   	; 0x68a <main+0x82>
      3c:	2a c3       	rjmp	.+1620   	; 0x692 <main+0x8a>
      3e:	2d c3       	rjmp	.+1626   	; 0x69a <main+0x92>
      40:	30 c3       	rjmp	.+1632   	; 0x6a2 <main+0x9a>
      42:	33 c3       	rjmp	.+1638   	; 0x6aa <main+0xa2>
      44:	36 c3       	rjmp	.+1644   	; 0x6b2 <main+0xaa>
      46:	39 c3       	rjmp	.+1650   	; 0x6ba <main+0xb2>

00000048 <__ctors_end>:
      48:	11 24       	eor	r1, r1
      4a:	1f be       	out	0x3f, r1	; 63
      4c:	cf ef       	ldi	r28, 0xFF	; 255
      4e:	d4 e0       	ldi	r29, 0x04	; 4
      50:	de bf       	out	0x3e, r29	; 62
      52:	cd bf       	out	0x3d, r28	; 61

00000054 <__do_copy_data>:
      54:	11 e0       	ldi	r17, 0x01	; 1
      56:	a0 e0       	ldi	r26, 0x00	; 0
      58:	b1 e0       	ldi	r27, 0x01	; 1
      5a:	ec ef       	ldi	r30, 0xFC	; 252
      5c:	f1 e1       	ldi	r31, 0x11	; 17
      5e:	02 c0       	rjmp	.+4      	; 0x64 <__do_copy_data+0x10>
      60:	05 90       	lpm	r0, Z+
      62:	0d 92       	st	X+, r0
      64:	aa 31       	cpi	r26, 0x1A	; 26
      66:	b1 07       	cpc	r27, r17
      68:	d9 f7       	brne	.-10     	; 0x60 <__do_copy_data+0xc>

0000006a <__do_clear_bss>:
      6a:	21 e0       	ldi	r18, 0x01	; 1
      6c:	aa e1       	ldi	r26, 0x1A	; 26
      6e:	b1 e0       	ldi	r27, 0x01	; 1
      70:	01 c0       	rjmp	.+2      	; 0x74 <.do_clear_bss_start>

00000072 <.do_clear_bss_loop>:
      72:	1d 92       	st	X+, r1

00000074 <.do_clear_bss_start>:
      74:	a7 32       	cpi	r26, 0x27	; 39
      76:	b2 07       	cpc	r27, r18
      78:	e1 f7       	brne	.-8      	; 0x72 <.do_clear_bss_loop>
      7a:	c6 d2       	rcall	.+1420   	; 0x608 <main>
      7c:	bd c8       	rjmp	.-3718   	; 0xfffff1f8 <__eeprom_end+0xff7ef1f8>

0000007e <__bad_interrupt>:
      7e:	c0 cf       	rjmp	.-128    	; 0x0 <__vectors>

00000080 <init_shared_data>:
	unsigned long delta_time;
	unsigned short integral;
	unsigned short error;
} Shared_Data;

void init_shared_data(Shared_Data* shared_ptr){
      80:	fc 01       	movw	r30, r24
	shared_ptr->speed_set = 0;
      82:	11 82       	std	Z+1, r1	; 0x01
      84:	10 82       	st	Z, r1
	shared_ptr->speed_actual = 0;
      86:	13 82       	std	Z+3, r1	; 0x03
      88:	12 82       	std	Z+2, r1	; 0x02
	shared_ptr->curr_rpm = 0;
      8a:	14 82       	std	Z+4, r1	; 0x04
      8c:	15 82       	std	Z+5, r1	; 0x05
      8e:	16 82       	std	Z+6, r1	; 0x06
      90:	17 82       	std	Z+7, r1	; 0x07
	shared_ptr->rpm_avg = 0;
      92:	10 86       	std	Z+8, r1	; 0x08
      94:	11 86       	std	Z+9, r1	; 0x09
      96:	12 86       	std	Z+10, r1	; 0x0a
      98:	13 86       	std	Z+11, r1	; 0x0b
	shared_ptr->delta_time = 0;
      9a:	dc 01       	movw	r26, r24
      9c:	a4 57       	subi	r26, 0x74	; 116
      9e:	bf 4f       	sbci	r27, 0xFF	; 255
      a0:	1d 92       	st	X+, r1
      a2:	1d 92       	st	X+, r1
      a4:	1d 92       	st	X+, r1
      a6:	1c 92       	st	X, r1
      a8:	13 97       	sbiw	r26, 0x03	; 3
	shared_ptr->integral = 0;
      aa:	14 96       	adiw	r26, 0x04	; 4
      ac:	1d 92       	st	X+, r1
      ae:	1c 92       	st	X, r1
	shared_ptr->error = 0;
      b0:	ee 56       	subi	r30, 0x6E	; 110
      b2:	ff 4f       	sbci	r31, 0xFF	; 255
      b4:	11 82       	std	Z+1, r1	; 0x01
      b6:	10 82       	st	Z, r1
      b8:	08 95       	ret

000000ba <calc_latest_rpm>:
}

/*	Calculates the speed between two encoder-interrupts, using fixed point arithmetics.
 *	Qm.n values defined in shared.h
*/
void calc_latest_rpm(Shared_Data* shared_ptr){
      ba:	2f 92       	push	r2
      bc:	3f 92       	push	r3
      be:	4f 92       	push	r4
      c0:	5f 92       	push	r5
      c2:	6f 92       	push	r6
      c4:	7f 92       	push	r7
      c6:	8f 92       	push	r8
      c8:	9f 92       	push	r9
      ca:	af 92       	push	r10
      cc:	bf 92       	push	r11
      ce:	cf 92       	push	r12
      d0:	df 92       	push	r13
      d2:	ef 92       	push	r14
      d4:	ff 92       	push	r15
      d6:	0f 93       	push	r16
      d8:	1f 93       	push	r17
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
      e2:	2c 97       	sbiw	r28, 0x0c	; 12
      e4:	0f b6       	in	r0, 0x3f	; 63
      e6:	f8 94       	cli
      e8:	de bf       	out	0x3e, r29	; 62
      ea:	0f be       	out	0x3f, r0	; 63
      ec:	cd bf       	out	0x3d, r28	; 61
      ee:	9a 87       	std	Y+10, r25	; 0x0a
      f0:	89 87       	std	Y+9, r24	; 0x09
	// scales based on prescaling
	unsigned short prescale = 8;

	unsigned long temp;

	temp = (unsigned long)delta_clk * prescale;
      f2:	80 91 25 01 	lds	r24, 0x0125
      f6:	90 91 26 01 	lds	r25, 0x0126
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	88 0f       	add	r24, r24
     100:	99 1f       	adc	r25, r25
     102:	aa 1f       	adc	r26, r26
     104:	bb 1f       	adc	r27, r27
     106:	88 0f       	add	r24, r24
     108:	99 1f       	adc	r25, r25
     10a:	aa 1f       	adc	r26, r26
     10c:	bb 1f       	adc	r27, r27
	unsigned long long denominator;
	unsigned long long rpm;
	
	delta_time = calc_delta_time(shared_ptr);
	
	delta_time = delta_time << N;
     10e:	88 0f       	add	r24, r24
     110:	99 1f       	adc	r25, r25
     112:	aa 1f       	adc	r26, r26
     114:	bb 1f       	adc	r27, r27
     116:	88 0f       	add	r24, r24
     118:	99 1f       	adc	r25, r25
     11a:	aa 1f       	adc	r26, r26
     11c:	bb 1f       	adc	r27, r27
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	88 0f       	add	r24, r24
     128:	99 1f       	adc	r25, r25
     12a:	aa 1f       	adc	r26, r26
     12c:	bb 1f       	adc	r27, r27
     12e:	9c 01       	movw	r18, r24
     130:	ad 01       	movw	r20, r26
     132:	22 0f       	add	r18, r18
     134:	33 1f       	adc	r19, r19
     136:	44 1f       	adc	r20, r20
     138:	55 1f       	adc	r21, r21
     13a:	29 83       	std	Y+1, r18	; 0x01
     13c:	3a 83       	std	Y+2, r19	; 0x02
     13e:	4b 83       	std	Y+3, r20	; 0x03
     140:	5c 83       	std	Y+4, r21	; 0x04
	S_TO_MIN = S_TO_MIN << N;

	numerator = (unsigned long long)MS_TO_S * S_TO_MIN;
	numerator = numerator >> N;

	denominator = (unsigned long long)delta_rev_inverse * delta_time;
     142:	19 01       	movw	r2, r18
     144:	2a 01       	movw	r4, r20
     146:	33 2d       	mov	r19, r3
     148:	44 2d       	mov	r20, r4
     14a:	55 2d       	mov	r21, r5
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	70 e0       	ldi	r23, 0x00	; 0
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	02 e0       	ldi	r16, 0x02	; 2
     156:	fa d4       	rcall	.+2548   	; 0xb4c <__ashldi3>
     158:	a2 2c       	mov	r10, r2
     15a:	b3 2c       	mov	r11, r3
     15c:	c4 2c       	mov	r12, r4
     15e:	d5 2c       	mov	r13, r5
     160:	e1 2c       	mov	r14, r1
     162:	f1 2c       	mov	r15, r1
     164:	00 e0       	ldi	r16, 0x00	; 0
     166:	10 e0       	ldi	r17, 0x00	; 0
     168:	31 d5       	rcall	.+2658   	; 0xbcc <__subdi3>
     16a:	02 e0       	ldi	r16, 0x02	; 2
     16c:	ef d4       	rcall	.+2526   	; 0xb4c <__ashldi3>
     16e:	00 e0       	ldi	r16, 0x00	; 0
     170:	2d d5       	rcall	.+2650   	; 0xbcc <__subdi3>
     172:	a2 2e       	mov	r10, r18
     174:	b3 2e       	mov	r11, r19
     176:	c4 2e       	mov	r12, r20
     178:	d5 2e       	mov	r13, r21
     17a:	e6 2e       	mov	r14, r22
     17c:	f7 2e       	mov	r15, r23
     17e:	e8 2f       	mov	r30, r24
     180:	19 2f       	mov	r17, r25
     182:	03 e0       	ldi	r16, 0x03	; 3
     184:	e3 d4       	rcall	.+2502   	; 0xb4c <__ashldi3>
     186:	0e 2f       	mov	r16, r30
     188:	21 d5       	rcall	.+2626   	; 0xbcc <__subdi3>
     18a:	02 e0       	ldi	r16, 0x02	; 2
     18c:	df d4       	rcall	.+2494   	; 0xb4c <__ashldi3>
     18e:	a2 2c       	mov	r10, r2
     190:	b3 2c       	mov	r11, r3
     192:	c4 2c       	mov	r12, r4
     194:	d5 2c       	mov	r13, r5
     196:	e1 2c       	mov	r14, r1
     198:	f1 2c       	mov	r15, r1
     19a:	00 e0       	ldi	r16, 0x00	; 0
     19c:	10 e0       	ldi	r17, 0x00	; 0
     19e:	16 d5       	rcall	.+2604   	; 0xbcc <__subdi3>
     1a0:	e2 2f       	mov	r30, r18
     1a2:	f3 2f       	mov	r31, r19
     1a4:	b4 2f       	mov	r27, r20
     1a6:	a5 2f       	mov	r26, r21
     1a8:	6b 87       	std	Y+11, r22	; 0x0b
     1aa:	7c 87       	std	Y+12, r23	; 0x0c
     1ac:	8f 83       	std	Y+7, r24	; 0x07
     1ae:	98 87       	std	Y+8, r25	; 0x08
     1b0:	02 e0       	ldi	r16, 0x02	; 2
     1b2:	cc d4       	rcall	.+2456   	; 0xb4c <__ashldi3>
     1b4:	a2 2e       	mov	r10, r18
     1b6:	b3 2e       	mov	r11, r19
     1b8:	c4 2e       	mov	r12, r20
     1ba:	d5 2e       	mov	r13, r21
     1bc:	e6 2e       	mov	r14, r22
     1be:	f7 2e       	mov	r15, r23
     1c0:	08 2f       	mov	r16, r24
     1c2:	19 2f       	mov	r17, r25
     1c4:	2e 2f       	mov	r18, r30
     1c6:	3f 2f       	mov	r19, r31
     1c8:	4b 2f       	mov	r20, r27
     1ca:	5a 2f       	mov	r21, r26
     1cc:	6b 85       	ldd	r22, Y+11	; 0x0b
     1ce:	7c 85       	ldd	r23, Y+12	; 0x0c
     1d0:	8f 81       	ldd	r24, Y+7	; 0x07
     1d2:	98 85       	ldd	r25, Y+8	; 0x08
     1d4:	f2 d4       	rcall	.+2532   	; 0xbba <__adddi3>
     1d6:	a2 2c       	mov	r10, r2
     1d8:	b3 2c       	mov	r11, r3
     1da:	c4 2c       	mov	r12, r4
     1dc:	d5 2c       	mov	r13, r5
     1de:	e1 2c       	mov	r14, r1
     1e0:	f1 2c       	mov	r15, r1
     1e2:	00 e0       	ldi	r16, 0x00	; 0
     1e4:	10 e0       	ldi	r17, 0x00	; 0
     1e6:	e9 d4       	rcall	.+2514   	; 0xbba <__adddi3>
	denominator = denominator >> N;
     1e8:	04 e0       	ldi	r16, 0x04	; 4
     1ea:	cb d4       	rcall	.+2454   	; 0xb82 <__lshrdi3>
     1ec:	a2 2e       	mov	r10, r18
     1ee:	b3 2e       	mov	r11, r19
     1f0:	c4 2e       	mov	r12, r20
     1f2:	d5 2e       	mov	r13, r21
     1f4:	e6 2e       	mov	r14, r22
     1f6:	f7 2e       	mov	r15, r23
     1f8:	a8 2f       	mov	r26, r24
     1fa:	19 2f       	mov	r17, r25

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1);
     1fc:	01 e0       	ldi	r16, 0x01	; 1
     1fe:	c1 d4       	rcall	.+2434   	; 0xb82 <__lshrdi3>
     200:	49 57       	subi	r20, 0x79	; 121
     202:	5c 46       	sbci	r21, 0x6C	; 108
     204:	6c 4f       	sbci	r22, 0xFC	; 252
     206:	7f 4f       	sbci	r23, 0xFF	; 255
     208:	8f 4f       	sbci	r24, 0xFF	; 255
     20a:	9f 4f       	sbci	r25, 0xFF	; 255
	rpm = rpm / denominator;
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
     20c:	89 84       	ldd	r8, Y+9	; 0x09
     20e:	9a 84       	ldd	r9, Y+10	; 0x0a
     210:	b0 e9       	ldi	r27, 0x90	; 144
     212:	8b 0e       	add	r8, r27
     214:	91 1c       	adc	r9, r1
     216:	49 80       	ldd	r4, Y+1	; 0x01
     218:	5a 80       	ldd	r5, Y+2	; 0x02
     21a:	6b 80       	ldd	r6, Y+3	; 0x03
     21c:	7c 80       	ldd	r7, Y+4	; 0x04
     21e:	68 94       	set
     220:	13 f8       	bld	r1, 3
     222:	76 94       	lsr	r7
     224:	67 94       	ror	r6
     226:	57 94       	ror	r5
     228:	47 94       	ror	r4
     22a:	16 94       	lsr	r1
     22c:	d1 f7       	brne	.-12     	; 0x222 <calc_latest_rpm+0x168>
     22e:	f4 01       	movw	r30, r8
     230:	40 82       	st	Z, r4
     232:	51 82       	std	Z+1, r5	; 0x01
     234:	62 82       	std	Z+2, r6	; 0x02
     236:	73 82       	std	Z+3, r7	; 0x03
	denominator = (unsigned long long)delta_rev_inverse * delta_time;
	denominator = denominator >> N;

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1);
	rpm = rpm / denominator;
     238:	0a 2f       	mov	r16, r26
     23a:	3e d4       	rcall	.+2172   	; 0xab8 <__udivdi3>
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
	shared_ptr->curr_rpm = (unsigned long)rpm >> N;	// Used for debugging
     23c:	82 2f       	mov	r24, r18
     23e:	93 2f       	mov	r25, r19
     240:	a4 2f       	mov	r26, r20
     242:	b5 2f       	mov	r27, r21
     244:	72 2f       	mov	r23, r18
     246:	63 2f       	mov	r22, r19
     248:	54 2f       	mov	r21, r20
     24a:	4b 2f       	mov	r20, r27
     24c:	68 94       	set
     24e:	13 f8       	bld	r1, 3
     250:	b6 95       	lsr	r27
     252:	a7 95       	ror	r26
     254:	97 95       	ror	r25
     256:	87 95       	ror	r24
     258:	16 94       	lsr	r1
     25a:	d1 f7       	brne	.-12     	; 0x250 <calc_latest_rpm+0x196>
     25c:	e9 85       	ldd	r30, Y+9	; 0x09
     25e:	fa 85       	ldd	r31, Y+10	; 0x0a
     260:	80 87       	std	Z+8, r24	; 0x08
     262:	91 87       	std	Z+9, r25	; 0x09
     264:	a2 87       	std	Z+10, r26	; 0x0a
     266:	b3 87       	std	Z+11, r27	; 0x0b
    int i;
    unsigned long temp;

    temp = rpm >> N;

    if(temp < 0 || temp > 150){
     268:	87 39       	cpi	r24, 0x97	; 151
     26a:	91 05       	cpc	r25, r1
     26c:	a1 05       	cpc	r26, r1
     26e:	b1 05       	cpc	r27, r1
     270:	10 f5       	brcc	.+68     	; 0x2b6 <calc_latest_rpm+0x1fc>
     272:	e4 57       	subi	r30, 0x74	; 116
     274:	ff 4f       	sbci	r31, 0xFF	; 255
     276:	2f e1       	ldi	r18, 0x1F	; 31
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	09 85       	ldd	r16, Y+9	; 0x09
     27c:	1a 85       	ldd	r17, Y+10	; 0x0a
        return;
    }

    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
     27e:	21 50       	subi	r18, 0x01	; 1
     280:	31 09       	sbc	r19, r1
     282:	b2 91       	ld	r27, -Z
     284:	a2 91       	ld	r26, -Z
     286:	92 91       	ld	r25, -Z
     288:	82 91       	ld	r24, -Z
     28a:	84 83       	std	Z+4, r24	; 0x04
     28c:	95 83       	std	Z+5, r25	; 0x05
     28e:	a6 83       	std	Z+6, r26	; 0x06
     290:	b7 83       	std	Z+7, r27	; 0x07

    if(temp < 0 || temp > 150){
        return;
    }

    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
     292:	2f 3f       	cpi	r18, 0xFF	; 255
     294:	8f ef       	ldi	r24, 0xFF	; 255
     296:	38 07       	cpc	r19, r24
     298:	91 f7       	brne	.-28     	; 0x27e <calc_latest_rpm+0x1c4>
     29a:	1a 87       	std	Y+10, r17	; 0x0a
     29c:	09 87       	std	Y+9, r16	; 0x09
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
    }
    shared_ptr->rpm_measurements[0] = rpm;
     29e:	d8 01       	movw	r26, r16
     2a0:	50 96       	adiw	r26, 0x10	; 16
     2a2:	7c 93       	st	X, r23
     2a4:	50 97       	sbiw	r26, 0x10	; 16
     2a6:	51 96       	adiw	r26, 0x11	; 17
     2a8:	6c 93       	st	X, r22
     2aa:	51 97       	sbiw	r26, 0x11	; 17
     2ac:	52 96       	adiw	r26, 0x12	; 18
     2ae:	5c 93       	st	X, r21
     2b0:	52 97       	sbiw	r26, 0x12	; 18
     2b2:	53 96       	adiw	r26, 0x13	; 19
     2b4:	4c 93       	st	X, r20
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
	shared_ptr->curr_rpm = (unsigned long)rpm >> N;	// Used for debugging
	insert_rpm(shared_ptr, rpm);
	
}
     2b6:	2c 96       	adiw	r28, 0x0c	; 12
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	1f 91       	pop	r17
     2c8:	0f 91       	pop	r16
     2ca:	ff 90       	pop	r15
     2cc:	ef 90       	pop	r14
     2ce:	df 90       	pop	r13
     2d0:	cf 90       	pop	r12
     2d2:	bf 90       	pop	r11
     2d4:	af 90       	pop	r10
     2d6:	9f 90       	pop	r9
     2d8:	8f 90       	pop	r8
     2da:	7f 90       	pop	r7
     2dc:	6f 90       	pop	r6
     2de:	5f 90       	pop	r5
     2e0:	4f 90       	pop	r4
     2e2:	3f 90       	pop	r3
     2e4:	2f 90       	pop	r2
     2e6:	08 95       	ret

000002e8 <calc_avg_rpm>:


void calc_avg_rpm(Shared_Data* shared_ptr){
     2e8:	2f 92       	push	r2
     2ea:	3f 92       	push	r3
     2ec:	4f 92       	push	r4
     2ee:	5f 92       	push	r5
     2f0:	6f 92       	push	r6
     2f2:	7f 92       	push	r7
     2f4:	8f 92       	push	r8
     2f6:	9f 92       	push	r9
     2f8:	af 92       	push	r10
     2fa:	bf 92       	push	r11
     2fc:	cf 92       	push	r12
     2fe:	df 92       	push	r13
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	ec 01       	movw	r28, r24
     30e:	dc 01       	movw	r26, r24
     310:	50 96       	adiw	r26, 0x10	; 16
     312:	e0 e2       	ldi	r30, 0x20	; 32
     314:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned long long temp = 0;
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	90 e0       	ldi	r25, 0x00	; 0
	int i;
	
	for(i = 0; i < MEASUREMENTS_SIZE; i++){
		temp = temp + shared_ptr->rpm_measurements[i];
     326:	cd 90       	ld	r12, X+
     328:	dd 90       	ld	r13, X+
     32a:	ed 90       	ld	r14, X+
     32c:	fd 90       	ld	r15, X+
     32e:	16 01       	movw	r2, r12
     330:	27 01       	movw	r4, r14
     332:	ac 2c       	mov	r10, r12
     334:	b3 2c       	mov	r11, r3
     336:	c4 2c       	mov	r12, r4
     338:	d5 2c       	mov	r13, r5
     33a:	e1 2c       	mov	r14, r1
     33c:	f1 2c       	mov	r15, r1
     33e:	00 e0       	ldi	r16, 0x00	; 0
     340:	10 e0       	ldi	r17, 0x00	; 0
     342:	3b d4       	rcall	.+2166   	; 0xbba <__adddi3>
     344:	31 97       	sbiw	r30, 0x01	; 1

void calc_avg_rpm(Shared_Data* shared_ptr){
	unsigned long long temp = 0;
	int i;
	
	for(i = 0; i < MEASUREMENTS_SIZE; i++){
     346:	30 97       	sbiw	r30, 0x00	; 0
     348:	71 f7       	brne	.-36     	; 0x326 <calc_avg_rpm+0x3e>
		temp = temp + shared_ptr->rpm_measurements[i];
	}
	
	// Divide by MEASUREMENTS_SIZE (64)
	temp = temp >> 5;
     34a:	05 e0       	ldi	r16, 0x05	; 5
     34c:	1a d4       	rcall	.+2100   	; 0xb82 <__lshrdi3>
	
	// convert back from Qm.n to normal int
	temp = temp >> N;
     34e:	04 e0       	ldi	r16, 0x04	; 4
     350:	18 d4       	rcall	.+2096   	; 0xb82 <__lshrdi3>
	shared_ptr->rpm_avg = temp;
     352:	2c 87       	std	Y+12, r18	; 0x0c
     354:	3d 87       	std	Y+13, r19	; 0x0d
     356:	4e 87       	std	Y+14, r20	; 0x0e
     358:	5f 87       	std	Y+15, r21	; 0x0f
	
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	ff 90       	pop	r15
     364:	ef 90       	pop	r14
     366:	df 90       	pop	r13
     368:	cf 90       	pop	r12
     36a:	bf 90       	pop	r11
     36c:	af 90       	pop	r10
     36e:	9f 90       	pop	r9
     370:	8f 90       	pop	r8
     372:	7f 90       	pop	r7
     374:	6f 90       	pop	r6
     376:	5f 90       	pop	r5
     378:	4f 90       	pop	r4
     37a:	3f 90       	pop	r3
     37c:	2f 90       	pop	r2
     37e:	08 95       	ret

00000380 <control>:


void control(Shared_Data* shared_ptr){
     380:	8f 92       	push	r8
     382:	9f 92       	push	r9
     384:	af 92       	push	r10
     386:	bf 92       	push	r11
     388:	cf 92       	push	r12
     38a:	df 92       	push	r13
     38c:	ef 92       	push	r14
     38e:	ff 92       	push	r15
     390:	0f 93       	push	r16
     392:	fc 01       	movw	r30, r24
	long Kp = 2;
	
	
	long e = (long)shared_ptr->speed_set - (long)shared_ptr->rpm_avg;
     394:	c0 80       	ld	r12, Z
     396:	d1 80       	ldd	r13, Z+1	; 0x01
     398:	e1 2c       	mov	r14, r1
     39a:	f1 2c       	mov	r15, r1
     39c:	44 85       	ldd	r20, Z+12	; 0x0c
     39e:	55 85       	ldd	r21, Z+13	; 0x0d
     3a0:	66 85       	ldd	r22, Z+14	; 0x0e
     3a2:	77 85       	ldd	r23, Z+15	; 0x0f
     3a4:	c4 1a       	sub	r12, r20
     3a6:	d5 0a       	sbc	r13, r21
     3a8:	e6 0a       	sbc	r14, r22
     3aa:	f7 0a       	sbc	r15, r23
	shared_ptr->error = (short)e;	// For debugging
     3ac:	dc 01       	movw	r26, r24
     3ae:	aa 56       	subi	r26, 0x6A	; 106
     3b0:	bf 4f       	sbci	r27, 0xFF	; 255
     3b2:	cd 92       	st	X+, r12
     3b4:	dc 92       	st	X, r13
	
	e = e << N;
     3b6:	cc 0c       	add	r12, r12
     3b8:	dd 1c       	adc	r13, r13
     3ba:	ee 1c       	adc	r14, r14
     3bc:	ff 1c       	adc	r15, r15
     3be:	cc 0c       	add	r12, r12
     3c0:	dd 1c       	adc	r13, r13
     3c2:	ee 1c       	adc	r14, r14
     3c4:	ff 1c       	adc	r15, r15
     3c6:	cc 0c       	add	r12, r12
     3c8:	dd 1c       	adc	r13, r13
     3ca:	ee 1c       	adc	r14, r14
     3cc:	ff 1c       	adc	r15, r15
     3ce:	cc 0c       	add	r12, r12
     3d0:	dd 1c       	adc	r13, r13
     3d2:	ee 1c       	adc	r14, r14
     3d4:	ff 1c       	adc	r15, r15
	
	//long long integral = (long long)Kp * Ki;
	//integral = integral << N;

	
	long long pwm = (long long)e * Kp;
     3d6:	46 01       	movw	r8, r12
     3d8:	57 01       	movw	r10, r14
     3da:	bb 0c       	add	r11, r11
     3dc:	88 08       	sbc	r8, r8
     3de:	98 2c       	mov	r9, r8
     3e0:	54 01       	movw	r10, r8
     3e2:	2c 2d       	mov	r18, r12
     3e4:	3d 2d       	mov	r19, r13
     3e6:	4e 2d       	mov	r20, r14
     3e8:	5f 2d       	mov	r21, r15
     3ea:	68 2d       	mov	r22, r8
     3ec:	78 2d       	mov	r23, r8
     3ee:	88 2d       	mov	r24, r8
     3f0:	98 2d       	mov	r25, r8
     3f2:	05 e0       	ldi	r16, 0x05	; 5
     3f4:	ab d3       	rcall	.+1878   	; 0xb4c <__ashldi3>
	pwm = pwm >> N;
     3f6:	04 e0       	ldi	r16, 0x04	; 4
     3f8:	c2 d3       	rcall	.+1924   	; 0xb7e <__ashrdi3>
	
	
	
	pwm = pwm >> N;	// Convert to regular number
     3fa:	c1 d3       	rcall	.+1922   	; 0xb7e <__ashrdi3>

	shared_ptr->speed_actual = (int)pwm;
     3fc:	22 83       	std	Z+2, r18	; 0x02
     3fe:	33 83       	std	Z+3, r19	; 0x03
     400:	f2 2f       	mov	r31, r18
     402:	b3 2e       	mov	r11, r19
     404:	c4 2e       	mov	r12, r20
     406:	d5 2e       	mov	r13, r21
     408:	e6 2e       	mov	r14, r22
     40a:	f7 2e       	mov	r15, r23
     40c:	b8 2f       	mov	r27, r24
     40e:	a9 2f       	mov	r26, r25
     410:	2f 3f       	cpi	r18, 0xFF	; 255
     412:	31 05       	cpc	r19, r1
     414:	41 05       	cpc	r20, r1
     416:	51 05       	cpc	r21, r1
     418:	61 05       	cpc	r22, r1
     41a:	71 05       	cpc	r23, r1
     41c:	81 05       	cpc	r24, r1
     41e:	91 05       	cpc	r25, r1
     420:	49 f0       	breq	.+18     	; 0x434 <control+0xb4>
     422:	44 f0       	brlt	.+16     	; 0x434 <control+0xb4>
     424:	ff ef       	ldi	r31, 0xFF	; 255
     426:	b1 2c       	mov	r11, r1
     428:	c1 2c       	mov	r12, r1
     42a:	d1 2c       	mov	r13, r1
     42c:	e1 2c       	mov	r14, r1
     42e:	f1 2c       	mov	r15, r1
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	a0 e0       	ldi	r26, 0x00	; 0
     434:	ef 2f       	mov	r30, r31
     436:	2f 2f       	mov	r18, r31
     438:	3b 2d       	mov	r19, r11
     43a:	4c 2d       	mov	r20, r12
     43c:	5d 2d       	mov	r21, r13
     43e:	6e 2d       	mov	r22, r14
     440:	7f 2d       	mov	r23, r15
     442:	8b 2f       	mov	r24, r27
     444:	9a 2f       	mov	r25, r26
     446:	a0 e0       	ldi	r26, 0x00	; 0
     448:	ca d3       	rcall	.+1940   	; 0xbde <__cmpdi2_s8>
     44a:	0c f4       	brge	.+2      	; 0x44e <control+0xce>
     44c:	e0 e0       	ldi	r30, 0x00	; 0
		pwm = 0;		
	}
	else if(pwm > 255){
		pwm = 255;
	}
	OCR0A = pwm;
     44e:	e7 bd       	out	0x27, r30	; 39
	OCR0B = pwm;
     450:	e8 bd       	out	0x28, r30	; 40
	
}
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	df 90       	pop	r13
     45a:	cf 90       	pop	r12
     45c:	bf 90       	pop	r11
     45e:	af 90       	pop	r10
     460:	9f 90       	pop	r9
     462:	8f 90       	pop	r8
     464:	08 95       	ret

00000466 <__vector_4>:

ISR(PCINT1_vect){
     466:	1f 92       	push	r1
     468:	0f 92       	push	r0
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	0f 92       	push	r0
     46e:	11 24       	eor	r1, r1
     470:	2f 93       	push	r18
     472:	3f 93       	push	r19
     474:	4f 93       	push	r20
     476:	5f 93       	push	r21
     478:	8f 93       	push	r24
     47a:	9f 93       	push	r25
	cli();
     47c:	f8 94       	cli
	
	clk_curr = TCNT1;
     47e:	80 91 84 00 	lds	r24, 0x0084
     482:	90 91 85 00 	lds	r25, 0x0085
     486:	90 93 23 01 	sts	0x0123, r25
     48a:	80 93 22 01 	sts	0x0122, r24
extern unsigned short clk_prev;
extern unsigned short clk_elapsed;

static void calc_clk_elapsed(){
	
	if(clk_curr < clk_prev){
     48e:	20 91 1a 01 	lds	r18, 0x011A
     492:	30 91 1b 01 	lds	r19, 0x011B
     496:	82 17       	cp	r24, r18
     498:	93 07       	cpc	r25, r19
     49a:	48 f4       	brcc	.+18     	; 0x4ae <__vector_4+0x48>
		unsigned short temp = 0xFFFF;
		temp = temp - clk_prev;
     49c:	20 95       	com	r18
     49e:	30 95       	com	r19
		temp = temp + clk_curr;
     4a0:	28 0f       	add	r18, r24
     4a2:	39 1f       	adc	r19, r25
		clk_elapsed = temp;
     4a4:	30 93 26 01 	sts	0x0126, r19
     4a8:	20 93 25 01 	sts	0x0125, r18
     4ac:	07 c0       	rjmp	.+14     	; 0x4bc <__vector_4+0x56>
	}
	else{
		clk_elapsed = clk_curr - clk_prev;
     4ae:	ac 01       	movw	r20, r24
     4b0:	42 1b       	sub	r20, r18
     4b2:	53 0b       	sbc	r21, r19
     4b4:	50 93 26 01 	sts	0x0126, r21
     4b8:	40 93 25 01 	sts	0x0125, r20
		
	}
	clk_prev = clk_curr;
     4bc:	90 93 1b 01 	sts	0x011B, r25
     4c0:	80 93 1a 01 	sts	0x011A, r24
ISR(PCINT1_vect){
	cli();
	
	clk_curr = TCNT1;
	calc_clk_elapsed();
	newMeasurement = true;
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	80 93 24 01 	sts	0x0124, r24
	
	sei();
     4ca:	78 94       	sei
     4cc:	9f 91       	pop	r25
     4ce:	8f 91       	pop	r24
     4d0:	5f 91       	pop	r21
     4d2:	4f 91       	pop	r20
     4d4:	3f 91       	pop	r19
     4d6:	2f 91       	pop	r18
     4d8:	0f 90       	pop	r0
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	0f 90       	pop	r0
     4de:	1f 90       	pop	r1
     4e0:	18 95       	reti

000004e2 <USART_transmit>:
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with " "
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <USART_transmit+0x6>
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <USART_transmit+0x8>
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <USART_transmit+0xa>
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
	char buf[6];
	
	strcpy(buf,"%%%%%");
     4f0:	26 e0       	ldi	r18, 0x06	; 6
     4f2:	e0 e0       	ldi	r30, 0x00	; 0
     4f4:	f1 e0       	ldi	r31, 0x01	; 1
     4f6:	de 01       	movw	r26, r28
     4f8:	11 96       	adiw	r26, 0x01	; 1
     4fa:	01 90       	ld	r0, Z+
     4fc:	0d 92       	st	X+, r0
     4fe:	2a 95       	dec	r18
     500:	e1 f7       	brne	.-8      	; 0x4fa <USART_transmit+0x18>
	strncpy(buf, data, 5);
     502:	45 e0       	ldi	r20, 0x05	; 5
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	bc 01       	movw	r22, r24
     508:	ce 01       	movw	r24, r28
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	91 d3       	rcall	.+1826   	; 0xc30 <strncpy>
     50e:	be 01       	movw	r22, r28
     510:	6f 5f       	subi	r22, 0xFF	; 255
     512:	7f 4f       	sbci	r23, 0xFF	; 255
     514:	9e 01       	movw	r18, r28
     516:	2a 5f       	subi	r18, 0xFA	; 250
     518:	3f 4f       	sbci	r19, 0xFF	; 255

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
     51a:	e0 ec       	ldi	r30, 0xC0	; 192
     51c:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = buf[i];
     51e:	86 ec       	ldi	r24, 0xC6	; 198
     520:	90 e0       	ldi	r25, 0x00	; 0
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
     522:	40 81       	ld	r20, Z
     524:	45 ff       	sbrs	r20, 5
     526:	fd cf       	rjmp	.-6      	; 0x522 <__stack+0x23>
		UDR0 = buf[i];
     528:	db 01       	movw	r26, r22
     52a:	4d 91       	ld	r20, X+
     52c:	bd 01       	movw	r22, r26
     52e:	dc 01       	movw	r26, r24
     530:	4c 93       	st	X, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     532:	a1 ee       	ldi	r26, 0xE1	; 225
     534:	b4 e0       	ldi	r27, 0x04	; 4
     536:	11 97       	sbiw	r26, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <__stack+0x37>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <__stack+0x3d>
     53c:	00 00       	nop
	char buf[6];
	
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
     53e:	62 17       	cp	r22, r18
     540:	73 07       	cpc	r23, r19
     542:	79 f7       	brne	.-34     	; 0x522 <__stack+0x23>
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = buf[i];
		_delay_ms(5);
	}
}
     544:	26 96       	adiw	r28, 0x06	; 6
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	f8 94       	cli
     54a:	de bf       	out	0x3e, r29	; 62
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	cd bf       	out	0x3d, r28	; 61
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <__vector_18>:
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
     556:	1f 92       	push	r1
     558:	0f 92       	push	r0
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	0f 92       	push	r0
     55e:	11 24       	eor	r1, r1
     560:	2f 93       	push	r18
     562:	8f 93       	push	r24
     564:	9f 93       	push	r25
     566:	af 93       	push	r26
     568:	bf 93       	push	r27
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	ef 93       	push	r30
     570:	ff 93       	push	r31
	cli();
     572:	f8 94       	cli
	PORTC &= ~(1 << PC2);
     574:	42 98       	cbi	0x08, 2	; 8
	PORTC |= (1 << PC1);
     576:	41 9a       	sbi	0x08, 1	; 8
     578:	ac e1       	ldi	r26, 0x1C	; 28
     57a:	b1 e0       	ldi	r27, 0x01	; 1
     57c:	81 e2       	ldi	r24, 0x21	; 33
     57e:	91 e0       	ldi	r25, 0x01	; 1
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
     580:	e0 ec       	ldi	r30, 0xC0	; 192
     582:	f0 e0       	ldi	r31, 0x00	; 0
		recieved_bytes[i] = UDR0;
     584:	c6 ec       	ldi	r28, 0xC6	; 198
     586:	d0 e0       	ldi	r29, 0x00	; 0
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
     588:	20 81       	ld	r18, Z
     58a:	22 23       	and	r18, r18
     58c:	ec f7       	brge	.-6      	; 0x588 <__vector_18+0x32>
		recieved_bytes[i] = UDR0;
     58e:	28 81       	ld	r18, Y
     590:	2d 93       	st	X+, r18
*/
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
     592:	a8 17       	cp	r26, r24
     594:	b9 07       	cpc	r27, r25
     596:	c1 f7       	brne	.-16     	; 0x588 <__vector_18+0x32>
		while( !(UCSR0A & (1 << RXC0)) );
		recieved_bytes[i] = UDR0;
	}
	PORTC &= ~(1 << PC1);
     598:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (1 << PC2);
     59a:	42 9a       	sbi	0x08, 2	; 8
	newCommand = true;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	80 93 21 01 	sts	0x0121, r24
	sei();
     5a2:	78 94       	sei
}
     5a4:	ff 91       	pop	r31
     5a6:	ef 91       	pop	r30
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	bf 91       	pop	r27
     5ae:	af 91       	pop	r26
     5b0:	9f 91       	pop	r25
     5b2:	8f 91       	pop	r24
     5b4:	2f 91       	pop	r18
     5b6:	0f 90       	pop	r0
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	0f 90       	pop	r0
     5bc:	1f 90       	pop	r1
     5be:	18 95       	reti

000005c0 <setup_registers>:
 *	PC1, PD5-PD6
 *	See details in datasheet pg. 99-100
*/
static void setup_DDR(){

	DDRB |= 0x00;
     5c0:	84 b1       	in	r24, 0x04	; 4
     5c2:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC2) | (1 << PC1) | (1 << PC0);
     5c4:	87 b1       	in	r24, 0x07	; 7
     5c6:	87 60       	ori	r24, 0x07	; 7
     5c8:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PD6) | (1 << PD5) | (1 << PD1);
     5ca:	8a b1       	in	r24, 0x0a	; 10
     5cc:	82 66       	ori	r24, 0x62	; 98
     5ce:	8a b9       	out	0x0a, r24	; 10
 *	PWM-mode: fast PWM, inverted, no prescaling.
 *	See details in datasheet pg. 113-117
*/
static void setup_PWM(){

	TCCR0A = (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0) | (1 << WGM01) | (1 << WGM00);
     5d0:	83 ef       	ldi	r24, 0xF3	; 243
     5d2:	84 bd       	out	0x24, r24	; 36
	TCCR0B =  (0 << CS02) | (0 << CS01) | (1 << CS00);
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	85 bd       	out	0x25, r24	; 37
 * 	Baud rate according to #define in shared.h
 * 	See details in datasheet pg. 201-205
*/
static void setup_USART(){

	DDRD |= (1 << PD1);
     5d8:	51 9a       	sbi	0x0a, 1	; 10
	unsigned int ubrr = (((F_CPU / (BAUD * 16UL))) - 1 );

	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
     5da:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
     5de:	89 e1       	ldi	r24, 0x19	; 25
     5e0:	80 93 c4 00 	sts	0x00C4, r24

	// Enable reciever for interrupt and transmitter
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0);
     5e4:	88 e9       	ldi	r24, 0x98	; 152
     5e6:	80 93 c1 00 	sts	0x00C1, r24

	// Set frame format: 8 data, 2 stop, 0 parity
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     5ea:	86 e0       	ldi	r24, 0x06	; 6
     5ec:	80 93 c2 00 	sts	0x00C2, r24
 * 	See details in datasheet pg. 81-82
*/
static void setup_interrupts(){

	// Enables possibility of interrupts on pins 14-8
	PCICR = (1 << PCIE1);
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	80 93 68 00 	sts	0x0068, r24
	// Enables interrupts on pin PC4-PC5
	PCMSK1 = (1 << PCINT13) | (1 << PCINT12);
     5f6:	80 e3       	ldi	r24, 0x30	; 48
     5f8:	80 93 6c 00 	sts	0x006C, r24
/*	
 *	Sets up clk/64 prescaling on 16-bit timer OC1
 *	See details in datasheet pg. 141-147
*/	
static void setup_speed_clock(){
	TCCR1B |= (1 << CS11);
     5fc:	e1 e8       	ldi	r30, 0x81	; 129
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	80 81       	ld	r24, Z
     602:	82 60       	ori	r24, 0x02	; 2
     604:	80 83       	st	Z, r24
     606:	08 95       	ret

00000608 <main>:
unsigned short clk_curr;
char recieved_bytes[5];
unsigned short clk_prev;
unsigned short clk_elapsed;

int main(void){
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	c8 59       	subi	r28, 0x98	; 152
     612:	d1 09       	sbc	r29, r1
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	de bf       	out	0x3e, r29	; 62
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	cd bf       	out	0x3d, r28	; 61
	Shared_Data shared_data;
	Shared_Data* shared_ptr = &shared_data;
	init_shared_data(shared_ptr);
     61e:	ce 01       	movw	r24, r28
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	2e dd       	rcall	.-1444   	; 0x80 <init_shared_data>
	
	newCommand = false;
     624:	10 92 21 01 	sts	0x0121, r1
	newMeasurement = false;
     628:	10 92 24 01 	sts	0x0124, r1
	clk_curr = 0;
     62c:	10 92 23 01 	sts	0x0123, r1
     630:	10 92 22 01 	sts	0x0122, r1
	clk_prev = 0;
     634:	10 92 1b 01 	sts	0x011B, r1
     638:	10 92 1a 01 	sts	0x011A, r1
	clk_elapsed = 0;
     63c:	10 92 26 01 	sts	0x0126, r1
     640:	10 92 25 01 	sts	0x0125, r1
	//OCR0A = 150;
	//OCR0B = 150;
	shared_ptr->speed_set = 30;
     644:	8e e1       	ldi	r24, 0x1E	; 30
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	9a 83       	std	Y+2, r25	; 0x02
     64a:	89 83       	std	Y+1, r24	; 0x01
	
	setup_registers();
     64c:	b9 df       	rcall	.-142    	; 0x5c0 <setup_registers>
	sei();
     64e:	78 94       	sei
			transmit_8(shared_ptr);
			transmit_0(shared_ptr);
			i = 0;
		}*/
		if(newCommand){
			switch(*recieved_bytes){
     650:	0c e1       	ldi	r16, 0x1C	; 28
     652:	11 e0       	ldi	r17, 0x01	; 1
		if(i == 10000){
			transmit_8(shared_ptr);
			transmit_0(shared_ptr);
			i = 0;
		}*/
		if(newCommand){
     654:	80 91 21 01 	lds	r24, 0x0121
     658:	88 23       	and	r24, r24
     65a:	b1 f1       	breq	.+108    	; 0x6c8 <main+0xc0>
			switch(*recieved_bytes){
     65c:	f8 01       	movw	r30, r16
     65e:	80 81       	ld	r24, Z
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	fc 01       	movw	r30, r24
     664:	f0 97       	sbiw	r30, 0x30	; 48
     666:	ea 30       	cpi	r30, 0x0A	; 10
     668:	f1 05       	cpc	r31, r1
     66a:	58 f5       	brcc	.+86     	; 0x6c2 <main+0xba>
     66c:	e6 5e       	subi	r30, 0xE6	; 230
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	09 94       	ijmp
				case '0':
					transmit_0(shared_ptr);
     672:	ce 01       	movw	r24, r28
     674:	01 96       	adiw	r24, 0x01	; 1
     676:	38 d0       	rcall	.+112    	; 0x6e8 <transmit_0>
					break;
     678:	25 c0       	rjmp	.+74     	; 0x6c4 <main+0xbc>
				case '1':
					transmit_1(shared_ptr);
     67a:	ce 01       	movw	r24, r28
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	4e d0       	rcall	.+156    	; 0x71c <transmit_1>
					break;
     680:	21 c0       	rjmp	.+66     	; 0x6c4 <main+0xbc>
				case '2':
					transmit_2(shared_ptr);
     682:	ce 01       	movw	r24, r28
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	4b d0       	rcall	.+150    	; 0x71e <transmit_2>
					break;
     688:	1d c0       	rjmp	.+58     	; 0x6c4 <main+0xbc>
				case '3':
					transmit_3(shared_ptr);
     68a:	ce 01       	movw	r24, r28
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	7a d0       	rcall	.+244    	; 0x784 <transmit_3>
					break;
     690:	19 c0       	rjmp	.+50     	; 0x6c4 <main+0xbc>
				case '4':
					transmit_4(shared_ptr);
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	a3 d0       	rcall	.+326    	; 0x7de <transmit_4>
					break;
     698:	15 c0       	rjmp	.+42     	; 0x6c4 <main+0xbc>
				case '5':
					transmit_5(shared_ptr);
     69a:	ce 01       	movw	r24, r28
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	d4 d0       	rcall	.+424    	; 0x848 <transmit_5>
					break;
     6a0:	11 c0       	rjmp	.+34     	; 0x6c4 <main+0xbc>
				case '6':
					transmit_6(shared_ptr);
     6a2:	ce 01       	movw	r24, r28
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	06 d1       	rcall	.+524    	; 0x8b4 <transmit_6>
					break;
     6a8:	0d c0       	rjmp	.+26     	; 0x6c4 <main+0xbc>
				case '7':
					transmit_7(shared_ptr);
     6aa:	ce 01       	movw	r24, r28
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	3d d1       	rcall	.+634    	; 0x92a <transmit_7>
					break;
     6b0:	09 c0       	rjmp	.+18     	; 0x6c4 <main+0xbc>
				case '8':
					transmit_8(shared_ptr);
     6b2:	ce 01       	movw	r24, r28
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	70 d1       	rcall	.+736    	; 0x998 <transmit_8>
					break;
     6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <main+0xbc>
				case '9':
					transmit_9(shared_ptr);
     6ba:	ce 01       	movw	r24, r28
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	a5 d1       	rcall	.+842    	; 0xa0a <transmit_9>
					break;
     6c0:	01 c0       	rjmp	.+2      	; 0x6c4 <main+0xbc>
				default:
					transmit_empty();
     6c2:	dc d1       	rcall	.+952    	; 0xa7c <transmit_empty>
			}
			newCommand = false;
     6c4:	10 92 21 01 	sts	0x0121, r1
		}
		if(newMeasurement){
     6c8:	80 91 24 01 	lds	r24, 0x0124
     6cc:	88 23       	and	r24, r24
     6ce:	41 f0       	breq	.+16     	; 0x6e0 <main+0xd8>
			calc_latest_rpm(shared_ptr);
     6d0:	ce 01       	movw	r24, r28
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	f2 dc       	rcall	.-1564   	; 0xba <calc_latest_rpm>
			calc_avg_rpm(shared_ptr);
     6d6:	ce 01       	movw	r24, r28
     6d8:	01 96       	adiw	r24, 0x01	; 1
     6da:	06 de       	rcall	.-1012   	; 0x2e8 <calc_avg_rpm>
			newMeasurement = false;
     6dc:	10 92 24 01 	sts	0x0124, r1
		}
		control(shared_ptr);
     6e0:	ce 01       	movw	r24, r28
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	4d de       	rcall	.-870    	; 0x380 <control>
		
	}
     6e6:	b6 cf       	rjmp	.-148    	; 0x654 <main+0x4c>

000006e8 <transmit_0>:
extern bool newMeasurement;
extern unsigned short clk_curr;
extern char recieved_bytes[5];
extern unsigned short clk_elapsed;

void transmit_0(Shared_Data* shared_ptr){
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <transmit_0+0x6>
     6ee:	00 d0       	rcall	.+0      	; 0x6f0 <transmit_0+0x8>
     6f0:	00 d0       	rcall	.+0      	; 0x6f2 <transmit_0+0xa>
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "\n", 5);
     6f6:	45 e0       	ldi	r20, 0x05	; 5
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	66 e0       	ldi	r22, 0x06	; 6
     6fc:	71 e0       	ldi	r23, 0x01	; 1
     6fe:	ce 01       	movw	r24, r28
     700:	01 96       	adiw	r24, 0x01	; 1
     702:	96 d2       	rcall	.+1324   	; 0xc30 <strncpy>
	USART_transmit(temp);
     704:	ce 01       	movw	r24, r28
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	ec de       	rcall	.-552    	; 0x4e2 <USART_transmit>
}
     70a:	26 96       	adiw	r28, 0x06	; 6
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	de bf       	out	0x3e, r29	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	cd bf       	out	0x3d, r28	; 61
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	08 95       	ret

0000071c <transmit_1>:

void transmit_1(Shared_Data* shared_ptr){
     71c:	08 95       	ret

0000071e <transmit_2>:

}

/* Sets a new set value for the speed. Range: 0-120. Transmits an empty message. */
void transmit_2(Shared_Data* shared_ptr){
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	2a 97       	sbiw	r28, 0x0a	; 10
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
     736:	8c 01       	movw	r16, r24
	char temp[6];
	char sub_str[4];
	int res;
	strncpy(temp, "     ", 5);
     738:	85 e0       	ldi	r24, 0x05	; 5
     73a:	e8 e0       	ldi	r30, 0x08	; 8
     73c:	f1 e0       	ldi	r31, 0x01	; 1
     73e:	de 01       	movw	r26, r28
     740:	11 96       	adiw	r26, 0x01	; 1
     742:	01 90       	ld	r0, Z+
     744:	0d 92       	st	X+, r0
     746:	8a 95       	dec	r24
     748:	e1 f7       	brne	.-8      	; 0x742 <transmit_2+0x24>
	strncpy(sub_str, recieved_bytes + 1, 3);
     74a:	43 e0       	ldi	r20, 0x03	; 3
     74c:	50 e0       	ldi	r21, 0x00	; 0
     74e:	6d e1       	ldi	r22, 0x1D	; 29
     750:	71 e0       	ldi	r23, 0x01	; 1
     752:	ce 01       	movw	r24, r28
     754:	07 96       	adiw	r24, 0x07	; 7
     756:	6c d2       	rcall	.+1240   	; 0xc30 <strncpy>
		
	res = atoi(sub_str);
     758:	ce 01       	movw	r24, r28
     75a:	07 96       	adiw	r24, 0x07	; 7
     75c:	4c d2       	rcall	.+1176   	; 0xbf6 <atoi>
	shared_ptr->speed_set = res;
     75e:	f8 01       	movw	r30, r16
     760:	80 83       	st	Z, r24
     762:	91 83       	std	Z+1, r25	; 0x01
	OCR0A = res;
     764:	87 bd       	out	0x27, r24	; 39
	OCR0B = res;
     766:	88 bd       	out	0x28, r24	; 40
	USART_transmit(temp);
     768:	ce 01       	movw	r24, r28
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	ba de       	rcall	.-652    	; 0x4e2 <USART_transmit>

}
     76e:	2a 96       	adiw	r28, 0x0a	; 10
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	08 95       	ret

00000784 <transmit_3>:

/* Transmits the set speed. */
void transmit_3(Shared_Data* shared_ptr){
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	00 d0       	rcall	.+0      	; 0x78e <transmit_3+0xa>
     78e:	00 d0       	rcall	.+0      	; 0x790 <transmit_3+0xc>
     790:	00 d0       	rcall	.+0      	; 0x792 <transmit_3+0xe>
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	
	snprintf(temp, 6, "%hu",  shared_ptr->speed_set);
     796:	fc 01       	movw	r30, r24
     798:	21 81       	ldd	r18, Z+1	; 0x01
     79a:	2f 93       	push	r18
     79c:	80 81       	ld	r24, Z
     79e:	8f 93       	push	r24
     7a0:	8e e0       	ldi	r24, 0x0E	; 14
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	9f 93       	push	r25
     7a6:	8f 93       	push	r24
     7a8:	1f 92       	push	r1
     7aa:	86 e0       	ldi	r24, 0x06	; 6
     7ac:	8f 93       	push	r24
     7ae:	8e 01       	movw	r16, r28
     7b0:	0f 5f       	subi	r16, 0xFF	; 255
     7b2:	1f 4f       	sbci	r17, 0xFF	; 255
     7b4:	1f 93       	push	r17
     7b6:	0f 93       	push	r16
     7b8:	52 d2       	rcall	.+1188   	; 0xc5e <snprintf>
	USART_transmit(temp);
     7ba:	c8 01       	movw	r24, r16
     7bc:	92 de       	rcall	.-732    	; 0x4e2 <USART_transmit>
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
}
     7c8:	26 96       	adiw	r28, 0x06	; 6
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	08 95       	ret

000007de <transmit_4>:


void transmit_4(Shared_Data* shared_ptr){
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	00 d0       	rcall	.+0      	; 0x7e8 <transmit_4+0xa>
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <transmit_4+0xc>
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <transmit_4+0xe>
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     7f0:	25 e0       	ldi	r18, 0x05	; 5
     7f2:	e8 e0       	ldi	r30, 0x08	; 8
     7f4:	f1 e0       	ldi	r31, 0x01	; 1
     7f6:	8e 01       	movw	r16, r28
     7f8:	0f 5f       	subi	r16, 0xFF	; 255
     7fa:	1f 4f       	sbci	r17, 0xFF	; 255
     7fc:	d8 01       	movw	r26, r16
     7fe:	01 90       	ld	r0, Z+
     800:	0d 92       	st	X+, r0
     802:	2a 95       	dec	r18
     804:	e1 f7       	brne	.-8      	; 0x7fe <transmit_4+0x20>
	
	snprintf(temp, 6, "%d", shared_ptr->speed_actual);
     806:	fc 01       	movw	r30, r24
     808:	23 81       	ldd	r18, Z+3	; 0x03
     80a:	2f 93       	push	r18
     80c:	82 81       	ldd	r24, Z+2	; 0x02
     80e:	8f 93       	push	r24
     810:	82 e1       	ldi	r24, 0x12	; 18
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	9f 93       	push	r25
     816:	8f 93       	push	r24
     818:	1f 92       	push	r1
     81a:	86 e0       	ldi	r24, 0x06	; 6
     81c:	8f 93       	push	r24
     81e:	1f 93       	push	r17
     820:	0f 93       	push	r16
     822:	1d d2       	rcall	.+1082   	; 0xc5e <snprintf>
	USART_transmit(temp);
     824:	c8 01       	movw	r24, r16
     826:	5d de       	rcall	.-838    	; 0x4e2 <USART_transmit>
     828:	0f b6       	in	r0, 0x3f	; 63
     82a:	f8 94       	cli
     82c:	de bf       	out	0x3e, r29	; 62
     82e:	0f be       	out	0x3f, r0	; 63
     830:	cd bf       	out	0x3d, r28	; 61
}
     832:	26 96       	adiw	r28, 0x06	; 6
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	f8 94       	cli
     838:	de bf       	out	0x3e, r29	; 62
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	cd bf       	out	0x3d, r28	; 61
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	08 95       	ret

00000848 <transmit_5>:

void transmit_5(Shared_Data* shared_ptr){
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	00 d0       	rcall	.+0      	; 0x852 <transmit_5+0xa>
     852:	00 d0       	rcall	.+0      	; 0x854 <transmit_5+0xc>
     854:	00 d0       	rcall	.+0      	; 0x856 <transmit_5+0xe>
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     85a:	85 e0       	ldi	r24, 0x05	; 5
     85c:	e8 e0       	ldi	r30, 0x08	; 8
     85e:	f1 e0       	ldi	r31, 0x01	; 1
     860:	8e 01       	movw	r16, r28
     862:	0f 5f       	subi	r16, 0xFF	; 255
     864:	1f 4f       	sbci	r17, 0xFF	; 255
     866:	d8 01       	movw	r26, r16
     868:	01 90       	ld	r0, Z+
     86a:	0d 92       	st	X+, r0
     86c:	8a 95       	dec	r24
     86e:	e1 f7       	brne	.-8      	; 0x868 <transmit_5+0x20>

	snprintf(temp, 6, "%hu", clk_elapsed);
     870:	80 91 26 01 	lds	r24, 0x0126
     874:	8f 93       	push	r24
     876:	80 91 25 01 	lds	r24, 0x0125
     87a:	8f 93       	push	r24
     87c:	8e e0       	ldi	r24, 0x0E	; 14
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	9f 93       	push	r25
     882:	8f 93       	push	r24
     884:	1f 92       	push	r1
     886:	86 e0       	ldi	r24, 0x06	; 6
     888:	8f 93       	push	r24
     88a:	1f 93       	push	r17
     88c:	0f 93       	push	r16
     88e:	e7 d1       	rcall	.+974    	; 0xc5e <snprintf>
	USART_transmit(temp);
     890:	c8 01       	movw	r24, r16
     892:	27 de       	rcall	.-946    	; 0x4e2 <USART_transmit>
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	de bf       	out	0x3e, r29	; 62
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	cd bf       	out	0x3d, r28	; 61
}
     89e:	26 96       	adiw	r28, 0x06	; 6
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	08 95       	ret

000008b4 <transmit_6>:

void transmit_6(Shared_Data* shared_ptr){
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	00 d0       	rcall	.+0      	; 0x8be <transmit_6+0xa>
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <transmit_6+0xc>
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <transmit_6+0xe>
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     8c6:	25 e0       	ldi	r18, 0x05	; 5
     8c8:	e8 e0       	ldi	r30, 0x08	; 8
     8ca:	f1 e0       	ldi	r31, 0x01	; 1
     8cc:	8e 01       	movw	r16, r28
     8ce:	0f 5f       	subi	r16, 0xFF	; 255
     8d0:	1f 4f       	sbci	r17, 0xFF	; 255
     8d2:	d8 01       	movw	r26, r16
     8d4:	01 90       	ld	r0, Z+
     8d6:	0d 92       	st	X+, r0
     8d8:	2a 95       	dec	r18
     8da:	e1 f7       	brne	.-8      	; 0x8d4 <transmit_6+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->delta_time);
     8dc:	fc 01       	movw	r30, r24
     8de:	e0 57       	subi	r30, 0x70	; 112
     8e0:	ff 4f       	sbci	r31, 0xFF	; 255
     8e2:	83 81       	ldd	r24, Z+3	; 0x03
     8e4:	8f 93       	push	r24
     8e6:	82 81       	ldd	r24, Z+2	; 0x02
     8e8:	8f 93       	push	r24
     8ea:	81 81       	ldd	r24, Z+1	; 0x01
     8ec:	8f 93       	push	r24
     8ee:	80 81       	ld	r24, Z
     8f0:	8f 93       	push	r24
     8f2:	85 e1       	ldi	r24, 0x15	; 21
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	9f 93       	push	r25
     8f8:	8f 93       	push	r24
     8fa:	1f 92       	push	r1
     8fc:	86 e0       	ldi	r24, 0x06	; 6
     8fe:	8f 93       	push	r24
     900:	1f 93       	push	r17
     902:	0f 93       	push	r16
     904:	ac d1       	rcall	.+856    	; 0xc5e <snprintf>
	USART_transmit(temp);
     906:	c8 01       	movw	r24, r16
     908:	ec dd       	rcall	.-1064   	; 0x4e2 <USART_transmit>
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	de bf       	out	0x3e, r29	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	cd bf       	out	0x3d, r28	; 61
}
     914:	26 96       	adiw	r28, 0x06	; 6
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	08 95       	ret

0000092a <transmit_7>:

void transmit_7(Shared_Data* shared_ptr){
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	00 d0       	rcall	.+0      	; 0x934 <transmit_7+0xa>
     934:	00 d0       	rcall	.+0      	; 0x936 <transmit_7+0xc>
     936:	00 d0       	rcall	.+0      	; 0x938 <transmit_7+0xe>
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     93c:	25 e0       	ldi	r18, 0x05	; 5
     93e:	e8 e0       	ldi	r30, 0x08	; 8
     940:	f1 e0       	ldi	r31, 0x01	; 1
     942:	8e 01       	movw	r16, r28
     944:	0f 5f       	subi	r16, 0xFF	; 255
     946:	1f 4f       	sbci	r17, 0xFF	; 255
     948:	d8 01       	movw	r26, r16
     94a:	01 90       	ld	r0, Z+
     94c:	0d 92       	st	X+, r0
     94e:	2a 95       	dec	r18
     950:	e1 f7       	brne	.-8      	; 0x94a <transmit_7+0x20>
	snprintf(temp, 6, "%hu", shared_ptr->error);
     952:	fc 01       	movw	r30, r24
     954:	ea 56       	subi	r30, 0x6A	; 106
     956:	ff 4f       	sbci	r31, 0xFF	; 255
     958:	81 81       	ldd	r24, Z+1	; 0x01
     95a:	8f 93       	push	r24
     95c:	80 81       	ld	r24, Z
     95e:	8f 93       	push	r24
     960:	8e e0       	ldi	r24, 0x0E	; 14
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	9f 93       	push	r25
     966:	8f 93       	push	r24
     968:	1f 92       	push	r1
     96a:	86 e0       	ldi	r24, 0x06	; 6
     96c:	8f 93       	push	r24
     96e:	1f 93       	push	r17
     970:	0f 93       	push	r16
     972:	75 d1       	rcall	.+746    	; 0xc5e <snprintf>
	USART_transmit(temp);
     974:	c8 01       	movw	r24, r16
     976:	b5 dd       	rcall	.-1174   	; 0x4e2 <USART_transmit>
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	cd bf       	out	0x3d, r28	; 61
}
     982:	26 96       	adiw	r28, 0x06	; 6
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	f8 94       	cli
     988:	de bf       	out	0x3e, r29	; 62
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	cd bf       	out	0x3d, r28	; 61
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	08 95       	ret

00000998 <transmit_8>:

void transmit_8(Shared_Data* shared_ptr){
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <transmit_8+0xa>
     9a2:	00 d0       	rcall	.+0      	; 0x9a4 <transmit_8+0xc>
     9a4:	00 d0       	rcall	.+0      	; 0x9a6 <transmit_8+0xe>
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     9aa:	25 e0       	ldi	r18, 0x05	; 5
     9ac:	e8 e0       	ldi	r30, 0x08	; 8
     9ae:	f1 e0       	ldi	r31, 0x01	; 1
     9b0:	8e 01       	movw	r16, r28
     9b2:	0f 5f       	subi	r16, 0xFF	; 255
     9b4:	1f 4f       	sbci	r17, 0xFF	; 255
     9b6:	d8 01       	movw	r26, r16
     9b8:	01 90       	ld	r0, Z+
     9ba:	0d 92       	st	X+, r0
     9bc:	2a 95       	dec	r18
     9be:	e1 f7       	brne	.-8      	; 0x9b8 <transmit_8+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->rpm_avg);
     9c0:	fc 01       	movw	r30, r24
     9c2:	27 85       	ldd	r18, Z+15	; 0x0f
     9c4:	2f 93       	push	r18
     9c6:	26 85       	ldd	r18, Z+14	; 0x0e
     9c8:	2f 93       	push	r18
     9ca:	25 85       	ldd	r18, Z+13	; 0x0d
     9cc:	2f 93       	push	r18
     9ce:	84 85       	ldd	r24, Z+12	; 0x0c
     9d0:	8f 93       	push	r24
     9d2:	85 e1       	ldi	r24, 0x15	; 21
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	9f 93       	push	r25
     9d8:	8f 93       	push	r24
     9da:	1f 92       	push	r1
     9dc:	86 e0       	ldi	r24, 0x06	; 6
     9de:	8f 93       	push	r24
     9e0:	1f 93       	push	r17
     9e2:	0f 93       	push	r16
     9e4:	3c d1       	rcall	.+632    	; 0xc5e <snprintf>
	USART_transmit(temp);
     9e6:	c8 01       	movw	r24, r16
     9e8:	7c dd       	rcall	.-1288   	; 0x4e2 <USART_transmit>
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	cd bf       	out	0x3d, r28	; 61
}
     9f4:	26 96       	adiw	r28, 0x06	; 6
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	cd bf       	out	0x3d, r28	; 61
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	08 95       	ret

00000a0a <transmit_9>:

void transmit_9(Shared_Data* shared_ptr){
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	00 d0       	rcall	.+0      	; 0xa14 <transmit_9+0xa>
     a14:	00 d0       	rcall	.+0      	; 0xa16 <transmit_9+0xc>
     a16:	00 d0       	rcall	.+0      	; 0xa18 <transmit_9+0xe>
     a18:	cd b7       	in	r28, 0x3d	; 61
     a1a:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     a1c:	25 e0       	ldi	r18, 0x05	; 5
     a1e:	e8 e0       	ldi	r30, 0x08	; 8
     a20:	f1 e0       	ldi	r31, 0x01	; 1
     a22:	8e 01       	movw	r16, r28
     a24:	0f 5f       	subi	r16, 0xFF	; 255
     a26:	1f 4f       	sbci	r17, 0xFF	; 255
     a28:	d8 01       	movw	r26, r16
     a2a:	01 90       	ld	r0, Z+
     a2c:	0d 92       	st	X+, r0
     a2e:	2a 95       	dec	r18
     a30:	e1 f7       	brne	.-8      	; 0xa2a <transmit_9+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->curr_rpm);
     a32:	fc 01       	movw	r30, r24
     a34:	23 85       	ldd	r18, Z+11	; 0x0b
     a36:	2f 93       	push	r18
     a38:	22 85       	ldd	r18, Z+10	; 0x0a
     a3a:	2f 93       	push	r18
     a3c:	21 85       	ldd	r18, Z+9	; 0x09
     a3e:	2f 93       	push	r18
     a40:	80 85       	ldd	r24, Z+8	; 0x08
     a42:	8f 93       	push	r24
     a44:	85 e1       	ldi	r24, 0x15	; 21
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	9f 93       	push	r25
     a4a:	8f 93       	push	r24
     a4c:	1f 92       	push	r1
     a4e:	86 e0       	ldi	r24, 0x06	; 6
     a50:	8f 93       	push	r24
     a52:	1f 93       	push	r17
     a54:	0f 93       	push	r16
     a56:	03 d1       	rcall	.+518    	; 0xc5e <snprintf>
	USART_transmit(temp);
     a58:	c8 01       	movw	r24, r16
     a5a:	43 dd       	rcall	.-1402   	; 0x4e2 <USART_transmit>
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	f8 94       	cli
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	cd bf       	out	0x3d, r28	; 61
}
     a66:	26 96       	adiw	r28, 0x06	; 6
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	f8 94       	cli
     a6c:	de bf       	out	0x3e, r29	; 62
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	cd bf       	out	0x3d, r28	; 61
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	08 95       	ret

00000a7c <transmit_empty>:

void transmit_empty(){
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	00 d0       	rcall	.+0      	; 0xa82 <transmit_empty+0x6>
     a82:	00 d0       	rcall	.+0      	; 0xa84 <transmit_empty+0x8>
     a84:	00 d0       	rcall	.+0      	; 0xa86 <transmit_empty+0xa>
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     a8a:	85 e0       	ldi	r24, 0x05	; 5
     a8c:	e8 e0       	ldi	r30, 0x08	; 8
     a8e:	f1 e0       	ldi	r31, 0x01	; 1
     a90:	de 01       	movw	r26, r28
     a92:	11 96       	adiw	r26, 0x01	; 1
     a94:	01 90       	ld	r0, Z+
     a96:	0d 92       	st	X+, r0
     a98:	8a 95       	dec	r24
     a9a:	e1 f7       	brne	.-8      	; 0xa94 <transmit_empty+0x18>
	USART_transmit(temp);
     a9c:	ce 01       	movw	r24, r28
     a9e:	01 96       	adiw	r24, 0x01	; 1
     aa0:	20 dd       	rcall	.-1472   	; 0x4e2 <USART_transmit>
}
     aa2:	26 96       	adiw	r28, 0x06	; 6
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	cd bf       	out	0x3d, r28	; 61
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	08 95       	ret

00000ab4 <__umoddi3>:
     ab4:	68 94       	set
     ab6:	01 c0       	rjmp	.+2      	; 0xaba <__udivdi3_umoddi3>

00000ab8 <__udivdi3>:
     ab8:	e8 94       	clt

00000aba <__udivdi3_umoddi3>:
     aba:	8f 92       	push	r8
     abc:	9f 92       	push	r9
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	05 d0       	rcall	.+10     	; 0xace <__udivmod64>
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	9f 90       	pop	r9
     aca:	8f 90       	pop	r8
     acc:	08 95       	ret

00000ace <__udivmod64>:
     ace:	88 24       	eor	r8, r8
     ad0:	99 24       	eor	r9, r9
     ad2:	f4 01       	movw	r30, r8
     ad4:	e4 01       	movw	r28, r8
     ad6:	b0 e4       	ldi	r27, 0x40	; 64
     ad8:	1b 2e       	mov	r1, r27
     ada:	d4 01       	movw	r26, r8
     adc:	9d 15       	cp	r25, r13
     ade:	8e 04       	cpc	r8, r14
     ae0:	9f 04       	cpc	r9, r15
     ae2:	e0 07       	cpc	r30, r16
     ae4:	f1 07       	cpc	r31, r17
     ae6:	38 f4       	brcc	.+14     	; 0xaf6 <__udivmod64+0x28>
     ae8:	fc 01       	movw	r30, r24
     aea:	4b 01       	movw	r8, r22
     aec:	ca 01       	movw	r24, r20
     aee:	b9 01       	movw	r22, r18
     af0:	ad 01       	movw	r20, r26
     af2:	9e 01       	movw	r18, r28
     af4:	16 94       	lsr	r1
     af6:	22 0f       	add	r18, r18
     af8:	33 1f       	adc	r19, r19
     afa:	44 1f       	adc	r20, r20
     afc:	55 1f       	adc	r21, r21
     afe:	66 1f       	adc	r22, r22
     b00:	77 1f       	adc	r23, r23
     b02:	88 1f       	adc	r24, r24
     b04:	99 1f       	adc	r25, r25
     b06:	88 1c       	adc	r8, r8
     b08:	99 1c       	adc	r9, r9
     b0a:	ee 1f       	adc	r30, r30
     b0c:	ff 1f       	adc	r31, r31
     b0e:	cc 1f       	adc	r28, r28
     b10:	dd 1f       	adc	r29, r29
     b12:	aa 1f       	adc	r26, r26
     b14:	bb 1f       	adc	r27, r27
     b16:	8a 14       	cp	r8, r10
     b18:	9b 04       	cpc	r9, r11
     b1a:	ec 05       	cpc	r30, r12
     b1c:	fd 05       	cpc	r31, r13
     b1e:	ce 05       	cpc	r28, r14
     b20:	df 05       	cpc	r29, r15
     b22:	a0 07       	cpc	r26, r16
     b24:	b1 07       	cpc	r27, r17
     b26:	48 f0       	brcs	.+18     	; 0xb3a <__udivmod64+0x6c>
     b28:	8a 18       	sub	r8, r10
     b2a:	9b 08       	sbc	r9, r11
     b2c:	ec 09       	sbc	r30, r12
     b2e:	fd 09       	sbc	r31, r13
     b30:	ce 09       	sbc	r28, r14
     b32:	df 09       	sbc	r29, r15
     b34:	a0 0b       	sbc	r26, r16
     b36:	b1 0b       	sbc	r27, r17
     b38:	21 60       	ori	r18, 0x01	; 1
     b3a:	1a 94       	dec	r1
     b3c:	e1 f6       	brne	.-72     	; 0xaf6 <__udivmod64+0x28>
     b3e:	2e f4       	brtc	.+10     	; 0xb4a <__udivmod64+0x7c>
     b40:	94 01       	movw	r18, r8
     b42:	af 01       	movw	r20, r30
     b44:	be 01       	movw	r22, r28
     b46:	cd 01       	movw	r24, r26
     b48:	00 0c       	add	r0, r0
     b4a:	08 95       	ret

00000b4c <__ashldi3>:
     b4c:	0f 93       	push	r16
     b4e:	08 30       	cpi	r16, 0x08	; 8
     b50:	90 f0       	brcs	.+36     	; 0xb76 <__ashldi3+0x2a>
     b52:	98 2f       	mov	r25, r24
     b54:	87 2f       	mov	r24, r23
     b56:	76 2f       	mov	r23, r22
     b58:	65 2f       	mov	r22, r21
     b5a:	54 2f       	mov	r21, r20
     b5c:	43 2f       	mov	r20, r19
     b5e:	32 2f       	mov	r19, r18
     b60:	22 27       	eor	r18, r18
     b62:	08 50       	subi	r16, 0x08	; 8
     b64:	f4 cf       	rjmp	.-24     	; 0xb4e <__ashldi3+0x2>
     b66:	22 0f       	add	r18, r18
     b68:	33 1f       	adc	r19, r19
     b6a:	44 1f       	adc	r20, r20
     b6c:	55 1f       	adc	r21, r21
     b6e:	66 1f       	adc	r22, r22
     b70:	77 1f       	adc	r23, r23
     b72:	88 1f       	adc	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	0a 95       	dec	r16
     b78:	b2 f7       	brpl	.-20     	; 0xb66 <__ashldi3+0x1a>
     b7a:	0f 91       	pop	r16
     b7c:	08 95       	ret

00000b7e <__ashrdi3>:
     b7e:	97 fb       	bst	r25, 7
     b80:	10 f8       	bld	r1, 0

00000b82 <__lshrdi3>:
     b82:	16 94       	lsr	r1
     b84:	00 08       	sbc	r0, r0
     b86:	0f 93       	push	r16
     b88:	08 30       	cpi	r16, 0x08	; 8
     b8a:	98 f0       	brcs	.+38     	; 0xbb2 <__lshrdi3+0x30>
     b8c:	08 50       	subi	r16, 0x08	; 8
     b8e:	23 2f       	mov	r18, r19
     b90:	34 2f       	mov	r19, r20
     b92:	45 2f       	mov	r20, r21
     b94:	56 2f       	mov	r21, r22
     b96:	67 2f       	mov	r22, r23
     b98:	78 2f       	mov	r23, r24
     b9a:	89 2f       	mov	r24, r25
     b9c:	90 2d       	mov	r25, r0
     b9e:	f4 cf       	rjmp	.-24     	; 0xb88 <__lshrdi3+0x6>
     ba0:	05 94       	asr	r0
     ba2:	97 95       	ror	r25
     ba4:	87 95       	ror	r24
     ba6:	77 95       	ror	r23
     ba8:	67 95       	ror	r22
     baa:	57 95       	ror	r21
     bac:	47 95       	ror	r20
     bae:	37 95       	ror	r19
     bb0:	27 95       	ror	r18
     bb2:	0a 95       	dec	r16
     bb4:	aa f7       	brpl	.-22     	; 0xba0 <__lshrdi3+0x1e>
     bb6:	0f 91       	pop	r16
     bb8:	08 95       	ret

00000bba <__adddi3>:
     bba:	2a 0d       	add	r18, r10
     bbc:	3b 1d       	adc	r19, r11
     bbe:	4c 1d       	adc	r20, r12
     bc0:	5d 1d       	adc	r21, r13
     bc2:	6e 1d       	adc	r22, r14
     bc4:	7f 1d       	adc	r23, r15
     bc6:	80 1f       	adc	r24, r16
     bc8:	91 1f       	adc	r25, r17
     bca:	08 95       	ret

00000bcc <__subdi3>:
     bcc:	2a 19       	sub	r18, r10
     bce:	3b 09       	sbc	r19, r11
     bd0:	4c 09       	sbc	r20, r12
     bd2:	5d 09       	sbc	r21, r13
     bd4:	6e 09       	sbc	r22, r14
     bd6:	7f 09       	sbc	r23, r15
     bd8:	80 0b       	sbc	r24, r16
     bda:	91 0b       	sbc	r25, r17
     bdc:	08 95       	ret

00000bde <__cmpdi2_s8>:
     bde:	00 24       	eor	r0, r0
     be0:	a7 fd       	sbrc	r26, 7
     be2:	00 94       	com	r0
     be4:	2a 17       	cp	r18, r26
     be6:	30 05       	cpc	r19, r0
     be8:	40 05       	cpc	r20, r0
     bea:	50 05       	cpc	r21, r0
     bec:	60 05       	cpc	r22, r0
     bee:	70 05       	cpc	r23, r0
     bf0:	80 05       	cpc	r24, r0
     bf2:	90 05       	cpc	r25, r0
     bf4:	08 95       	ret

00000bf6 <atoi>:
     bf6:	fc 01       	movw	r30, r24
     bf8:	88 27       	eor	r24, r24
     bfa:	99 27       	eor	r25, r25
     bfc:	e8 94       	clt
     bfe:	21 91       	ld	r18, Z+
     c00:	20 32       	cpi	r18, 0x20	; 32
     c02:	e9 f3       	breq	.-6      	; 0xbfe <atoi+0x8>
     c04:	29 30       	cpi	r18, 0x09	; 9
     c06:	10 f0       	brcs	.+4      	; 0xc0c <atoi+0x16>
     c08:	2e 30       	cpi	r18, 0x0E	; 14
     c0a:	c8 f3       	brcs	.-14     	; 0xbfe <atoi+0x8>
     c0c:	2b 32       	cpi	r18, 0x2B	; 43
     c0e:	39 f0       	breq	.+14     	; 0xc1e <atoi+0x28>
     c10:	2d 32       	cpi	r18, 0x2D	; 45
     c12:	31 f4       	brne	.+12     	; 0xc20 <atoi+0x2a>
     c14:	68 94       	set
     c16:	03 c0       	rjmp	.+6      	; 0xc1e <atoi+0x28>
     c18:	1a d0       	rcall	.+52     	; 0xc4e <__mulhi_const_10>
     c1a:	82 0f       	add	r24, r18
     c1c:	91 1d       	adc	r25, r1
     c1e:	21 91       	ld	r18, Z+
     c20:	20 53       	subi	r18, 0x30	; 48
     c22:	2a 30       	cpi	r18, 0x0A	; 10
     c24:	c8 f3       	brcs	.-14     	; 0xc18 <atoi+0x22>
     c26:	1e f4       	brtc	.+6      	; 0xc2e <atoi+0x38>
     c28:	90 95       	com	r25
     c2a:	81 95       	neg	r24
     c2c:	9f 4f       	sbci	r25, 0xFF	; 255
     c2e:	08 95       	ret

00000c30 <strncpy>:
     c30:	fb 01       	movw	r30, r22
     c32:	dc 01       	movw	r26, r24
     c34:	41 50       	subi	r20, 0x01	; 1
     c36:	50 40       	sbci	r21, 0x00	; 0
     c38:	48 f0       	brcs	.+18     	; 0xc4c <strncpy+0x1c>
     c3a:	01 90       	ld	r0, Z+
     c3c:	0d 92       	st	X+, r0
     c3e:	00 20       	and	r0, r0
     c40:	c9 f7       	brne	.-14     	; 0xc34 <strncpy+0x4>
     c42:	01 c0       	rjmp	.+2      	; 0xc46 <strncpy+0x16>
     c44:	1d 92       	st	X+, r1
     c46:	41 50       	subi	r20, 0x01	; 1
     c48:	50 40       	sbci	r21, 0x00	; 0
     c4a:	e0 f7       	brcc	.-8      	; 0xc44 <strncpy+0x14>
     c4c:	08 95       	ret

00000c4e <__mulhi_const_10>:
     c4e:	7a e0       	ldi	r23, 0x0A	; 10
     c50:	97 9f       	mul	r25, r23
     c52:	90 2d       	mov	r25, r0
     c54:	87 9f       	mul	r24, r23
     c56:	80 2d       	mov	r24, r0
     c58:	91 0d       	add	r25, r1
     c5a:	11 24       	eor	r1, r1
     c5c:	08 95       	ret

00000c5e <snprintf>:
     c5e:	ae e0       	ldi	r26, 0x0E	; 14
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e4 e3       	ldi	r30, 0x34	; 52
     c64:	f6 e0       	ldi	r31, 0x06	; 6
     c66:	9f c2       	rjmp	.+1342   	; 0x11a6 <__prologue_saves__+0x1c>
     c68:	0d 89       	ldd	r16, Y+21	; 0x15
     c6a:	1e 89       	ldd	r17, Y+22	; 0x16
     c6c:	8f 89       	ldd	r24, Y+23	; 0x17
     c6e:	98 8d       	ldd	r25, Y+24	; 0x18
     c70:	26 e0       	ldi	r18, 0x06	; 6
     c72:	2c 83       	std	Y+4, r18	; 0x04
     c74:	1a 83       	std	Y+2, r17	; 0x02
     c76:	09 83       	std	Y+1, r16	; 0x01
     c78:	97 ff       	sbrs	r25, 7
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <snprintf+0x22>
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e8       	ldi	r25, 0x80	; 128
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	9e 83       	std	Y+6, r25	; 0x06
     c84:	8d 83       	std	Y+5, r24	; 0x05
     c86:	ae 01       	movw	r20, r28
     c88:	45 5e       	subi	r20, 0xE5	; 229
     c8a:	5f 4f       	sbci	r21, 0xFF	; 255
     c8c:	69 8d       	ldd	r22, Y+25	; 0x19
     c8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c90:	ce 01       	movw	r24, r28
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	11 d0       	rcall	.+34     	; 0xcb8 <vfprintf>
     c96:	4d 81       	ldd	r20, Y+5	; 0x05
     c98:	5e 81       	ldd	r21, Y+6	; 0x06
     c9a:	57 fd       	sbrc	r21, 7
     c9c:	0a c0       	rjmp	.+20     	; 0xcb2 <snprintf+0x54>
     c9e:	2f 81       	ldd	r18, Y+7	; 0x07
     ca0:	38 85       	ldd	r19, Y+8	; 0x08
     ca2:	42 17       	cp	r20, r18
     ca4:	53 07       	cpc	r21, r19
     ca6:	0c f4       	brge	.+2      	; 0xcaa <snprintf+0x4c>
     ca8:	9a 01       	movw	r18, r20
     caa:	f8 01       	movw	r30, r16
     cac:	e2 0f       	add	r30, r18
     cae:	f3 1f       	adc	r31, r19
     cb0:	10 82       	st	Z, r1
     cb2:	2e 96       	adiw	r28, 0x0e	; 14
     cb4:	e4 e0       	ldi	r30, 0x04	; 4
     cb6:	93 c2       	rjmp	.+1318   	; 0x11de <__epilogue_restores__+0x1c>

00000cb8 <vfprintf>:
     cb8:	ac e0       	ldi	r26, 0x0C	; 12
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e1 e6       	ldi	r30, 0x61	; 97
     cbe:	f6 e0       	ldi	r31, 0x06	; 6
     cc0:	64 c2       	rjmp	.+1224   	; 0x118a <__prologue_saves__>
     cc2:	7c 01       	movw	r14, r24
     cc4:	6b 01       	movw	r12, r22
     cc6:	8a 01       	movw	r16, r20
     cc8:	fc 01       	movw	r30, r24
     cca:	17 82       	std	Z+7, r1	; 0x07
     ccc:	16 82       	std	Z+6, r1	; 0x06
     cce:	83 81       	ldd	r24, Z+3	; 0x03
     cd0:	81 ff       	sbrs	r24, 1
     cd2:	b0 c1       	rjmp	.+864    	; 0x1034 <vfprintf+0x37c>
     cd4:	ce 01       	movw	r24, r28
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	4c 01       	movw	r8, r24
     cda:	f7 01       	movw	r30, r14
     cdc:	93 81       	ldd	r25, Z+3	; 0x03
     cde:	f6 01       	movw	r30, r12
     ce0:	93 fd       	sbrc	r25, 3
     ce2:	85 91       	lpm	r24, Z+
     ce4:	93 ff       	sbrs	r25, 3
     ce6:	81 91       	ld	r24, Z+
     ce8:	6f 01       	movw	r12, r30
     cea:	88 23       	and	r24, r24
     cec:	09 f4       	brne	.+2      	; 0xcf0 <vfprintf+0x38>
     cee:	9e c1       	rjmp	.+828    	; 0x102c <vfprintf+0x374>
     cf0:	85 32       	cpi	r24, 0x25	; 37
     cf2:	39 f4       	brne	.+14     	; 0xd02 <vfprintf+0x4a>
     cf4:	93 fd       	sbrc	r25, 3
     cf6:	85 91       	lpm	r24, Z+
     cf8:	93 ff       	sbrs	r25, 3
     cfa:	81 91       	ld	r24, Z+
     cfc:	6f 01       	movw	r12, r30
     cfe:	85 32       	cpi	r24, 0x25	; 37
     d00:	21 f4       	brne	.+8      	; 0xd0a <vfprintf+0x52>
     d02:	b7 01       	movw	r22, r14
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	b1 d1       	rcall	.+866    	; 0x106a <fputc>
     d08:	e8 cf       	rjmp	.-48     	; 0xcda <vfprintf+0x22>
     d0a:	51 2c       	mov	r5, r1
     d0c:	31 2c       	mov	r3, r1
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	20 32       	cpi	r18, 0x20	; 32
     d12:	a0 f4       	brcc	.+40     	; 0xd3c <vfprintf+0x84>
     d14:	8b 32       	cpi	r24, 0x2B	; 43
     d16:	69 f0       	breq	.+26     	; 0xd32 <vfprintf+0x7a>
     d18:	30 f4       	brcc	.+12     	; 0xd26 <vfprintf+0x6e>
     d1a:	80 32       	cpi	r24, 0x20	; 32
     d1c:	59 f0       	breq	.+22     	; 0xd34 <vfprintf+0x7c>
     d1e:	83 32       	cpi	r24, 0x23	; 35
     d20:	69 f4       	brne	.+26     	; 0xd3c <vfprintf+0x84>
     d22:	20 61       	ori	r18, 0x10	; 16
     d24:	2c c0       	rjmp	.+88     	; 0xd7e <vfprintf+0xc6>
     d26:	8d 32       	cpi	r24, 0x2D	; 45
     d28:	39 f0       	breq	.+14     	; 0xd38 <vfprintf+0x80>
     d2a:	80 33       	cpi	r24, 0x30	; 48
     d2c:	39 f4       	brne	.+14     	; 0xd3c <vfprintf+0x84>
     d2e:	21 60       	ori	r18, 0x01	; 1
     d30:	26 c0       	rjmp	.+76     	; 0xd7e <vfprintf+0xc6>
     d32:	22 60       	ori	r18, 0x02	; 2
     d34:	24 60       	ori	r18, 0x04	; 4
     d36:	23 c0       	rjmp	.+70     	; 0xd7e <vfprintf+0xc6>
     d38:	28 60       	ori	r18, 0x08	; 8
     d3a:	21 c0       	rjmp	.+66     	; 0xd7e <vfprintf+0xc6>
     d3c:	27 fd       	sbrc	r18, 7
     d3e:	27 c0       	rjmp	.+78     	; 0xd8e <vfprintf+0xd6>
     d40:	30 ed       	ldi	r19, 0xD0	; 208
     d42:	38 0f       	add	r19, r24
     d44:	3a 30       	cpi	r19, 0x0A	; 10
     d46:	78 f4       	brcc	.+30     	; 0xd66 <vfprintf+0xae>
     d48:	26 ff       	sbrs	r18, 6
     d4a:	06 c0       	rjmp	.+12     	; 0xd58 <vfprintf+0xa0>
     d4c:	fa e0       	ldi	r31, 0x0A	; 10
     d4e:	5f 9e       	mul	r5, r31
     d50:	30 0d       	add	r19, r0
     d52:	11 24       	eor	r1, r1
     d54:	53 2e       	mov	r5, r19
     d56:	13 c0       	rjmp	.+38     	; 0xd7e <vfprintf+0xc6>
     d58:	8a e0       	ldi	r24, 0x0A	; 10
     d5a:	38 9e       	mul	r3, r24
     d5c:	30 0d       	add	r19, r0
     d5e:	11 24       	eor	r1, r1
     d60:	33 2e       	mov	r3, r19
     d62:	20 62       	ori	r18, 0x20	; 32
     d64:	0c c0       	rjmp	.+24     	; 0xd7e <vfprintf+0xc6>
     d66:	8e 32       	cpi	r24, 0x2E	; 46
     d68:	21 f4       	brne	.+8      	; 0xd72 <vfprintf+0xba>
     d6a:	26 fd       	sbrc	r18, 6
     d6c:	5f c1       	rjmp	.+702    	; 0x102c <vfprintf+0x374>
     d6e:	20 64       	ori	r18, 0x40	; 64
     d70:	06 c0       	rjmp	.+12     	; 0xd7e <vfprintf+0xc6>
     d72:	8c 36       	cpi	r24, 0x6C	; 108
     d74:	11 f4       	brne	.+4      	; 0xd7a <vfprintf+0xc2>
     d76:	20 68       	ori	r18, 0x80	; 128
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <vfprintf+0xc6>
     d7a:	88 36       	cpi	r24, 0x68	; 104
     d7c:	41 f4       	brne	.+16     	; 0xd8e <vfprintf+0xd6>
     d7e:	f6 01       	movw	r30, r12
     d80:	93 fd       	sbrc	r25, 3
     d82:	85 91       	lpm	r24, Z+
     d84:	93 ff       	sbrs	r25, 3
     d86:	81 91       	ld	r24, Z+
     d88:	6f 01       	movw	r12, r30
     d8a:	81 11       	cpse	r24, r1
     d8c:	c1 cf       	rjmp	.-126    	; 0xd10 <vfprintf+0x58>
     d8e:	98 2f       	mov	r25, r24
     d90:	9f 7d       	andi	r25, 0xDF	; 223
     d92:	95 54       	subi	r25, 0x45	; 69
     d94:	93 30       	cpi	r25, 0x03	; 3
     d96:	28 f4       	brcc	.+10     	; 0xda2 <vfprintf+0xea>
     d98:	0c 5f       	subi	r16, 0xFC	; 252
     d9a:	1f 4f       	sbci	r17, 0xFF	; 255
     d9c:	ff e3       	ldi	r31, 0x3F	; 63
     d9e:	f9 83       	std	Y+1, r31	; 0x01
     da0:	0d c0       	rjmp	.+26     	; 0xdbc <vfprintf+0x104>
     da2:	83 36       	cpi	r24, 0x63	; 99
     da4:	31 f0       	breq	.+12     	; 0xdb2 <vfprintf+0xfa>
     da6:	83 37       	cpi	r24, 0x73	; 115
     da8:	71 f0       	breq	.+28     	; 0xdc6 <vfprintf+0x10e>
     daa:	83 35       	cpi	r24, 0x53	; 83
     dac:	09 f0       	breq	.+2      	; 0xdb0 <vfprintf+0xf8>
     dae:	57 c0       	rjmp	.+174    	; 0xe5e <vfprintf+0x1a6>
     db0:	21 c0       	rjmp	.+66     	; 0xdf4 <vfprintf+0x13c>
     db2:	f8 01       	movw	r30, r16
     db4:	80 81       	ld	r24, Z
     db6:	89 83       	std	Y+1, r24	; 0x01
     db8:	0e 5f       	subi	r16, 0xFE	; 254
     dba:	1f 4f       	sbci	r17, 0xFF	; 255
     dbc:	44 24       	eor	r4, r4
     dbe:	43 94       	inc	r4
     dc0:	51 2c       	mov	r5, r1
     dc2:	54 01       	movw	r10, r8
     dc4:	14 c0       	rjmp	.+40     	; 0xdee <vfprintf+0x136>
     dc6:	38 01       	movw	r6, r16
     dc8:	f2 e0       	ldi	r31, 0x02	; 2
     dca:	6f 0e       	add	r6, r31
     dcc:	71 1c       	adc	r7, r1
     dce:	f8 01       	movw	r30, r16
     dd0:	a0 80       	ld	r10, Z
     dd2:	b1 80       	ldd	r11, Z+1	; 0x01
     dd4:	26 ff       	sbrs	r18, 6
     dd6:	03 c0       	rjmp	.+6      	; 0xdde <vfprintf+0x126>
     dd8:	65 2d       	mov	r22, r5
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <vfprintf+0x12a>
     dde:	6f ef       	ldi	r22, 0xFF	; 255
     de0:	7f ef       	ldi	r23, 0xFF	; 255
     de2:	c5 01       	movw	r24, r10
     de4:	2c 87       	std	Y+12, r18	; 0x0c
     de6:	36 d1       	rcall	.+620    	; 0x1054 <strnlen>
     de8:	2c 01       	movw	r4, r24
     dea:	83 01       	movw	r16, r6
     dec:	2c 85       	ldd	r18, Y+12	; 0x0c
     dee:	2f 77       	andi	r18, 0x7F	; 127
     df0:	22 2e       	mov	r2, r18
     df2:	16 c0       	rjmp	.+44     	; 0xe20 <vfprintf+0x168>
     df4:	38 01       	movw	r6, r16
     df6:	f2 e0       	ldi	r31, 0x02	; 2
     df8:	6f 0e       	add	r6, r31
     dfa:	71 1c       	adc	r7, r1
     dfc:	f8 01       	movw	r30, r16
     dfe:	a0 80       	ld	r10, Z
     e00:	b1 80       	ldd	r11, Z+1	; 0x01
     e02:	26 ff       	sbrs	r18, 6
     e04:	03 c0       	rjmp	.+6      	; 0xe0c <vfprintf+0x154>
     e06:	65 2d       	mov	r22, r5
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <vfprintf+0x158>
     e0c:	6f ef       	ldi	r22, 0xFF	; 255
     e0e:	7f ef       	ldi	r23, 0xFF	; 255
     e10:	c5 01       	movw	r24, r10
     e12:	2c 87       	std	Y+12, r18	; 0x0c
     e14:	14 d1       	rcall	.+552    	; 0x103e <strnlen_P>
     e16:	2c 01       	movw	r4, r24
     e18:	2c 85       	ldd	r18, Y+12	; 0x0c
     e1a:	20 68       	ori	r18, 0x80	; 128
     e1c:	22 2e       	mov	r2, r18
     e1e:	83 01       	movw	r16, r6
     e20:	23 fc       	sbrc	r2, 3
     e22:	19 c0       	rjmp	.+50     	; 0xe56 <vfprintf+0x19e>
     e24:	83 2d       	mov	r24, r3
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	48 16       	cp	r4, r24
     e2a:	59 06       	cpc	r5, r25
     e2c:	a0 f4       	brcc	.+40     	; 0xe56 <vfprintf+0x19e>
     e2e:	b7 01       	movw	r22, r14
     e30:	80 e2       	ldi	r24, 0x20	; 32
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	1a d1       	rcall	.+564    	; 0x106a <fputc>
     e36:	3a 94       	dec	r3
     e38:	f5 cf       	rjmp	.-22     	; 0xe24 <vfprintf+0x16c>
     e3a:	f5 01       	movw	r30, r10
     e3c:	27 fc       	sbrc	r2, 7
     e3e:	85 91       	lpm	r24, Z+
     e40:	27 fe       	sbrs	r2, 7
     e42:	81 91       	ld	r24, Z+
     e44:	5f 01       	movw	r10, r30
     e46:	b7 01       	movw	r22, r14
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0f d1       	rcall	.+542    	; 0x106a <fputc>
     e4c:	31 10       	cpse	r3, r1
     e4e:	3a 94       	dec	r3
     e50:	f1 e0       	ldi	r31, 0x01	; 1
     e52:	4f 1a       	sub	r4, r31
     e54:	51 08       	sbc	r5, r1
     e56:	41 14       	cp	r4, r1
     e58:	51 04       	cpc	r5, r1
     e5a:	79 f7       	brne	.-34     	; 0xe3a <vfprintf+0x182>
     e5c:	de c0       	rjmp	.+444    	; 0x101a <vfprintf+0x362>
     e5e:	84 36       	cpi	r24, 0x64	; 100
     e60:	11 f0       	breq	.+4      	; 0xe66 <vfprintf+0x1ae>
     e62:	89 36       	cpi	r24, 0x69	; 105
     e64:	31 f5       	brne	.+76     	; 0xeb2 <vfprintf+0x1fa>
     e66:	f8 01       	movw	r30, r16
     e68:	27 ff       	sbrs	r18, 7
     e6a:	07 c0       	rjmp	.+14     	; 0xe7a <vfprintf+0x1c2>
     e6c:	60 81       	ld	r22, Z
     e6e:	71 81       	ldd	r23, Z+1	; 0x01
     e70:	82 81       	ldd	r24, Z+2	; 0x02
     e72:	93 81       	ldd	r25, Z+3	; 0x03
     e74:	0c 5f       	subi	r16, 0xFC	; 252
     e76:	1f 4f       	sbci	r17, 0xFF	; 255
     e78:	08 c0       	rjmp	.+16     	; 0xe8a <vfprintf+0x1d2>
     e7a:	60 81       	ld	r22, Z
     e7c:	71 81       	ldd	r23, Z+1	; 0x01
     e7e:	88 27       	eor	r24, r24
     e80:	77 fd       	sbrc	r23, 7
     e82:	80 95       	com	r24
     e84:	98 2f       	mov	r25, r24
     e86:	0e 5f       	subi	r16, 0xFE	; 254
     e88:	1f 4f       	sbci	r17, 0xFF	; 255
     e8a:	2f 76       	andi	r18, 0x6F	; 111
     e8c:	b2 2e       	mov	r11, r18
     e8e:	97 ff       	sbrs	r25, 7
     e90:	09 c0       	rjmp	.+18     	; 0xea4 <vfprintf+0x1ec>
     e92:	90 95       	com	r25
     e94:	80 95       	com	r24
     e96:	70 95       	com	r23
     e98:	61 95       	neg	r22
     e9a:	7f 4f       	sbci	r23, 0xFF	; 255
     e9c:	8f 4f       	sbci	r24, 0xFF	; 255
     e9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ea0:	20 68       	ori	r18, 0x80	; 128
     ea2:	b2 2e       	mov	r11, r18
     ea4:	2a e0       	ldi	r18, 0x0A	; 10
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	a4 01       	movw	r20, r8
     eaa:	11 d1       	rcall	.+546    	; 0x10ce <__ultoa_invert>
     eac:	a8 2e       	mov	r10, r24
     eae:	a8 18       	sub	r10, r8
     eb0:	43 c0       	rjmp	.+134    	; 0xf38 <vfprintf+0x280>
     eb2:	85 37       	cpi	r24, 0x75	; 117
     eb4:	29 f4       	brne	.+10     	; 0xec0 <vfprintf+0x208>
     eb6:	2f 7e       	andi	r18, 0xEF	; 239
     eb8:	b2 2e       	mov	r11, r18
     eba:	2a e0       	ldi	r18, 0x0A	; 10
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	25 c0       	rjmp	.+74     	; 0xf0a <vfprintf+0x252>
     ec0:	f2 2f       	mov	r31, r18
     ec2:	f9 7f       	andi	r31, 0xF9	; 249
     ec4:	bf 2e       	mov	r11, r31
     ec6:	8f 36       	cpi	r24, 0x6F	; 111
     ec8:	c1 f0       	breq	.+48     	; 0xefa <vfprintf+0x242>
     eca:	18 f4       	brcc	.+6      	; 0xed2 <vfprintf+0x21a>
     ecc:	88 35       	cpi	r24, 0x58	; 88
     ece:	79 f0       	breq	.+30     	; 0xeee <vfprintf+0x236>
     ed0:	ad c0       	rjmp	.+346    	; 0x102c <vfprintf+0x374>
     ed2:	80 37       	cpi	r24, 0x70	; 112
     ed4:	19 f0       	breq	.+6      	; 0xedc <vfprintf+0x224>
     ed6:	88 37       	cpi	r24, 0x78	; 120
     ed8:	21 f0       	breq	.+8      	; 0xee2 <vfprintf+0x22a>
     eda:	a8 c0       	rjmp	.+336    	; 0x102c <vfprintf+0x374>
     edc:	2f 2f       	mov	r18, r31
     ede:	20 61       	ori	r18, 0x10	; 16
     ee0:	b2 2e       	mov	r11, r18
     ee2:	b4 fe       	sbrs	r11, 4
     ee4:	0d c0       	rjmp	.+26     	; 0xf00 <vfprintf+0x248>
     ee6:	8b 2d       	mov	r24, r11
     ee8:	84 60       	ori	r24, 0x04	; 4
     eea:	b8 2e       	mov	r11, r24
     eec:	09 c0       	rjmp	.+18     	; 0xf00 <vfprintf+0x248>
     eee:	24 ff       	sbrs	r18, 4
     ef0:	0a c0       	rjmp	.+20     	; 0xf06 <vfprintf+0x24e>
     ef2:	9f 2f       	mov	r25, r31
     ef4:	96 60       	ori	r25, 0x06	; 6
     ef6:	b9 2e       	mov	r11, r25
     ef8:	06 c0       	rjmp	.+12     	; 0xf06 <vfprintf+0x24e>
     efa:	28 e0       	ldi	r18, 0x08	; 8
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	05 c0       	rjmp	.+10     	; 0xf0a <vfprintf+0x252>
     f00:	20 e1       	ldi	r18, 0x10	; 16
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <vfprintf+0x252>
     f06:	20 e1       	ldi	r18, 0x10	; 16
     f08:	32 e0       	ldi	r19, 0x02	; 2
     f0a:	f8 01       	movw	r30, r16
     f0c:	b7 fe       	sbrs	r11, 7
     f0e:	07 c0       	rjmp	.+14     	; 0xf1e <vfprintf+0x266>
     f10:	60 81       	ld	r22, Z
     f12:	71 81       	ldd	r23, Z+1	; 0x01
     f14:	82 81       	ldd	r24, Z+2	; 0x02
     f16:	93 81       	ldd	r25, Z+3	; 0x03
     f18:	0c 5f       	subi	r16, 0xFC	; 252
     f1a:	1f 4f       	sbci	r17, 0xFF	; 255
     f1c:	06 c0       	rjmp	.+12     	; 0xf2a <vfprintf+0x272>
     f1e:	60 81       	ld	r22, Z
     f20:	71 81       	ldd	r23, Z+1	; 0x01
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 5f       	subi	r16, 0xFE	; 254
     f28:	1f 4f       	sbci	r17, 0xFF	; 255
     f2a:	a4 01       	movw	r20, r8
     f2c:	d0 d0       	rcall	.+416    	; 0x10ce <__ultoa_invert>
     f2e:	a8 2e       	mov	r10, r24
     f30:	a8 18       	sub	r10, r8
     f32:	fb 2d       	mov	r31, r11
     f34:	ff 77       	andi	r31, 0x7F	; 127
     f36:	bf 2e       	mov	r11, r31
     f38:	b6 fe       	sbrs	r11, 6
     f3a:	0b c0       	rjmp	.+22     	; 0xf52 <vfprintf+0x29a>
     f3c:	2b 2d       	mov	r18, r11
     f3e:	2e 7f       	andi	r18, 0xFE	; 254
     f40:	a5 14       	cp	r10, r5
     f42:	50 f4       	brcc	.+20     	; 0xf58 <vfprintf+0x2a0>
     f44:	b4 fe       	sbrs	r11, 4
     f46:	0a c0       	rjmp	.+20     	; 0xf5c <vfprintf+0x2a4>
     f48:	b2 fc       	sbrc	r11, 2
     f4a:	08 c0       	rjmp	.+16     	; 0xf5c <vfprintf+0x2a4>
     f4c:	2b 2d       	mov	r18, r11
     f4e:	2e 7e       	andi	r18, 0xEE	; 238
     f50:	05 c0       	rjmp	.+10     	; 0xf5c <vfprintf+0x2a4>
     f52:	7a 2c       	mov	r7, r10
     f54:	2b 2d       	mov	r18, r11
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <vfprintf+0x2a6>
     f58:	7a 2c       	mov	r7, r10
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <vfprintf+0x2a6>
     f5c:	75 2c       	mov	r7, r5
     f5e:	24 ff       	sbrs	r18, 4
     f60:	0d c0       	rjmp	.+26     	; 0xf7c <vfprintf+0x2c4>
     f62:	fe 01       	movw	r30, r28
     f64:	ea 0d       	add	r30, r10
     f66:	f1 1d       	adc	r31, r1
     f68:	80 81       	ld	r24, Z
     f6a:	80 33       	cpi	r24, 0x30	; 48
     f6c:	11 f4       	brne	.+4      	; 0xf72 <vfprintf+0x2ba>
     f6e:	29 7e       	andi	r18, 0xE9	; 233
     f70:	09 c0       	rjmp	.+18     	; 0xf84 <vfprintf+0x2cc>
     f72:	22 ff       	sbrs	r18, 2
     f74:	06 c0       	rjmp	.+12     	; 0xf82 <vfprintf+0x2ca>
     f76:	73 94       	inc	r7
     f78:	73 94       	inc	r7
     f7a:	04 c0       	rjmp	.+8      	; 0xf84 <vfprintf+0x2cc>
     f7c:	82 2f       	mov	r24, r18
     f7e:	86 78       	andi	r24, 0x86	; 134
     f80:	09 f0       	breq	.+2      	; 0xf84 <vfprintf+0x2cc>
     f82:	73 94       	inc	r7
     f84:	23 fd       	sbrc	r18, 3
     f86:	12 c0       	rjmp	.+36     	; 0xfac <vfprintf+0x2f4>
     f88:	20 ff       	sbrs	r18, 0
     f8a:	06 c0       	rjmp	.+12     	; 0xf98 <vfprintf+0x2e0>
     f8c:	5a 2c       	mov	r5, r10
     f8e:	73 14       	cp	r7, r3
     f90:	18 f4       	brcc	.+6      	; 0xf98 <vfprintf+0x2e0>
     f92:	53 0c       	add	r5, r3
     f94:	57 18       	sub	r5, r7
     f96:	73 2c       	mov	r7, r3
     f98:	73 14       	cp	r7, r3
     f9a:	60 f4       	brcc	.+24     	; 0xfb4 <vfprintf+0x2fc>
     f9c:	b7 01       	movw	r22, r14
     f9e:	80 e2       	ldi	r24, 0x20	; 32
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	2c 87       	std	Y+12, r18	; 0x0c
     fa4:	62 d0       	rcall	.+196    	; 0x106a <fputc>
     fa6:	73 94       	inc	r7
     fa8:	2c 85       	ldd	r18, Y+12	; 0x0c
     faa:	f6 cf       	rjmp	.-20     	; 0xf98 <vfprintf+0x2e0>
     fac:	73 14       	cp	r7, r3
     fae:	10 f4       	brcc	.+4      	; 0xfb4 <vfprintf+0x2fc>
     fb0:	37 18       	sub	r3, r7
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <vfprintf+0x2fe>
     fb4:	31 2c       	mov	r3, r1
     fb6:	24 ff       	sbrs	r18, 4
     fb8:	11 c0       	rjmp	.+34     	; 0xfdc <vfprintf+0x324>
     fba:	b7 01       	movw	r22, r14
     fbc:	80 e3       	ldi	r24, 0x30	; 48
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	2c 87       	std	Y+12, r18	; 0x0c
     fc2:	53 d0       	rcall	.+166    	; 0x106a <fputc>
     fc4:	2c 85       	ldd	r18, Y+12	; 0x0c
     fc6:	22 ff       	sbrs	r18, 2
     fc8:	16 c0       	rjmp	.+44     	; 0xff6 <vfprintf+0x33e>
     fca:	21 ff       	sbrs	r18, 1
     fcc:	03 c0       	rjmp	.+6      	; 0xfd4 <vfprintf+0x31c>
     fce:	88 e5       	ldi	r24, 0x58	; 88
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <vfprintf+0x320>
     fd4:	88 e7       	ldi	r24, 0x78	; 120
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	b7 01       	movw	r22, r14
     fda:	0c c0       	rjmp	.+24     	; 0xff4 <vfprintf+0x33c>
     fdc:	82 2f       	mov	r24, r18
     fde:	86 78       	andi	r24, 0x86	; 134
     fe0:	51 f0       	breq	.+20     	; 0xff6 <vfprintf+0x33e>
     fe2:	21 fd       	sbrc	r18, 1
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <vfprintf+0x332>
     fe6:	80 e2       	ldi	r24, 0x20	; 32
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <vfprintf+0x334>
     fea:	8b e2       	ldi	r24, 0x2B	; 43
     fec:	27 fd       	sbrc	r18, 7
     fee:	8d e2       	ldi	r24, 0x2D	; 45
     ff0:	b7 01       	movw	r22, r14
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	3a d0       	rcall	.+116    	; 0x106a <fputc>
     ff6:	a5 14       	cp	r10, r5
     ff8:	30 f4       	brcc	.+12     	; 0x1006 <vfprintf+0x34e>
     ffa:	b7 01       	movw	r22, r14
     ffc:	80 e3       	ldi	r24, 0x30	; 48
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	34 d0       	rcall	.+104    	; 0x106a <fputc>
    1002:	5a 94       	dec	r5
    1004:	f8 cf       	rjmp	.-16     	; 0xff6 <vfprintf+0x33e>
    1006:	aa 94       	dec	r10
    1008:	f4 01       	movw	r30, r8
    100a:	ea 0d       	add	r30, r10
    100c:	f1 1d       	adc	r31, r1
    100e:	80 81       	ld	r24, Z
    1010:	b7 01       	movw	r22, r14
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	2a d0       	rcall	.+84     	; 0x106a <fputc>
    1016:	a1 10       	cpse	r10, r1
    1018:	f6 cf       	rjmp	.-20     	; 0x1006 <vfprintf+0x34e>
    101a:	33 20       	and	r3, r3
    101c:	09 f4       	brne	.+2      	; 0x1020 <vfprintf+0x368>
    101e:	5d ce       	rjmp	.-838    	; 0xcda <vfprintf+0x22>
    1020:	b7 01       	movw	r22, r14
    1022:	80 e2       	ldi	r24, 0x20	; 32
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	21 d0       	rcall	.+66     	; 0x106a <fputc>
    1028:	3a 94       	dec	r3
    102a:	f7 cf       	rjmp	.-18     	; 0x101a <vfprintf+0x362>
    102c:	f7 01       	movw	r30, r14
    102e:	86 81       	ldd	r24, Z+6	; 0x06
    1030:	97 81       	ldd	r25, Z+7	; 0x07
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <vfprintf+0x380>
    1034:	8f ef       	ldi	r24, 0xFF	; 255
    1036:	9f ef       	ldi	r25, 0xFF	; 255
    1038:	2c 96       	adiw	r28, 0x0c	; 12
    103a:	e2 e1       	ldi	r30, 0x12	; 18
    103c:	c2 c0       	rjmp	.+388    	; 0x11c2 <__epilogue_restores__>

0000103e <strnlen_P>:
    103e:	fc 01       	movw	r30, r24
    1040:	05 90       	lpm	r0, Z+
    1042:	61 50       	subi	r22, 0x01	; 1
    1044:	70 40       	sbci	r23, 0x00	; 0
    1046:	01 10       	cpse	r0, r1
    1048:	d8 f7       	brcc	.-10     	; 0x1040 <strnlen_P+0x2>
    104a:	80 95       	com	r24
    104c:	90 95       	com	r25
    104e:	8e 0f       	add	r24, r30
    1050:	9f 1f       	adc	r25, r31
    1052:	08 95       	ret

00001054 <strnlen>:
    1054:	fc 01       	movw	r30, r24
    1056:	61 50       	subi	r22, 0x01	; 1
    1058:	70 40       	sbci	r23, 0x00	; 0
    105a:	01 90       	ld	r0, Z+
    105c:	01 10       	cpse	r0, r1
    105e:	d8 f7       	brcc	.-10     	; 0x1056 <strnlen+0x2>
    1060:	80 95       	com	r24
    1062:	90 95       	com	r25
    1064:	8e 0f       	add	r24, r30
    1066:	9f 1f       	adc	r25, r31
    1068:	08 95       	ret

0000106a <fputc>:
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	18 2f       	mov	r17, r24
    1074:	09 2f       	mov	r16, r25
    1076:	eb 01       	movw	r28, r22
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	81 fd       	sbrc	r24, 1
    107c:	03 c0       	rjmp	.+6      	; 0x1084 <fputc+0x1a>
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	9f ef       	ldi	r25, 0xFF	; 255
    1082:	20 c0       	rjmp	.+64     	; 0x10c4 <fputc+0x5a>
    1084:	82 ff       	sbrs	r24, 2
    1086:	10 c0       	rjmp	.+32     	; 0x10a8 <fputc+0x3e>
    1088:	4e 81       	ldd	r20, Y+6	; 0x06
    108a:	5f 81       	ldd	r21, Y+7	; 0x07
    108c:	2c 81       	ldd	r18, Y+4	; 0x04
    108e:	3d 81       	ldd	r19, Y+5	; 0x05
    1090:	42 17       	cp	r20, r18
    1092:	53 07       	cpc	r21, r19
    1094:	7c f4       	brge	.+30     	; 0x10b4 <fputc+0x4a>
    1096:	e8 81       	ld	r30, Y
    1098:	f9 81       	ldd	r31, Y+1	; 0x01
    109a:	9f 01       	movw	r18, r30
    109c:	2f 5f       	subi	r18, 0xFF	; 255
    109e:	3f 4f       	sbci	r19, 0xFF	; 255
    10a0:	39 83       	std	Y+1, r19	; 0x01
    10a2:	28 83       	st	Y, r18
    10a4:	10 83       	st	Z, r17
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <fputc+0x4a>
    10a8:	e8 85       	ldd	r30, Y+8	; 0x08
    10aa:	f9 85       	ldd	r31, Y+9	; 0x09
    10ac:	81 2f       	mov	r24, r17
    10ae:	09 95       	icall
    10b0:	89 2b       	or	r24, r25
    10b2:	29 f7       	brne	.-54     	; 0x107e <fputc+0x14>
    10b4:	2e 81       	ldd	r18, Y+6	; 0x06
    10b6:	3f 81       	ldd	r19, Y+7	; 0x07
    10b8:	2f 5f       	subi	r18, 0xFF	; 255
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	3f 83       	std	Y+7, r19	; 0x07
    10be:	2e 83       	std	Y+6, r18	; 0x06
    10c0:	81 2f       	mov	r24, r17
    10c2:	90 2f       	mov	r25, r16
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	08 95       	ret

000010ce <__ultoa_invert>:
    10ce:	fa 01       	movw	r30, r20
    10d0:	aa 27       	eor	r26, r26
    10d2:	28 30       	cpi	r18, 0x08	; 8
    10d4:	51 f1       	breq	.+84     	; 0x112a <__ultoa_invert+0x5c>
    10d6:	20 31       	cpi	r18, 0x10	; 16
    10d8:	81 f1       	breq	.+96     	; 0x113a <__ultoa_invert+0x6c>
    10da:	e8 94       	clt
    10dc:	6f 93       	push	r22
    10de:	6e 7f       	andi	r22, 0xFE	; 254
    10e0:	6e 5f       	subi	r22, 0xFE	; 254
    10e2:	7f 4f       	sbci	r23, 0xFF	; 255
    10e4:	8f 4f       	sbci	r24, 0xFF	; 255
    10e6:	9f 4f       	sbci	r25, 0xFF	; 255
    10e8:	af 4f       	sbci	r26, 0xFF	; 255
    10ea:	b1 e0       	ldi	r27, 0x01	; 1
    10ec:	3e d0       	rcall	.+124    	; 0x116a <__ultoa_invert+0x9c>
    10ee:	b4 e0       	ldi	r27, 0x04	; 4
    10f0:	3c d0       	rcall	.+120    	; 0x116a <__ultoa_invert+0x9c>
    10f2:	67 0f       	add	r22, r23
    10f4:	78 1f       	adc	r23, r24
    10f6:	89 1f       	adc	r24, r25
    10f8:	9a 1f       	adc	r25, r26
    10fa:	a1 1d       	adc	r26, r1
    10fc:	68 0f       	add	r22, r24
    10fe:	79 1f       	adc	r23, r25
    1100:	8a 1f       	adc	r24, r26
    1102:	91 1d       	adc	r25, r1
    1104:	a1 1d       	adc	r26, r1
    1106:	6a 0f       	add	r22, r26
    1108:	71 1d       	adc	r23, r1
    110a:	81 1d       	adc	r24, r1
    110c:	91 1d       	adc	r25, r1
    110e:	a1 1d       	adc	r26, r1
    1110:	20 d0       	rcall	.+64     	; 0x1152 <__ultoa_invert+0x84>
    1112:	09 f4       	brne	.+2      	; 0x1116 <__ultoa_invert+0x48>
    1114:	68 94       	set
    1116:	3f 91       	pop	r19
    1118:	2a e0       	ldi	r18, 0x0A	; 10
    111a:	26 9f       	mul	r18, r22
    111c:	11 24       	eor	r1, r1
    111e:	30 19       	sub	r19, r0
    1120:	30 5d       	subi	r19, 0xD0	; 208
    1122:	31 93       	st	Z+, r19
    1124:	de f6       	brtc	.-74     	; 0x10dc <__ultoa_invert+0xe>
    1126:	cf 01       	movw	r24, r30
    1128:	08 95       	ret
    112a:	46 2f       	mov	r20, r22
    112c:	47 70       	andi	r20, 0x07	; 7
    112e:	40 5d       	subi	r20, 0xD0	; 208
    1130:	41 93       	st	Z+, r20
    1132:	b3 e0       	ldi	r27, 0x03	; 3
    1134:	0f d0       	rcall	.+30     	; 0x1154 <__ultoa_invert+0x86>
    1136:	c9 f7       	brne	.-14     	; 0x112a <__ultoa_invert+0x5c>
    1138:	f6 cf       	rjmp	.-20     	; 0x1126 <__ultoa_invert+0x58>
    113a:	46 2f       	mov	r20, r22
    113c:	4f 70       	andi	r20, 0x0F	; 15
    113e:	40 5d       	subi	r20, 0xD0	; 208
    1140:	4a 33       	cpi	r20, 0x3A	; 58
    1142:	18 f0       	brcs	.+6      	; 0x114a <__ultoa_invert+0x7c>
    1144:	49 5d       	subi	r20, 0xD9	; 217
    1146:	31 fd       	sbrc	r19, 1
    1148:	40 52       	subi	r20, 0x20	; 32
    114a:	41 93       	st	Z+, r20
    114c:	02 d0       	rcall	.+4      	; 0x1152 <__ultoa_invert+0x84>
    114e:	a9 f7       	brne	.-22     	; 0x113a <__ultoa_invert+0x6c>
    1150:	ea cf       	rjmp	.-44     	; 0x1126 <__ultoa_invert+0x58>
    1152:	b4 e0       	ldi	r27, 0x04	; 4
    1154:	a6 95       	lsr	r26
    1156:	97 95       	ror	r25
    1158:	87 95       	ror	r24
    115a:	77 95       	ror	r23
    115c:	67 95       	ror	r22
    115e:	ba 95       	dec	r27
    1160:	c9 f7       	brne	.-14     	; 0x1154 <__ultoa_invert+0x86>
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	61 05       	cpc	r22, r1
    1166:	71 05       	cpc	r23, r1
    1168:	08 95       	ret
    116a:	9b 01       	movw	r18, r22
    116c:	ac 01       	movw	r20, r24
    116e:	0a 2e       	mov	r0, r26
    1170:	06 94       	lsr	r0
    1172:	57 95       	ror	r21
    1174:	47 95       	ror	r20
    1176:	37 95       	ror	r19
    1178:	27 95       	ror	r18
    117a:	ba 95       	dec	r27
    117c:	c9 f7       	brne	.-14     	; 0x1170 <__ultoa_invert+0xa2>
    117e:	62 0f       	add	r22, r18
    1180:	73 1f       	adc	r23, r19
    1182:	84 1f       	adc	r24, r20
    1184:	95 1f       	adc	r25, r21
    1186:	a0 1d       	adc	r26, r0
    1188:	08 95       	ret

0000118a <__prologue_saves__>:
    118a:	2f 92       	push	r2
    118c:	3f 92       	push	r3
    118e:	4f 92       	push	r4
    1190:	5f 92       	push	r5
    1192:	6f 92       	push	r6
    1194:	7f 92       	push	r7
    1196:	8f 92       	push	r8
    1198:	9f 92       	push	r9
    119a:	af 92       	push	r10
    119c:	bf 92       	push	r11
    119e:	cf 92       	push	r12
    11a0:	df 92       	push	r13
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	ca 1b       	sub	r28, r26
    11b4:	db 0b       	sbc	r29, r27
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	09 94       	ijmp

000011c2 <__epilogue_restores__>:
    11c2:	2a 88       	ldd	r2, Y+18	; 0x12
    11c4:	39 88       	ldd	r3, Y+17	; 0x11
    11c6:	48 88       	ldd	r4, Y+16	; 0x10
    11c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    11ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    11cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    11ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    11d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    11d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    11d4:	b9 84       	ldd	r11, Y+9	; 0x09
    11d6:	c8 84       	ldd	r12, Y+8	; 0x08
    11d8:	df 80       	ldd	r13, Y+7	; 0x07
    11da:	ee 80       	ldd	r14, Y+6	; 0x06
    11dc:	fd 80       	ldd	r15, Y+5	; 0x05
    11de:	0c 81       	ldd	r16, Y+4	; 0x04
    11e0:	1b 81       	ldd	r17, Y+3	; 0x03
    11e2:	aa 81       	ldd	r26, Y+2	; 0x02
    11e4:	b9 81       	ldd	r27, Y+1	; 0x01
    11e6:	ce 0f       	add	r28, r30
    11e8:	d1 1d       	adc	r29, r1
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	ed 01       	movw	r28, r26
    11f6:	08 95       	ret

000011f8 <_exit>:
    11f8:	f8 94       	cli

000011fa <__stop_program>:
    11fa:	ff cf       	rjmp	.-2      	; 0x11fa <__stop_program>
