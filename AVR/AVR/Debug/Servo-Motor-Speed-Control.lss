
Servo-Motor-Speed-Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000163c  000016d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000163c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080011c  0080011c  000016ec  2**0
                  ALLOC
  3 .stab         00000f3c  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000356  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000297e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000198  00000000  00000000  000029ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001ba6  00000000  00000000  00002b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ba4  00000000  00000000  000046eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000cdb  00000000  00000000  0000528f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000056c  00000000  00000000  00005f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000606  00000000  00000000  000064d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001847  00000000  00000000  00006ade  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000168  00000000  00000000  00008325  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	22 c0       	rjmp	.+68     	; 0x46 <__ctors_end>
       2:	3c c0       	rjmp	.+120    	; 0x7c <__bad_interrupt>
       4:	3b c0       	rjmp	.+118    	; 0x7c <__bad_interrupt>
       6:	3a c0       	rjmp	.+116    	; 0x7c <__bad_interrupt>
       8:	ea c1       	rjmp	.+980    	; 0x3de <__vector_4>
       a:	38 c0       	rjmp	.+112    	; 0x7c <__bad_interrupt>
       c:	37 c0       	rjmp	.+110    	; 0x7c <__bad_interrupt>
       e:	36 c0       	rjmp	.+108    	; 0x7c <__bad_interrupt>
      10:	35 c0       	rjmp	.+106    	; 0x7c <__bad_interrupt>
      12:	23 c2       	rjmp	.+1094   	; 0x45a <__vector_9>
      14:	33 c0       	rjmp	.+102    	; 0x7c <__bad_interrupt>
      16:	32 c0       	rjmp	.+100    	; 0x7c <__bad_interrupt>
      18:	31 c0       	rjmp	.+98     	; 0x7c <__bad_interrupt>
      1a:	30 c0       	rjmp	.+96     	; 0x7c <__bad_interrupt>
      1c:	2f c0       	rjmp	.+94     	; 0x7c <__bad_interrupt>
      1e:	2e c0       	rjmp	.+92     	; 0x7c <__bad_interrupt>
      20:	2d c0       	rjmp	.+90     	; 0x7c <__bad_interrupt>
      22:	2c c0       	rjmp	.+88     	; 0x7c <__bad_interrupt>
      24:	07 c4       	rjmp	.+2062   	; 0x834 <__vector_18>
      26:	2a c0       	rjmp	.+84     	; 0x7c <__bad_interrupt>
      28:	29 c0       	rjmp	.+82     	; 0x7c <__bad_interrupt>
      2a:	28 c0       	rjmp	.+80     	; 0x7c <__bad_interrupt>
      2c:	27 c0       	rjmp	.+78     	; 0x7c <__bad_interrupt>
      2e:	26 c0       	rjmp	.+76     	; 0x7c <__bad_interrupt>
      30:	25 c0       	rjmp	.+74     	; 0x7c <__bad_interrupt>
      32:	24 c0       	rjmp	.+72     	; 0x7c <__bad_interrupt>
      34:	b4 c4       	rjmp	.+2408   	; 0x99e <main+0x7c>
      36:	ba c4       	rjmp	.+2420   	; 0x9ac <main+0x8a>
      38:	bf c4       	rjmp	.+2430   	; 0x9b8 <main+0x96>
      3a:	c4 c4       	rjmp	.+2440   	; 0x9c4 <main+0xa2>
      3c:	c9 c4       	rjmp	.+2450   	; 0x9d0 <main+0xae>
      3e:	ce c4       	rjmp	.+2460   	; 0x9dc <main+0xba>
      40:	d3 c4       	rjmp	.+2470   	; 0x9e8 <main+0xc6>
      42:	d8 c4       	rjmp	.+2480   	; 0x9f4 <main+0xd2>
      44:	dd c4       	rjmp	.+2490   	; 0xa00 <main+0xde>

00000046 <__ctors_end>:
      46:	11 24       	eor	r1, r1
      48:	1f be       	out	0x3f, r1	; 63
      4a:	cf ef       	ldi	r28, 0xFF	; 255
      4c:	d4 e0       	ldi	r29, 0x04	; 4
      4e:	de bf       	out	0x3e, r29	; 62
      50:	cd bf       	out	0x3d, r28	; 61

00000052 <__do_copy_data>:
      52:	11 e0       	ldi	r17, 0x01	; 1
      54:	a0 e0       	ldi	r26, 0x00	; 0
      56:	b1 e0       	ldi	r27, 0x01	; 1
      58:	ec e3       	ldi	r30, 0x3C	; 60
      5a:	f6 e1       	ldi	r31, 0x16	; 22
      5c:	02 c0       	rjmp	.+4      	; 0x62 <__do_copy_data+0x10>
      5e:	05 90       	lpm	r0, Z+
      60:	0d 92       	st	X+, r0
      62:	ac 31       	cpi	r26, 0x1C	; 28
      64:	b1 07       	cpc	r27, r17
      66:	d9 f7       	brne	.-10     	; 0x5e <__do_copy_data+0xc>

00000068 <__do_clear_bss>:
      68:	21 e0       	ldi	r18, 0x01	; 1
      6a:	ac e1       	ldi	r26, 0x1C	; 28
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	01 c0       	rjmp	.+2      	; 0x72 <.do_clear_bss_start>

00000070 <.do_clear_bss_loop>:
      70:	1d 92       	st	X+, r1

00000072 <.do_clear_bss_start>:
      72:	ab 32       	cpi	r26, 0x2B	; 43
      74:	b2 07       	cpc	r27, r18
      76:	e1 f7       	brne	.-8      	; 0x70 <.do_clear_bss_loop>
      78:	54 d4       	rcall	.+2216   	; 0x922 <main>
      7a:	de ca       	rjmp	.-2628   	; 0xfffff638 <__eeprom_end+0xff7ef638>

0000007c <__bad_interrupt>:
      7c:	c1 cf       	rjmp	.-126    	; 0x0 <__vectors>

0000007e <init_shared_data>:
} Shared_Data;

/*
 * Initiates the struct variables.
*/
void init_shared_data(Shared_Data* shared_ptr){
      7e:	fc 01       	movw	r30, r24
	shared_ptr->speed_set = 0;
      80:	11 82       	std	Z+1, r1	; 0x01
      82:	10 82       	st	Z, r1
	shared_ptr->pwm = 0;
      84:	13 82       	std	Z+3, r1	; 0x03
      86:	12 82       	std	Z+2, r1	; 0x02
	shared_ptr->error = 0;
      88:	15 82       	std	Z+5, r1	; 0x05
      8a:	14 82       	std	Z+4, r1	; 0x04
	shared_ptr->fine_tuning = 0;
      8c:	17 82       	std	Z+7, r1	; 0x07
      8e:	16 82       	std	Z+6, r1	; 0x06
	shared_ptr->integral = 0;
      90:	10 86       	std	Z+8, r1	; 0x08
      92:	11 86       	std	Z+9, r1	; 0x09
      94:	12 86       	std	Z+10, r1	; 0x0a
      96:	13 86       	std	Z+11, r1	; 0x0b
      98:	14 86       	std	Z+12, r1	; 0x0c
      9a:	15 86       	std	Z+13, r1	; 0x0d
      9c:	16 86       	std	Z+14, r1	; 0x0e
      9e:	17 86       	std	Z+15, r1	; 0x0f
	shared_ptr->rpm_curr = 0;
      a0:	10 8a       	std	Z+16, r1	; 0x10
      a2:	11 8a       	std	Z+17, r1	; 0x11
      a4:	12 8a       	std	Z+18, r1	; 0x12
      a6:	13 8a       	std	Z+19, r1	; 0x13
	shared_ptr->rpm_avg = 0;
      a8:	14 8a       	std	Z+20, r1	; 0x14
      aa:	15 8a       	std	Z+21, r1	; 0x15
      ac:	16 8a       	std	Z+22, r1	; 0x16
      ae:	17 8a       	std	Z+23, r1	; 0x17
	shared_ptr->delta_time = 0;
      b0:	e8 5e       	subi	r30, 0xE8	; 232
      b2:	fd 4f       	sbci	r31, 0xFD	; 253
      b4:	10 82       	st	Z, r1
      b6:	11 82       	std	Z+1, r1	; 0x01
      b8:	12 82       	std	Z+2, r1	; 0x02
      ba:	13 82       	std	Z+3, r1	; 0x03
      bc:	08 95       	ret

000000be <set_prescale>:

/* 
 *
*/
static void set_prescale(int ps){
	if (ps == 1){
      be:	81 30       	cpi	r24, 0x01	; 1
      c0:	91 05       	cpc	r25, r1
      c2:	39 f4       	brne	.+14     	; 0xd2 <set_prescale+0x14>
		TCCR1B &= ~ 0xff;
      c4:	e1 e8       	ldi	r30, 0x81	; 129
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	80 81       	ld	r24, Z
      ca:	10 82       	st	Z, r1
		TCCR1B = (1 << CS10);
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	80 83       	st	Z, r24
      d0:	08 95       	ret
	}
	else if(ps == 8){
      d2:	08 97       	sbiw	r24, 0x08	; 8
      d4:	31 f4       	brne	.+12     	; 0xe2 <set_prescale+0x24>
		TCCR1B &= ~ 0xff;
      d6:	e1 e8       	ldi	r30, 0x81	; 129
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	10 82       	st	Z, r1
		TCCR1B = (1 << CS11);
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	80 83       	st	Z, r24
      e2:	08 95       	ret

000000e4 <update_fine_tuning>:

/*
 * Updates the fine tuning value to first calculation since last function call.
 * Stores the value in shared_ptr->fine_tuning
*/
void update_fine_tuning(Shared_Data* shared_ptr){
      e4:	fc 01       	movw	r30, r24
	short fine_tuning;
	
	fine_tuning = ADCL;	
      e6:	80 91 78 00 	lds	r24, 0x0078
	fine_tuning |= (ADCH << 8);	// value: 0-1024
      ea:	90 91 79 00 	lds	r25, 0x0079
      ee:	39 2f       	mov	r19, r25
      f0:	20 e0       	ldi	r18, 0x00	; 0
      f2:	28 2b       	or	r18, r24
	TIFR1 |= (1 << TOV0);	// clear timer1 overflow flag
      f4:	b0 9a       	sbi	0x16, 0	; 22
	
	fine_tuning = (fine_tuning << 1);   // value: 0 - 2048
      f6:	c9 01       	movw	r24, r18
      f8:	88 0f       	add	r24, r24
      fa:	99 1f       	adc	r25, r25
	fine_tuning = fine_tuning - 1024;   // value: -1028 - 1028
      fc:	94 50       	subi	r25, 0x04	; 4
	fine_tuning = fine_tuning/100;		// value: -10 - 10
      fe:	64 e6       	ldi	r22, 0x64	; 100
     100:	70 e0       	ldi	r23, 0x00	; 0
     102:	88 d6       	rcall	.+3344   	; 0xe14 <__divmodhi4>
	
	shared_ptr->fine_tuning = fine_tuning;
     104:	77 83       	std	Z+7, r23	; 0x07
     106:	66 83       	std	Z+6, r22	; 0x06
     108:	08 95       	ret

0000010a <calc_latest_rpm>:
/*	
 * Calculates the speed between two encoder-interrupts, using fixed point arithmetics.
 * Inserts the speed to the rpm-array in shared_ptr->rpm_measurements
 * Qm.n values defined in shared.h
*/
void calc_latest_rpm(Shared_Data* shared_ptr){
     10a:	4f 92       	push	r4
     10c:	5f 92       	push	r5
     10e:	6f 92       	push	r6
     110:	7f 92       	push	r7
     112:	8f 92       	push	r8
     114:	9f 92       	push	r9
     116:	af 92       	push	r10
     118:	bf 92       	push	r11
     11a:	cf 92       	push	r12
     11c:	df 92       	push	r13
     11e:	ef 92       	push	r14
     120:	ff 92       	push	r15
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
     12e:	28 97       	sbiw	r28, 0x08	; 8
     130:	0f b6       	in	r0, 0x3f	; 63
     132:	f8 94       	cli
     134:	de bf       	out	0x3e, r29	; 62
     136:	0f be       	out	0x3f, r0	; 63
     138:	cd bf       	out	0x3d, r28	; 61
     13a:	4c 01       	movw	r8, r24
	}
}

/*	Converts the difference in clk increments to microseconds */
static unsigned long calc_delta_time(Shared_Data* shared_ptr){
	unsigned short delta_clk = clk_elapsed;
     13c:	e0 90 27 01 	lds	r14, 0x0127
     140:	f0 90 28 01 	lds	r15, 0x0128

	// scales based on prescaling
	unsigned short prescale;
	
	if(shared_ptr->speed_set <= 20){
     144:	fc 01       	movw	r30, r24
     146:	80 81       	ld	r24, Z
     148:	91 81       	ldd	r25, Z+1	; 0x01
     14a:	45 97       	sbiw	r24, 0x15	; 21
     14c:	34 f4       	brge	.+12     	; 0x15a <calc_latest_rpm+0x50>
		prescale = 8;
		set_prescale(8);
     14e:	88 e0       	ldi	r24, 0x08	; 8
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	b5 df       	rcall	.-150    	; 0xbe <set_prescale>

	// scales based on prescaling
	unsigned short prescale;
	
	if(shared_ptr->speed_set <= 20){
		prescale = 8;
     154:	28 e0       	ldi	r18, 0x08	; 8
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	05 c0       	rjmp	.+10     	; 0x164 <calc_latest_rpm+0x5a>
		set_prescale(8);
	}
	else{
		prescale = 1;
		set_prescale(1);
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	af df       	rcall	.-162    	; 0xbe <set_prescale>
	if(shared_ptr->speed_set <= 20){
		prescale = 8;
		set_prescale(8);
	}
	else{
		prescale = 1;
     160:	21 e0       	ldi	r18, 0x01	; 1
     162:	30 e0       	ldi	r19, 0x00	; 0
		set_prescale(1);
	}

	unsigned long temp;

	temp = (unsigned long)delta_clk * prescale;
     164:	d7 01       	movw	r26, r14
     166:	69 d6       	rcall	.+3282   	; 0xe3a <__umulhisi3>
	unsigned long long denominator;
	unsigned long long rpm;
	
	delta_time = calc_delta_time(shared_ptr);
	
	delta_time = delta_time << N;
     168:	2b 01       	movw	r4, r22
     16a:	3c 01       	movw	r6, r24
     16c:	44 0c       	add	r4, r4
     16e:	55 1c       	adc	r5, r5
     170:	66 1c       	adc	r6, r6
     172:	77 1c       	adc	r7, r7
     174:	44 0c       	add	r4, r4
     176:	55 1c       	adc	r5, r5
     178:	66 1c       	adc	r6, r6
     17a:	77 1c       	adc	r7, r7
     17c:	44 0c       	add	r4, r4
     17e:	55 1c       	adc	r5, r5
     180:	66 1c       	adc	r6, r6
     182:	77 1c       	adc	r7, r7
     184:	44 0c       	add	r4, r4
     186:	55 1c       	adc	r5, r5
     188:	66 1c       	adc	r6, r6
     18a:	77 1c       	adc	r7, r7
	S_TO_MIN = S_TO_MIN << N;

	numerator = (unsigned long long)MS_TO_S * S_TO_MIN;
	numerator = numerator >> N;

	denominator = (unsigned long long)delta_rev_inverse * delta_time;
     18c:	a3 01       	movw	r20, r6
     18e:	92 01       	movw	r18, r4
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	cb 01       	movw	r24, r22
     196:	49 82       	std	Y+1, r4	; 0x01
     198:	3a 83       	std	Y+2, r19	; 0x02
     19a:	4b 83       	std	Y+3, r20	; 0x03
     19c:	5c 83       	std	Y+4, r21	; 0x04
     19e:	6d 83       	std	Y+5, r22	; 0x05
     1a0:	7e 83       	std	Y+6, r23	; 0x06
     1a2:	8f 83       	std	Y+7, r24	; 0x07
     1a4:	98 87       	std	Y+8, r25	; 0x08
     1a6:	a1 2c       	mov	r10, r1
     1a8:	0f 2e       	mov	r0, r31
     1aa:	f6 e0       	ldi	r31, 0x06	; 6
     1ac:	bf 2e       	mov	r11, r31
     1ae:	f0 2d       	mov	r31, r0
     1b0:	c1 2c       	mov	r12, r1
     1b2:	d1 2c       	mov	r13, r1
     1b4:	e1 2c       	mov	r14, r1
     1b6:	f1 2c       	mov	r15, r1
     1b8:	00 e0       	ldi	r16, 0x00	; 0
     1ba:	10 e0       	ldi	r17, 0x00	; 0
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	5d d6       	rcall	.+3258   	; 0xe80 <__muldi3>
	denominator = denominator >> N;
     1c6:	04 e0       	ldi	r16, 0x04	; 4
     1c8:	fa d6       	rcall	.+3572   	; 0xfbe <__lshrdi3>
     1ca:	a2 2e       	mov	r10, r18
     1cc:	b3 2e       	mov	r11, r19
     1ce:	c4 2e       	mov	r12, r20
     1d0:	d5 2e       	mov	r13, r21
     1d2:	e6 2e       	mov	r14, r22
     1d4:	f7 2e       	mov	r15, r23
     1d6:	e8 2f       	mov	r30, r24
     1d8:	19 2f       	mov	r17, r25

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1);
     1da:	01 e0       	ldi	r16, 0x01	; 1
     1dc:	f0 d6       	rcall	.+3552   	; 0xfbe <__lshrdi3>
     1de:	49 57       	subi	r20, 0x79	; 121
     1e0:	5c 46       	sbci	r21, 0x6C	; 108
     1e2:	6c 4f       	sbci	r22, 0xFC	; 252
     1e4:	7f 4f       	sbci	r23, 0xFF	; 255
     1e6:	8f 4f       	sbci	r24, 0xFF	; 255
     1e8:	9f 4f       	sbci	r25, 0xFF	; 255
	rpm = rpm / denominator;
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
     1ea:	d4 01       	movw	r26, r8
     1ec:	a8 5e       	subi	r26, 0xE8	; 232
     1ee:	bd 4f       	sbci	r27, 0xFD	; 253
     1f0:	68 94       	set
     1f2:	13 f8       	bld	r1, 3
     1f4:	76 94       	lsr	r7
     1f6:	67 94       	ror	r6
     1f8:	57 94       	ror	r5
     1fa:	47 94       	ror	r4
     1fc:	16 94       	lsr	r1
     1fe:	d1 f7       	brne	.-12     	; 0x1f4 <calc_latest_rpm+0xea>
     200:	4d 92       	st	X+, r4
     202:	5d 92       	st	X+, r5
     204:	6d 92       	st	X+, r6
     206:	7c 92       	st	X, r7
     208:	13 97       	sbiw	r26, 0x03	; 3
	denominator = (unsigned long long)delta_rev_inverse * delta_time;
	denominator = denominator >> N;

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1);
	rpm = rpm / denominator;
     20a:	0e 2f       	mov	r16, r30
     20c:	2e d6       	rcall	.+3164   	; 0xe6a <__udivdi3>
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
	shared_ptr->rpm_curr = (unsigned long)rpm >> N;	// Used for debugging
     20e:	82 2f       	mov	r24, r18
     210:	93 2f       	mov	r25, r19
     212:	a4 2f       	mov	r26, r20
     214:	b5 2f       	mov	r27, r21
     216:	72 2f       	mov	r23, r18
     218:	63 2f       	mov	r22, r19
     21a:	54 2f       	mov	r21, r20
     21c:	4b 2f       	mov	r20, r27
     21e:	68 94       	set
     220:	13 f8       	bld	r1, 3
     222:	b6 95       	lsr	r27
     224:	a7 95       	ror	r26
     226:	97 95       	ror	r25
     228:	87 95       	ror	r24
     22a:	16 94       	lsr	r1
     22c:	d1 f7       	brne	.-12     	; 0x222 <calc_latest_rpm+0x118>
     22e:	f4 01       	movw	r30, r8
     230:	80 8b       	std	Z+16, r24	; 0x10
     232:	91 8b       	std	Z+17, r25	; 0x11
     234:	a2 8b       	std	Z+18, r26	; 0x12
     236:	b3 8b       	std	Z+19, r27	; 0x13
    int i;
    unsigned long temp;

    temp = rpm >> N;

    if(temp < 0 || temp > 250 ){
     238:	8b 3f       	cpi	r24, 0xFB	; 251
     23a:	91 05       	cpc	r25, r1
     23c:	a1 05       	cpc	r26, r1
     23e:	b1 05       	cpc	r27, r1
     240:	b8 f4       	brcc	.+46     	; 0x270 <calc_latest_rpm+0x166>
/*	
 * Calculates the speed between two encoder-interrupts, using fixed point arithmetics.
 * Inserts the speed to the rpm-array in shared_ptr->rpm_measurements
 * Qm.n values defined in shared.h
*/
void calc_latest_rpm(Shared_Data* shared_ptr){
     242:	ec 5e       	subi	r30, 0xEC	; 236
     244:	fd 4f       	sbci	r31, 0xFD	; 253
     246:	2f e7       	ldi	r18, 0x7F	; 127
     248:	30 e0       	ldi	r19, 0x00	; 0
    if(temp < 0 || temp > 250 ){
        return;
    }

    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
     24a:	21 50       	subi	r18, 0x01	; 1
     24c:	31 09       	sbc	r19, r1
     24e:	b2 91       	ld	r27, -Z
     250:	a2 91       	ld	r26, -Z
     252:	92 91       	ld	r25, -Z
     254:	82 91       	ld	r24, -Z
     256:	84 83       	std	Z+4, r24	; 0x04
     258:	95 83       	std	Z+5, r25	; 0x05
     25a:	a6 83       	std	Z+6, r26	; 0x06
     25c:	b7 83       	std	Z+7, r27	; 0x07

    if(temp < 0 || temp > 250 ){
        return;
    }

    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
     25e:	2f 3f       	cpi	r18, 0xFF	; 255
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	38 07       	cpc	r19, r24
     264:	91 f7       	brne	.-28     	; 0x24a <calc_latest_rpm+0x140>
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
    }
    shared_ptr->rpm_measurements[0] = rpm;
     266:	f4 01       	movw	r30, r8
     268:	70 8f       	std	Z+24, r23	; 0x18
     26a:	61 8f       	std	Z+25, r22	; 0x19
     26c:	52 8f       	std	Z+26, r21	; 0x1a
     26e:	43 8f       	std	Z+27, r20	; 0x1b
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
	shared_ptr->rpm_curr = (unsigned long)rpm >> N;	// Used for debugging
	insert_rpm(shared_ptr, rpm);
	
}
     270:	28 96       	adiw	r28, 0x08	; 8
     272:	0f b6       	in	r0, 0x3f	; 63
     274:	f8 94       	cli
     276:	de bf       	out	0x3e, r29	; 62
     278:	0f be       	out	0x3f, r0	; 63
     27a:	cd bf       	out	0x3d, r28	; 61
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	1f 91       	pop	r17
     282:	0f 91       	pop	r16
     284:	ff 90       	pop	r15
     286:	ef 90       	pop	r14
     288:	df 90       	pop	r13
     28a:	cf 90       	pop	r12
     28c:	bf 90       	pop	r11
     28e:	af 90       	pop	r10
     290:	9f 90       	pop	r9
     292:	8f 90       	pop	r8
     294:	7f 90       	pop	r7
     296:	6f 90       	pop	r6
     298:	5f 90       	pop	r5
     29a:	4f 90       	pop	r4
     29c:	08 95       	ret

0000029e <calc_avg_rpm>:

/*
 * Calculates the filtered running average rpm. Stores result in shared_ptr->rpm_avg
 * Number of elements counted depends on speed_set
*/
void calc_avg_rpm(Shared_Data* shared_ptr){
     29e:	2f 92       	push	r2
     2a0:	3f 92       	push	r3
     2a2:	4f 92       	push	r4
     2a4:	5f 92       	push	r5
     2a6:	6f 92       	push	r6
     2a8:	7f 92       	push	r7
     2aa:	8f 92       	push	r8
     2ac:	9f 92       	push	r9
     2ae:	af 92       	push	r10
     2b0:	bf 92       	push	r11
     2b2:	cf 92       	push	r12
     2b4:	df 92       	push	r13
     2b6:	ef 92       	push	r14
     2b8:	ff 92       	push	r15
     2ba:	0f 93       	push	r16
     2bc:	1f 93       	push	r17
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <calc_avg_rpm+0x26>
     2c4:	00 d0       	rcall	.+0      	; 0x2c6 <calc_avg_rpm+0x28>
     2c6:	00 d0       	rcall	.+0      	; 0x2c8 <calc_avg_rpm+0x2a>
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
     2cc:	9a 83       	std	Y+2, r25	; 0x02
     2ce:	89 83       	std	Y+1, r24	; 0x01
	unsigned long long temp = 0;
	int i;
	int size;
	int size_shift;
	
	if(shared_ptr->speed_set <=20){
     2d0:	fc 01       	movw	r30, r24
     2d2:	80 81       	ld	r24, Z
     2d4:	91 81       	ldd	r25, Z+1	; 0x01
     2d6:	85 31       	cpi	r24, 0x15	; 21
     2d8:	91 05       	cpc	r25, r1
     2da:	54 f1       	brlt	.+84     	; 0x330 <calc_avg_rpm+0x92>
	}
	else if(shared_ptr->speed_set <=50){
		size = SIZE_32;
		size_shift = DIVISION_32;
	}
	else if(shared_ptr->speed_set < 100){
     2dc:	84 36       	cpi	r24, 0x64	; 100
     2de:	91 05       	cpc	r25, r1
     2e0:	84 f5       	brge	.+96     	; 0x342 <calc_avg_rpm+0xa4>
		size = SIZE_32;
		size_shift = DIVISION_32;
     2e2:	e5 e0       	ldi	r30, 0x05	; 5
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	fc 83       	std	Y+4, r31	; 0x04
     2e8:	eb 83       	std	Y+3, r30	; 0x03
	else if(shared_ptr->speed_set <=50){
		size = SIZE_32;
		size_shift = DIVISION_32;
	}
	else if(shared_ptr->speed_set < 100){
		size = SIZE_32;
     2ea:	e0 e2       	ldi	r30, 0x20	; 32
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	fe 83       	std	Y+6, r31	; 0x06
     2f0:	ed 83       	std	Y+5, r30	; 0x05
     2f2:	2f c0       	rjmp	.+94     	; 0x352 <calc_avg_rpm+0xb4>
		size_shift = DIVISION_32;
	}
	
	
	for(i = 0; i < size; i++){
		temp = temp + shared_ptr->rpm_measurements[i];
     2f4:	cd 90       	ld	r12, X+
     2f6:	dd 90       	ld	r13, X+
     2f8:	ed 90       	ld	r14, X+
     2fa:	fd 90       	ld	r15, X+
     2fc:	16 01       	movw	r2, r12
     2fe:	27 01       	movw	r4, r14
     300:	ac 2c       	mov	r10, r12
     302:	b3 2c       	mov	r11, r3
     304:	c4 2c       	mov	r12, r4
     306:	d5 2c       	mov	r13, r5
     308:	e1 2c       	mov	r14, r1
     30a:	f1 2c       	mov	r15, r1
     30c:	00 e0       	ldi	r16, 0x00	; 0
     30e:	10 e0       	ldi	r17, 0x00	; 0
     310:	65 d6       	rcall	.+3274   	; 0xfdc <__adddi3>
		size = SIZE_32;
		size_shift = DIVISION_32;
	}
	
	
	for(i = 0; i < size; i++){
     312:	31 96       	adiw	r30, 0x01	; 1
     314:	0d 81       	ldd	r16, Y+5	; 0x05
     316:	1e 81       	ldd	r17, Y+6	; 0x06
     318:	e0 17       	cp	r30, r16
     31a:	f1 07       	cpc	r31, r17
     31c:	5c f3       	brlt	.-42     	; 0x2f4 <calc_avg_rpm+0x56>
		temp = temp + shared_ptr->rpm_measurements[i];
	}
	
	// Divide by size
	temp = temp >> size_shift;
     31e:	0b 81       	ldd	r16, Y+3	; 0x03
     320:	4e d6       	rcall	.+3228   	; 0xfbe <__lshrdi3>
	
	shared_ptr->rpm_avg = temp;
     322:	e9 81       	ldd	r30, Y+1	; 0x01
     324:	fa 81       	ldd	r31, Y+2	; 0x02
     326:	24 8b       	std	Z+20, r18	; 0x14
     328:	35 8b       	std	Z+21, r19	; 0x15
     32a:	46 8b       	std	Z+22, r20	; 0x16
     32c:	57 8b       	std	Z+23, r21	; 0x17
     32e:	1f c0       	rjmp	.+62     	; 0x36e <calc_avg_rpm+0xd0>
	int size;
	int size_shift;
	
	if(shared_ptr->speed_set <=20){
		size = SIZE_16;
		size_shift = DIVISION_16;
     330:	e4 e0       	ldi	r30, 0x04	; 4
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	fc 83       	std	Y+4, r31	; 0x04
     336:	eb 83       	std	Y+3, r30	; 0x03
	int i;
	int size;
	int size_shift;
	
	if(shared_ptr->speed_set <=20){
		size = SIZE_16;
     338:	e0 e1       	ldi	r30, 0x10	; 16
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	fe 83       	std	Y+6, r31	; 0x06
     33e:	ed 83       	std	Y+5, r30	; 0x05
     340:	08 c0       	rjmp	.+16     	; 0x352 <calc_avg_rpm+0xb4>
		size = SIZE_32;
		size_shift = DIVISION_32;
	}
	else if(shared_ptr->speed_set >= 100){
		size = SIZE_64;
		size_shift = DIVISION_64;
     342:	e6 e0       	ldi	r30, 0x06	; 6
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	fc 83       	std	Y+4, r31	; 0x04
     348:	eb 83       	std	Y+3, r30	; 0x03
	else if(shared_ptr->speed_set < 100){
		size = SIZE_32;
		size_shift = DIVISION_32;
	}
	else if(shared_ptr->speed_set >= 100){
		size = SIZE_64;
     34a:	e0 e4       	ldi	r30, 0x40	; 64
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	fe 83       	std	Y+6, r31	; 0x06
     350:	ed 83       	std	Y+5, r30	; 0x05

/*
 * Calculates the filtered running average rpm. Stores result in shared_ptr->rpm_avg
 * Number of elements counted depends on speed_set
*/
void calc_avg_rpm(Shared_Data* shared_ptr){
     352:	a9 81       	ldd	r26, Y+1	; 0x01
     354:	ba 81       	ldd	r27, Y+2	; 0x02
     356:	58 96       	adiw	r26, 0x18	; 24
		size = SIZE_32;
		size_shift = DIVISION_32;
	}
	
	
	for(i = 0; i < size; i++){
     358:	e0 e0       	ldi	r30, 0x00	; 0
     35a:	f0 e0       	ldi	r31, 0x00	; 0
/*
 * Calculates the filtered running average rpm. Stores result in shared_ptr->rpm_avg
 * Number of elements counted depends on speed_set
*/
void calc_avg_rpm(Shared_Data* shared_ptr){
	unsigned long long temp = 0;
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	40 e0       	ldi	r20, 0x00	; 0
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	c3 cf       	rjmp	.-122    	; 0x2f4 <calc_avg_rpm+0x56>
	
	// Divide by size
	temp = temp >> size_shift;
	
	shared_ptr->rpm_avg = temp;
}
     36e:	26 96       	adiw	r28, 0x06	; 6
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	df 90       	pop	r13
     388:	cf 90       	pop	r12
     38a:	bf 90       	pop	r11
     38c:	af 90       	pop	r10
     38e:	9f 90       	pop	r9
     390:	8f 90       	pop	r8
     392:	7f 90       	pop	r7
     394:	6f 90       	pop	r6
     396:	5f 90       	pop	r5
     398:	4f 90       	pop	r4
     39a:	3f 90       	pop	r3
     39c:	2f 90       	pop	r2
     39e:	08 95       	ret

000003a0 <set_speed>:

/* Sets a new set value for the speed. Range: 0-120. */
void set_speed(Shared_Data* shared_ptr){
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	00 d0       	rcall	.+0      	; 0x3aa <set_speed+0xa>
     3aa:	00 d0       	rcall	.+0      	; 0x3ac <set_speed+0xc>
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	8c 01       	movw	r16, r24
	char sub_str[4];
	int res;
	strncpy(sub_str, recieved_bytes + 1, 3);
     3b2:	43 e0       	ldi	r20, 0x03	; 3
     3b4:	50 e0       	ldi	r21, 0x00	; 0
     3b6:	6f e1       	ldi	r22, 0x1F	; 31
     3b8:	71 e0       	ldi	r23, 0x01	; 1
     3ba:	ce 01       	movw	r24, r28
     3bc:	01 96       	adiw	r24, 0x01	; 1
     3be:	54 d6       	rcall	.+3240   	; 0x1068 <strncpy>
	
	res = atoi(sub_str);
     3c0:	ce 01       	movw	r24, r28
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	34 d6       	rcall	.+3176   	; 0x102e <atoi>
	shared_ptr->speed_set = res;
     3c6:	f8 01       	movw	r30, r16
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	80 83       	st	Z, r24
}
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	08 95       	ret

000003de <__vector_4>:
/*
 * Interrupt Service Routine for the encoder mounted on the motor.
 * Calculates the difference in clk-value between current and previous interrupt.
 * Global bool newMeasurement flags that a new measurement have been recieved.
*/
ISR(PCINT1_vect){
     3de:	1f 92       	push	r1
     3e0:	0f 92       	push	r0
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	0f 92       	push	r0
     3e6:	11 24       	eor	r1, r1
     3e8:	2f 93       	push	r18
     3ea:	3f 93       	push	r19
     3ec:	4f 93       	push	r20
     3ee:	5f 93       	push	r21
     3f0:	8f 93       	push	r24
     3f2:	9f 93       	push	r25
	cli();
     3f4:	f8 94       	cli
	
	clk_curr = TCNT1;
     3f6:	80 91 84 00 	lds	r24, 0x0084
     3fa:	90 91 85 00 	lds	r25, 0x0085
     3fe:	90 93 25 01 	sts	0x0125, r25
     402:	80 93 24 01 	sts	0x0124, r24
extern char recieved_bytes[5];
extern Shared_Data* shared_ptr;

static void calc_clk_elapsed(){
	
	if(clk_curr < clk_prev){
     406:	20 91 1c 01 	lds	r18, 0x011C
     40a:	30 91 1d 01 	lds	r19, 0x011D
     40e:	82 17       	cp	r24, r18
     410:	93 07       	cpc	r25, r19
     412:	48 f4       	brcc	.+18     	; 0x426 <__vector_4+0x48>
		unsigned short temp = 0xFFFF;
		temp = temp - clk_prev;
     414:	20 95       	com	r18
     416:	30 95       	com	r19
		temp = temp + clk_curr;
     418:	28 0f       	add	r18, r24
     41a:	39 1f       	adc	r19, r25
		clk_elapsed = temp;
     41c:	30 93 28 01 	sts	0x0128, r19
     420:	20 93 27 01 	sts	0x0127, r18
     424:	07 c0       	rjmp	.+14     	; 0x434 <__vector_4+0x56>
	}
	else{
		clk_elapsed = clk_curr - clk_prev;
     426:	ac 01       	movw	r20, r24
     428:	42 1b       	sub	r20, r18
     42a:	53 0b       	sbc	r21, r19
     42c:	50 93 28 01 	sts	0x0128, r21
     430:	40 93 27 01 	sts	0x0127, r20
		
	}
	clk_prev = clk_curr;
     434:	90 93 1d 01 	sts	0x011D, r25
     438:	80 93 1c 01 	sts	0x011C, r24
ISR(PCINT1_vect){
	cli();
	
	clk_curr = TCNT1;
	calc_clk_elapsed();
	newMeasurement = true;
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	80 93 26 01 	sts	0x0126, r24
	
	sei();
     442:	78 94       	sei
}
     444:	9f 91       	pop	r25
     446:	8f 91       	pop	r24
     448:	5f 91       	pop	r21
     44a:	4f 91       	pop	r20
     44c:	3f 91       	pop	r19
     44e:	2f 91       	pop	r18
     450:	0f 90       	pop	r0
     452:	0f be       	out	0x3f, r0	; 63
     454:	0f 90       	pop	r0
     456:	1f 90       	pop	r1
     458:	18 95       	reti

0000045a <__vector_9>:

/*
 * PI controller for the electrical motor, implemented using fixed point arithmetics.
 * Kp and Ki values is used to tune the controller, depending on different rpm.
*/
ISR(TIMER2_OVF_vect){
     45a:	1f 92       	push	r1
     45c:	0f 92       	push	r0
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	0f 92       	push	r0
     462:	11 24       	eor	r1, r1
     464:	2f 92       	push	r2
     466:	3f 92       	push	r3
     468:	4f 92       	push	r4
     46a:	5f 92       	push	r5
     46c:	6f 92       	push	r6
     46e:	7f 92       	push	r7
     470:	8f 92       	push	r8
     472:	9f 92       	push	r9
     474:	af 92       	push	r10
     476:	bf 92       	push	r11
     478:	cf 92       	push	r12
     47a:	df 92       	push	r13
     47c:	ef 92       	push	r14
     47e:	ff 92       	push	r15
     480:	0f 93       	push	r16
     482:	1f 93       	push	r17
     484:	2f 93       	push	r18
     486:	3f 93       	push	r19
     488:	4f 93       	push	r20
     48a:	5f 93       	push	r21
     48c:	6f 93       	push	r22
     48e:	7f 93       	push	r23
     490:	8f 93       	push	r24
     492:	9f 93       	push	r25
     494:	af 93       	push	r26
     496:	bf 93       	push	r27
     498:	ef 93       	push	r30
     49a:	ff 93       	push	r31
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
     4a4:	2e 97       	sbiw	r28, 0x0e	; 14
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	cd bf       	out	0x3d, r28	; 61
	
	cli();
     4aa:	f8 94       	cli
	long Kp;
	long Ki;
		
	long e = ((long)shared_ptr->speed_set << N) - (long)shared_ptr->rpm_avg;
     4ac:	80 91 29 01 	lds	r24, 0x0129
     4b0:	90 91 2a 01 	lds	r25, 0x012A
     4b4:	9e 87       	std	Y+14, r25	; 0x0e
     4b6:	8d 87       	std	Y+13, r24	; 0x0d
     4b8:	dc 01       	movw	r26, r24
     4ba:	8d 91       	ld	r24, X+
     4bc:	9c 91       	ld	r25, X
     4be:	11 97       	sbiw	r26, 0x01	; 1
     4c0:	ac 01       	movw	r20, r24
     4c2:	66 27       	eor	r22, r22
     4c4:	57 fd       	sbrc	r21, 7
     4c6:	60 95       	com	r22
     4c8:	76 2f       	mov	r23, r22
     4ca:	44 0f       	add	r20, r20
     4cc:	55 1f       	adc	r21, r21
     4ce:	66 1f       	adc	r22, r22
     4d0:	77 1f       	adc	r23, r23
     4d2:	44 0f       	add	r20, r20
     4d4:	55 1f       	adc	r21, r21
     4d6:	66 1f       	adc	r22, r22
     4d8:	77 1f       	adc	r23, r23
     4da:	44 0f       	add	r20, r20
     4dc:	55 1f       	adc	r21, r21
     4de:	66 1f       	adc	r22, r22
     4e0:	77 1f       	adc	r23, r23
     4e2:	44 0f       	add	r20, r20
     4e4:	55 1f       	adc	r21, r21
     4e6:	66 1f       	adc	r22, r22
     4e8:	77 1f       	adc	r23, r23
     4ea:	54 96       	adiw	r26, 0x14	; 20
     4ec:	8d 90       	ld	r8, X+
     4ee:	9d 90       	ld	r9, X+
     4f0:	ad 90       	ld	r10, X+
     4f2:	bc 90       	ld	r11, X
     4f4:	57 97       	sbiw	r26, 0x17	; 23
     4f6:	48 19       	sub	r20, r8
     4f8:	59 09       	sbc	r21, r9
     4fa:	6a 09       	sbc	r22, r10
     4fc:	7b 09       	sbc	r23, r11
	e = e + ((long)shared_ptr->fine_tuning << N);
     4fe:	16 96       	adiw	r26, 0x06	; 6
     500:	4d 90       	ld	r4, X+
     502:	5c 90       	ld	r5, X
     504:	17 97       	sbiw	r26, 0x07	; 7
     506:	66 24       	eor	r6, r6
     508:	57 fc       	sbrc	r5, 7
     50a:	60 94       	com	r6
     50c:	76 2c       	mov	r7, r6
     50e:	44 0c       	add	r4, r4
     510:	55 1c       	adc	r5, r5
     512:	66 1c       	adc	r6, r6
     514:	77 1c       	adc	r7, r7
     516:	44 0c       	add	r4, r4
     518:	55 1c       	adc	r5, r5
     51a:	66 1c       	adc	r6, r6
     51c:	77 1c       	adc	r7, r7
     51e:	44 0c       	add	r4, r4
     520:	55 1c       	adc	r5, r5
     522:	66 1c       	adc	r6, r6
     524:	77 1c       	adc	r7, r7
     526:	44 0c       	add	r4, r4
     528:	55 1c       	adc	r5, r5
     52a:	66 1c       	adc	r6, r6
     52c:	77 1c       	adc	r7, r7
     52e:	44 0e       	add	r4, r20
     530:	55 1e       	adc	r5, r21
     532:	66 1e       	adc	r6, r22
     534:	77 1e       	adc	r7, r23
	shared_ptr->error = (short)e;	// For debugging
     536:	15 96       	adiw	r26, 0x05	; 5
     538:	5c 92       	st	X, r5
     53a:	4e 92       	st	-X, r4
     53c:	14 97       	sbiw	r26, 0x04	; 4
	
	e = e << (N_CTRL-N);
     53e:	44 0c       	add	r4, r4
     540:	55 1c       	adc	r5, r5
     542:	66 1c       	adc	r6, r6
     544:	77 1c       	adc	r7, r7
     546:	44 0c       	add	r4, r4
     548:	55 1c       	adc	r5, r5
     54a:	66 1c       	adc	r6, r6
     54c:	77 1c       	adc	r7, r7
     54e:	44 0c       	add	r4, r4
     550:	55 1c       	adc	r5, r5
     552:	66 1c       	adc	r6, r6
     554:	77 1c       	adc	r7, r7
	
	if(shared_ptr->speed_set <= 20){
     556:	85 31       	cpi	r24, 0x15	; 21
     558:	91 05       	cpc	r25, r1
     55a:	b4 f0       	brlt	.+44     	; 0x588 <__stack+0x89>
	}
	else if(shared_ptr->speed_set <= 50){
		Kp = 35;
		Ki = 75;
	}
	else if(shared_ptr->speed_set <= 60){
     55c:	8d 33       	cpi	r24, 0x3D	; 61
     55e:	91 05       	cpc	r25, r1
     560:	04 f1       	brlt	.+64     	; 0x5a2 <__stack+0xa3>
		Kp = 35;
		Ki = 75;
	}
	else if(shared_ptr->speed_set <= 90){
     562:	8b 35       	cpi	r24, 0x5B	; 91
     564:	91 05       	cpc	r25, r1
     566:	54 f1       	brlt	.+84     	; 0x5bc <__stack+0xbd>
		Kp = 40;
		Ki = 100;
	}
	else if(shared_ptr->speed_set < 100){
     568:	84 36       	cpi	r24, 0x64	; 100
     56a:	91 05       	cpc	r25, r1
     56c:	a4 f5       	brge	.+104    	; 0x5d6 <__stack+0xd7>
		Kp = 35;
		Ki = 70;
     56e:	26 e4       	ldi	r18, 0x46	; 70
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	40 e0       	ldi	r20, 0x00	; 0
     574:	50 e0       	ldi	r21, 0x00	; 0
	else if(shared_ptr->speed_set <= 90){
		Kp = 40;
		Ki = 100;
	}
	else if(shared_ptr->speed_set < 100){
		Kp = 35;
     576:	83 e2       	ldi	r24, 0x23	; 35
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	a0 e0       	ldi	r26, 0x00	; 0
     57c:	b0 e0       	ldi	r27, 0x00	; 0
     57e:	89 83       	std	Y+1, r24	; 0x01
     580:	9a 83       	std	Y+2, r25	; 0x02
     582:	ab 83       	std	Y+3, r26	; 0x03
     584:	bc 83       	std	Y+4, r27	; 0x04
     586:	33 c0       	rjmp	.+102    	; 0x5ee <__stack+0xef>
	
	e = e << (N_CTRL-N);
	
	if(shared_ptr->speed_set <= 20){
		Kp = 35;
		Ki = 75;
     588:	2b e4       	ldi	r18, 0x4B	; 75
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	50 e0       	ldi	r21, 0x00	; 0
	shared_ptr->error = (short)e;	// For debugging
	
	e = e << (N_CTRL-N);
	
	if(shared_ptr->speed_set <= 20){
		Kp = 35;
     590:	83 e2       	ldi	r24, 0x23	; 35
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e0       	ldi	r27, 0x00	; 0
     598:	89 83       	std	Y+1, r24	; 0x01
     59a:	9a 83       	std	Y+2, r25	; 0x02
     59c:	ab 83       	std	Y+3, r26	; 0x03
     59e:	bc 83       	std	Y+4, r27	; 0x04
     5a0:	26 c0       	rjmp	.+76     	; 0x5ee <__stack+0xef>
		Kp = 35;
		Ki = 75;
	}
	else if(shared_ptr->speed_set <= 60){
		Kp = 35;
		Ki = 75;
     5a2:	2b e4       	ldi	r18, 0x4B	; 75
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	40 e0       	ldi	r20, 0x00	; 0
     5a8:	50 e0       	ldi	r21, 0x00	; 0
	else if(shared_ptr->speed_set <= 50){
		Kp = 35;
		Ki = 75;
	}
	else if(shared_ptr->speed_set <= 60){
		Kp = 35;
     5aa:	83 e2       	ldi	r24, 0x23	; 35
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	a0 e0       	ldi	r26, 0x00	; 0
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	89 83       	std	Y+1, r24	; 0x01
     5b4:	9a 83       	std	Y+2, r25	; 0x02
     5b6:	ab 83       	std	Y+3, r26	; 0x03
     5b8:	bc 83       	std	Y+4, r27	; 0x04
     5ba:	19 c0       	rjmp	.+50     	; 0x5ee <__stack+0xef>
		Ki = 75;
	}
	else if(shared_ptr->speed_set <= 90){
		Kp = 40;
		Ki = 100;
     5bc:	24 e6       	ldi	r18, 0x64	; 100
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	40 e0       	ldi	r20, 0x00	; 0
     5c2:	50 e0       	ldi	r21, 0x00	; 0
	else if(shared_ptr->speed_set <= 60){
		Kp = 35;
		Ki = 75;
	}
	else if(shared_ptr->speed_set <= 90){
		Kp = 40;
     5c4:	88 e2       	ldi	r24, 0x28	; 40
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	a0 e0       	ldi	r26, 0x00	; 0
     5ca:	b0 e0       	ldi	r27, 0x00	; 0
     5cc:	89 83       	std	Y+1, r24	; 0x01
     5ce:	9a 83       	std	Y+2, r25	; 0x02
     5d0:	ab 83       	std	Y+3, r26	; 0x03
     5d2:	bc 83       	std	Y+4, r27	; 0x04
     5d4:	0c c0       	rjmp	.+24     	; 0x5ee <__stack+0xef>
		Kp = 35;
		Ki = 70;
	}
	else if(shared_ptr->speed_set >= 100){
		Kp = 50;	//80 165
		Ki = 125;	//145 325
     5d6:	2d e7       	ldi	r18, 0x7D	; 125
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	50 e0       	ldi	r21, 0x00	; 0
	else if(shared_ptr->speed_set < 100){
		Kp = 35;
		Ki = 70;
	}
	else if(shared_ptr->speed_set >= 100){
		Kp = 50;	//80 165
     5de:	82 e3       	ldi	r24, 0x32	; 50
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	a0 e0       	ldi	r26, 0x00	; 0
     5e4:	b0 e0       	ldi	r27, 0x00	; 0
     5e6:	89 83       	std	Y+1, r24	; 0x01
     5e8:	9a 83       	std	Y+2, r25	; 0x02
     5ea:	ab 83       	std	Y+3, r26	; 0x03
     5ec:	bc 83       	std	Y+4, r27	; 0x04
		Ki = 125;	//145 325
	}

	
	long integral = Ki*e;
     5ee:	c3 01       	movw	r24, r6
     5f0:	b2 01       	movw	r22, r4
     5f2:	01 d4       	rcall	.+2050   	; 0xdf6 <__mulsi3>
	integral = integral >> N_CTRL;
     5f4:	6b 01       	movw	r12, r22
     5f6:	7c 01       	movw	r14, r24
     5f8:	68 94       	set
     5fa:	16 f8       	bld	r1, 6
     5fc:	f5 94       	asr	r15
     5fe:	e7 94       	ror	r14
     600:	d7 94       	ror	r13
     602:	c7 94       	ror	r12
     604:	16 94       	lsr	r1
     606:	d1 f7       	brne	.-12     	; 0x5fc <__stack+0xfd>
	shared_ptr->integral = shared_ptr->integral + integral;
     608:	4b 01       	movw	r8, r22
     60a:	5c 01       	movw	r10, r24
     60c:	bb 0c       	add	r11, r11
     60e:	88 08       	sbc	r8, r8
     610:	98 2c       	mov	r9, r8
     612:	54 01       	movw	r10, r8
     614:	2c 2d       	mov	r18, r12
     616:	3d 2d       	mov	r19, r13
     618:	4e 2d       	mov	r20, r14
     61a:	5f 2d       	mov	r21, r15
     61c:	68 2d       	mov	r22, r8
     61e:	78 2d       	mov	r23, r8
     620:	88 2d       	mov	r24, r8
     622:	98 2d       	mov	r25, r8
     624:	ad 85       	ldd	r26, Y+13	; 0x0d
     626:	be 85       	ldd	r27, Y+14	; 0x0e
     628:	18 96       	adiw	r26, 0x08	; 8
     62a:	ac 90       	ld	r10, X
     62c:	18 97       	sbiw	r26, 0x08	; 8
     62e:	19 96       	adiw	r26, 0x09	; 9
     630:	bc 90       	ld	r11, X
     632:	19 97       	sbiw	r26, 0x09	; 9
     634:	1a 96       	adiw	r26, 0x0a	; 10
     636:	cc 90       	ld	r12, X
     638:	1a 97       	sbiw	r26, 0x0a	; 10
     63a:	1b 96       	adiw	r26, 0x0b	; 11
     63c:	dc 90       	ld	r13, X
     63e:	1b 97       	sbiw	r26, 0x0b	; 11
     640:	1c 96       	adiw	r26, 0x0c	; 12
     642:	ec 90       	ld	r14, X
     644:	1c 97       	sbiw	r26, 0x0c	; 12
     646:	1d 96       	adiw	r26, 0x0d	; 13
     648:	fc 90       	ld	r15, X
     64a:	1d 97       	sbiw	r26, 0x0d	; 13
     64c:	1e 96       	adiw	r26, 0x0e	; 14
     64e:	0c 91       	ld	r16, X
     650:	1e 97       	sbiw	r26, 0x0e	; 14
     652:	1f 96       	adiw	r26, 0x0f	; 15
     654:	1c 91       	ld	r17, X
     656:	1f 97       	sbiw	r26, 0x0f	; 15
     658:	c1 d4       	rcall	.+2434   	; 0xfdc <__adddi3>
     65a:	92 2e       	mov	r9, r18
     65c:	83 2e       	mov	r8, r19
     65e:	34 2e       	mov	r3, r20
     660:	25 2e       	mov	r2, r21
     662:	69 87       	std	Y+9, r22	; 0x09
     664:	7a 87       	std	Y+10, r23	; 0x0a
     666:	8b 87       	std	Y+11, r24	; 0x0b
     668:	9c 87       	std	Y+12, r25	; 0x0c
     66a:	18 96       	adiw	r26, 0x08	; 8
     66c:	2c 93       	st	X, r18
     66e:	18 97       	sbiw	r26, 0x08	; 8
     670:	19 96       	adiw	r26, 0x09	; 9
     672:	3c 93       	st	X, r19
     674:	19 97       	sbiw	r26, 0x09	; 9
     676:	1a 96       	adiw	r26, 0x0a	; 10
     678:	4c 93       	st	X, r20
     67a:	1a 97       	sbiw	r26, 0x0a	; 10
     67c:	1b 96       	adiw	r26, 0x0b	; 11
     67e:	5c 93       	st	X, r21
     680:	1b 97       	sbiw	r26, 0x0b	; 11
     682:	1c 96       	adiw	r26, 0x0c	; 12
     684:	6c 93       	st	X, r22
     686:	1c 97       	sbiw	r26, 0x0c	; 12
     688:	1d 96       	adiw	r26, 0x0d	; 13
     68a:	7c 93       	st	X, r23
     68c:	1d 97       	sbiw	r26, 0x0d	; 13
     68e:	1e 96       	adiw	r26, 0x0e	; 14
     690:	8c 93       	st	X, r24
     692:	1e 97       	sbiw	r26, 0x0e	; 14
     694:	1f 96       	adiw	r26, 0x0f	; 15
     696:	9c 93       	st	X, r25
	
	long long pwm = (long long)e * Kp + shared_ptr->integral;
     698:	d3 01       	movw	r26, r6
     69a:	c2 01       	movw	r24, r4
     69c:	bb 0f       	add	r27, r27
     69e:	88 0b       	sbc	r24, r24
     6a0:	98 2f       	mov	r25, r24
     6a2:	dc 01       	movw	r26, r24
     6a4:	8d 83       	std	Y+5, r24	; 0x05
     6a6:	9e 83       	std	Y+6, r25	; 0x06
     6a8:	af 83       	std	Y+7, r26	; 0x07
     6aa:	b8 87       	std	Y+8, r27	; 0x08
     6ac:	89 81       	ldd	r24, Y+1	; 0x01
     6ae:	9a 81       	ldd	r25, Y+2	; 0x02
     6b0:	ab 81       	ldd	r26, Y+3	; 0x03
     6b2:	bc 81       	ldd	r27, Y+4	; 0x04
     6b4:	bb 0f       	add	r27, r27
     6b6:	88 0b       	sbc	r24, r24
     6b8:	98 2f       	mov	r25, r24
     6ba:	dc 01       	movw	r26, r24
     6bc:	a9 80       	ldd	r10, Y+1	; 0x01
     6be:	ba 80       	ldd	r11, Y+2	; 0x02
     6c0:	cb 80       	ldd	r12, Y+3	; 0x03
     6c2:	dc 80       	ldd	r13, Y+4	; 0x04
     6c4:	e8 2e       	mov	r14, r24
     6c6:	f8 2e       	mov	r15, r24
     6c8:	08 2f       	mov	r16, r24
     6ca:	18 2f       	mov	r17, r24
     6cc:	24 2d       	mov	r18, r4
     6ce:	35 2d       	mov	r19, r5
     6d0:	46 2d       	mov	r20, r6
     6d2:	57 2d       	mov	r21, r7
     6d4:	6d 81       	ldd	r22, Y+5	; 0x05
     6d6:	76 2f       	mov	r23, r22
     6d8:	86 2f       	mov	r24, r22
     6da:	96 2f       	mov	r25, r22
     6dc:	d1 d3       	rcall	.+1954   	; 0xe80 <__muldi3>
     6de:	a2 2e       	mov	r10, r18
     6e0:	b3 2e       	mov	r11, r19
     6e2:	c4 2e       	mov	r12, r20
     6e4:	d5 2e       	mov	r13, r21
     6e6:	e6 2e       	mov	r14, r22
     6e8:	f7 2e       	mov	r15, r23
     6ea:	08 2f       	mov	r16, r24
     6ec:	19 2f       	mov	r17, r25
     6ee:	29 2d       	mov	r18, r9
     6f0:	38 2d       	mov	r19, r8
     6f2:	43 2d       	mov	r20, r3
     6f4:	52 2d       	mov	r21, r2
     6f6:	69 85       	ldd	r22, Y+9	; 0x09
     6f8:	7a 85       	ldd	r23, Y+10	; 0x0a
     6fa:	8b 85       	ldd	r24, Y+11	; 0x0b
     6fc:	9c 85       	ldd	r25, Y+12	; 0x0c
     6fe:	6e d4       	rcall	.+2268   	; 0xfdc <__adddi3>
	pwm = pwm >> N_CTRL;
     700:	07 e0       	ldi	r16, 0x07	; 7
     702:	4e d4       	rcall	.+2204   	; 0xfa0 <__ashrdi3>
	
	pwm = pwm >> N_CTRL;	// Convert to regular number
     704:	4d d4       	rcall	.+2202   	; 0xfa0 <__ashrdi3>
     706:	a2 2f       	mov	r26, r18
     708:	f3 2f       	mov	r31, r19
     70a:	64 2e       	mov	r6, r20
     70c:	75 2e       	mov	r7, r21
     70e:	86 2e       	mov	r8, r22
     710:	97 2e       	mov	r9, r23
     712:	a8 2e       	mov	r10, r24
     714:	b9 2e       	mov	r11, r25
     716:	2f 3f       	cpi	r18, 0xFF	; 255
     718:	31 05       	cpc	r19, r1
     71a:	41 05       	cpc	r20, r1
     71c:	51 05       	cpc	r21, r1
     71e:	61 05       	cpc	r22, r1
     720:	71 05       	cpc	r23, r1
     722:	81 05       	cpc	r24, r1
     724:	91 05       	cpc	r25, r1
     726:	49 f0       	breq	.+18     	; 0x73a <__stack+0x23b>
     728:	44 f0       	brlt	.+16     	; 0x73a <__stack+0x23b>
     72a:	af ef       	ldi	r26, 0xFF	; 255
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	61 2c       	mov	r6, r1
     730:	71 2c       	mov	r7, r1
     732:	81 2c       	mov	r8, r1
     734:	91 2c       	mov	r9, r1
     736:	a1 2c       	mov	r10, r1
     738:	b1 2c       	mov	r11, r1
     73a:	ea 2f       	mov	r30, r26
     73c:	bf 2f       	mov	r27, r31
     73e:	2a 2f       	mov	r18, r26
     740:	3f 2f       	mov	r19, r31
     742:	46 2d       	mov	r20, r6
     744:	57 2d       	mov	r21, r7
     746:	68 2d       	mov	r22, r8
     748:	79 2d       	mov	r23, r9
     74a:	8a 2d       	mov	r24, r10
     74c:	9b 2d       	mov	r25, r11
     74e:	a0 e0       	ldi	r26, 0x00	; 0
     750:	4e d4       	rcall	.+2204   	; 0xfee <__cmpdi2_s8>
     752:	14 f4       	brge	.+4      	; 0x758 <__stack+0x259>
     754:	e0 e0       	ldi	r30, 0x00	; 0
     756:	b0 e0       	ldi	r27, 0x00	; 0
	}
	else if(pwm > 255){
		pwm = 255;
	}
	
	shared_ptr->pwm = (short)pwm;
     758:	8b 2f       	mov	r24, r27
     75a:	ad 85       	ldd	r26, Y+13	; 0x0d
     75c:	be 85       	ldd	r27, Y+14	; 0x0e
     75e:	12 96       	adiw	r26, 0x02	; 2
     760:	ec 93       	st	X, r30
     762:	12 97       	sbiw	r26, 0x02	; 2
     764:	13 96       	adiw	r26, 0x03	; 3
     766:	8c 93       	st	X, r24
	OCR0A = pwm;
     768:	e7 bd       	out	0x27, r30	; 39
	OCR0B = pwm;
     76a:	e8 bd       	out	0x28, r30	; 40
	sei();
     76c:	78 94       	sei
     76e:	2e 96       	adiw	r28, 0x0e	; 14
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	ff 91       	pop	r31
     780:	ef 91       	pop	r30
     782:	bf 91       	pop	r27
     784:	af 91       	pop	r26
     786:	9f 91       	pop	r25
     788:	8f 91       	pop	r24
     78a:	7f 91       	pop	r23
     78c:	6f 91       	pop	r22
     78e:	5f 91       	pop	r21
     790:	4f 91       	pop	r20
     792:	3f 91       	pop	r19
     794:	2f 91       	pop	r18
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	df 90       	pop	r13
     7a0:	cf 90       	pop	r12
     7a2:	bf 90       	pop	r11
     7a4:	af 90       	pop	r10
     7a6:	9f 90       	pop	r9
     7a8:	8f 90       	pop	r8
     7aa:	7f 90       	pop	r7
     7ac:	6f 90       	pop	r6
     7ae:	5f 90       	pop	r5
     7b0:	4f 90       	pop	r4
     7b2:	3f 90       	pop	r3
     7b4:	2f 90       	pop	r2
     7b6:	0f 90       	pop	r0
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	0f 90       	pop	r0
     7bc:	1f 90       	pop	r1
     7be:	18 95       	reti

000007c0 <USART_transmit>:
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with "%"
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <USART_transmit+0x6>
     7c6:	00 d0       	rcall	.+0      	; 0x7c8 <USART_transmit+0x8>
     7c8:	00 d0       	rcall	.+0      	; 0x7ca <USART_transmit+0xa>
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
	char buf[6];
	
	strcpy(buf,"%%%%%");
     7ce:	26 e0       	ldi	r18, 0x06	; 6
     7d0:	e0 e0       	ldi	r30, 0x00	; 0
     7d2:	f1 e0       	ldi	r31, 0x01	; 1
     7d4:	de 01       	movw	r26, r28
     7d6:	11 96       	adiw	r26, 0x01	; 1
     7d8:	01 90       	ld	r0, Z+
     7da:	0d 92       	st	X+, r0
     7dc:	2a 95       	dec	r18
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <USART_transmit+0x18>
	strncpy(buf, data, 5);
     7e0:	45 e0       	ldi	r20, 0x05	; 5
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	bc 01       	movw	r22, r24
     7e6:	ce 01       	movw	r24, r28
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	3e d4       	rcall	.+2172   	; 0x1068 <strncpy>
     7ec:	be 01       	movw	r22, r28
     7ee:	6f 5f       	subi	r22, 0xFF	; 255
     7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with "%"
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
     7f2:	9e 01       	movw	r18, r28
     7f4:	2a 5f       	subi	r18, 0xFA	; 250
     7f6:	3f 4f       	sbci	r19, 0xFF	; 255
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
     7f8:	e0 ec       	ldi	r30, 0xC0	; 192
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = buf[i];
     7fc:	86 ec       	ldi	r24, 0xC6	; 198
     7fe:	90 e0       	ldi	r25, 0x00	; 0
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
     800:	40 81       	ld	r20, Z
     802:	45 ff       	sbrs	r20, 5
     804:	fd cf       	rjmp	.-6      	; 0x800 <USART_transmit+0x40>
		UDR0 = buf[i];
     806:	db 01       	movw	r26, r22
     808:	4d 91       	ld	r20, X+
     80a:	bd 01       	movw	r22, r26
     80c:	dc 01       	movw	r26, r24
     80e:	4c 93       	st	X, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     810:	a1 ee       	ldi	r26, 0xE1	; 225
     812:	b4 e0       	ldi	r27, 0x04	; 4
     814:	11 97       	sbiw	r26, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <USART_transmit+0x54>
     818:	00 c0       	rjmp	.+0      	; 0x81a <USART_transmit+0x5a>
     81a:	00 00       	nop
	char buf[6];
	
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
     81c:	62 17       	cp	r22, r18
     81e:	73 07       	cpc	r23, r19
     820:	79 f7       	brne	.-34     	; 0x800 <USART_transmit+0x40>
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = buf[i];
		_delay_ms(5);
	}
}
     822:	26 96       	adiw	r28, 0x06	; 6
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	de bf       	out	0x3e, r29	; 62
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	cd bf       	out	0x3d, r28	; 61
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <__vector_18>:
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
     834:	1f 92       	push	r1
     836:	0f 92       	push	r0
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	0f 92       	push	r0
     83c:	11 24       	eor	r1, r1
     83e:	2f 93       	push	r18
     840:	8f 93       	push	r24
     842:	9f 93       	push	r25
     844:	af 93       	push	r26
     846:	bf 93       	push	r27
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	ef 93       	push	r30
     84e:	ff 93       	push	r31
	cli();
     850:	f8 94       	cli
	PORTC &= ~(1 << PC2);
     852:	42 98       	cbi	0x08, 2	; 8
	PORTC |= (1 << PC1);
     854:	41 9a       	sbi	0x08, 1	; 8
     856:	ae e1       	ldi	r26, 0x1E	; 30
     858:	b1 e0       	ldi	r27, 0x01	; 1
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
     85a:	83 e2       	ldi	r24, 0x23	; 35
     85c:	91 e0       	ldi	r25, 0x01	; 1
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
     85e:	e0 ec       	ldi	r30, 0xC0	; 192
     860:	f0 e0       	ldi	r31, 0x00	; 0
		recieved_bytes[i] = UDR0;
     862:	c6 ec       	ldi	r28, 0xC6	; 198
     864:	d0 e0       	ldi	r29, 0x00	; 0
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
     866:	20 81       	ld	r18, Z
     868:	22 23       	and	r18, r18
     86a:	ec f7       	brge	.-6      	; 0x866 <__vector_18+0x32>
		recieved_bytes[i] = UDR0;
     86c:	28 81       	ld	r18, Y
     86e:	2d 93       	st	X+, r18
*/
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
     870:	a8 17       	cp	r26, r24
     872:	b9 07       	cpc	r27, r25
     874:	c1 f7       	brne	.-16     	; 0x866 <__vector_18+0x32>
		while( !(UCSR0A & (1 << RXC0)) );
		recieved_bytes[i] = UDR0;
	}
	PORTC &= ~(1 << PC1);
     876:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (1 << PC2);
     878:	42 9a       	sbi	0x08, 2	; 8
	newCommand = true;
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	80 93 23 01 	sts	0x0123, r24
	sei();
     880:	78 94       	sei
}
     882:	ff 91       	pop	r31
     884:	ef 91       	pop	r30
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	bf 91       	pop	r27
     88c:	af 91       	pop	r26
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	2f 91       	pop	r18
     894:	0f 90       	pop	r0
     896:	0f be       	out	0x3f, r0	; 63
     898:	0f 90       	pop	r0
     89a:	1f 90       	pop	r1
     89c:	18 95       	reti

0000089e <setup_registers>:
 *	PC1, PD5-PD6
 *	See details in datasheet pg. 99-100
*/
static void setup_DDR(){

	DDRB |= 0x00;
     89e:	84 b1       	in	r24, 0x04	; 4
     8a0:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC2) | (1 << PC1) | (1 << PC0);
     8a2:	87 b1       	in	r24, 0x07	; 7
     8a4:	87 60       	ori	r24, 0x07	; 7
     8a6:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PD6) | (1 << PD5) | (1 << PD1);
     8a8:	8a b1       	in	r24, 0x0a	; 10
     8aa:	82 66       	ori	r24, 0x62	; 98
     8ac:	8a b9       	out	0x0a, r24	; 10
 *	PWM-mode: fast PWM, inverted, no prescaling.
 *	See details in datasheet pg. 113-117
*/
static void setup_PWM(){

	TCCR0A = (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0) | (1 << WGM01) | (1 << WGM00);
     8ae:	83 ef       	ldi	r24, 0xF3	; 243
     8b0:	84 bd       	out	0x24, r24	; 36
	TCCR0B =  (0 << CS02) | (0 << CS01) | (1 << CS00);
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	85 bd       	out	0x25, r24	; 37
 * 	Baud rate according to #define in shared.h
 * 	See details in datasheet pg. 201-205
*/
static void setup_USART(){

	DDRD |= (1 << PD1);
     8b6:	51 9a       	sbi	0x0a, 1	; 10
	unsigned int ubrr = (((F_CPU / (BAUD * 16UL))) - 1 );

	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
     8b8:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
     8bc:	89 e1       	ldi	r24, 0x19	; 25
     8be:	80 93 c4 00 	sts	0x00C4, r24

	// Enable reciever for interrupt and transmitter
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0);
     8c2:	88 e9       	ldi	r24, 0x98	; 152
     8c4:	80 93 c1 00 	sts	0x00C1, r24

	// Set frame format: 8 data, 2 stop, 0 parity
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     8c8:	86 e0       	ldi	r24, 0x06	; 6
     8ca:	80 93 c2 00 	sts	0x00C2, r24
 * 	See details in datasheet pg. 81-82
*/
static void setup_interrupts(){

	// Enables possibility of interrupts on pins 14-8
	PCICR = (1 << PCIE1);
     8ce:	82 e0       	ldi	r24, 0x02	; 2
     8d0:	80 93 68 00 	sts	0x0068, r24
	// Enables interrupts on pin PC4-PC5
	PCMSK1 = (1 << PCINT13) | (1 << PCINT12);
     8d4:	80 e3       	ldi	r24, 0x30	; 48
     8d6:	80 93 6c 00 	sts	0x006C, r24
/*	
 *	Sets up clk/8 prescaling on 16-bit timer OC1
 *	See details in datasheet pg. 141-147
*/	
static void setup_speed_clock(){
	TCCR1B |= (1 << CS11);
     8da:	e1 e8       	ldi	r30, 0x81	; 129
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	80 81       	ld	r24, Z
     8e0:	82 60       	ori	r24, 0x02	; 2
     8e2:	80 83       	st	Z, r24
 *		TIFR1 |= (1 << TOV0);
 * Disabled digital input on pin PC3 for less power usage
 * See details in datasheet pg. 268-272
 */
static void setup_ADC(){
	ADMUX |= (1 << REFS0) | (1 << MUX1) | (1 << MUX0);
     8e4:	ec e7       	ldi	r30, 0x7C	; 124
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	80 81       	ld	r24, Z
     8ea:	83 64       	ori	r24, 0x43	; 67
     8ec:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADATE);
     8ee:	ea e7       	ldi	r30, 0x7A	; 122
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	80 81       	ld	r24, Z
     8f4:	80 6a       	ori	r24, 0xA0	; 160
     8f6:	80 83       	st	Z, r24
	ADCSRB |= (1 << ADTS2) | (1 << ADTS1);
     8f8:	eb e7       	ldi	r30, 0x7B	; 123
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	86 60       	ori	r24, 0x06	; 6
     900:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC3D);
     902:	ee e7       	ldi	r30, 0x7E	; 126
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	80 81       	ld	r24, Z
     908:	88 60       	ori	r24, 0x08	; 8
     90a:	80 83       	st	Z, r24
	
}

static void setup_control(){
	TCCR2B |= (0 << CS22) | (1 << CS21) | (0 << CS20);
     90c:	e1 eb       	ldi	r30, 0xB1	; 177
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	82 60       	ori	r24, 0x02	; 2
     914:	80 83       	st	Z, r24
	TIMSK2 |= (1 << TOIE2);
     916:	e0 e7       	ldi	r30, 0x70	; 112
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	81 60       	ori	r24, 0x01	; 1
     91e:	80 83       	st	Z, r24
     920:	08 95       	ret

00000922 <main>:
unsigned short clk_curr;
unsigned short clk_prev;
unsigned short clk_elapsed;
Shared_Data* shared_ptr;

int main(void){
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	cd b7       	in	r28, 0x3d	; 61
     928:	de b7       	in	r29, 0x3e	; 62
     92a:	cc 51       	subi	r28, 0x1C	; 28
     92c:	d2 40       	sbci	r29, 0x02	; 2
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
	Shared_Data shared_data;
	//Shared_Data* shared_ptr = &shared_data;
	shared_ptr = &shared_data;
     938:	ce 01       	movw	r24, r28
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	90 93 2a 01 	sts	0x012A, r25
     940:	80 93 29 01 	sts	0x0129, r24
	init_shared_data(shared_ptr);
     944:	9c db       	rcall	.-2248   	; 0x7e <init_shared_data>
	
	newCommand = false;
     946:	10 92 23 01 	sts	0x0123, r1
	newMeasurement = false;
     94a:	10 92 26 01 	sts	0x0126, r1
	clk_curr = 0;
     94e:	10 92 25 01 	sts	0x0125, r1
     952:	10 92 24 01 	sts	0x0124, r1
	clk_prev = 0;
     956:	10 92 1d 01 	sts	0x011D, r1
     95a:	10 92 1c 01 	sts	0x011C, r1
	clk_elapsed = 0;
     95e:	10 92 28 01 	sts	0x0128, r1
     962:	10 92 27 01 	sts	0x0127, r1
	shared_ptr->speed_set = 50;
     966:	e0 91 29 01 	lds	r30, 0x0129
     96a:	f0 91 2a 01 	lds	r31, 0x012A
     96e:	82 e3       	ldi	r24, 0x32	; 50
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	91 83       	std	Z+1, r25	; 0x01
     974:	80 83       	st	Z, r24
	
	setup_registers();
     976:	93 df       	rcall	.-218    	; 0x89e <setup_registers>
	sei();
     978:	78 94       	sei
	
	while(1){
		
		if(newCommand){
			switch(*recieved_bytes){
     97a:	0e e1       	ldi	r16, 0x1E	; 30
     97c:	11 e0       	ldi	r17, 0x01	; 1
	setup_registers();
	sei();
	
	while(1){
		
		if(newCommand){
     97e:	80 91 23 01 	lds	r24, 0x0123
     982:	88 23       	and	r24, r24
     984:	09 f4       	brne	.+2      	; 0x988 <main+0x66>
     986:	45 c0       	rjmp	.+138    	; 0xa12 <main+0xf0>
			switch(*recieved_bytes){
     988:	f8 01       	movw	r30, r16
     98a:	80 81       	ld	r24, Z
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	fc 01       	movw	r30, r24
     990:	f0 97       	sbiw	r30, 0x30	; 48
     992:	e9 30       	cpi	r30, 0x09	; 9
     994:	f1 05       	cpc	r31, r1
     996:	d0 f5       	brcc	.+116    	; 0xa0c <main+0xea>
     998:	e6 5e       	subi	r30, 0xE6	; 230
     99a:	ff 4f       	sbci	r31, 0xFF	; 255
     99c:	09 94       	ijmp
				case '0':
					set_speed(shared_ptr);
     99e:	80 91 29 01 	lds	r24, 0x0129
     9a2:	90 91 2a 01 	lds	r25, 0x012A
     9a6:	fc dc       	rcall	.-1544   	; 0x3a0 <set_speed>
					transmit_empty();
     9a8:	0a d2       	rcall	.+1044   	; 0xdbe <transmit_empty>
					break;
     9aa:	31 c0       	rjmp	.+98     	; 0xa0e <main+0xec>
				case '1':
					transmit_rpm_avg(shared_ptr);
     9ac:	80 91 29 01 	lds	r24, 0x0129
     9b0:	90 91 2a 01 	lds	r25, 0x012A
     9b4:	8a d1       	rcall	.+788    	; 0xcca <transmit_rpm_avg>
					break;
     9b6:	2b c0       	rjmp	.+86     	; 0xa0e <main+0xec>
				case '2':
					transmit_fine_tuning(shared_ptr);
     9b8:	80 91 29 01 	lds	r24, 0x0129
     9bc:	90 91 2a 01 	lds	r25, 0x012A
     9c0:	3f d0       	rcall	.+126    	; 0xa40 <transmit_fine_tuning>
					break;
     9c2:	25 c0       	rjmp	.+74     	; 0xa0e <main+0xec>
				case '3':
					transmit_error(shared_ptr);
     9c4:	80 91 29 01 	lds	r24, 0x0129
     9c8:	90 91 2a 01 	lds	r25, 0x012A
     9cc:	41 d1       	rcall	.+642    	; 0xc50 <transmit_error>
					break;
     9ce:	1f c0       	rjmp	.+62     	; 0xa0e <main+0xec>
				case '4':
					transmit_pwm(shared_ptr);
     9d0:	80 91 29 01 	lds	r24, 0x0129
     9d4:	90 91 2a 01 	lds	r25, 0x012A
     9d8:	95 d0       	rcall	.+298    	; 0xb04 <transmit_pwm>
					break;
     9da:	19 c0       	rjmp	.+50     	; 0xa0e <main+0xec>
				case '5':
					transmit_speed_set(shared_ptr);
     9dc:	80 91 29 01 	lds	r24, 0x0129
     9e0:	90 91 2a 01 	lds	r25, 0x012A
     9e4:	62 d0       	rcall	.+196    	; 0xaaa <transmit_speed_set>
					break;
     9e6:	13 c0       	rjmp	.+38     	; 0xa0e <main+0xec>
				case '6':
					transmit_rpm_curr(shared_ptr);
     9e8:	80 91 29 01 	lds	r24, 0x0129
     9ec:	90 91 2a 01 	lds	r25, 0x012A
     9f0:	ad d1       	rcall	.+858    	; 0xd4c <transmit_rpm_curr>
					break;
     9f2:	0d c0       	rjmp	.+26     	; 0xa0e <main+0xec>
				case '7':
					transmit_clk_elapsed(shared_ptr);
     9f4:	80 91 29 01 	lds	r24, 0x0129
     9f8:	90 91 2a 01 	lds	r25, 0x012A
     9fc:	b8 d0       	rcall	.+368    	; 0xb6e <transmit_clk_elapsed>
					break;
     9fe:	07 c0       	rjmp	.+14     	; 0xa0e <main+0xec>
				case '8':
					transmit_delta_time(shared_ptr);
     a00:	80 91 29 01 	lds	r24, 0x0129
     a04:	90 91 2a 01 	lds	r25, 0x012A
     a08:	e8 d0       	rcall	.+464    	; 0xbda <transmit_delta_time>
					break;
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <main+0xec>
				default:
					transmit_empty();
     a0c:	d8 d1       	rcall	.+944    	; 0xdbe <transmit_empty>
			}
			newCommand = false;
     a0e:	10 92 23 01 	sts	0x0123, r1
		}
		if(newMeasurement){
     a12:	80 91 26 01 	lds	r24, 0x0126
     a16:	88 23       	and	r24, r24
     a18:	09 f4       	brne	.+2      	; 0xa1c <main+0xfa>
     a1a:	b1 cf       	rjmp	.-158    	; 0x97e <main+0x5c>
			calc_latest_rpm(shared_ptr);
     a1c:	80 91 29 01 	lds	r24, 0x0129
     a20:	90 91 2a 01 	lds	r25, 0x012A
     a24:	72 db       	rcall	.-2332   	; 0x10a <calc_latest_rpm>
			calc_avg_rpm(shared_ptr);
     a26:	80 91 29 01 	lds	r24, 0x0129
     a2a:	90 91 2a 01 	lds	r25, 0x012A
     a2e:	37 dc       	rcall	.-1938   	; 0x29e <calc_avg_rpm>
			update_fine_tuning(shared_ptr);
     a30:	80 91 29 01 	lds	r24, 0x0129
     a34:	90 91 2a 01 	lds	r25, 0x012A
     a38:	55 db       	rcall	.-2390   	; 0xe4 <update_fine_tuning>
			//control(shared_ptr);
			newMeasurement = false;
     a3a:	10 92 26 01 	sts	0x0126, r1
     a3e:	9f cf       	rjmp	.-194    	; 0x97e <main+0x5c>

00000a40 <transmit_fine_tuning>:
extern unsigned short clk_curr;
extern char recieved_bytes[5];
extern unsigned short clk_elapsed;

/* Transmits the fine tuning over the USART. */
void transmit_fine_tuning(Shared_Data* shared_ptr){
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	00 d0       	rcall	.+0      	; 0xa4a <transmit_fine_tuning+0xa>
     a4a:	00 d0       	rcall	.+0      	; 0xa4c <transmit_fine_tuning+0xc>
     a4c:	00 d0       	rcall	.+0      	; 0xa4e <transmit_fine_tuning+0xe>
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     a52:	25 e0       	ldi	r18, 0x05	; 5
     a54:	e6 e0       	ldi	r30, 0x06	; 6
     a56:	f1 e0       	ldi	r31, 0x01	; 1
     a58:	8e 01       	movw	r16, r28
     a5a:	0f 5f       	subi	r16, 0xFF	; 255
     a5c:	1f 4f       	sbci	r17, 0xFF	; 255
     a5e:	d8 01       	movw	r26, r16
     a60:	01 90       	ld	r0, Z+
     a62:	0d 92       	st	X+, r0
     a64:	2a 95       	dec	r18
     a66:	e1 f7       	brne	.-8      	; 0xa60 <transmit_fine_tuning+0x20>
	snprintf(temp, 6, "%hd", shared_ptr->fine_tuning);
     a68:	fc 01       	movw	r30, r24
     a6a:	27 81       	ldd	r18, Z+7	; 0x07
     a6c:	2f 93       	push	r18
     a6e:	86 81       	ldd	r24, Z+6	; 0x06
     a70:	8f 93       	push	r24
     a72:	8c e0       	ldi	r24, 0x0C	; 12
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	9f 93       	push	r25
     a78:	8f 93       	push	r24
     a7a:	1f 92       	push	r1
     a7c:	86 e0       	ldi	r24, 0x06	; 6
     a7e:	8f 93       	push	r24
     a80:	1f 93       	push	r17
     a82:	0f 93       	push	r16
     a84:	08 d3       	rcall	.+1552   	; 0x1096 <snprintf>
	USART_transmit(temp);
     a86:	c8 01       	movw	r24, r16
     a88:	9b de       	rcall	.-714    	; 0x7c0 <USART_transmit>
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	f8 94       	cli
     a8e:	de bf       	out	0x3e, r29	; 62
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	cd bf       	out	0x3d, r28	; 61
}
     a94:	26 96       	adiw	r28, 0x06	; 6
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	08 95       	ret

00000aaa <transmit_speed_set>:

/* Transmits the set speed over the USART. */
void transmit_speed_set(Shared_Data* shared_ptr){
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	00 d0       	rcall	.+0      	; 0xab4 <transmit_speed_set+0xa>
     ab4:	00 d0       	rcall	.+0      	; 0xab6 <transmit_speed_set+0xc>
     ab6:	00 d0       	rcall	.+0      	; 0xab8 <transmit_speed_set+0xe>
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	
	snprintf(temp, 6, "%hd",  shared_ptr->speed_set);
     abc:	fc 01       	movw	r30, r24
     abe:	21 81       	ldd	r18, Z+1	; 0x01
     ac0:	2f 93       	push	r18
     ac2:	80 81       	ld	r24, Z
     ac4:	8f 93       	push	r24
     ac6:	8c e0       	ldi	r24, 0x0C	; 12
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	9f 93       	push	r25
     acc:	8f 93       	push	r24
     ace:	1f 92       	push	r1
     ad0:	86 e0       	ldi	r24, 0x06	; 6
     ad2:	8f 93       	push	r24
     ad4:	8e 01       	movw	r16, r28
     ad6:	0f 5f       	subi	r16, 0xFF	; 255
     ad8:	1f 4f       	sbci	r17, 0xFF	; 255
     ada:	1f 93       	push	r17
     adc:	0f 93       	push	r16
     ade:	db d2       	rcall	.+1462   	; 0x1096 <snprintf>
	USART_transmit(temp);
     ae0:	c8 01       	movw	r24, r16
     ae2:	6e de       	rcall	.-804    	; 0x7c0 <USART_transmit>
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
}
     aee:	26 96       	adiw	r28, 0x06	; 6
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	08 95       	ret

00000b04 <transmit_pwm>:

/* Transmits the pwm output over the USART. */
void transmit_pwm(Shared_Data* shared_ptr){
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <transmit_pwm+0xa>
     b0e:	00 d0       	rcall	.+0      	; 0xb10 <transmit_pwm+0xc>
     b10:	00 d0       	rcall	.+0      	; 0xb12 <transmit_pwm+0xe>
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     b16:	25 e0       	ldi	r18, 0x05	; 5
     b18:	e6 e0       	ldi	r30, 0x06	; 6
     b1a:	f1 e0       	ldi	r31, 0x01	; 1
     b1c:	8e 01       	movw	r16, r28
     b1e:	0f 5f       	subi	r16, 0xFF	; 255
     b20:	1f 4f       	sbci	r17, 0xFF	; 255
     b22:	d8 01       	movw	r26, r16
     b24:	01 90       	ld	r0, Z+
     b26:	0d 92       	st	X+, r0
     b28:	2a 95       	dec	r18
     b2a:	e1 f7       	brne	.-8      	; 0xb24 <transmit_pwm+0x20>
	
	snprintf(temp, 6, "%d", shared_ptr->pwm);
     b2c:	fc 01       	movw	r30, r24
     b2e:	23 81       	ldd	r18, Z+3	; 0x03
     b30:	2f 93       	push	r18
     b32:	82 81       	ldd	r24, Z+2	; 0x02
     b34:	8f 93       	push	r24
     b36:	80 e1       	ldi	r24, 0x10	; 16
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	9f 93       	push	r25
     b3c:	8f 93       	push	r24
     b3e:	1f 92       	push	r1
     b40:	86 e0       	ldi	r24, 0x06	; 6
     b42:	8f 93       	push	r24
     b44:	1f 93       	push	r17
     b46:	0f 93       	push	r16
     b48:	a6 d2       	rcall	.+1356   	; 0x1096 <snprintf>
	USART_transmit(temp);
     b4a:	c8 01       	movw	r24, r16
     b4c:	39 de       	rcall	.-910    	; 0x7c0 <USART_transmit>
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	cd bf       	out	0x3d, r28	; 61
}
     b58:	26 96       	adiw	r28, 0x06	; 6
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	f8 94       	cli
     b5e:	de bf       	out	0x3e, r29	; 62
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	cd bf       	out	0x3d, r28	; 61
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	08 95       	ret

00000b6e <transmit_clk_elapsed>:

/* Transmits the clk_elapsed over the USART. */
void transmit_clk_elapsed(Shared_Data* shared_ptr){
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	00 d0       	rcall	.+0      	; 0xb78 <transmit_clk_elapsed+0xa>
     b78:	00 d0       	rcall	.+0      	; 0xb7a <transmit_clk_elapsed+0xc>
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <transmit_clk_elapsed+0xe>
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     b80:	85 e0       	ldi	r24, 0x05	; 5
     b82:	e6 e0       	ldi	r30, 0x06	; 6
     b84:	f1 e0       	ldi	r31, 0x01	; 1
     b86:	8e 01       	movw	r16, r28
     b88:	0f 5f       	subi	r16, 0xFF	; 255
     b8a:	1f 4f       	sbci	r17, 0xFF	; 255
     b8c:	d8 01       	movw	r26, r16
     b8e:	01 90       	ld	r0, Z+
     b90:	0d 92       	st	X+, r0
     b92:	8a 95       	dec	r24
     b94:	e1 f7       	brne	.-8      	; 0xb8e <transmit_clk_elapsed+0x20>

	snprintf(temp, 6, "%hu", clk_elapsed);
     b96:	80 91 28 01 	lds	r24, 0x0128
     b9a:	8f 93       	push	r24
     b9c:	80 91 27 01 	lds	r24, 0x0127
     ba0:	8f 93       	push	r24
     ba2:	83 e1       	ldi	r24, 0x13	; 19
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	9f 93       	push	r25
     ba8:	8f 93       	push	r24
     baa:	1f 92       	push	r1
     bac:	86 e0       	ldi	r24, 0x06	; 6
     bae:	8f 93       	push	r24
     bb0:	1f 93       	push	r17
     bb2:	0f 93       	push	r16
     bb4:	70 d2       	rcall	.+1248   	; 0x1096 <snprintf>
	USART_transmit(temp);
     bb6:	c8 01       	movw	r24, r16
     bb8:	03 de       	rcall	.-1018   	; 0x7c0 <USART_transmit>
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
}
     bc4:	26 96       	adiw	r28, 0x06	; 6
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	08 95       	ret

00000bda <transmit_delta_time>:

/* Transmits the delta_time over the USART. */
void transmit_delta_time(Shared_Data* shared_ptr){
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <transmit_delta_time+0xa>
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <transmit_delta_time+0xc>
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <transmit_delta_time+0xe>
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     bec:	25 e0       	ldi	r18, 0x05	; 5
     bee:	e6 e0       	ldi	r30, 0x06	; 6
     bf0:	f1 e0       	ldi	r31, 0x01	; 1
     bf2:	8e 01       	movw	r16, r28
     bf4:	0f 5f       	subi	r16, 0xFF	; 255
     bf6:	1f 4f       	sbci	r17, 0xFF	; 255
     bf8:	d8 01       	movw	r26, r16
     bfa:	01 90       	ld	r0, Z+
     bfc:	0d 92       	st	X+, r0
     bfe:	2a 95       	dec	r18
     c00:	e1 f7       	brne	.-8      	; 0xbfa <transmit_delta_time+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->delta_time);
     c02:	fc 01       	movw	r30, r24
     c04:	e8 5e       	subi	r30, 0xE8	; 232
     c06:	fd 4f       	sbci	r31, 0xFD	; 253
     c08:	83 81       	ldd	r24, Z+3	; 0x03
     c0a:	8f 93       	push	r24
     c0c:	82 81       	ldd	r24, Z+2	; 0x02
     c0e:	8f 93       	push	r24
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	8f 93       	push	r24
     c14:	80 81       	ld	r24, Z
     c16:	8f 93       	push	r24
     c18:	87 e1       	ldi	r24, 0x17	; 23
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	9f 93       	push	r25
     c1e:	8f 93       	push	r24
     c20:	1f 92       	push	r1
     c22:	86 e0       	ldi	r24, 0x06	; 6
     c24:	8f 93       	push	r24
     c26:	1f 93       	push	r17
     c28:	0f 93       	push	r16
     c2a:	35 d2       	rcall	.+1130   	; 0x1096 <snprintf>
	USART_transmit(temp);
     c2c:	c8 01       	movw	r24, r16
     c2e:	c8 dd       	rcall	.-1136   	; 0x7c0 <USART_transmit>
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	de bf       	out	0x3e, r29	; 62
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	cd bf       	out	0x3d, r28	; 61
}
     c3a:	26 96       	adiw	r28, 0x06	; 6
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	08 95       	ret

00000c50 <transmit_error>:

/* Transmits the control error over the USART. */
void transmit_error(Shared_Data* shared_ptr){
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	00 d0       	rcall	.+0      	; 0xc5a <transmit_error+0xa>
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <transmit_error+0xc>
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <transmit_error+0xe>
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     c62:	25 e0       	ldi	r18, 0x05	; 5
     c64:	e6 e0       	ldi	r30, 0x06	; 6
     c66:	f1 e0       	ldi	r31, 0x01	; 1
     c68:	8e 01       	movw	r16, r28
     c6a:	0f 5f       	subi	r16, 0xFF	; 255
     c6c:	1f 4f       	sbci	r17, 0xFF	; 255
     c6e:	d8 01       	movw	r26, r16
     c70:	01 90       	ld	r0, Z+
     c72:	0d 92       	st	X+, r0
     c74:	2a 95       	dec	r18
     c76:	e1 f7       	brne	.-8      	; 0xc70 <transmit_error+0x20>
	snprintf(temp, 6, "%hd", (shared_ptr->error >> N));
     c78:	fc 01       	movw	r30, r24
     c7a:	84 81       	ldd	r24, Z+4	; 0x04
     c7c:	95 81       	ldd	r25, Z+5	; 0x05
     c7e:	95 95       	asr	r25
     c80:	87 95       	ror	r24
     c82:	95 95       	asr	r25
     c84:	87 95       	ror	r24
     c86:	95 95       	asr	r25
     c88:	87 95       	ror	r24
     c8a:	95 95       	asr	r25
     c8c:	87 95       	ror	r24
     c8e:	9f 93       	push	r25
     c90:	8f 93       	push	r24
     c92:	8c e0       	ldi	r24, 0x0C	; 12
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	9f 93       	push	r25
     c98:	8f 93       	push	r24
     c9a:	1f 92       	push	r1
     c9c:	86 e0       	ldi	r24, 0x06	; 6
     c9e:	8f 93       	push	r24
     ca0:	1f 93       	push	r17
     ca2:	0f 93       	push	r16
     ca4:	f8 d1       	rcall	.+1008   	; 0x1096 <snprintf>
	USART_transmit(temp);
     ca6:	c8 01       	movw	r24, r16
     ca8:	8b dd       	rcall	.-1258   	; 0x7c0 <USART_transmit>
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
}
     cb4:	26 96       	adiw	r28, 0x06	; 6
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	08 95       	ret

00000cca <transmit_rpm_avg>:

/* Transmits the average rpm over the USART. */
void transmit_rpm_avg(Shared_Data* shared_ptr){
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <transmit_rpm_avg+0xa>
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <transmit_rpm_avg+0xc>
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <transmit_rpm_avg+0xe>
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     cdc:	25 e0       	ldi	r18, 0x05	; 5
     cde:	e6 e0       	ldi	r30, 0x06	; 6
     ce0:	f1 e0       	ldi	r31, 0x01	; 1
     ce2:	8e 01       	movw	r16, r28
     ce4:	0f 5f       	subi	r16, 0xFF	; 255
     ce6:	1f 4f       	sbci	r17, 0xFF	; 255
     ce8:	d8 01       	movw	r26, r16
     cea:	01 90       	ld	r0, Z+
     cec:	0d 92       	st	X+, r0
     cee:	2a 95       	dec	r18
     cf0:	e1 f7       	brne	.-8      	; 0xcea <transmit_rpm_avg+0x20>
	snprintf(temp, 6, "%lu", (shared_ptr->rpm_avg >> N));
     cf2:	fc 01       	movw	r30, r24
     cf4:	44 89       	ldd	r20, Z+20	; 0x14
     cf6:	55 89       	ldd	r21, Z+21	; 0x15
     cf8:	66 89       	ldd	r22, Z+22	; 0x16
     cfa:	77 89       	ldd	r23, Z+23	; 0x17
     cfc:	68 94       	set
     cfe:	13 f8       	bld	r1, 3
     d00:	76 95       	lsr	r23
     d02:	67 95       	ror	r22
     d04:	57 95       	ror	r21
     d06:	47 95       	ror	r20
     d08:	16 94       	lsr	r1
     d0a:	d1 f7       	brne	.-12     	; 0xd00 <transmit_rpm_avg+0x36>
     d0c:	7f 93       	push	r23
     d0e:	6f 93       	push	r22
     d10:	5f 93       	push	r21
     d12:	4f 93       	push	r20
     d14:	87 e1       	ldi	r24, 0x17	; 23
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	9f 93       	push	r25
     d1a:	8f 93       	push	r24
     d1c:	1f 92       	push	r1
     d1e:	86 e0       	ldi	r24, 0x06	; 6
     d20:	8f 93       	push	r24
     d22:	1f 93       	push	r17
     d24:	0f 93       	push	r16
     d26:	b7 d1       	rcall	.+878    	; 0x1096 <snprintf>
	USART_transmit(temp);
     d28:	c8 01       	movw	r24, r16
     d2a:	4a dd       	rcall	.-1388   	; 0x7c0 <USART_transmit>
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
}
     d36:	26 96       	adiw	r28, 0x06	; 6
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	08 95       	ret

00000d4c <transmit_rpm_curr>:

/* Transmits the latest measured rpm over the USART. */
void transmit_rpm_curr(Shared_Data* shared_ptr){
     d4c:	0f 93       	push	r16
     d4e:	1f 93       	push	r17
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	00 d0       	rcall	.+0      	; 0xd56 <transmit_rpm_curr+0xa>
     d56:	00 d0       	rcall	.+0      	; 0xd58 <transmit_rpm_curr+0xc>
     d58:	00 d0       	rcall	.+0      	; 0xd5a <transmit_rpm_curr+0xe>
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     d5e:	25 e0       	ldi	r18, 0x05	; 5
     d60:	e6 e0       	ldi	r30, 0x06	; 6
     d62:	f1 e0       	ldi	r31, 0x01	; 1
     d64:	8e 01       	movw	r16, r28
     d66:	0f 5f       	subi	r16, 0xFF	; 255
     d68:	1f 4f       	sbci	r17, 0xFF	; 255
     d6a:	d8 01       	movw	r26, r16
     d6c:	01 90       	ld	r0, Z+
     d6e:	0d 92       	st	X+, r0
     d70:	2a 95       	dec	r18
     d72:	e1 f7       	brne	.-8      	; 0xd6c <transmit_rpm_curr+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->rpm_curr);
     d74:	fc 01       	movw	r30, r24
     d76:	23 89       	ldd	r18, Z+19	; 0x13
     d78:	2f 93       	push	r18
     d7a:	22 89       	ldd	r18, Z+18	; 0x12
     d7c:	2f 93       	push	r18
     d7e:	21 89       	ldd	r18, Z+17	; 0x11
     d80:	2f 93       	push	r18
     d82:	80 89       	ldd	r24, Z+16	; 0x10
     d84:	8f 93       	push	r24
     d86:	87 e1       	ldi	r24, 0x17	; 23
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	9f 93       	push	r25
     d8c:	8f 93       	push	r24
     d8e:	1f 92       	push	r1
     d90:	86 e0       	ldi	r24, 0x06	; 6
     d92:	8f 93       	push	r24
     d94:	1f 93       	push	r17
     d96:	0f 93       	push	r16
     d98:	7e d1       	rcall	.+764    	; 0x1096 <snprintf>
	USART_transmit(temp);
     d9a:	c8 01       	movw	r24, r16
     d9c:	11 dd       	rcall	.-1502   	; 0x7c0 <USART_transmit>
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
}
     da8:	26 96       	adiw	r28, 0x06	; 6
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	08 95       	ret

00000dbe <transmit_empty>:

/* Transmits five " " over the USART. */
void transmit_empty(){
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <transmit_empty+0x6>
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <transmit_empty+0x8>
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <transmit_empty+0xa>
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     dcc:	85 e0       	ldi	r24, 0x05	; 5
     dce:	e6 e0       	ldi	r30, 0x06	; 6
     dd0:	f1 e0       	ldi	r31, 0x01	; 1
     dd2:	de 01       	movw	r26, r28
     dd4:	11 96       	adiw	r26, 0x01	; 1
     dd6:	01 90       	ld	r0, Z+
     dd8:	0d 92       	st	X+, r0
     dda:	8a 95       	dec	r24
     ddc:	e1 f7       	brne	.-8      	; 0xdd6 <transmit_empty+0x18>
	USART_transmit(temp);
     dde:	ce 01       	movw	r24, r28
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	ee dc       	rcall	.-1572   	; 0x7c0 <USART_transmit>
}
     de4:	26 96       	adiw	r28, 0x06	; 6
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	de bf       	out	0x3e, r29	; 62
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	cd bf       	out	0x3d, r28	; 61
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	08 95       	ret

00000df6 <__mulsi3>:
     df6:	db 01       	movw	r26, r22
     df8:	8f 93       	push	r24
     dfa:	9f 93       	push	r25
     dfc:	2a d0       	rcall	.+84     	; 0xe52 <__muluhisi3>
     dfe:	bf 91       	pop	r27
     e00:	af 91       	pop	r26
     e02:	a2 9f       	mul	r26, r18
     e04:	80 0d       	add	r24, r0
     e06:	91 1d       	adc	r25, r1
     e08:	a3 9f       	mul	r26, r19
     e0a:	90 0d       	add	r25, r0
     e0c:	b2 9f       	mul	r27, r18
     e0e:	90 0d       	add	r25, r0
     e10:	11 24       	eor	r1, r1
     e12:	08 95       	ret

00000e14 <__divmodhi4>:
     e14:	97 fb       	bst	r25, 7
     e16:	07 2e       	mov	r0, r23
     e18:	16 f4       	brtc	.+4      	; 0xe1e <__divmodhi4+0xa>
     e1a:	00 94       	com	r0
     e1c:	06 d0       	rcall	.+12     	; 0xe2a <__divmodhi4_neg1>
     e1e:	77 fd       	sbrc	r23, 7
     e20:	08 d0       	rcall	.+16     	; 0xe32 <__divmodhi4_neg2>
     e22:	f1 d0       	rcall	.+482    	; 0x1006 <__udivmodhi4>
     e24:	07 fc       	sbrc	r0, 7
     e26:	05 d0       	rcall	.+10     	; 0xe32 <__divmodhi4_neg2>
     e28:	3e f4       	brtc	.+14     	; 0xe38 <__divmodhi4_exit>

00000e2a <__divmodhi4_neg1>:
     e2a:	90 95       	com	r25
     e2c:	81 95       	neg	r24
     e2e:	9f 4f       	sbci	r25, 0xFF	; 255
     e30:	08 95       	ret

00000e32 <__divmodhi4_neg2>:
     e32:	70 95       	com	r23
     e34:	61 95       	neg	r22
     e36:	7f 4f       	sbci	r23, 0xFF	; 255

00000e38 <__divmodhi4_exit>:
     e38:	08 95       	ret

00000e3a <__umulhisi3>:
     e3a:	a2 9f       	mul	r26, r18
     e3c:	b0 01       	movw	r22, r0
     e3e:	b3 9f       	mul	r27, r19
     e40:	c0 01       	movw	r24, r0
     e42:	a3 9f       	mul	r26, r19
     e44:	01 d0       	rcall	.+2      	; 0xe48 <__umulhisi3+0xe>
     e46:	b2 9f       	mul	r27, r18
     e48:	70 0d       	add	r23, r0
     e4a:	81 1d       	adc	r24, r1
     e4c:	11 24       	eor	r1, r1
     e4e:	91 1d       	adc	r25, r1
     e50:	08 95       	ret

00000e52 <__muluhisi3>:
     e52:	f3 df       	rcall	.-26     	; 0xe3a <__umulhisi3>
     e54:	a5 9f       	mul	r26, r21
     e56:	90 0d       	add	r25, r0
     e58:	b4 9f       	mul	r27, r20
     e5a:	90 0d       	add	r25, r0
     e5c:	a4 9f       	mul	r26, r20
     e5e:	80 0d       	add	r24, r0
     e60:	91 1d       	adc	r25, r1
     e62:	11 24       	eor	r1, r1
     e64:	08 95       	ret

00000e66 <__umoddi3>:
     e66:	68 94       	set
     e68:	01 c0       	rjmp	.+2      	; 0xe6c <__udivdi3_umoddi3>

00000e6a <__udivdi3>:
     e6a:	e8 94       	clt

00000e6c <__udivdi3_umoddi3>:
     e6c:	8f 92       	push	r8
     e6e:	9f 92       	push	r9
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	56 d0       	rcall	.+172    	; 0xf22 <__udivmod64>
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	9f 90       	pop	r9
     e7c:	8f 90       	pop	r8
     e7e:	08 95       	ret

00000e80 <__muldi3>:
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	1f 93       	push	r17
     e86:	0f 93       	push	r16
     e88:	9a 9d       	mul	r25, r10
     e8a:	f0 2d       	mov	r31, r0
     e8c:	21 9f       	mul	r18, r17
     e8e:	f0 0d       	add	r31, r0
     e90:	8b 9d       	mul	r24, r11
     e92:	f0 0d       	add	r31, r0
     e94:	8a 9d       	mul	r24, r10
     e96:	e0 2d       	mov	r30, r0
     e98:	f1 0d       	add	r31, r1
     e9a:	03 9f       	mul	r16, r19
     e9c:	f0 0d       	add	r31, r0
     e9e:	02 9f       	mul	r16, r18
     ea0:	e0 0d       	add	r30, r0
     ea2:	f1 1d       	adc	r31, r1
     ea4:	4e 9d       	mul	r20, r14
     ea6:	e0 0d       	add	r30, r0
     ea8:	f1 1d       	adc	r31, r1
     eaa:	5e 9d       	mul	r21, r14
     eac:	f0 0d       	add	r31, r0
     eae:	4f 9d       	mul	r20, r15
     eb0:	f0 0d       	add	r31, r0
     eb2:	7f 93       	push	r23
     eb4:	6f 93       	push	r22
     eb6:	bf 92       	push	r11
     eb8:	af 92       	push	r10
     eba:	5f 93       	push	r21
     ebc:	4f 93       	push	r20
     ebe:	d5 01       	movw	r26, r10
     ec0:	bc df       	rcall	.-136    	; 0xe3a <__umulhisi3>
     ec2:	8b 01       	movw	r16, r22
     ec4:	ac 01       	movw	r20, r24
     ec6:	d7 01       	movw	r26, r14
     ec8:	b8 df       	rcall	.-144    	; 0xe3a <__umulhisi3>
     eca:	eb 01       	movw	r28, r22
     ecc:	e8 0f       	add	r30, r24
     ece:	f9 1f       	adc	r31, r25
     ed0:	d6 01       	movw	r26, r12
     ed2:	1f d0       	rcall	.+62     	; 0xf12 <__muldi3_6>
     ed4:	2f 91       	pop	r18
     ed6:	3f 91       	pop	r19
     ed8:	d6 01       	movw	r26, r12
     eda:	af df       	rcall	.-162    	; 0xe3a <__umulhisi3>
     edc:	c6 0f       	add	r28, r22
     ede:	d7 1f       	adc	r29, r23
     ee0:	e8 1f       	adc	r30, r24
     ee2:	f9 1f       	adc	r31, r25
     ee4:	af 91       	pop	r26
     ee6:	bf 91       	pop	r27
     ee8:	14 d0       	rcall	.+40     	; 0xf12 <__muldi3_6>
     eea:	2f 91       	pop	r18
     eec:	3f 91       	pop	r19
     eee:	a5 df       	rcall	.-182    	; 0xe3a <__umulhisi3>
     ef0:	c6 0f       	add	r28, r22
     ef2:	d7 1f       	adc	r29, r23
     ef4:	e8 1f       	adc	r30, r24
     ef6:	f9 1f       	adc	r31, r25
     ef8:	d6 01       	movw	r26, r12
     efa:	9f df       	rcall	.-194    	; 0xe3a <__umulhisi3>
     efc:	e6 0f       	add	r30, r22
     efe:	f7 1f       	adc	r31, r23
     f00:	98 01       	movw	r18, r16
     f02:	be 01       	movw	r22, r28
     f04:	cf 01       	movw	r24, r30
     f06:	11 24       	eor	r1, r1
     f08:	0f 91       	pop	r16
     f0a:	1f 91       	pop	r17
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <__muldi3_6>:
     f12:	93 df       	rcall	.-218    	; 0xe3a <__umulhisi3>
     f14:	46 0f       	add	r20, r22
     f16:	57 1f       	adc	r21, r23
     f18:	c8 1f       	adc	r28, r24
     f1a:	d9 1f       	adc	r29, r25
     f1c:	08 f4       	brcc	.+2      	; 0xf20 <__muldi3_6+0xe>
     f1e:	31 96       	adiw	r30, 0x01	; 1
     f20:	08 95       	ret

00000f22 <__udivmod64>:
     f22:	88 24       	eor	r8, r8
     f24:	99 24       	eor	r9, r9
     f26:	f4 01       	movw	r30, r8
     f28:	e4 01       	movw	r28, r8
     f2a:	b0 e4       	ldi	r27, 0x40	; 64
     f2c:	1b 2e       	mov	r1, r27
     f2e:	d4 01       	movw	r26, r8
     f30:	9d 15       	cp	r25, r13
     f32:	8e 04       	cpc	r8, r14
     f34:	9f 04       	cpc	r9, r15
     f36:	e0 07       	cpc	r30, r16
     f38:	f1 07       	cpc	r31, r17
     f3a:	38 f4       	brcc	.+14     	; 0xf4a <__udivmod64+0x28>
     f3c:	fc 01       	movw	r30, r24
     f3e:	4b 01       	movw	r8, r22
     f40:	ca 01       	movw	r24, r20
     f42:	b9 01       	movw	r22, r18
     f44:	ad 01       	movw	r20, r26
     f46:	9e 01       	movw	r18, r28
     f48:	16 94       	lsr	r1
     f4a:	22 0f       	add	r18, r18
     f4c:	33 1f       	adc	r19, r19
     f4e:	44 1f       	adc	r20, r20
     f50:	55 1f       	adc	r21, r21
     f52:	66 1f       	adc	r22, r22
     f54:	77 1f       	adc	r23, r23
     f56:	88 1f       	adc	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	88 1c       	adc	r8, r8
     f5c:	99 1c       	adc	r9, r9
     f5e:	ee 1f       	adc	r30, r30
     f60:	ff 1f       	adc	r31, r31
     f62:	cc 1f       	adc	r28, r28
     f64:	dd 1f       	adc	r29, r29
     f66:	aa 1f       	adc	r26, r26
     f68:	bb 1f       	adc	r27, r27
     f6a:	8a 14       	cp	r8, r10
     f6c:	9b 04       	cpc	r9, r11
     f6e:	ec 05       	cpc	r30, r12
     f70:	fd 05       	cpc	r31, r13
     f72:	ce 05       	cpc	r28, r14
     f74:	df 05       	cpc	r29, r15
     f76:	a0 07       	cpc	r26, r16
     f78:	b1 07       	cpc	r27, r17
     f7a:	48 f0       	brcs	.+18     	; 0xf8e <__udivmod64+0x6c>
     f7c:	8a 18       	sub	r8, r10
     f7e:	9b 08       	sbc	r9, r11
     f80:	ec 09       	sbc	r30, r12
     f82:	fd 09       	sbc	r31, r13
     f84:	ce 09       	sbc	r28, r14
     f86:	df 09       	sbc	r29, r15
     f88:	a0 0b       	sbc	r26, r16
     f8a:	b1 0b       	sbc	r27, r17
     f8c:	21 60       	ori	r18, 0x01	; 1
     f8e:	1a 94       	dec	r1
     f90:	e1 f6       	brne	.-72     	; 0xf4a <__udivmod64+0x28>
     f92:	2e f4       	brtc	.+10     	; 0xf9e <__udivmod64+0x7c>
     f94:	94 01       	movw	r18, r8
     f96:	af 01       	movw	r20, r30
     f98:	be 01       	movw	r22, r28
     f9a:	cd 01       	movw	r24, r26
     f9c:	00 0c       	add	r0, r0
     f9e:	08 95       	ret

00000fa0 <__ashrdi3>:
     fa0:	0f 93       	push	r16
     fa2:	0f 73       	andi	r16, 0x3F	; 63
     fa4:	51 f0       	breq	.+20     	; 0xfba <__ashrdi3+0x1a>
     fa6:	95 95       	asr	r25
     fa8:	87 95       	ror	r24
     faa:	77 95       	ror	r23
     fac:	67 95       	ror	r22
     fae:	57 95       	ror	r21
     fb0:	47 95       	ror	r20
     fb2:	37 95       	ror	r19
     fb4:	27 95       	ror	r18
     fb6:	0a 95       	dec	r16
     fb8:	b1 f7       	brne	.-20     	; 0xfa6 <__ashrdi3+0x6>
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <__lshrdi3>:
     fbe:	0f 93       	push	r16
     fc0:	0f 73       	andi	r16, 0x3F	; 63
     fc2:	51 f0       	breq	.+20     	; 0xfd8 <__lshrdi3+0x1a>
     fc4:	96 95       	lsr	r25
     fc6:	87 95       	ror	r24
     fc8:	77 95       	ror	r23
     fca:	67 95       	ror	r22
     fcc:	57 95       	ror	r21
     fce:	47 95       	ror	r20
     fd0:	37 95       	ror	r19
     fd2:	27 95       	ror	r18
     fd4:	0a 95       	dec	r16
     fd6:	b1 f7       	brne	.-20     	; 0xfc4 <__lshrdi3+0x6>
     fd8:	0f 91       	pop	r16
     fda:	08 95       	ret

00000fdc <__adddi3>:
     fdc:	2a 0d       	add	r18, r10
     fde:	3b 1d       	adc	r19, r11
     fe0:	4c 1d       	adc	r20, r12
     fe2:	5d 1d       	adc	r21, r13
     fe4:	6e 1d       	adc	r22, r14
     fe6:	7f 1d       	adc	r23, r15
     fe8:	80 1f       	adc	r24, r16
     fea:	91 1f       	adc	r25, r17
     fec:	08 95       	ret

00000fee <__cmpdi2_s8>:
     fee:	00 24       	eor	r0, r0
     ff0:	a7 fd       	sbrc	r26, 7
     ff2:	00 94       	com	r0
     ff4:	2a 17       	cp	r18, r26
     ff6:	30 05       	cpc	r19, r0
     ff8:	40 05       	cpc	r20, r0
     ffa:	50 05       	cpc	r21, r0
     ffc:	60 05       	cpc	r22, r0
     ffe:	70 05       	cpc	r23, r0
    1000:	80 05       	cpc	r24, r0
    1002:	90 05       	cpc	r25, r0
    1004:	08 95       	ret

00001006 <__udivmodhi4>:
    1006:	aa 1b       	sub	r26, r26
    1008:	bb 1b       	sub	r27, r27
    100a:	51 e1       	ldi	r21, 0x11	; 17
    100c:	07 c0       	rjmp	.+14     	; 0x101c <__udivmodhi4_ep>

0000100e <__udivmodhi4_loop>:
    100e:	aa 1f       	adc	r26, r26
    1010:	bb 1f       	adc	r27, r27
    1012:	a6 17       	cp	r26, r22
    1014:	b7 07       	cpc	r27, r23
    1016:	10 f0       	brcs	.+4      	; 0x101c <__udivmodhi4_ep>
    1018:	a6 1b       	sub	r26, r22
    101a:	b7 0b       	sbc	r27, r23

0000101c <__udivmodhi4_ep>:
    101c:	88 1f       	adc	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	5a 95       	dec	r21
    1022:	a9 f7       	brne	.-22     	; 0x100e <__udivmodhi4_loop>
    1024:	80 95       	com	r24
    1026:	90 95       	com	r25
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	08 95       	ret

0000102e <atoi>:
    102e:	fc 01       	movw	r30, r24
    1030:	88 27       	eor	r24, r24
    1032:	99 27       	eor	r25, r25
    1034:	e8 94       	clt
    1036:	21 91       	ld	r18, Z+
    1038:	20 32       	cpi	r18, 0x20	; 32
    103a:	e9 f3       	breq	.-6      	; 0x1036 <atoi+0x8>
    103c:	29 30       	cpi	r18, 0x09	; 9
    103e:	10 f0       	brcs	.+4      	; 0x1044 <atoi+0x16>
    1040:	2e 30       	cpi	r18, 0x0E	; 14
    1042:	c8 f3       	brcs	.-14     	; 0x1036 <atoi+0x8>
    1044:	2b 32       	cpi	r18, 0x2B	; 43
    1046:	39 f0       	breq	.+14     	; 0x1056 <atoi+0x28>
    1048:	2d 32       	cpi	r18, 0x2D	; 45
    104a:	31 f4       	brne	.+12     	; 0x1058 <atoi+0x2a>
    104c:	68 94       	set
    104e:	03 c0       	rjmp	.+6      	; 0x1056 <atoi+0x28>
    1050:	1a d0       	rcall	.+52     	; 0x1086 <__mulhi_const_10>
    1052:	82 0f       	add	r24, r18
    1054:	91 1d       	adc	r25, r1
    1056:	21 91       	ld	r18, Z+
    1058:	20 53       	subi	r18, 0x30	; 48
    105a:	2a 30       	cpi	r18, 0x0A	; 10
    105c:	c8 f3       	brcs	.-14     	; 0x1050 <atoi+0x22>
    105e:	1e f4       	brtc	.+6      	; 0x1066 <atoi+0x38>
    1060:	90 95       	com	r25
    1062:	81 95       	neg	r24
    1064:	9f 4f       	sbci	r25, 0xFF	; 255
    1066:	08 95       	ret

00001068 <strncpy>:
    1068:	fb 01       	movw	r30, r22
    106a:	dc 01       	movw	r26, r24
    106c:	41 50       	subi	r20, 0x01	; 1
    106e:	50 40       	sbci	r21, 0x00	; 0
    1070:	48 f0       	brcs	.+18     	; 0x1084 <strncpy+0x1c>
    1072:	01 90       	ld	r0, Z+
    1074:	0d 92       	st	X+, r0
    1076:	00 20       	and	r0, r0
    1078:	c9 f7       	brne	.-14     	; 0x106c <strncpy+0x4>
    107a:	01 c0       	rjmp	.+2      	; 0x107e <strncpy+0x16>
    107c:	1d 92       	st	X+, r1
    107e:	41 50       	subi	r20, 0x01	; 1
    1080:	50 40       	sbci	r21, 0x00	; 0
    1082:	e0 f7       	brcc	.-8      	; 0x107c <strncpy+0x14>
    1084:	08 95       	ret

00001086 <__mulhi_const_10>:
    1086:	7a e0       	ldi	r23, 0x0A	; 10
    1088:	97 9f       	mul	r25, r23
    108a:	90 2d       	mov	r25, r0
    108c:	87 9f       	mul	r24, r23
    108e:	80 2d       	mov	r24, r0
    1090:	91 0d       	add	r25, r1
    1092:	11 24       	eor	r1, r1
    1094:	08 95       	ret

00001096 <snprintf>:
    1096:	ae e0       	ldi	r26, 0x0E	; 14
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e0 e5       	ldi	r30, 0x50	; 80
    109c:	f8 e0       	ldi	r31, 0x08	; 8
    109e:	a3 c2       	rjmp	.+1350   	; 0x15e6 <__prologue_saves__+0x1c>
    10a0:	0d 89       	ldd	r16, Y+21	; 0x15
    10a2:	1e 89       	ldd	r17, Y+22	; 0x16
    10a4:	8f 89       	ldd	r24, Y+23	; 0x17
    10a6:	98 8d       	ldd	r25, Y+24	; 0x18
    10a8:	26 e0       	ldi	r18, 0x06	; 6
    10aa:	2c 83       	std	Y+4, r18	; 0x04
    10ac:	1a 83       	std	Y+2, r17	; 0x02
    10ae:	09 83       	std	Y+1, r16	; 0x01
    10b0:	97 ff       	sbrs	r25, 7
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <snprintf+0x22>
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e8       	ldi	r25, 0x80	; 128
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	9e 83       	std	Y+6, r25	; 0x06
    10bc:	8d 83       	std	Y+5, r24	; 0x05
    10be:	ce 01       	movw	r24, r28
    10c0:	4b 96       	adiw	r24, 0x1b	; 27
    10c2:	ac 01       	movw	r20, r24
    10c4:	69 8d       	ldd	r22, Y+25	; 0x19
    10c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10c8:	ce 01       	movw	r24, r28
    10ca:	01 96       	adiw	r24, 0x01	; 1
    10cc:	11 d0       	rcall	.+34     	; 0x10f0 <vfprintf>
    10ce:	4d 81       	ldd	r20, Y+5	; 0x05
    10d0:	5e 81       	ldd	r21, Y+6	; 0x06
    10d2:	57 fd       	sbrc	r21, 7
    10d4:	0a c0       	rjmp	.+20     	; 0x10ea <snprintf+0x54>
    10d6:	2f 81       	ldd	r18, Y+7	; 0x07
    10d8:	38 85       	ldd	r19, Y+8	; 0x08
    10da:	42 17       	cp	r20, r18
    10dc:	53 07       	cpc	r21, r19
    10de:	0c f4       	brge	.+2      	; 0x10e2 <snprintf+0x4c>
    10e0:	9a 01       	movw	r18, r20
    10e2:	f8 01       	movw	r30, r16
    10e4:	e2 0f       	add	r30, r18
    10e6:	f3 1f       	adc	r31, r19
    10e8:	10 82       	st	Z, r1
    10ea:	2e 96       	adiw	r28, 0x0e	; 14
    10ec:	e4 e0       	ldi	r30, 0x04	; 4
    10ee:	97 c2       	rjmp	.+1326   	; 0x161e <__epilogue_restores__+0x1c>

000010f0 <vfprintf>:
    10f0:	ac e0       	ldi	r26, 0x0C	; 12
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	ed e7       	ldi	r30, 0x7D	; 125
    10f6:	f8 e0       	ldi	r31, 0x08	; 8
    10f8:	68 c2       	rjmp	.+1232   	; 0x15ca <__prologue_saves__>
    10fa:	7c 01       	movw	r14, r24
    10fc:	6b 01       	movw	r12, r22
    10fe:	8a 01       	movw	r16, r20
    1100:	fc 01       	movw	r30, r24
    1102:	17 82       	std	Z+7, r1	; 0x07
    1104:	16 82       	std	Z+6, r1	; 0x06
    1106:	83 81       	ldd	r24, Z+3	; 0x03
    1108:	81 ff       	sbrs	r24, 1
    110a:	b9 c1       	rjmp	.+882    	; 0x147e <vfprintf+0x38e>
    110c:	88 24       	eor	r8, r8
    110e:	83 94       	inc	r8
    1110:	91 2c       	mov	r9, r1
    1112:	8c 0e       	add	r8, r28
    1114:	9d 1e       	adc	r9, r29
    1116:	f7 01       	movw	r30, r14
    1118:	93 81       	ldd	r25, Z+3	; 0x03
    111a:	f6 01       	movw	r30, r12
    111c:	93 fd       	sbrc	r25, 3
    111e:	85 91       	lpm	r24, Z+
    1120:	93 ff       	sbrs	r25, 3
    1122:	81 91       	ld	r24, Z+
    1124:	6f 01       	movw	r12, r30
    1126:	88 23       	and	r24, r24
    1128:	09 f4       	brne	.+2      	; 0x112c <vfprintf+0x3c>
    112a:	a5 c1       	rjmp	.+842    	; 0x1476 <vfprintf+0x386>
    112c:	85 32       	cpi	r24, 0x25	; 37
    112e:	39 f4       	brne	.+14     	; 0x113e <vfprintf+0x4e>
    1130:	93 fd       	sbrc	r25, 3
    1132:	85 91       	lpm	r24, Z+
    1134:	93 ff       	sbrs	r25, 3
    1136:	81 91       	ld	r24, Z+
    1138:	6f 01       	movw	r12, r30
    113a:	85 32       	cpi	r24, 0x25	; 37
    113c:	21 f4       	brne	.+8      	; 0x1146 <vfprintf+0x56>
    113e:	b7 01       	movw	r22, r14
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	b9 d1       	rcall	.+882    	; 0x14b6 <fputc>
    1144:	e8 cf       	rjmp	.-48     	; 0x1116 <vfprintf+0x26>
    1146:	51 2c       	mov	r5, r1
    1148:	31 2c       	mov	r3, r1
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	20 32       	cpi	r18, 0x20	; 32
    114e:	a8 f4       	brcc	.+42     	; 0x117a <vfprintf+0x8a>
    1150:	8b 32       	cpi	r24, 0x2B	; 43
    1152:	61 f0       	breq	.+24     	; 0x116c <vfprintf+0x7c>
    1154:	28 f4       	brcc	.+10     	; 0x1160 <vfprintf+0x70>
    1156:	80 32       	cpi	r24, 0x20	; 32
    1158:	51 f0       	breq	.+20     	; 0x116e <vfprintf+0x7e>
    115a:	83 32       	cpi	r24, 0x23	; 35
    115c:	71 f4       	brne	.+28     	; 0x117a <vfprintf+0x8a>
    115e:	0b c0       	rjmp	.+22     	; 0x1176 <vfprintf+0x86>
    1160:	8d 32       	cpi	r24, 0x2D	; 45
    1162:	39 f0       	breq	.+14     	; 0x1172 <vfprintf+0x82>
    1164:	80 33       	cpi	r24, 0x30	; 48
    1166:	49 f4       	brne	.+18     	; 0x117a <vfprintf+0x8a>
    1168:	21 60       	ori	r18, 0x01	; 1
    116a:	28 c0       	rjmp	.+80     	; 0x11bc <vfprintf+0xcc>
    116c:	22 60       	ori	r18, 0x02	; 2
    116e:	24 60       	ori	r18, 0x04	; 4
    1170:	25 c0       	rjmp	.+74     	; 0x11bc <vfprintf+0xcc>
    1172:	28 60       	ori	r18, 0x08	; 8
    1174:	23 c0       	rjmp	.+70     	; 0x11bc <vfprintf+0xcc>
    1176:	20 61       	ori	r18, 0x10	; 16
    1178:	21 c0       	rjmp	.+66     	; 0x11bc <vfprintf+0xcc>
    117a:	27 fd       	sbrc	r18, 7
    117c:	27 c0       	rjmp	.+78     	; 0x11cc <vfprintf+0xdc>
    117e:	38 2f       	mov	r19, r24
    1180:	30 53       	subi	r19, 0x30	; 48
    1182:	3a 30       	cpi	r19, 0x0A	; 10
    1184:	78 f4       	brcc	.+30     	; 0x11a4 <vfprintf+0xb4>
    1186:	26 ff       	sbrs	r18, 6
    1188:	06 c0       	rjmp	.+12     	; 0x1196 <vfprintf+0xa6>
    118a:	fa e0       	ldi	r31, 0x0A	; 10
    118c:	5f 9e       	mul	r5, r31
    118e:	30 0d       	add	r19, r0
    1190:	11 24       	eor	r1, r1
    1192:	53 2e       	mov	r5, r19
    1194:	13 c0       	rjmp	.+38     	; 0x11bc <vfprintf+0xcc>
    1196:	8a e0       	ldi	r24, 0x0A	; 10
    1198:	38 9e       	mul	r3, r24
    119a:	30 0d       	add	r19, r0
    119c:	11 24       	eor	r1, r1
    119e:	33 2e       	mov	r3, r19
    11a0:	20 62       	ori	r18, 0x20	; 32
    11a2:	0c c0       	rjmp	.+24     	; 0x11bc <vfprintf+0xcc>
    11a4:	8e 32       	cpi	r24, 0x2E	; 46
    11a6:	21 f4       	brne	.+8      	; 0x11b0 <vfprintf+0xc0>
    11a8:	26 fd       	sbrc	r18, 6
    11aa:	65 c1       	rjmp	.+714    	; 0x1476 <vfprintf+0x386>
    11ac:	20 64       	ori	r18, 0x40	; 64
    11ae:	06 c0       	rjmp	.+12     	; 0x11bc <vfprintf+0xcc>
    11b0:	8c 36       	cpi	r24, 0x6C	; 108
    11b2:	11 f4       	brne	.+4      	; 0x11b8 <vfprintf+0xc8>
    11b4:	20 68       	ori	r18, 0x80	; 128
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <vfprintf+0xcc>
    11b8:	88 36       	cpi	r24, 0x68	; 104
    11ba:	41 f4       	brne	.+16     	; 0x11cc <vfprintf+0xdc>
    11bc:	f6 01       	movw	r30, r12
    11be:	93 fd       	sbrc	r25, 3
    11c0:	85 91       	lpm	r24, Z+
    11c2:	93 ff       	sbrs	r25, 3
    11c4:	81 91       	ld	r24, Z+
    11c6:	6f 01       	movw	r12, r30
    11c8:	81 11       	cpse	r24, r1
    11ca:	c0 cf       	rjmp	.-128    	; 0x114c <vfprintf+0x5c>
    11cc:	98 2f       	mov	r25, r24
    11ce:	95 54       	subi	r25, 0x45	; 69
    11d0:	93 30       	cpi	r25, 0x03	; 3
    11d2:	18 f0       	brcs	.+6      	; 0x11da <vfprintf+0xea>
    11d4:	90 52       	subi	r25, 0x20	; 32
    11d6:	93 30       	cpi	r25, 0x03	; 3
    11d8:	28 f4       	brcc	.+10     	; 0x11e4 <vfprintf+0xf4>
    11da:	0c 5f       	subi	r16, 0xFC	; 252
    11dc:	1f 4f       	sbci	r17, 0xFF	; 255
    11de:	ff e3       	ldi	r31, 0x3F	; 63
    11e0:	f9 83       	std	Y+1, r31	; 0x01
    11e2:	0d c0       	rjmp	.+26     	; 0x11fe <vfprintf+0x10e>
    11e4:	83 36       	cpi	r24, 0x63	; 99
    11e6:	31 f0       	breq	.+12     	; 0x11f4 <vfprintf+0x104>
    11e8:	83 37       	cpi	r24, 0x73	; 115
    11ea:	71 f0       	breq	.+28     	; 0x1208 <vfprintf+0x118>
    11ec:	83 35       	cpi	r24, 0x53	; 83
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <vfprintf+0x102>
    11f0:	5a c0       	rjmp	.+180    	; 0x12a6 <vfprintf+0x1b6>
    11f2:	22 c0       	rjmp	.+68     	; 0x1238 <vfprintf+0x148>
    11f4:	f8 01       	movw	r30, r16
    11f6:	80 81       	ld	r24, Z
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	0e 5f       	subi	r16, 0xFE	; 254
    11fc:	1f 4f       	sbci	r17, 0xFF	; 255
    11fe:	44 24       	eor	r4, r4
    1200:	43 94       	inc	r4
    1202:	51 2c       	mov	r5, r1
    1204:	54 01       	movw	r10, r8
    1206:	14 c0       	rjmp	.+40     	; 0x1230 <vfprintf+0x140>
    1208:	38 01       	movw	r6, r16
    120a:	f2 e0       	ldi	r31, 0x02	; 2
    120c:	6f 0e       	add	r6, r31
    120e:	71 1c       	adc	r7, r1
    1210:	f8 01       	movw	r30, r16
    1212:	a0 80       	ld	r10, Z
    1214:	b1 80       	ldd	r11, Z+1	; 0x01
    1216:	26 ff       	sbrs	r18, 6
    1218:	03 c0       	rjmp	.+6      	; 0x1220 <vfprintf+0x130>
    121a:	65 2d       	mov	r22, r5
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <vfprintf+0x134>
    1220:	6f ef       	ldi	r22, 0xFF	; 255
    1222:	7f ef       	ldi	r23, 0xFF	; 255
    1224:	c5 01       	movw	r24, r10
    1226:	2c 87       	std	Y+12, r18	; 0x0c
    1228:	3b d1       	rcall	.+630    	; 0x14a0 <strnlen>
    122a:	2c 01       	movw	r4, r24
    122c:	83 01       	movw	r16, r6
    122e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1230:	6f e7       	ldi	r22, 0x7F	; 127
    1232:	26 2e       	mov	r2, r22
    1234:	22 22       	and	r2, r18
    1236:	17 c0       	rjmp	.+46     	; 0x1266 <vfprintf+0x176>
    1238:	38 01       	movw	r6, r16
    123a:	f2 e0       	ldi	r31, 0x02	; 2
    123c:	6f 0e       	add	r6, r31
    123e:	71 1c       	adc	r7, r1
    1240:	f8 01       	movw	r30, r16
    1242:	a0 80       	ld	r10, Z
    1244:	b1 80       	ldd	r11, Z+1	; 0x01
    1246:	26 ff       	sbrs	r18, 6
    1248:	03 c0       	rjmp	.+6      	; 0x1250 <vfprintf+0x160>
    124a:	65 2d       	mov	r22, r5
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <vfprintf+0x164>
    1250:	6f ef       	ldi	r22, 0xFF	; 255
    1252:	7f ef       	ldi	r23, 0xFF	; 255
    1254:	c5 01       	movw	r24, r10
    1256:	2c 87       	std	Y+12, r18	; 0x0c
    1258:	18 d1       	rcall	.+560    	; 0x148a <strnlen_P>
    125a:	2c 01       	movw	r4, r24
    125c:	2c 85       	ldd	r18, Y+12	; 0x0c
    125e:	50 e8       	ldi	r21, 0x80	; 128
    1260:	25 2e       	mov	r2, r21
    1262:	22 2a       	or	r2, r18
    1264:	83 01       	movw	r16, r6
    1266:	23 fc       	sbrc	r2, 3
    1268:	1a c0       	rjmp	.+52     	; 0x129e <vfprintf+0x1ae>
    126a:	05 c0       	rjmp	.+10     	; 0x1276 <vfprintf+0x186>
    126c:	b7 01       	movw	r22, r14
    126e:	80 e2       	ldi	r24, 0x20	; 32
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	21 d1       	rcall	.+578    	; 0x14b6 <fputc>
    1274:	3a 94       	dec	r3
    1276:	83 2d       	mov	r24, r3
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	48 16       	cp	r4, r24
    127c:	59 06       	cpc	r5, r25
    127e:	b0 f3       	brcs	.-20     	; 0x126c <vfprintf+0x17c>
    1280:	0e c0       	rjmp	.+28     	; 0x129e <vfprintf+0x1ae>
    1282:	f5 01       	movw	r30, r10
    1284:	27 fc       	sbrc	r2, 7
    1286:	85 91       	lpm	r24, Z+
    1288:	27 fe       	sbrs	r2, 7
    128a:	81 91       	ld	r24, Z+
    128c:	5f 01       	movw	r10, r30
    128e:	b7 01       	movw	r22, r14
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	11 d1       	rcall	.+546    	; 0x14b6 <fputc>
    1294:	31 10       	cpse	r3, r1
    1296:	3a 94       	dec	r3
    1298:	f1 e0       	ldi	r31, 0x01	; 1
    129a:	4f 1a       	sub	r4, r31
    129c:	51 08       	sbc	r5, r1
    129e:	41 14       	cp	r4, r1
    12a0:	51 04       	cpc	r5, r1
    12a2:	79 f7       	brne	.-34     	; 0x1282 <vfprintf+0x192>
    12a4:	e5 c0       	rjmp	.+458    	; 0x1470 <vfprintf+0x380>
    12a6:	84 36       	cpi	r24, 0x64	; 100
    12a8:	11 f0       	breq	.+4      	; 0x12ae <vfprintf+0x1be>
    12aa:	89 36       	cpi	r24, 0x69	; 105
    12ac:	39 f5       	brne	.+78     	; 0x12fc <vfprintf+0x20c>
    12ae:	f8 01       	movw	r30, r16
    12b0:	27 ff       	sbrs	r18, 7
    12b2:	07 c0       	rjmp	.+14     	; 0x12c2 <vfprintf+0x1d2>
    12b4:	60 81       	ld	r22, Z
    12b6:	71 81       	ldd	r23, Z+1	; 0x01
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
    12ba:	93 81       	ldd	r25, Z+3	; 0x03
    12bc:	0c 5f       	subi	r16, 0xFC	; 252
    12be:	1f 4f       	sbci	r17, 0xFF	; 255
    12c0:	08 c0       	rjmp	.+16     	; 0x12d2 <vfprintf+0x1e2>
    12c2:	60 81       	ld	r22, Z
    12c4:	71 81       	ldd	r23, Z+1	; 0x01
    12c6:	88 27       	eor	r24, r24
    12c8:	77 fd       	sbrc	r23, 7
    12ca:	80 95       	com	r24
    12cc:	98 2f       	mov	r25, r24
    12ce:	0e 5f       	subi	r16, 0xFE	; 254
    12d0:	1f 4f       	sbci	r17, 0xFF	; 255
    12d2:	4f e6       	ldi	r20, 0x6F	; 111
    12d4:	b4 2e       	mov	r11, r20
    12d6:	b2 22       	and	r11, r18
    12d8:	97 ff       	sbrs	r25, 7
    12da:	09 c0       	rjmp	.+18     	; 0x12ee <vfprintf+0x1fe>
    12dc:	90 95       	com	r25
    12de:	80 95       	com	r24
    12e0:	70 95       	com	r23
    12e2:	61 95       	neg	r22
    12e4:	7f 4f       	sbci	r23, 0xFF	; 255
    12e6:	8f 4f       	sbci	r24, 0xFF	; 255
    12e8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ea:	f0 e8       	ldi	r31, 0x80	; 128
    12ec:	bf 2a       	or	r11, r31
    12ee:	2a e0       	ldi	r18, 0x0A	; 10
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	a4 01       	movw	r20, r8
    12f4:	0c d1       	rcall	.+536    	; 0x150e <__ultoa_invert>
    12f6:	a8 2e       	mov	r10, r24
    12f8:	a8 18       	sub	r10, r8
    12fa:	42 c0       	rjmp	.+132    	; 0x1380 <vfprintf+0x290>
    12fc:	85 37       	cpi	r24, 0x75	; 117
    12fe:	31 f4       	brne	.+12     	; 0x130c <vfprintf+0x21c>
    1300:	3f ee       	ldi	r19, 0xEF	; 239
    1302:	b3 2e       	mov	r11, r19
    1304:	b2 22       	and	r11, r18
    1306:	2a e0       	ldi	r18, 0x0A	; 10
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	24 c0       	rjmp	.+72     	; 0x1354 <vfprintf+0x264>
    130c:	99 ef       	ldi	r25, 0xF9	; 249
    130e:	b9 2e       	mov	r11, r25
    1310:	b2 22       	and	r11, r18
    1312:	8f 36       	cpi	r24, 0x6F	; 111
    1314:	b9 f0       	breq	.+46     	; 0x1344 <vfprintf+0x254>
    1316:	20 f4       	brcc	.+8      	; 0x1320 <vfprintf+0x230>
    1318:	88 35       	cpi	r24, 0x58	; 88
    131a:	09 f0       	breq	.+2      	; 0x131e <vfprintf+0x22e>
    131c:	ac c0       	rjmp	.+344    	; 0x1476 <vfprintf+0x386>
    131e:	0d c0       	rjmp	.+26     	; 0x133a <vfprintf+0x24a>
    1320:	80 37       	cpi	r24, 0x70	; 112
    1322:	21 f0       	breq	.+8      	; 0x132c <vfprintf+0x23c>
    1324:	88 37       	cpi	r24, 0x78	; 120
    1326:	09 f0       	breq	.+2      	; 0x132a <vfprintf+0x23a>
    1328:	a6 c0       	rjmp	.+332    	; 0x1476 <vfprintf+0x386>
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <vfprintf+0x240>
    132c:	20 e1       	ldi	r18, 0x10	; 16
    132e:	b2 2a       	or	r11, r18
    1330:	b4 fe       	sbrs	r11, 4
    1332:	0b c0       	rjmp	.+22     	; 0x134a <vfprintf+0x25a>
    1334:	84 e0       	ldi	r24, 0x04	; 4
    1336:	b8 2a       	or	r11, r24
    1338:	08 c0       	rjmp	.+16     	; 0x134a <vfprintf+0x25a>
    133a:	24 ff       	sbrs	r18, 4
    133c:	09 c0       	rjmp	.+18     	; 0x1350 <vfprintf+0x260>
    133e:	e6 e0       	ldi	r30, 0x06	; 6
    1340:	be 2a       	or	r11, r30
    1342:	06 c0       	rjmp	.+12     	; 0x1350 <vfprintf+0x260>
    1344:	28 e0       	ldi	r18, 0x08	; 8
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	05 c0       	rjmp	.+10     	; 0x1354 <vfprintf+0x264>
    134a:	20 e1       	ldi	r18, 0x10	; 16
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <vfprintf+0x264>
    1350:	20 e1       	ldi	r18, 0x10	; 16
    1352:	32 e0       	ldi	r19, 0x02	; 2
    1354:	f8 01       	movw	r30, r16
    1356:	b7 fe       	sbrs	r11, 7
    1358:	07 c0       	rjmp	.+14     	; 0x1368 <vfprintf+0x278>
    135a:	60 81       	ld	r22, Z
    135c:	71 81       	ldd	r23, Z+1	; 0x01
    135e:	82 81       	ldd	r24, Z+2	; 0x02
    1360:	93 81       	ldd	r25, Z+3	; 0x03
    1362:	0c 5f       	subi	r16, 0xFC	; 252
    1364:	1f 4f       	sbci	r17, 0xFF	; 255
    1366:	06 c0       	rjmp	.+12     	; 0x1374 <vfprintf+0x284>
    1368:	60 81       	ld	r22, Z
    136a:	71 81       	ldd	r23, Z+1	; 0x01
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 5f       	subi	r16, 0xFE	; 254
    1372:	1f 4f       	sbci	r17, 0xFF	; 255
    1374:	a4 01       	movw	r20, r8
    1376:	cb d0       	rcall	.+406    	; 0x150e <__ultoa_invert>
    1378:	a8 2e       	mov	r10, r24
    137a:	a8 18       	sub	r10, r8
    137c:	ff e7       	ldi	r31, 0x7F	; 127
    137e:	bf 22       	and	r11, r31
    1380:	b6 fe       	sbrs	r11, 6
    1382:	0b c0       	rjmp	.+22     	; 0x139a <vfprintf+0x2aa>
    1384:	2b 2d       	mov	r18, r11
    1386:	2e 7f       	andi	r18, 0xFE	; 254
    1388:	a5 14       	cp	r10, r5
    138a:	50 f4       	brcc	.+20     	; 0x13a0 <vfprintf+0x2b0>
    138c:	b4 fe       	sbrs	r11, 4
    138e:	0a c0       	rjmp	.+20     	; 0x13a4 <vfprintf+0x2b4>
    1390:	b2 fc       	sbrc	r11, 2
    1392:	08 c0       	rjmp	.+16     	; 0x13a4 <vfprintf+0x2b4>
    1394:	2b 2d       	mov	r18, r11
    1396:	2e 7e       	andi	r18, 0xEE	; 238
    1398:	05 c0       	rjmp	.+10     	; 0x13a4 <vfprintf+0x2b4>
    139a:	7a 2c       	mov	r7, r10
    139c:	2b 2d       	mov	r18, r11
    139e:	03 c0       	rjmp	.+6      	; 0x13a6 <vfprintf+0x2b6>
    13a0:	7a 2c       	mov	r7, r10
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <vfprintf+0x2b6>
    13a4:	75 2c       	mov	r7, r5
    13a6:	24 ff       	sbrs	r18, 4
    13a8:	0d c0       	rjmp	.+26     	; 0x13c4 <vfprintf+0x2d4>
    13aa:	fe 01       	movw	r30, r28
    13ac:	ea 0d       	add	r30, r10
    13ae:	f1 1d       	adc	r31, r1
    13b0:	80 81       	ld	r24, Z
    13b2:	80 33       	cpi	r24, 0x30	; 48
    13b4:	11 f4       	brne	.+4      	; 0x13ba <vfprintf+0x2ca>
    13b6:	29 7e       	andi	r18, 0xE9	; 233
    13b8:	09 c0       	rjmp	.+18     	; 0x13cc <vfprintf+0x2dc>
    13ba:	22 ff       	sbrs	r18, 2
    13bc:	06 c0       	rjmp	.+12     	; 0x13ca <vfprintf+0x2da>
    13be:	73 94       	inc	r7
    13c0:	73 94       	inc	r7
    13c2:	04 c0       	rjmp	.+8      	; 0x13cc <vfprintf+0x2dc>
    13c4:	82 2f       	mov	r24, r18
    13c6:	86 78       	andi	r24, 0x86	; 134
    13c8:	09 f0       	breq	.+2      	; 0x13cc <vfprintf+0x2dc>
    13ca:	73 94       	inc	r7
    13cc:	23 fd       	sbrc	r18, 3
    13ce:	13 c0       	rjmp	.+38     	; 0x13f6 <vfprintf+0x306>
    13d0:	20 ff       	sbrs	r18, 0
    13d2:	0e c0       	rjmp	.+28     	; 0x13f0 <vfprintf+0x300>
    13d4:	5a 2c       	mov	r5, r10
    13d6:	73 14       	cp	r7, r3
    13d8:	58 f4       	brcc	.+22     	; 0x13f0 <vfprintf+0x300>
    13da:	53 0c       	add	r5, r3
    13dc:	57 18       	sub	r5, r7
    13de:	73 2c       	mov	r7, r3
    13e0:	07 c0       	rjmp	.+14     	; 0x13f0 <vfprintf+0x300>
    13e2:	b7 01       	movw	r22, r14
    13e4:	80 e2       	ldi	r24, 0x20	; 32
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	2c 87       	std	Y+12, r18	; 0x0c
    13ea:	65 d0       	rcall	.+202    	; 0x14b6 <fputc>
    13ec:	73 94       	inc	r7
    13ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    13f0:	73 14       	cp	r7, r3
    13f2:	b8 f3       	brcs	.-18     	; 0x13e2 <vfprintf+0x2f2>
    13f4:	04 c0       	rjmp	.+8      	; 0x13fe <vfprintf+0x30e>
    13f6:	73 14       	cp	r7, r3
    13f8:	10 f4       	brcc	.+4      	; 0x13fe <vfprintf+0x30e>
    13fa:	37 18       	sub	r3, r7
    13fc:	01 c0       	rjmp	.+2      	; 0x1400 <vfprintf+0x310>
    13fe:	31 2c       	mov	r3, r1
    1400:	24 ff       	sbrs	r18, 4
    1402:	11 c0       	rjmp	.+34     	; 0x1426 <vfprintf+0x336>
    1404:	b7 01       	movw	r22, r14
    1406:	80 e3       	ldi	r24, 0x30	; 48
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	2c 87       	std	Y+12, r18	; 0x0c
    140c:	54 d0       	rcall	.+168    	; 0x14b6 <fputc>
    140e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1410:	22 ff       	sbrs	r18, 2
    1412:	1c c0       	rjmp	.+56     	; 0x144c <vfprintf+0x35c>
    1414:	21 ff       	sbrs	r18, 1
    1416:	03 c0       	rjmp	.+6      	; 0x141e <vfprintf+0x32e>
    1418:	88 e5       	ldi	r24, 0x58	; 88
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <vfprintf+0x332>
    141e:	88 e7       	ldi	r24, 0x78	; 120
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	b7 01       	movw	r22, r14
    1424:	0c c0       	rjmp	.+24     	; 0x143e <vfprintf+0x34e>
    1426:	82 2f       	mov	r24, r18
    1428:	86 78       	andi	r24, 0x86	; 134
    142a:	81 f0       	breq	.+32     	; 0x144c <vfprintf+0x35c>
    142c:	21 fd       	sbrc	r18, 1
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <vfprintf+0x344>
    1430:	80 e2       	ldi	r24, 0x20	; 32
    1432:	01 c0       	rjmp	.+2      	; 0x1436 <vfprintf+0x346>
    1434:	8b e2       	ldi	r24, 0x2B	; 43
    1436:	27 fd       	sbrc	r18, 7
    1438:	8d e2       	ldi	r24, 0x2D	; 45
    143a:	b7 01       	movw	r22, r14
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	3b d0       	rcall	.+118    	; 0x14b6 <fputc>
    1440:	05 c0       	rjmp	.+10     	; 0x144c <vfprintf+0x35c>
    1442:	b7 01       	movw	r22, r14
    1444:	80 e3       	ldi	r24, 0x30	; 48
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	36 d0       	rcall	.+108    	; 0x14b6 <fputc>
    144a:	5a 94       	dec	r5
    144c:	a5 14       	cp	r10, r5
    144e:	c8 f3       	brcs	.-14     	; 0x1442 <vfprintf+0x352>
    1450:	aa 94       	dec	r10
    1452:	f4 01       	movw	r30, r8
    1454:	ea 0d       	add	r30, r10
    1456:	f1 1d       	adc	r31, r1
    1458:	b7 01       	movw	r22, r14
    145a:	80 81       	ld	r24, Z
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	2b d0       	rcall	.+86     	; 0x14b6 <fputc>
    1460:	a1 10       	cpse	r10, r1
    1462:	f6 cf       	rjmp	.-20     	; 0x1450 <vfprintf+0x360>
    1464:	05 c0       	rjmp	.+10     	; 0x1470 <vfprintf+0x380>
    1466:	b7 01       	movw	r22, r14
    1468:	80 e2       	ldi	r24, 0x20	; 32
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	24 d0       	rcall	.+72     	; 0x14b6 <fputc>
    146e:	3a 94       	dec	r3
    1470:	31 10       	cpse	r3, r1
    1472:	f9 cf       	rjmp	.-14     	; 0x1466 <vfprintf+0x376>
    1474:	50 ce       	rjmp	.-864    	; 0x1116 <vfprintf+0x26>
    1476:	f7 01       	movw	r30, r14
    1478:	26 81       	ldd	r18, Z+6	; 0x06
    147a:	37 81       	ldd	r19, Z+7	; 0x07
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <vfprintf+0x392>
    147e:	2f ef       	ldi	r18, 0xFF	; 255
    1480:	3f ef       	ldi	r19, 0xFF	; 255
    1482:	c9 01       	movw	r24, r18
    1484:	2c 96       	adiw	r28, 0x0c	; 12
    1486:	e2 e1       	ldi	r30, 0x12	; 18
    1488:	bc c0       	rjmp	.+376    	; 0x1602 <__epilogue_restores__>

0000148a <strnlen_P>:
    148a:	fc 01       	movw	r30, r24
    148c:	05 90       	lpm	r0, Z+
    148e:	61 50       	subi	r22, 0x01	; 1
    1490:	70 40       	sbci	r23, 0x00	; 0
    1492:	01 10       	cpse	r0, r1
    1494:	d8 f7       	brcc	.-10     	; 0x148c <strnlen_P+0x2>
    1496:	80 95       	com	r24
    1498:	90 95       	com	r25
    149a:	8e 0f       	add	r24, r30
    149c:	9f 1f       	adc	r25, r31
    149e:	08 95       	ret

000014a0 <strnlen>:
    14a0:	fc 01       	movw	r30, r24
    14a2:	61 50       	subi	r22, 0x01	; 1
    14a4:	70 40       	sbci	r23, 0x00	; 0
    14a6:	01 90       	ld	r0, Z+
    14a8:	01 10       	cpse	r0, r1
    14aa:	d8 f7       	brcc	.-10     	; 0x14a2 <strnlen+0x2>
    14ac:	80 95       	com	r24
    14ae:	90 95       	com	r25
    14b0:	8e 0f       	add	r24, r30
    14b2:	9f 1f       	adc	r25, r31
    14b4:	08 95       	ret

000014b6 <fputc>:
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	8c 01       	movw	r16, r24
    14c0:	eb 01       	movw	r28, r22
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	81 fd       	sbrc	r24, 1
    14c6:	03 c0       	rjmp	.+6      	; 0x14ce <fputc+0x18>
    14c8:	0f ef       	ldi	r16, 0xFF	; 255
    14ca:	1f ef       	ldi	r17, 0xFF	; 255
    14cc:	1a c0       	rjmp	.+52     	; 0x1502 <fputc+0x4c>
    14ce:	82 ff       	sbrs	r24, 2
    14d0:	0d c0       	rjmp	.+26     	; 0x14ec <fputc+0x36>
    14d2:	2e 81       	ldd	r18, Y+6	; 0x06
    14d4:	3f 81       	ldd	r19, Y+7	; 0x07
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	9d 81       	ldd	r25, Y+5	; 0x05
    14da:	28 17       	cp	r18, r24
    14dc:	39 07       	cpc	r19, r25
    14de:	64 f4       	brge	.+24     	; 0x14f8 <fputc+0x42>
    14e0:	e8 81       	ld	r30, Y
    14e2:	f9 81       	ldd	r31, Y+1	; 0x01
    14e4:	01 93       	st	Z+, r16
    14e6:	f9 83       	std	Y+1, r31	; 0x01
    14e8:	e8 83       	st	Y, r30
    14ea:	06 c0       	rjmp	.+12     	; 0x14f8 <fputc+0x42>
    14ec:	e8 85       	ldd	r30, Y+8	; 0x08
    14ee:	f9 85       	ldd	r31, Y+9	; 0x09
    14f0:	80 2f       	mov	r24, r16
    14f2:	09 95       	icall
    14f4:	89 2b       	or	r24, r25
    14f6:	41 f7       	brne	.-48     	; 0x14c8 <fputc+0x12>
    14f8:	8e 81       	ldd	r24, Y+6	; 0x06
    14fa:	9f 81       	ldd	r25, Y+7	; 0x07
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	9f 83       	std	Y+7, r25	; 0x07
    1500:	8e 83       	std	Y+6, r24	; 0x06
    1502:	c8 01       	movw	r24, r16
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	08 95       	ret

0000150e <__ultoa_invert>:
    150e:	fa 01       	movw	r30, r20
    1510:	aa 27       	eor	r26, r26
    1512:	28 30       	cpi	r18, 0x08	; 8
    1514:	51 f1       	breq	.+84     	; 0x156a <__ultoa_invert+0x5c>
    1516:	20 31       	cpi	r18, 0x10	; 16
    1518:	81 f1       	breq	.+96     	; 0x157a <__ultoa_invert+0x6c>
    151a:	e8 94       	clt
    151c:	6f 93       	push	r22
    151e:	6e 7f       	andi	r22, 0xFE	; 254
    1520:	6e 5f       	subi	r22, 0xFE	; 254
    1522:	7f 4f       	sbci	r23, 0xFF	; 255
    1524:	8f 4f       	sbci	r24, 0xFF	; 255
    1526:	9f 4f       	sbci	r25, 0xFF	; 255
    1528:	af 4f       	sbci	r26, 0xFF	; 255
    152a:	b1 e0       	ldi	r27, 0x01	; 1
    152c:	3e d0       	rcall	.+124    	; 0x15aa <__ultoa_invert+0x9c>
    152e:	b4 e0       	ldi	r27, 0x04	; 4
    1530:	3c d0       	rcall	.+120    	; 0x15aa <__ultoa_invert+0x9c>
    1532:	67 0f       	add	r22, r23
    1534:	78 1f       	adc	r23, r24
    1536:	89 1f       	adc	r24, r25
    1538:	9a 1f       	adc	r25, r26
    153a:	a1 1d       	adc	r26, r1
    153c:	68 0f       	add	r22, r24
    153e:	79 1f       	adc	r23, r25
    1540:	8a 1f       	adc	r24, r26
    1542:	91 1d       	adc	r25, r1
    1544:	a1 1d       	adc	r26, r1
    1546:	6a 0f       	add	r22, r26
    1548:	71 1d       	adc	r23, r1
    154a:	81 1d       	adc	r24, r1
    154c:	91 1d       	adc	r25, r1
    154e:	a1 1d       	adc	r26, r1
    1550:	20 d0       	rcall	.+64     	; 0x1592 <__ultoa_invert+0x84>
    1552:	09 f4       	brne	.+2      	; 0x1556 <__ultoa_invert+0x48>
    1554:	68 94       	set
    1556:	3f 91       	pop	r19
    1558:	2a e0       	ldi	r18, 0x0A	; 10
    155a:	26 9f       	mul	r18, r22
    155c:	11 24       	eor	r1, r1
    155e:	30 19       	sub	r19, r0
    1560:	30 5d       	subi	r19, 0xD0	; 208
    1562:	31 93       	st	Z+, r19
    1564:	de f6       	brtc	.-74     	; 0x151c <__ultoa_invert+0xe>
    1566:	cf 01       	movw	r24, r30
    1568:	08 95       	ret
    156a:	46 2f       	mov	r20, r22
    156c:	47 70       	andi	r20, 0x07	; 7
    156e:	40 5d       	subi	r20, 0xD0	; 208
    1570:	41 93       	st	Z+, r20
    1572:	b3 e0       	ldi	r27, 0x03	; 3
    1574:	0f d0       	rcall	.+30     	; 0x1594 <__ultoa_invert+0x86>
    1576:	c9 f7       	brne	.-14     	; 0x156a <__ultoa_invert+0x5c>
    1578:	f6 cf       	rjmp	.-20     	; 0x1566 <__ultoa_invert+0x58>
    157a:	46 2f       	mov	r20, r22
    157c:	4f 70       	andi	r20, 0x0F	; 15
    157e:	40 5d       	subi	r20, 0xD0	; 208
    1580:	4a 33       	cpi	r20, 0x3A	; 58
    1582:	18 f0       	brcs	.+6      	; 0x158a <__ultoa_invert+0x7c>
    1584:	49 5d       	subi	r20, 0xD9	; 217
    1586:	31 fd       	sbrc	r19, 1
    1588:	40 52       	subi	r20, 0x20	; 32
    158a:	41 93       	st	Z+, r20
    158c:	02 d0       	rcall	.+4      	; 0x1592 <__ultoa_invert+0x84>
    158e:	a9 f7       	brne	.-22     	; 0x157a <__ultoa_invert+0x6c>
    1590:	ea cf       	rjmp	.-44     	; 0x1566 <__ultoa_invert+0x58>
    1592:	b4 e0       	ldi	r27, 0x04	; 4
    1594:	a6 95       	lsr	r26
    1596:	97 95       	ror	r25
    1598:	87 95       	ror	r24
    159a:	77 95       	ror	r23
    159c:	67 95       	ror	r22
    159e:	ba 95       	dec	r27
    15a0:	c9 f7       	brne	.-14     	; 0x1594 <__ultoa_invert+0x86>
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	61 05       	cpc	r22, r1
    15a6:	71 05       	cpc	r23, r1
    15a8:	08 95       	ret
    15aa:	9b 01       	movw	r18, r22
    15ac:	ac 01       	movw	r20, r24
    15ae:	0a 2e       	mov	r0, r26
    15b0:	06 94       	lsr	r0
    15b2:	57 95       	ror	r21
    15b4:	47 95       	ror	r20
    15b6:	37 95       	ror	r19
    15b8:	27 95       	ror	r18
    15ba:	ba 95       	dec	r27
    15bc:	c9 f7       	brne	.-14     	; 0x15b0 <__ultoa_invert+0xa2>
    15be:	62 0f       	add	r22, r18
    15c0:	73 1f       	adc	r23, r19
    15c2:	84 1f       	adc	r24, r20
    15c4:	95 1f       	adc	r25, r21
    15c6:	a0 1d       	adc	r26, r0
    15c8:	08 95       	ret

000015ca <__prologue_saves__>:
    15ca:	2f 92       	push	r2
    15cc:	3f 92       	push	r3
    15ce:	4f 92       	push	r4
    15d0:	5f 92       	push	r5
    15d2:	6f 92       	push	r6
    15d4:	7f 92       	push	r7
    15d6:	8f 92       	push	r8
    15d8:	9f 92       	push	r9
    15da:	af 92       	push	r10
    15dc:	bf 92       	push	r11
    15de:	cf 92       	push	r12
    15e0:	df 92       	push	r13
    15e2:	ef 92       	push	r14
    15e4:	ff 92       	push	r15
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	cf 93       	push	r28
    15ec:	df 93       	push	r29
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	ca 1b       	sub	r28, r26
    15f4:	db 0b       	sbc	r29, r27
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	09 94       	ijmp

00001602 <__epilogue_restores__>:
    1602:	2a 88       	ldd	r2, Y+18	; 0x12
    1604:	39 88       	ldd	r3, Y+17	; 0x11
    1606:	48 88       	ldd	r4, Y+16	; 0x10
    1608:	5f 84       	ldd	r5, Y+15	; 0x0f
    160a:	6e 84       	ldd	r6, Y+14	; 0x0e
    160c:	7d 84       	ldd	r7, Y+13	; 0x0d
    160e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1610:	9b 84       	ldd	r9, Y+11	; 0x0b
    1612:	aa 84       	ldd	r10, Y+10	; 0x0a
    1614:	b9 84       	ldd	r11, Y+9	; 0x09
    1616:	c8 84       	ldd	r12, Y+8	; 0x08
    1618:	df 80       	ldd	r13, Y+7	; 0x07
    161a:	ee 80       	ldd	r14, Y+6	; 0x06
    161c:	fd 80       	ldd	r15, Y+5	; 0x05
    161e:	0c 81       	ldd	r16, Y+4	; 0x04
    1620:	1b 81       	ldd	r17, Y+3	; 0x03
    1622:	aa 81       	ldd	r26, Y+2	; 0x02
    1624:	b9 81       	ldd	r27, Y+1	; 0x01
    1626:	ce 0f       	add	r28, r30
    1628:	d1 1d       	adc	r29, r1
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	ed 01       	movw	r28, r26
    1636:	08 95       	ret

00001638 <_exit>:
    1638:	f8 94       	cli

0000163a <__stop_program>:
    163a:	ff cf       	rjmp	.-2      	; 0x163a <__stop_program>
