
Servo-Motor-Speed-Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000ec0  00000f54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ec0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010a  0080010a  00000f5e  2**0
                  ALLOC
  3 .stab         00000d50  00000000  00000000  00000f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000273  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001f23  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001a8  00000000  00000000  00001f52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b7e  00000000  00000000  000020fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c0e  00000000  00000000  00003c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001041  00000000  00000000  00004886  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000454  00000000  00000000  000058c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000061d  00000000  00000000  00005d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001205  00000000  00000000  00006339  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000108  00000000  00000000  0000753e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	23 c0       	rjmp	.+70     	; 0x48 <__ctors_end>
   2:	3d c0       	rjmp	.+122    	; 0x7e <__bad_interrupt>
   4:	3c c0       	rjmp	.+120    	; 0x7e <__bad_interrupt>
   6:	3b c0       	rjmp	.+118    	; 0x7e <__bad_interrupt>
   8:	5e c1       	rjmp	.+700    	; 0x2c6 <__vector_4>
   a:	39 c0       	rjmp	.+114    	; 0x7e <__bad_interrupt>
   c:	38 c0       	rjmp	.+112    	; 0x7e <__bad_interrupt>
   e:	37 c0       	rjmp	.+110    	; 0x7e <__bad_interrupt>
  10:	36 c0       	rjmp	.+108    	; 0x7e <__bad_interrupt>
  12:	35 c0       	rjmp	.+106    	; 0x7e <__bad_interrupt>
  14:	34 c0       	rjmp	.+104    	; 0x7e <__bad_interrupt>
  16:	33 c0       	rjmp	.+102    	; 0x7e <__bad_interrupt>
  18:	32 c0       	rjmp	.+100    	; 0x7e <__bad_interrupt>
  1a:	31 c0       	rjmp	.+98     	; 0x7e <__bad_interrupt>
  1c:	30 c0       	rjmp	.+96     	; 0x7e <__bad_interrupt>
  1e:	2f c0       	rjmp	.+94     	; 0x7e <__bad_interrupt>
  20:	2e c0       	rjmp	.+92     	; 0x7e <__bad_interrupt>
  22:	2d c0       	rjmp	.+90     	; 0x7e <__bad_interrupt>
  24:	c1 c1       	rjmp	.+898    	; 0x3a8 <__vector_18>
  26:	2b c0       	rjmp	.+86     	; 0x7e <__bad_interrupt>
  28:	2a c0       	rjmp	.+84     	; 0x7e <__bad_interrupt>
  2a:	29 c0       	rjmp	.+82     	; 0x7e <__bad_interrupt>
  2c:	28 c0       	rjmp	.+80     	; 0x7e <__bad_interrupt>
  2e:	27 c0       	rjmp	.+78     	; 0x7e <__bad_interrupt>
  30:	26 c0       	rjmp	.+76     	; 0x7e <__bad_interrupt>
  32:	25 c0       	rjmp	.+74     	; 0x7e <__bad_interrupt>
  34:	39 c2       	rjmp	.+1138   	; 0x4a8 <main+0x4e>
  36:	3c c2       	rjmp	.+1144   	; 0x4b0 <main+0x56>
  38:	3f c2       	rjmp	.+1150   	; 0x4b8 <main+0x5e>
  3a:	42 c2       	rjmp	.+1156   	; 0x4c0 <main+0x66>
  3c:	45 c2       	rjmp	.+1162   	; 0x4c8 <main+0x6e>
  3e:	48 c2       	rjmp	.+1168   	; 0x4d0 <main+0x76>
  40:	4b c2       	rjmp	.+1174   	; 0x4d8 <main+0x7e>
  42:	4e c2       	rjmp	.+1180   	; 0x4e0 <main+0x86>
  44:	51 c2       	rjmp	.+1186   	; 0x4e8 <main+0x8e>
  46:	54 c2       	rjmp	.+1192   	; 0x4f0 <main+0x96>

00000048 <__ctors_end>:
  48:	11 24       	eor	r1, r1
  4a:	1f be       	out	0x3f, r1	; 63
  4c:	cf ef       	ldi	r28, 0xFF	; 255
  4e:	d4 e0       	ldi	r29, 0x04	; 4
  50:	de bf       	out	0x3e, r29	; 62
  52:	cd bf       	out	0x3d, r28	; 61

00000054 <__do_copy_data>:
  54:	11 e0       	ldi	r17, 0x01	; 1
  56:	a0 e0       	ldi	r26, 0x00	; 0
  58:	b1 e0       	ldi	r27, 0x01	; 1
  5a:	e0 ec       	ldi	r30, 0xC0	; 192
  5c:	fe e0       	ldi	r31, 0x0E	; 14
  5e:	02 c0       	rjmp	.+4      	; 0x64 <__do_copy_data+0x10>
  60:	05 90       	lpm	r0, Z+
  62:	0d 92       	st	X+, r0
  64:	aa 30       	cpi	r26, 0x0A	; 10
  66:	b1 07       	cpc	r27, r17
  68:	d9 f7       	brne	.-10     	; 0x60 <__do_copy_data+0xc>

0000006a <__do_clear_bss>:
  6a:	21 e0       	ldi	r18, 0x01	; 1
  6c:	aa e0       	ldi	r26, 0x0A	; 10
  6e:	b1 e0       	ldi	r27, 0x01	; 1
  70:	01 c0       	rjmp	.+2      	; 0x74 <.do_clear_bss_start>

00000072 <.do_clear_bss_loop>:
  72:	1d 92       	st	X+, r1

00000074 <.do_clear_bss_start>:
  74:	a3 31       	cpi	r26, 0x13	; 19
  76:	b2 07       	cpc	r27, r18
  78:	e1 f7       	brne	.-8      	; 0x72 <.do_clear_bss_loop>
  7a:	ef d1       	rcall	.+990    	; 0x45a <main>
  7c:	1f c7       	rjmp	.+3646   	; 0xebc <_exit>

0000007e <__bad_interrupt>:
  7e:	c0 cf       	rjmp	.-128    	; 0x0 <__vectors>

00000080 <init_shared_data>:
	uint32_t rpm_avg;
	uint32_t rpm_measurements[MEASUREMENTS_SIZE];
	uint32_t delta_time;
} Shared_Data;

void init_shared_data(Shared_Data* shared_ptr){
  80:	fc 01       	movw	r30, r24
	shared_ptr->speed_set = 0;
  82:	11 82       	std	Z+1, r1	; 0x01
  84:	10 82       	st	Z, r1
	shared_ptr->speed_actual = 0;
  86:	13 82       	std	Z+3, r1	; 0x03
  88:	12 82       	std	Z+2, r1	; 0x02
	shared_ptr->clk_prev = 0;
  8a:	15 82       	std	Z+5, r1	; 0x05
  8c:	14 82       	std	Z+4, r1	; 0x04
	shared_ptr->clk_elapsed = 0;
  8e:	17 82       	std	Z+7, r1	; 0x07
  90:	16 82       	std	Z+6, r1	; 0x06
	shared_ptr->curr_rpm = 0;
  92:	10 86       	std	Z+8, r1	; 0x08
  94:	11 86       	std	Z+9, r1	; 0x09
  96:	12 86       	std	Z+10, r1	; 0x0a
  98:	13 86       	std	Z+11, r1	; 0x0b
	shared_ptr->rpm_avg = 0;
  9a:	14 86       	std	Z+12, r1	; 0x0c
  9c:	15 86       	std	Z+13, r1	; 0x0d
  9e:	16 86       	std	Z+14, r1	; 0x0e
  a0:	17 86       	std	Z+15, r1	; 0x0f
	shared_ptr->delta_time = 0;
  a2:	e0 5f       	subi	r30, 0xF0	; 240
  a4:	fe 4f       	sbci	r31, 0xFE	; 254
  a6:	10 82       	st	Z, r1
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	12 82       	std	Z+2, r1	; 0x02
  ac:	13 82       	std	Z+3, r1	; 0x03
  ae:	08 95       	ret

000000b0 <calc_latest_rpm>:
}

/*	Calculates the speed for a single encoder-interrupt, using fixed point arithmetics.
 *	Qm.n values defined in shared.h
*/
void calc_latest_rpm(Shared_Data* shared_ptr){
  b0:	2f 92       	push	r2
  b2:	3f 92       	push	r3
  b4:	4f 92       	push	r4
  b6:	5f 92       	push	r5
  b8:	6f 92       	push	r6
  ba:	7f 92       	push	r7
  bc:	8f 92       	push	r8
  be:	9f 92       	push	r9
  c0:	af 92       	push	r10
  c2:	bf 92       	push	r11
  c4:	cf 92       	push	r12
  c6:	df 92       	push	r13
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	ec 01       	movw	r28, r24
	// scales based on prescaling
	uint16_t prescale = 8;

	uint32_t temp;

	temp = (uint32_t)delta_clk * prescale;
  d6:	2e 80       	ldd	r2, Y+6	; 0x06
  d8:	3f 80       	ldd	r3, Y+7	; 0x07
  da:	c1 01       	movw	r24, r2
  dc:	a0 e0       	ldi	r26, 0x00	; 0
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	aa 1f       	adc	r26, r26
  e6:	bb 1f       	adc	r27, r27
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	aa 1f       	adc	r26, r26
  ee:	bb 1f       	adc	r27, r27
	uint64_t denominator;
	uint64_t rpm;
	
	shared_ptr->delta_time = calc_delta_time(shared_ptr);
	
	shared_ptr->delta_time = shared_ptr->delta_time << N;
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	aa 1f       	adc	r26, r26
  f6:	bb 1f       	adc	r27, r27
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	aa 1f       	adc	r26, r26
  fe:	bb 1f       	adc	r27, r27
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	aa 1f       	adc	r26, r26
 106:	bb 1f       	adc	r27, r27
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	aa 1f       	adc	r26, r26
 10e:	bb 1f       	adc	r27, r27
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	aa 1f       	adc	r26, r26
 116:	bb 1f       	adc	r27, r27
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	aa 1f       	adc	r26, r26
 11e:	bb 1f       	adc	r27, r27
 120:	fe 01       	movw	r30, r28
 122:	e0 5f       	subi	r30, 0xF0	; 240
 124:	fe 4f       	sbci	r31, 0xFE	; 254
 126:	80 83       	st	Z, r24
 128:	91 83       	std	Z+1, r25	; 0x01
 12a:	a2 83       	std	Z+2, r26	; 0x02
 12c:	b3 83       	std	Z+3, r27	; 0x03
	S_TO_MIN = S_TO_MIN << N;

	numerator = (uint64_t)MS_TO_S * S_TO_MIN;
	numerator = numerator >> N;

	denominator = (uint64_t)delta_rev_inverse * shared_ptr->delta_time;
 12e:	1c 01       	movw	r2, r24
 130:	2d 01       	movw	r4, r26
 132:	a1 2c       	mov	r10, r1
 134:	0f 2e       	mov	r0, r31
 136:	fc e0       	ldi	r31, 0x0C	; 12
 138:	bf 2e       	mov	r11, r31
 13a:	f0 2d       	mov	r31, r0
 13c:	c1 2c       	mov	r12, r1
 13e:	d1 2c       	mov	r13, r1
 140:	e1 2c       	mov	r14, r1
 142:	f1 2c       	mov	r15, r1
 144:	00 e0       	ldi	r16, 0x00	; 0
 146:	10 e0       	ldi	r17, 0x00	; 0
 148:	28 2f       	mov	r18, r24
 14a:	33 2d       	mov	r19, r3
 14c:	44 2d       	mov	r20, r4
 14e:	55 2d       	mov	r21, r5
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	fe d2       	rcall	.+1532   	; 0x756 <__muldi3>
	denominator = denominator >> N;
 15a:	05 e0       	ldi	r16, 0x05	; 5
 15c:	8c d3       	rcall	.+1816   	; 0x876 <__lshrdi3>
 15e:	a2 2e       	mov	r10, r18
 160:	b3 2e       	mov	r11, r19
 162:	c4 2e       	mov	r12, r20
 164:	d5 2e       	mov	r13, r21
 166:	e6 2e       	mov	r14, r22
 168:	f7 2e       	mov	r15, r23
 16a:	e8 2f       	mov	r30, r24
 16c:	19 2f       	mov	r17, r25

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1); // For correct rounding
 16e:	01 e0       	ldi	r16, 0x01	; 1
 170:	82 d3       	rcall	.+1796   	; 0x876 <__lshrdi3>
 172:	44 5e       	subi	r20, 0xE4	; 228
 174:	51 4b       	sbci	r21, 0xB1	; 177
 176:	61 4f       	sbci	r22, 0xF1	; 241
 178:	7f 4f       	sbci	r23, 0xFF	; 255
 17a:	8f 4f       	sbci	r24, 0xFF	; 255
 17c:	9f 4f       	sbci	r25, 0xFF	; 255
	rpm = rpm / denominator;
 17e:	0e 2f       	mov	r16, r30
 180:	df d2       	rcall	.+1470   	; 0x740 <__udivdi3>
	
	shared_ptr->curr_rpm = (uint32_t)rpm >> N;
 182:	82 2f       	mov	r24, r18
 184:	93 2f       	mov	r25, r19
 186:	a4 2f       	mov	r26, r20
 188:	b5 2f       	mov	r27, r21
 18a:	72 2f       	mov	r23, r18
 18c:	63 2f       	mov	r22, r19
 18e:	54 2f       	mov	r21, r20
 190:	4b 2f       	mov	r20, r27
 192:	68 94       	set
 194:	14 f8       	bld	r1, 4
 196:	b6 95       	lsr	r27
 198:	a7 95       	ror	r26
 19a:	97 95       	ror	r25
 19c:	87 95       	ror	r24
 19e:	16 94       	lsr	r1
 1a0:	d1 f7       	brne	.-12     	; 0x196 <calc_latest_rpm+0xe6>
 1a2:	88 87       	std	Y+8, r24	; 0x08
 1a4:	99 87       	std	Y+9, r25	; 0x09
 1a6:	aa 87       	std	Y+10, r26	; 0x0a
 1a8:	bb 87       	std	Y+11, r27	; 0x0b
}

/*	Calculates the speed for a single encoder-interrupt, using fixed point arithmetics.
 *	Qm.n values defined in shared.h
*/
void calc_latest_rpm(Shared_Data* shared_ptr){
 1aa:	fe 01       	movw	r30, r28
 1ac:	e4 5f       	subi	r30, 0xF4	; 244
 1ae:	fe 4f       	sbci	r31, 0xFE	; 254

    if(temp < 0 || temp > 130){
        return;
    }
*/
    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
 1b0:	2f e3       	ldi	r18, 0x3F	; 63
 1b2:	30 e0       	ldi	r19, 0x00	; 0
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	31 09       	sbc	r19, r1
 1b8:	b2 91       	ld	r27, -Z
 1ba:	a2 91       	ld	r26, -Z
 1bc:	92 91       	ld	r25, -Z
 1be:	82 91       	ld	r24, -Z
 1c0:	84 83       	std	Z+4, r24	; 0x04
 1c2:	95 83       	std	Z+5, r25	; 0x05
 1c4:	a6 83       	std	Z+6, r26	; 0x06
 1c6:	b7 83       	std	Z+7, r27	; 0x07

    if(temp < 0 || temp > 130){
        return;
    }
*/
    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
 1c8:	2f 3f       	cpi	r18, 0xFF	; 255
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	38 07       	cpc	r19, r24
 1ce:	91 f7       	brne	.-28     	; 0x1b4 <calc_latest_rpm+0x104>
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
    }
    shared_ptr->rpm_measurements[0] = rpm;
 1d0:	78 8b       	std	Y+16, r23	; 0x10
 1d2:	69 8b       	std	Y+17, r22	; 0x11
 1d4:	5a 8b       	std	Y+18, r21	; 0x12
 1d6:	4b 8b       	std	Y+19, r20	; 0x13
	
	shared_ptr->curr_rpm = (uint32_t)rpm >> N;
	insert_rpm(shared_ptr, rpm);
	
	
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	1f 91       	pop	r17
 1de:	0f 91       	pop	r16
 1e0:	ff 90       	pop	r15
 1e2:	ef 90       	pop	r14
 1e4:	df 90       	pop	r13
 1e6:	cf 90       	pop	r12
 1e8:	bf 90       	pop	r11
 1ea:	af 90       	pop	r10
 1ec:	9f 90       	pop	r9
 1ee:	8f 90       	pop	r8
 1f0:	7f 90       	pop	r7
 1f2:	6f 90       	pop	r6
 1f4:	5f 90       	pop	r5
 1f6:	4f 90       	pop	r4
 1f8:	3f 90       	pop	r3
 1fa:	2f 90       	pop	r2
 1fc:	08 95       	ret

000001fe <calc_avg_rpm>:


void calc_avg_rpm(Shared_Data* shared_ptr){
 1fe:	2f 92       	push	r2
 200:	3f 92       	push	r3
 202:	4f 92       	push	r4
 204:	5f 92       	push	r5
 206:	6f 92       	push	r6
 208:	7f 92       	push	r7
 20a:	8f 92       	push	r8
 20c:	9f 92       	push	r9
 20e:	af 92       	push	r10
 210:	bf 92       	push	r11
 212:	cf 92       	push	r12
 214:	df 92       	push	r13
 216:	ef 92       	push	r14
 218:	ff 92       	push	r15
 21a:	0f 93       	push	r16
 21c:	1f 93       	push	r17
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	ec 01       	movw	r28, r24
 224:	dc 01       	movw	r26, r24
 226:	50 96       	adiw	r26, 0x10	; 16
 228:	e0 e4       	ldi	r30, 0x40	; 64
 22a:	f0 e0       	ldi	r31, 0x00	; 0
	uint64_t temp = 0;
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
	int i;
	
	for(i = 0; i < MEASUREMENTS_SIZE; i++){
		temp = temp + shared_ptr->rpm_measurements[i];
 23c:	cd 90       	ld	r12, X+
 23e:	dd 90       	ld	r13, X+
 240:	ed 90       	ld	r14, X+
 242:	fd 90       	ld	r15, X+
 244:	16 01       	movw	r2, r12
 246:	27 01       	movw	r4, r14
 248:	ac 2c       	mov	r10, r12
 24a:	b3 2c       	mov	r11, r3
 24c:	c4 2c       	mov	r12, r4
 24e:	d5 2c       	mov	r13, r5
 250:	e1 2c       	mov	r14, r1
 252:	f1 2c       	mov	r15, r1
 254:	00 e0       	ldi	r16, 0x00	; 0
 256:	10 e0       	ldi	r17, 0x00	; 0
 258:	1d d3       	rcall	.+1594   	; 0x894 <__adddi3>
 25a:	31 97       	sbiw	r30, 0x01	; 1

void calc_avg_rpm(Shared_Data* shared_ptr){
	uint64_t temp = 0;
	int i;
	
	for(i = 0; i < MEASUREMENTS_SIZE; i++){
 25c:	79 f7       	brne	.-34     	; 0x23c <calc_avg_rpm+0x3e>
		temp = temp + shared_ptr->rpm_measurements[i];
	}
	
	// Divide by MEASUREMENTS_SIZE (64)
	temp = temp >> 6;
 25e:	06 e0       	ldi	r16, 0x06	; 6
 260:	0a d3       	rcall	.+1556   	; 0x876 <__lshrdi3>
	
	// convert back from Qm.n to normal int
	temp = temp >> N;
 262:	05 e0       	ldi	r16, 0x05	; 5
 264:	08 d3       	rcall	.+1552   	; 0x876 <__lshrdi3>
	shared_ptr->rpm_avg = temp;
 266:	2c 87       	std	Y+12, r18	; 0x0c
 268:	3d 87       	std	Y+13, r19	; 0x0d
 26a:	4e 87       	std	Y+14, r20	; 0x0e
 26c:	5f 87       	std	Y+15, r21	; 0x0f
	
}
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	ff 90       	pop	r15
 278:	ef 90       	pop	r14
 27a:	df 90       	pop	r13
 27c:	cf 90       	pop	r12
 27e:	bf 90       	pop	r11
 280:	af 90       	pop	r10
 282:	9f 90       	pop	r9
 284:	8f 90       	pop	r8
 286:	7f 90       	pop	r7
 288:	6f 90       	pop	r6
 28a:	5f 90       	pop	r5
 28c:	4f 90       	pop	r4
 28e:	3f 90       	pop	r3
 290:	2f 90       	pop	r2
 292:	08 95       	ret

00000294 <calc_time_elapsed>:

void calc_time_elapsed(Shared_Data* shared_ptr){
 294:	fc 01       	movw	r30, r24
	
	if(clk_curr < shared_ptr->clk_prev){
 296:	24 81       	ldd	r18, Z+4	; 0x04
 298:	35 81       	ldd	r19, Z+5	; 0x05
 29a:	80 91 10 01 	lds	r24, 0x0110
 29e:	90 91 11 01 	lds	r25, 0x0111
 2a2:	82 17       	cp	r24, r18
 2a4:	93 07       	cpc	r25, r19
 2a6:	38 f4       	brcc	.+14     	; 0x2b6 <calc_time_elapsed+0x22>
		uint16_t temp = 0xFFFF;
		temp = temp - shared_ptr->clk_prev;
 2a8:	20 95       	com	r18
 2aa:	30 95       	com	r19
		temp = temp + clk_curr;
 2ac:	28 0f       	add	r18, r24
 2ae:	39 1f       	adc	r19, r25
		shared_ptr->clk_elapsed = temp;
 2b0:	37 83       	std	Z+7, r19	; 0x07
 2b2:	26 83       	std	Z+6, r18	; 0x06
 2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <calc_time_elapsed+0x2c>
	}
	else{
		shared_ptr->clk_elapsed = clk_curr - shared_ptr->clk_prev;
 2b6:	ac 01       	movw	r20, r24
 2b8:	42 1b       	sub	r20, r18
 2ba:	53 0b       	sbc	r21, r19
 2bc:	57 83       	std	Z+7, r21	; 0x07
 2be:	46 83       	std	Z+6, r20	; 0x06
		
	}
	shared_ptr->clk_prev = clk_curr;
 2c0:	95 83       	std	Z+5, r25	; 0x05
 2c2:	84 83       	std	Z+4, r24	; 0x04
 2c4:	08 95       	ret

000002c6 <__vector_4>:
}

/* ISR for PCINT14-8 */
ISR(PCINT1_vect){
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
	cli();
 2d4:	f8 94       	cli
	
	clk_curr = TCNT1;
 2d6:	80 91 84 00 	lds	r24, 0x0084
 2da:	90 91 85 00 	lds	r25, 0x0085
 2de:	90 93 11 01 	sts	0x0111, r25
 2e2:	80 93 10 01 	sts	0x0110, r24
	newMeasurement = true;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	80 93 12 01 	sts	0x0112, r24
	
	sei();
 2ec:	78 94       	sei
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <USART_transmit>:
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with " "
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	00 d0       	rcall	.+0      	; 0x306 <USART_transmit+0xa>
 306:	00 d0       	rcall	.+0      	; 0x308 <USART_transmit+0xc>
 308:	00 d0       	rcall	.+0      	; 0x30a <USART_transmit+0xe>
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
	int j = 0;
	char buf[6];
	int data_len = strlen(data);
 30e:	e8 2f       	mov	r30, r24
 310:	f9 2f       	mov	r31, r25
 312:	df 01       	movw	r26, r30
 314:	0d 90       	ld	r0, X+
 316:	00 20       	and	r0, r0
 318:	e9 f7       	brne	.-6      	; 0x314 <USART_transmit+0x18>
 31a:	11 97       	sbiw	r26, 0x01	; 1
 31c:	8d 01       	movw	r16, r26
 31e:	0e 1b       	sub	r16, r30
 320:	1f 0b       	sbc	r17, r31

	strncpy(buf, data, data_len);
 322:	a8 01       	movw	r20, r16
 324:	68 2f       	mov	r22, r24
 326:	79 2f       	mov	r23, r25
 328:	ce 01       	movw	r24, r28
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	c8 d2       	rcall	.+1424   	; 0x8be <strncpy>

	// Pads data with trailing " "
	while( (data_len + i) <= 5){
 32e:	06 30       	cpi	r16, 0x06	; 6
 330:	11 05       	cpc	r17, r1
 332:	24 f5       	brge	.+72     	; 0x37c <USART_transmit+0x80>
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with " "
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
 334:	c8 01       	movw	r24, r16
 336:	01 96       	adiw	r24, 0x01	; 1
	strncpy(buf, data, data_len);

	// Pads data with trailing " "
	while( (data_len + i) <= 5){
		int pos = (data_len + i);
		strcpy(buf + pos, " ");
 338:	20 e2       	ldi	r18, 0x20	; 32
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	e1 e0       	ldi	r30, 0x01	; 1
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	ec 0f       	add	r30, r28
 342:	fd 1f       	adc	r31, r29
 344:	e0 0f       	add	r30, r16
 346:	f1 1f       	adc	r31, r17
 348:	31 83       	std	Z+1, r19	; 0x01
 34a:	20 83       	st	Z, r18
	int data_len = strlen(data);

	strncpy(buf, data, data_len);

	// Pads data with trailing " "
	while( (data_len + i) <= 5){
 34c:	8c 01       	movw	r16, r24
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	87 30       	cpi	r24, 0x07	; 7
 352:	91 05       	cpc	r25, r1
 354:	99 f7       	brne	.-26     	; 0x33c <USART_transmit+0x40>
 356:	12 c0       	rjmp	.+36     	; 0x37c <USART_transmit+0x80>
		i++;
	}

	for(j = 0; j < 5; j++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
 358:	40 81       	ld	r20, Z
 35a:	45 ff       	sbrs	r20, 5
 35c:	fd cf       	rjmp	.-6      	; 0x358 <USART_transmit+0x5c>
		UDR0 = buf[j];
 35e:	db 01       	movw	r26, r22
 360:	4d 91       	ld	r20, X+
 362:	bd 01       	movw	r22, r26
 364:	dc 01       	movw	r26, r24
 366:	4c 93       	st	X, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 368:	a1 ee       	ldi	r26, 0xE1	; 225
 36a:	b4 e0       	ldi	r27, 0x04	; 4
 36c:	11 97       	sbiw	r26, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <USART_transmit+0x70>
 370:	00 c0       	rjmp	.+0      	; 0x372 <USART_transmit+0x76>
 372:	00 00       	nop
		int pos = (data_len + i);
		strcpy(buf + pos, " ");
		i++;
	}

	for(j = 0; j < 5; j++){
 374:	62 17       	cp	r22, r18
 376:	73 07       	cpc	r23, r19
 378:	79 f7       	brne	.-34     	; 0x358 <USART_transmit+0x5c>
 37a:	0b c0       	rjmp	.+22     	; 0x392 <USART_transmit+0x96>
 37c:	be 01       	movw	r22, r28
 37e:	6f 5f       	subi	r22, 0xFF	; 255
 380:	7f 4f       	sbci	r23, 0xFF	; 255
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with " "
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
 382:	9e 01       	movw	r18, r28
 384:	2a 5f       	subi	r18, 0xFA	; 250
 386:	3f 4f       	sbci	r19, 0xFF	; 255
		i++;
	}

	for(j = 0; j < 5; j++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
 388:	e0 ec       	ldi	r30, 0xC0	; 192
 38a:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = buf[j];
 38c:	86 ec       	ldi	r24, 0xC6	; 198
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	e3 cf       	rjmp	.-58     	; 0x358 <USART_transmit+0x5c>
		_delay_ms(5);
	}
}
 392:	26 96       	adiw	r28, 0x06	; 6
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	f8 94       	cli
 398:	de bf       	out	0x3e, r29	; 62
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	cd bf       	out	0x3d, r28	; 61
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	08 95       	ret

000003a8 <__vector_18>:
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
 3a8:	1f 92       	push	r1
 3aa:	0f 92       	push	r0
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	0f 92       	push	r0
 3b0:	11 24       	eor	r1, r1
 3b2:	2f 93       	push	r18
 3b4:	8f 93       	push	r24
 3b6:	9f 93       	push	r25
 3b8:	af 93       	push	r26
 3ba:	bf 93       	push	r27
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	ef 93       	push	r30
 3c2:	ff 93       	push	r31
	cli();
 3c4:	f8 94       	cli
	PORTC &= ~(1 << PC2);
 3c6:	42 98       	cbi	0x08, 2	; 8
	PORTC |= (1 << PC1);
 3c8:	41 9a       	sbi	0x08, 1	; 8
 3ca:	aa e0       	ldi	r26, 0x0A	; 10
 3cc:	b1 e0       	ldi	r27, 0x01	; 1
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
 3ce:	8f e0       	ldi	r24, 0x0F	; 15
 3d0:	91 e0       	ldi	r25, 0x01	; 1
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
 3d2:	e0 ec       	ldi	r30, 0xC0	; 192
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
		recieved_bytes[i] = UDR0;
 3d6:	c6 ec       	ldi	r28, 0xC6	; 198
 3d8:	d0 e0       	ldi	r29, 0x00	; 0
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
 3da:	20 81       	ld	r18, Z
 3dc:	22 23       	and	r18, r18
 3de:	ec f7       	brge	.-6      	; 0x3da <__vector_18+0x32>
		recieved_bytes[i] = UDR0;
 3e0:	28 81       	ld	r18, Y
 3e2:	2d 93       	st	X+, r18
*/
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
 3e4:	a8 17       	cp	r26, r24
 3e6:	b9 07       	cpc	r27, r25
 3e8:	c1 f7       	brne	.-16     	; 0x3da <__vector_18+0x32>
		while( !(UCSR0A & (1 << RXC0)) );
		recieved_bytes[i] = UDR0;
	}
	PORTC &= ~(1 << PC1);
 3ea:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (1 << PC2);
 3ec:	42 9a       	sbi	0x08, 2	; 8
	newCommand = true;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	80 93 0f 01 	sts	0x010F, r24
	sei();
 3f4:	78 94       	sei
}
 3f6:	ff 91       	pop	r31
 3f8:	ef 91       	pop	r30
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	bf 91       	pop	r27
 400:	af 91       	pop	r26
 402:	9f 91       	pop	r25
 404:	8f 91       	pop	r24
 406:	2f 91       	pop	r18
 408:	0f 90       	pop	r0
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	0f 90       	pop	r0
 40e:	1f 90       	pop	r1
 410:	18 95       	reti

00000412 <setup_registers>:
 *	PC1, PD5-PD6
 *	See details in datasheet pg. 99-100
*/
static void setup_DDR(){

	DDRB |= 0x00;
 412:	84 b1       	in	r24, 0x04	; 4
 414:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC2) | (1 << PC1) | (1 << PC0);
 416:	87 b1       	in	r24, 0x07	; 7
 418:	87 60       	ori	r24, 0x07	; 7
 41a:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PD6) | (1 << PD5) | (1 << PD1);
 41c:	8a b1       	in	r24, 0x0a	; 10
 41e:	82 66       	ori	r24, 0x62	; 98
 420:	8a b9       	out	0x0a, r24	; 10
 *	PWM-mode: fast PWM, inverted, no prescaling.
 *	See details in datasheet pg. 113-117
*/
static void setup_PWM(){

	TCCR0A = (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0) | (1 << WGM01) | (1 << WGM00);
 422:	83 ef       	ldi	r24, 0xF3	; 243
 424:	84 bd       	out	0x24, r24	; 36
	TCCR0B =  (0 << CS02) | (0 << CS01) | (1 << CS00);
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	85 bd       	out	0x25, r24	; 37
 * 	Baud rate according to #define in shared.h
 * 	See details in datasheet pg. 201-205
*/
static void setup_USART(){

	DDRD |= (1 << PD1);
 42a:	51 9a       	sbi	0x0a, 1	; 10
	unsigned int ubrr = (((F_CPU / (BAUD * 16UL))) - 1 );

	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 42c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 430:	89 e1       	ldi	r24, 0x19	; 25
 432:	80 93 c4 00 	sts	0x00C4, r24

	// Enable reciever for interrupt and transmitter
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0);
 436:	88 e9       	ldi	r24, 0x98	; 152
 438:	80 93 c1 00 	sts	0x00C1, r24

	// Set frame format: 8 data, 2 stop, 0 parity
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 43c:	86 e0       	ldi	r24, 0x06	; 6
 43e:	80 93 c2 00 	sts	0x00C2, r24
 * 	See details in datasheet pg. 81-82
*/
static void setup_interrupts(){

	// Enables possibility of interrupts on pins 14-8
	PCICR = (1 << PCIE1);
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	80 93 68 00 	sts	0x0068, r24
	// Enables interrupts on pin PC4-PC5
	PCMSK1 = (1 << PCINT13) | (1 << PCINT12);
 448:	80 e3       	ldi	r24, 0x30	; 48
 44a:	80 93 6c 00 	sts	0x006C, r24
/*	
 *	Sets up clk/8 prescaling on 16-bit timer OC1
 *	See details in datasheet pg. 141-147
*/	
static void setup_speed_clock(){
	TCCR1B |= (1 << CS11);
 44e:	e1 e8       	ldi	r30, 0x81	; 129
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	82 60       	ori	r24, 0x02	; 2
 456:	80 83       	st	Z, r24
 458:	08 95       	ret

0000045a <main>:
bool newCommand;
bool newMeasurement;
uint16_t clk_curr;
char recieved_bytes[5];

int main(void){
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	cd b7       	in	r28, 0x3d	; 61
 460:	de b7       	in	r29, 0x3e	; 62
 462:	c4 51       	subi	r28, 0x14	; 20
 464:	d1 40       	sbci	r29, 0x01	; 1
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	de bf       	out	0x3e, r29	; 62
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	cd bf       	out	0x3d, r28	; 61
	Shared_Data shared_data;
	Shared_Data* shared_ptr = &shared_data;
	init_shared_data();
 470:	07 de       	rcall	.-1010   	; 0x80 <init_shared_data>
	
	newCommand = false;
 472:	10 92 0f 01 	sts	0x010F, r1
	newMeasurement = false;
 476:	10 92 12 01 	sts	0x0112, r1
	clk_curr = 0;
 47a:	10 92 11 01 	sts	0x0111, r1
 47e:	10 92 10 01 	sts	0x0110, r1

	setup_registers();
 482:	c7 df       	rcall	.-114    	; 0x412 <setup_registers>
	sei();
 484:	78 94       	sei


	while(1){

		if(newCommand){
			switch(*recieved_bytes){
 486:	0a e0       	ldi	r16, 0x0A	; 10
 488:	11 e0       	ldi	r17, 0x01	; 1
	sei();


	while(1){

		if(newCommand){
 48a:	80 91 0f 01 	lds	r24, 0x010F
 48e:	88 23       	and	r24, r24
 490:	a1 f1       	breq	.+104    	; 0x4fa <main+0xa0>
			switch(*recieved_bytes){
 492:	f8 01       	movw	r30, r16
 494:	80 81       	ld	r24, Z
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	fc 01       	movw	r30, r24
 49a:	f0 97       	sbiw	r30, 0x30	; 48
 49c:	ea 30       	cpi	r30, 0x0A	; 10
 49e:	f1 05       	cpc	r31, r1
 4a0:	50 f5       	brcc	.+84     	; 0x4f6 <main+0x9c>
 4a2:	e6 5e       	subi	r30, 0xE6	; 230
 4a4:	ff 4f       	sbci	r31, 0xFF	; 255
 4a6:	09 94       	ijmp
				case '0':
					transmit_0(shared_ptr);
 4a8:	ce 01       	movw	r24, r28
 4aa:	01 96       	adiw	r24, 0x01	; 1
 4ac:	36 d0       	rcall	.+108    	; 0x51a <transmit_0>
					break;
 4ae:	23 c0       	rjmp	.+70     	; 0x4f6 <main+0x9c>
				case '1':
					transmit_1(shared_ptr);
 4b0:	ce 01       	movw	r24, r28
 4b2:	01 96       	adiw	r24, 0x01	; 1
 4b4:	33 d0       	rcall	.+102    	; 0x51c <transmit_1>
					break;
 4b6:	1f c0       	rjmp	.+62     	; 0x4f6 <main+0x9c>
				case '2':
					transmit_2(shared_ptr);
 4b8:	ce 01       	movw	r24, r28
 4ba:	01 96       	adiw	r24, 0x01	; 1
 4bc:	30 d0       	rcall	.+96     	; 0x51e <transmit_2>
					break;
 4be:	1b c0       	rjmp	.+54     	; 0x4f6 <main+0x9c>
				case '3':
					transmit_3(shared_ptr);
 4c0:	ce 01       	movw	r24, r28
 4c2:	01 96       	adiw	r24, 0x01	; 1
 4c4:	44 d0       	rcall	.+136    	; 0x54e <transmit_3>
					break;
 4c6:	17 c0       	rjmp	.+46     	; 0x4f6 <main+0x9c>
				case '4':
					transmit_4(shared_ptr);
 4c8:	ce 01       	movw	r24, r28
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	6b d0       	rcall	.+214    	; 0x5a4 <transmit_4>
					break;
 4ce:	13 c0       	rjmp	.+38     	; 0x4f6 <main+0x9c>
				case '5':
					transmit_5(shared_ptr);
 4d0:	ce 01       	movw	r24, r28
 4d2:	01 96       	adiw	r24, 0x01	; 1
 4d4:	8b d0       	rcall	.+278    	; 0x5ec <transmit_5>
					break;
 4d6:	0f c0       	rjmp	.+30     	; 0x4f6 <main+0x9c>
				case '6':
					transmit_6(shared_ptr);
 4d8:	ce 01       	movw	r24, r28
 4da:	01 96       	adiw	r24, 0x01	; 1
 4dc:	b4 d0       	rcall	.+360    	; 0x646 <transmit_6>
					break;
 4de:	0b c0       	rjmp	.+22     	; 0x4f6 <main+0x9c>
				case '7':
					transmit_7(shared_ptr);
 4e0:	ce 01       	movw	r24, r28
 4e2:	01 96       	adiw	r24, 0x01	; 1
 4e4:	d7 d0       	rcall	.+430    	; 0x694 <transmit_7>
					break;
 4e6:	07 c0       	rjmp	.+14     	; 0x4f6 <main+0x9c>
				case '8':
					transmit_8(shared_ptr);
 4e8:	ce 01       	movw	r24, r28
 4ea:	01 96       	adiw	r24, 0x01	; 1
 4ec:	d4 d0       	rcall	.+424    	; 0x696 <transmit_8>
					break;
 4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <main+0x9c>
				case '9':
					transmit_9(shared_ptr);
 4f0:	ce 01       	movw	r24, r28
 4f2:	01 96       	adiw	r24, 0x01	; 1
 4f4:	fc d0       	rcall	.+504    	; 0x6ee <transmit_9>
					break;
				
			}
			newCommand = false;
 4f6:	10 92 0f 01 	sts	0x010F, r1
		}
	
		if(newMeasurement){
 4fa:	80 91 12 01 	lds	r24, 0x0112
 4fe:	88 23       	and	r24, r24
 500:	21 f2       	breq	.-120    	; 0x48a <main+0x30>
			calc_time_elapsed(shared_ptr);
 502:	ce 01       	movw	r24, r28
 504:	01 96       	adiw	r24, 0x01	; 1
 506:	c6 de       	rcall	.-628    	; 0x294 <calc_time_elapsed>
			calc_latest_rpm(shared_ptr);
 508:	ce 01       	movw	r24, r28
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	d1 dd       	rcall	.-1118   	; 0xb0 <calc_latest_rpm>
			calc_avg_rpm(shared_ptr);
 50e:	ce 01       	movw	r24, r28
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	75 de       	rcall	.-790    	; 0x1fe <calc_avg_rpm>
			newMeasurement = false;
 514:	10 92 12 01 	sts	0x0112, r1
 518:	b8 cf       	rjmp	.-144    	; 0x48a <main+0x30>

0000051a <transmit_0>:
extern bool newCommand;
extern bool newMeasurement;
extern uint16_t clk_curr;
extern char recieved_bytes[5];

void transmit_0(Shared_Data* shared_ptr){
 51a:	08 95       	ret

0000051c <transmit_1>:
	
}

void transmit_1(Shared_Data* shared_ptr){
 51c:	08 95       	ret

0000051e <transmit_2>:
	USART_transmit(temp);
	//OCR0B = speed_set;
	//OCR0A = speed_set;
}
*/
void transmit_2(Shared_Data* shared_ptr){
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	00 d0       	rcall	.+0      	; 0x524 <transmit_2+0x6>
 524:	00 d0       	rcall	.+0      	; 0x526 <transmit_2+0x8>
 526:	00 d0       	rcall	.+0      	; 0x528 <transmit_2+0xa>
 528:	cd b7       	in	r28, 0x3d	; 61
 52a:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	
	shared_ptr->speed_set = 60;
 52c:	2c e3       	ldi	r18, 0x3C	; 60
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	fc 01       	movw	r30, r24
 532:	31 83       	std	Z+1, r19	; 0x01
 534:	20 83       	st	Z, r18

	USART_transmit(temp);
 536:	ce 01       	movw	r24, r28
 538:	01 96       	adiw	r24, 0x01	; 1
 53a:	e0 de       	rcall	.-576    	; 0x2fc <USART_transmit>

}
 53c:	26 96       	adiw	r28, 0x06	; 6
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	f8 94       	cli
 542:	de bf       	out	0x3e, r29	; 62
 544:	0f be       	out	0x3f, r0	; 63
 546:	cd bf       	out	0x3d, r28	; 61
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <transmit_3>:


void transmit_3(Shared_Data* shared_ptr){
 54e:	0f 93       	push	r16
 550:	1f 93       	push	r17
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	00 d0       	rcall	.+0      	; 0x558 <transmit_3+0xa>
 558:	00 d0       	rcall	.+0      	; 0x55a <transmit_3+0xc>
 55a:	00 d0       	rcall	.+0      	; 0x55c <transmit_3+0xe>
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	
	sprintf(temp, "%d",  shared_ptr->speed_set);
 560:	fc 01       	movw	r30, r24
 562:	21 81       	ldd	r18, Z+1	; 0x01
 564:	2f 93       	push	r18
 566:	80 81       	ld	r24, Z
 568:	8f 93       	push	r24
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	9f 93       	push	r25
 570:	8f 93       	push	r24
 572:	8e 01       	movw	r16, r28
 574:	0f 5f       	subi	r16, 0xFF	; 255
 576:	1f 4f       	sbci	r17, 0xFF	; 255
 578:	1f 93       	push	r17
 57a:	0f 93       	push	r16
 57c:	dc d1       	rcall	.+952    	; 0x936 <sprintf>
	USART_transmit(temp);
 57e:	c8 01       	movw	r24, r16
 580:	bd de       	rcall	.-646    	; 0x2fc <USART_transmit>
 582:	0f 90       	pop	r0
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	0f 90       	pop	r0
}
 58e:	26 96       	adiw	r28, 0x06	; 6
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	f8 94       	cli
 594:	de bf       	out	0x3e, r29	; 62
 596:	0f be       	out	0x3f, r0	; 63
 598:	cd bf       	out	0x3d, r28	; 61
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	08 95       	ret

000005a4 <transmit_4>:


void transmit_4(Shared_Data* shared_ptr){
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	00 d0       	rcall	.+0      	; 0x5aa <transmit_4+0x6>
 5aa:	00 d0       	rcall	.+0      	; 0x5ac <transmit_4+0x8>
 5ac:	00 d0       	rcall	.+0      	; 0x5ae <transmit_4+0xa>
 5ae:	cd b7       	in	r28, 0x3d	; 61
 5b0:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	sprintf(temp, "%d", shared_ptr->speed_actual);
 5b2:	fc 01       	movw	r30, r24
 5b4:	23 81       	ldd	r18, Z+3	; 0x03
 5b6:	2f 93       	push	r18
 5b8:	82 81       	ldd	r24, Z+2	; 0x02
 5ba:	8f 93       	push	r24
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	9f 93       	push	r25
 5c2:	8f 93       	push	r24
 5c4:	ce 01       	movw	r24, r28
 5c6:	01 96       	adiw	r24, 0x01	; 1
 5c8:	9f 93       	push	r25
 5ca:	8f 93       	push	r24
 5cc:	b4 d1       	rcall	.+872    	; 0x936 <sprintf>
 5ce:	0f 90       	pop	r0
 5d0:	0f 90       	pop	r0
 5d2:	0f 90       	pop	r0
 5d4:	0f 90       	pop	r0
 5d6:	0f 90       	pop	r0
 5d8:	0f 90       	pop	r0
}
 5da:	26 96       	adiw	r28, 0x06	; 6
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	f8 94       	cli
 5e0:	de bf       	out	0x3e, r29	; 62
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	cd bf       	out	0x3d, r28	; 61
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <transmit_5>:

void transmit_5(Shared_Data* shared_ptr){
 5ec:	0f 93       	push	r16
 5ee:	1f 93       	push	r17
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	00 d0       	rcall	.+0      	; 0x5f6 <transmit_5+0xa>
 5f6:	00 d0       	rcall	.+0      	; 0x5f8 <transmit_5+0xc>
 5f8:	00 d0       	rcall	.+0      	; 0x5fa <transmit_5+0xe>
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	snprintf(temp, 6, "%" PRIu16, shared_ptr->clk_elapsed);
 5fe:	fc 01       	movw	r30, r24
 600:	27 81       	ldd	r18, Z+7	; 0x07
 602:	2f 93       	push	r18
 604:	86 81       	ldd	r24, Z+6	; 0x06
 606:	8f 93       	push	r24
 608:	83 e0       	ldi	r24, 0x03	; 3
 60a:	91 e0       	ldi	r25, 0x01	; 1
 60c:	9f 93       	push	r25
 60e:	8f 93       	push	r24
 610:	1f 92       	push	r1
 612:	86 e0       	ldi	r24, 0x06	; 6
 614:	8f 93       	push	r24
 616:	8e 01       	movw	r16, r28
 618:	0f 5f       	subi	r16, 0xFF	; 255
 61a:	1f 4f       	sbci	r17, 0xFF	; 255
 61c:	1f 93       	push	r17
 61e:	0f 93       	push	r16
 620:	5d d1       	rcall	.+698    	; 0x8dc <snprintf>
	USART_transmit(temp);
 622:	c8 01       	movw	r24, r16
 624:	6b de       	rcall	.-810    	; 0x2fc <USART_transmit>
 626:	0f b6       	in	r0, 0x3f	; 63
 628:	f8 94       	cli
 62a:	de bf       	out	0x3e, r29	; 62
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	cd bf       	out	0x3d, r28	; 61
}
 630:	26 96       	adiw	r28, 0x06	; 6
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	f8 94       	cli
 636:	de bf       	out	0x3e, r29	; 62
 638:	0f be       	out	0x3f, r0	; 63
 63a:	cd bf       	out	0x3d, r28	; 61
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	1f 91       	pop	r17
 642:	0f 91       	pop	r16
 644:	08 95       	ret

00000646 <transmit_6>:

void transmit_6(Shared_Data* shared_ptr){
 646:	cf 93       	push	r28
 648:	df 93       	push	r29
 64a:	00 d0       	rcall	.+0      	; 0x64c <transmit_6+0x6>
 64c:	00 d0       	rcall	.+0      	; 0x64e <transmit_6+0x8>
 64e:	00 d0       	rcall	.+0      	; 0x650 <transmit_6+0xa>
 650:	cd b7       	in	r28, 0x3d	; 61
 652:	de b7       	in	r29, 0x3e	; 62
 654:	fc 01       	movw	r30, r24
	char temp[6];
	sprintf(temp, "%" PRIu32, shared_ptr->rpm_avg);
 656:	87 85       	ldd	r24, Z+15	; 0x0f
 658:	8f 93       	push	r24
 65a:	86 85       	ldd	r24, Z+14	; 0x0e
 65c:	8f 93       	push	r24
 65e:	85 85       	ldd	r24, Z+13	; 0x0d
 660:	8f 93       	push	r24
 662:	84 85       	ldd	r24, Z+12	; 0x0c
 664:	8f 93       	push	r24
 666:	86 e0       	ldi	r24, 0x06	; 6
 668:	91 e0       	ldi	r25, 0x01	; 1
 66a:	9f 93       	push	r25
 66c:	8f 93       	push	r24
 66e:	ce 01       	movw	r24, r28
 670:	01 96       	adiw	r24, 0x01	; 1
 672:	9f 93       	push	r25
 674:	8f 93       	push	r24
 676:	5f d1       	rcall	.+702    	; 0x936 <sprintf>
 678:	0f b6       	in	r0, 0x3f	; 63
 67a:	f8 94       	cli
 67c:	de bf       	out	0x3e, r29	; 62
 67e:	0f be       	out	0x3f, r0	; 63
 680:	cd bf       	out	0x3d, r28	; 61
}
 682:	26 96       	adiw	r28, 0x06	; 6
 684:	0f b6       	in	r0, 0x3f	; 63
 686:	f8 94       	cli
 688:	de bf       	out	0x3e, r29	; 62
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	cd bf       	out	0x3d, r28	; 61
 68e:	df 91       	pop	r29
 690:	cf 91       	pop	r28
 692:	08 95       	ret

00000694 <transmit_7>:

void transmit_7(Shared_Data* shared_ptr){
 694:	08 95       	ret

00000696 <transmit_8>:
	//char temp[6];
	//sprintf(temp, "%u", test_var1);
}

void transmit_8(Shared_Data* shared_ptr){
 696:	0f 93       	push	r16
 698:	1f 93       	push	r17
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	00 d0       	rcall	.+0      	; 0x6a0 <transmit_8+0xa>
 6a0:	00 d0       	rcall	.+0      	; 0x6a2 <transmit_8+0xc>
 6a2:	00 d0       	rcall	.+0      	; 0x6a4 <transmit_8+0xe>
 6a4:	cd b7       	in	r28, 0x3d	; 61
 6a6:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	uint16_t test = 60000;
	
	snprintf(temp, 6, "%" PRIu16, test);
 6a8:	8a ee       	ldi	r24, 0xEA	; 234
 6aa:	8f 93       	push	r24
 6ac:	80 e6       	ldi	r24, 0x60	; 96
 6ae:	8f 93       	push	r24
 6b0:	83 e0       	ldi	r24, 0x03	; 3
 6b2:	91 e0       	ldi	r25, 0x01	; 1
 6b4:	9f 93       	push	r25
 6b6:	8f 93       	push	r24
 6b8:	1f 92       	push	r1
 6ba:	86 e0       	ldi	r24, 0x06	; 6
 6bc:	8f 93       	push	r24
 6be:	8e 01       	movw	r16, r28
 6c0:	0f 5f       	subi	r16, 0xFF	; 255
 6c2:	1f 4f       	sbci	r17, 0xFF	; 255
 6c4:	1f 93       	push	r17
 6c6:	0f 93       	push	r16
 6c8:	09 d1       	rcall	.+530    	; 0x8dc <snprintf>
	
	USART_transmit(temp);
 6ca:	c8 01       	movw	r24, r16
 6cc:	17 de       	rcall	.-978    	; 0x2fc <USART_transmit>
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	f8 94       	cli
 6d2:	de bf       	out	0x3e, r29	; 62
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	cd bf       	out	0x3d, r28	; 61
}
 6d8:	26 96       	adiw	r28, 0x06	; 6
 6da:	0f b6       	in	r0, 0x3f	; 63
 6dc:	f8 94       	cli
 6de:	de bf       	out	0x3e, r29	; 62
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	cd bf       	out	0x3d, r28	; 61
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	1f 91       	pop	r17
 6ea:	0f 91       	pop	r16
 6ec:	08 95       	ret

000006ee <transmit_9>:

void transmit_9(Shared_Data* shared_ptr){
 6ee:	cf 93       	push	r28
 6f0:	df 93       	push	r29
 6f2:	00 d0       	rcall	.+0      	; 0x6f4 <transmit_9+0x6>
 6f4:	00 d0       	rcall	.+0      	; 0x6f6 <transmit_9+0x8>
 6f6:	00 d0       	rcall	.+0      	; 0x6f8 <transmit_9+0xa>
 6f8:	cd b7       	in	r28, 0x3d	; 61
 6fa:	de b7       	in	r29, 0x3e	; 62
 6fc:	fc 01       	movw	r30, r24
	char temp[6];
	sprintf(temp, "%" PRIu32, shared_ptr->curr_rpm);
 6fe:	83 85       	ldd	r24, Z+11	; 0x0b
 700:	8f 93       	push	r24
 702:	82 85       	ldd	r24, Z+10	; 0x0a
 704:	8f 93       	push	r24
 706:	81 85       	ldd	r24, Z+9	; 0x09
 708:	8f 93       	push	r24
 70a:	80 85       	ldd	r24, Z+8	; 0x08
 70c:	8f 93       	push	r24
 70e:	86 e0       	ldi	r24, 0x06	; 6
 710:	91 e0       	ldi	r25, 0x01	; 1
 712:	9f 93       	push	r25
 714:	8f 93       	push	r24
 716:	ce 01       	movw	r24, r28
 718:	01 96       	adiw	r24, 0x01	; 1
 71a:	9f 93       	push	r25
 71c:	8f 93       	push	r24
 71e:	0b d1       	rcall	.+534    	; 0x936 <sprintf>
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	f8 94       	cli
 724:	de bf       	out	0x3e, r29	; 62
 726:	0f be       	out	0x3f, r0	; 63
 728:	cd bf       	out	0x3d, r28	; 61
	//strncpy(buf, temp, 5);
}
 72a:	26 96       	adiw	r28, 0x06	; 6
 72c:	0f b6       	in	r0, 0x3f	; 63
 72e:	f8 94       	cli
 730:	de bf       	out	0x3e, r29	; 62
 732:	0f be       	out	0x3f, r0	; 63
 734:	cd bf       	out	0x3d, r28	; 61
 736:	df 91       	pop	r29
 738:	cf 91       	pop	r28
 73a:	08 95       	ret

0000073c <__umoddi3>:
 73c:	68 94       	set
 73e:	01 c0       	rjmp	.+2      	; 0x742 <__udivdi3_umoddi3>

00000740 <__udivdi3>:
 740:	e8 94       	clt

00000742 <__udivdi3_umoddi3>:
 742:	8f 92       	push	r8
 744:	9f 92       	push	r9
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
 74a:	56 d0       	rcall	.+172    	; 0x7f8 <__udivmod64>
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	9f 90       	pop	r9
 752:	8f 90       	pop	r8
 754:	08 95       	ret

00000756 <__muldi3>:
 756:	df 93       	push	r29
 758:	cf 93       	push	r28
 75a:	1f 93       	push	r17
 75c:	0f 93       	push	r16
 75e:	9a 9d       	mul	r25, r10
 760:	f0 2d       	mov	r31, r0
 762:	21 9f       	mul	r18, r17
 764:	f0 0d       	add	r31, r0
 766:	8b 9d       	mul	r24, r11
 768:	f0 0d       	add	r31, r0
 76a:	8a 9d       	mul	r24, r10
 76c:	e0 2d       	mov	r30, r0
 76e:	f1 0d       	add	r31, r1
 770:	03 9f       	mul	r16, r19
 772:	f0 0d       	add	r31, r0
 774:	02 9f       	mul	r16, r18
 776:	e0 0d       	add	r30, r0
 778:	f1 1d       	adc	r31, r1
 77a:	4e 9d       	mul	r20, r14
 77c:	e0 0d       	add	r30, r0
 77e:	f1 1d       	adc	r31, r1
 780:	5e 9d       	mul	r21, r14
 782:	f0 0d       	add	r31, r0
 784:	4f 9d       	mul	r20, r15
 786:	f0 0d       	add	r31, r0
 788:	7f 93       	push	r23
 78a:	6f 93       	push	r22
 78c:	bf 92       	push	r11
 78e:	af 92       	push	r10
 790:	5f 93       	push	r21
 792:	4f 93       	push	r20
 794:	d5 01       	movw	r26, r10
 796:	87 d0       	rcall	.+270    	; 0x8a6 <__umulhisi3>
 798:	8b 01       	movw	r16, r22
 79a:	ac 01       	movw	r20, r24
 79c:	d7 01       	movw	r26, r14
 79e:	83 d0       	rcall	.+262    	; 0x8a6 <__umulhisi3>
 7a0:	eb 01       	movw	r28, r22
 7a2:	e8 0f       	add	r30, r24
 7a4:	f9 1f       	adc	r31, r25
 7a6:	d6 01       	movw	r26, r12
 7a8:	1f d0       	rcall	.+62     	; 0x7e8 <__muldi3_6>
 7aa:	2f 91       	pop	r18
 7ac:	3f 91       	pop	r19
 7ae:	d6 01       	movw	r26, r12
 7b0:	7a d0       	rcall	.+244    	; 0x8a6 <__umulhisi3>
 7b2:	c6 0f       	add	r28, r22
 7b4:	d7 1f       	adc	r29, r23
 7b6:	e8 1f       	adc	r30, r24
 7b8:	f9 1f       	adc	r31, r25
 7ba:	af 91       	pop	r26
 7bc:	bf 91       	pop	r27
 7be:	14 d0       	rcall	.+40     	; 0x7e8 <__muldi3_6>
 7c0:	2f 91       	pop	r18
 7c2:	3f 91       	pop	r19
 7c4:	70 d0       	rcall	.+224    	; 0x8a6 <__umulhisi3>
 7c6:	c6 0f       	add	r28, r22
 7c8:	d7 1f       	adc	r29, r23
 7ca:	e8 1f       	adc	r30, r24
 7cc:	f9 1f       	adc	r31, r25
 7ce:	d6 01       	movw	r26, r12
 7d0:	6a d0       	rcall	.+212    	; 0x8a6 <__umulhisi3>
 7d2:	e6 0f       	add	r30, r22
 7d4:	f7 1f       	adc	r31, r23
 7d6:	98 01       	movw	r18, r16
 7d8:	be 01       	movw	r22, r28
 7da:	cf 01       	movw	r24, r30
 7dc:	11 24       	eor	r1, r1
 7de:	0f 91       	pop	r16
 7e0:	1f 91       	pop	r17
 7e2:	cf 91       	pop	r28
 7e4:	df 91       	pop	r29
 7e6:	08 95       	ret

000007e8 <__muldi3_6>:
 7e8:	5e d0       	rcall	.+188    	; 0x8a6 <__umulhisi3>
 7ea:	46 0f       	add	r20, r22
 7ec:	57 1f       	adc	r21, r23
 7ee:	c8 1f       	adc	r28, r24
 7f0:	d9 1f       	adc	r29, r25
 7f2:	08 f4       	brcc	.+2      	; 0x7f6 <__muldi3_6+0xe>
 7f4:	31 96       	adiw	r30, 0x01	; 1
 7f6:	08 95       	ret

000007f8 <__udivmod64>:
 7f8:	88 24       	eor	r8, r8
 7fa:	99 24       	eor	r9, r9
 7fc:	f4 01       	movw	r30, r8
 7fe:	e4 01       	movw	r28, r8
 800:	b0 e4       	ldi	r27, 0x40	; 64
 802:	1b 2e       	mov	r1, r27
 804:	d4 01       	movw	r26, r8
 806:	9d 15       	cp	r25, r13
 808:	8e 04       	cpc	r8, r14
 80a:	9f 04       	cpc	r9, r15
 80c:	e0 07       	cpc	r30, r16
 80e:	f1 07       	cpc	r31, r17
 810:	38 f4       	brcc	.+14     	; 0x820 <__udivmod64+0x28>
 812:	fc 01       	movw	r30, r24
 814:	4b 01       	movw	r8, r22
 816:	ca 01       	movw	r24, r20
 818:	b9 01       	movw	r22, r18
 81a:	ad 01       	movw	r20, r26
 81c:	9e 01       	movw	r18, r28
 81e:	16 94       	lsr	r1
 820:	22 0f       	add	r18, r18
 822:	33 1f       	adc	r19, r19
 824:	44 1f       	adc	r20, r20
 826:	55 1f       	adc	r21, r21
 828:	66 1f       	adc	r22, r22
 82a:	77 1f       	adc	r23, r23
 82c:	88 1f       	adc	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	88 1c       	adc	r8, r8
 832:	99 1c       	adc	r9, r9
 834:	ee 1f       	adc	r30, r30
 836:	ff 1f       	adc	r31, r31
 838:	cc 1f       	adc	r28, r28
 83a:	dd 1f       	adc	r29, r29
 83c:	aa 1f       	adc	r26, r26
 83e:	bb 1f       	adc	r27, r27
 840:	8a 14       	cp	r8, r10
 842:	9b 04       	cpc	r9, r11
 844:	ec 05       	cpc	r30, r12
 846:	fd 05       	cpc	r31, r13
 848:	ce 05       	cpc	r28, r14
 84a:	df 05       	cpc	r29, r15
 84c:	a0 07       	cpc	r26, r16
 84e:	b1 07       	cpc	r27, r17
 850:	48 f0       	brcs	.+18     	; 0x864 <__udivmod64+0x6c>
 852:	8a 18       	sub	r8, r10
 854:	9b 08       	sbc	r9, r11
 856:	ec 09       	sbc	r30, r12
 858:	fd 09       	sbc	r31, r13
 85a:	ce 09       	sbc	r28, r14
 85c:	df 09       	sbc	r29, r15
 85e:	a0 0b       	sbc	r26, r16
 860:	b1 0b       	sbc	r27, r17
 862:	21 60       	ori	r18, 0x01	; 1
 864:	1a 94       	dec	r1
 866:	e1 f6       	brne	.-72     	; 0x820 <__udivmod64+0x28>
 868:	2e f4       	brtc	.+10     	; 0x874 <__udivmod64+0x7c>
 86a:	94 01       	movw	r18, r8
 86c:	af 01       	movw	r20, r30
 86e:	be 01       	movw	r22, r28
 870:	cd 01       	movw	r24, r26
 872:	00 0c       	add	r0, r0
 874:	08 95       	ret

00000876 <__lshrdi3>:
 876:	0f 93       	push	r16
 878:	0f 73       	andi	r16, 0x3F	; 63
 87a:	51 f0       	breq	.+20     	; 0x890 <__lshrdi3+0x1a>
 87c:	96 95       	lsr	r25
 87e:	87 95       	ror	r24
 880:	77 95       	ror	r23
 882:	67 95       	ror	r22
 884:	57 95       	ror	r21
 886:	47 95       	ror	r20
 888:	37 95       	ror	r19
 88a:	27 95       	ror	r18
 88c:	0a 95       	dec	r16
 88e:	b1 f7       	brne	.-20     	; 0x87c <__lshrdi3+0x6>
 890:	0f 91       	pop	r16
 892:	08 95       	ret

00000894 <__adddi3>:
 894:	2a 0d       	add	r18, r10
 896:	3b 1d       	adc	r19, r11
 898:	4c 1d       	adc	r20, r12
 89a:	5d 1d       	adc	r21, r13
 89c:	6e 1d       	adc	r22, r14
 89e:	7f 1d       	adc	r23, r15
 8a0:	80 1f       	adc	r24, r16
 8a2:	91 1f       	adc	r25, r17
 8a4:	08 95       	ret

000008a6 <__umulhisi3>:
 8a6:	a2 9f       	mul	r26, r18
 8a8:	b0 01       	movw	r22, r0
 8aa:	b3 9f       	mul	r27, r19
 8ac:	c0 01       	movw	r24, r0
 8ae:	a3 9f       	mul	r26, r19
 8b0:	01 d0       	rcall	.+2      	; 0x8b4 <__umulhisi3+0xe>
 8b2:	b2 9f       	mul	r27, r18
 8b4:	70 0d       	add	r23, r0
 8b6:	81 1d       	adc	r24, r1
 8b8:	11 24       	eor	r1, r1
 8ba:	91 1d       	adc	r25, r1
 8bc:	08 95       	ret

000008be <strncpy>:
 8be:	fb 01       	movw	r30, r22
 8c0:	dc 01       	movw	r26, r24
 8c2:	41 50       	subi	r20, 0x01	; 1
 8c4:	50 40       	sbci	r21, 0x00	; 0
 8c6:	48 f0       	brcs	.+18     	; 0x8da <strncpy+0x1c>
 8c8:	01 90       	ld	r0, Z+
 8ca:	0d 92       	st	X+, r0
 8cc:	00 20       	and	r0, r0
 8ce:	c9 f7       	brne	.-14     	; 0x8c2 <strncpy+0x4>
 8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <strncpy+0x16>
 8d2:	1d 92       	st	X+, r1
 8d4:	41 50       	subi	r20, 0x01	; 1
 8d6:	50 40       	sbci	r21, 0x00	; 0
 8d8:	e0 f7       	brcc	.-8      	; 0x8d2 <strncpy+0x14>
 8da:	08 95       	ret

000008dc <snprintf>:
 8dc:	ae e0       	ldi	r26, 0x0E	; 14
 8de:	b0 e0       	ldi	r27, 0x00	; 0
 8e0:	e3 e7       	ldi	r30, 0x73	; 115
 8e2:	f4 e0       	ldi	r31, 0x04	; 4
 8e4:	c2 c2       	rjmp	.+1412   	; 0xe6a <__prologue_saves__+0x1c>
 8e6:	0d 89       	ldd	r16, Y+21	; 0x15
 8e8:	1e 89       	ldd	r17, Y+22	; 0x16
 8ea:	8f 89       	ldd	r24, Y+23	; 0x17
 8ec:	98 8d       	ldd	r25, Y+24	; 0x18
 8ee:	26 e0       	ldi	r18, 0x06	; 6
 8f0:	2c 83       	std	Y+4, r18	; 0x04
 8f2:	1a 83       	std	Y+2, r17	; 0x02
 8f4:	09 83       	std	Y+1, r16	; 0x01
 8f6:	97 ff       	sbrs	r25, 7
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <snprintf+0x22>
 8fa:	80 e0       	ldi	r24, 0x00	; 0
 8fc:	90 e8       	ldi	r25, 0x80	; 128
 8fe:	01 97       	sbiw	r24, 0x01	; 1
 900:	9e 83       	std	Y+6, r25	; 0x06
 902:	8d 83       	std	Y+5, r24	; 0x05
 904:	ce 01       	movw	r24, r28
 906:	4b 96       	adiw	r24, 0x1b	; 27
 908:	ac 01       	movw	r20, r24
 90a:	69 8d       	ldd	r22, Y+25	; 0x19
 90c:	7a 8d       	ldd	r23, Y+26	; 0x1a
 90e:	ce 01       	movw	r24, r28
 910:	01 96       	adiw	r24, 0x01	; 1
 912:	30 d0       	rcall	.+96     	; 0x974 <vfprintf>
 914:	4d 81       	ldd	r20, Y+5	; 0x05
 916:	5e 81       	ldd	r21, Y+6	; 0x06
 918:	57 fd       	sbrc	r21, 7
 91a:	0a c0       	rjmp	.+20     	; 0x930 <snprintf+0x54>
 91c:	2f 81       	ldd	r18, Y+7	; 0x07
 91e:	38 85       	ldd	r19, Y+8	; 0x08
 920:	42 17       	cp	r20, r18
 922:	53 07       	cpc	r21, r19
 924:	0c f4       	brge	.+2      	; 0x928 <snprintf+0x4c>
 926:	9a 01       	movw	r18, r20
 928:	f8 01       	movw	r30, r16
 92a:	e2 0f       	add	r30, r18
 92c:	f3 1f       	adc	r31, r19
 92e:	10 82       	st	Z, r1
 930:	2e 96       	adiw	r28, 0x0e	; 14
 932:	e4 e0       	ldi	r30, 0x04	; 4
 934:	b6 c2       	rjmp	.+1388   	; 0xea2 <__epilogue_restores__+0x1c>

00000936 <sprintf>:
 936:	ae e0       	ldi	r26, 0x0E	; 14
 938:	b0 e0       	ldi	r27, 0x00	; 0
 93a:	e0 ea       	ldi	r30, 0xA0	; 160
 93c:	f4 e0       	ldi	r31, 0x04	; 4
 93e:	95 c2       	rjmp	.+1322   	; 0xe6a <__prologue_saves__+0x1c>
 940:	0d 89       	ldd	r16, Y+21	; 0x15
 942:	1e 89       	ldd	r17, Y+22	; 0x16
 944:	86 e0       	ldi	r24, 0x06	; 6
 946:	8c 83       	std	Y+4, r24	; 0x04
 948:	1a 83       	std	Y+2, r17	; 0x02
 94a:	09 83       	std	Y+1, r16	; 0x01
 94c:	8f ef       	ldi	r24, 0xFF	; 255
 94e:	9f e7       	ldi	r25, 0x7F	; 127
 950:	9e 83       	std	Y+6, r25	; 0x06
 952:	8d 83       	std	Y+5, r24	; 0x05
 954:	ce 01       	movw	r24, r28
 956:	49 96       	adiw	r24, 0x19	; 25
 958:	ac 01       	movw	r20, r24
 95a:	6f 89       	ldd	r22, Y+23	; 0x17
 95c:	78 8d       	ldd	r23, Y+24	; 0x18
 95e:	ce 01       	movw	r24, r28
 960:	01 96       	adiw	r24, 0x01	; 1
 962:	08 d0       	rcall	.+16     	; 0x974 <vfprintf>
 964:	ef 81       	ldd	r30, Y+7	; 0x07
 966:	f8 85       	ldd	r31, Y+8	; 0x08
 968:	e0 0f       	add	r30, r16
 96a:	f1 1f       	adc	r31, r17
 96c:	10 82       	st	Z, r1
 96e:	2e 96       	adiw	r28, 0x0e	; 14
 970:	e4 e0       	ldi	r30, 0x04	; 4
 972:	97 c2       	rjmp	.+1326   	; 0xea2 <__epilogue_restores__+0x1c>

00000974 <vfprintf>:
 974:	ac e0       	ldi	r26, 0x0C	; 12
 976:	b0 e0       	ldi	r27, 0x00	; 0
 978:	ef eb       	ldi	r30, 0xBF	; 191
 97a:	f4 e0       	ldi	r31, 0x04	; 4
 97c:	68 c2       	rjmp	.+1232   	; 0xe4e <__prologue_saves__>
 97e:	7c 01       	movw	r14, r24
 980:	6b 01       	movw	r12, r22
 982:	8a 01       	movw	r16, r20
 984:	fc 01       	movw	r30, r24
 986:	17 82       	std	Z+7, r1	; 0x07
 988:	16 82       	std	Z+6, r1	; 0x06
 98a:	83 81       	ldd	r24, Z+3	; 0x03
 98c:	81 ff       	sbrs	r24, 1
 98e:	b9 c1       	rjmp	.+882    	; 0xd02 <vfprintf+0x38e>
 990:	88 24       	eor	r8, r8
 992:	83 94       	inc	r8
 994:	91 2c       	mov	r9, r1
 996:	8c 0e       	add	r8, r28
 998:	9d 1e       	adc	r9, r29
 99a:	f7 01       	movw	r30, r14
 99c:	93 81       	ldd	r25, Z+3	; 0x03
 99e:	f6 01       	movw	r30, r12
 9a0:	93 fd       	sbrc	r25, 3
 9a2:	85 91       	lpm	r24, Z+
 9a4:	93 ff       	sbrs	r25, 3
 9a6:	81 91       	ld	r24, Z+
 9a8:	6f 01       	movw	r12, r30
 9aa:	88 23       	and	r24, r24
 9ac:	09 f4       	brne	.+2      	; 0x9b0 <vfprintf+0x3c>
 9ae:	a5 c1       	rjmp	.+842    	; 0xcfa <vfprintf+0x386>
 9b0:	85 32       	cpi	r24, 0x25	; 37
 9b2:	39 f4       	brne	.+14     	; 0x9c2 <vfprintf+0x4e>
 9b4:	93 fd       	sbrc	r25, 3
 9b6:	85 91       	lpm	r24, Z+
 9b8:	93 ff       	sbrs	r25, 3
 9ba:	81 91       	ld	r24, Z+
 9bc:	6f 01       	movw	r12, r30
 9be:	85 32       	cpi	r24, 0x25	; 37
 9c0:	21 f4       	brne	.+8      	; 0x9ca <vfprintf+0x56>
 9c2:	b7 01       	movw	r22, r14
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	b9 d1       	rcall	.+882    	; 0xd3a <fputc>
 9c8:	e8 cf       	rjmp	.-48     	; 0x99a <vfprintf+0x26>
 9ca:	51 2c       	mov	r5, r1
 9cc:	31 2c       	mov	r3, r1
 9ce:	20 e0       	ldi	r18, 0x00	; 0
 9d0:	20 32       	cpi	r18, 0x20	; 32
 9d2:	a8 f4       	brcc	.+42     	; 0x9fe <vfprintf+0x8a>
 9d4:	8b 32       	cpi	r24, 0x2B	; 43
 9d6:	61 f0       	breq	.+24     	; 0x9f0 <vfprintf+0x7c>
 9d8:	28 f4       	brcc	.+10     	; 0x9e4 <vfprintf+0x70>
 9da:	80 32       	cpi	r24, 0x20	; 32
 9dc:	51 f0       	breq	.+20     	; 0x9f2 <vfprintf+0x7e>
 9de:	83 32       	cpi	r24, 0x23	; 35
 9e0:	71 f4       	brne	.+28     	; 0x9fe <vfprintf+0x8a>
 9e2:	0b c0       	rjmp	.+22     	; 0x9fa <vfprintf+0x86>
 9e4:	8d 32       	cpi	r24, 0x2D	; 45
 9e6:	39 f0       	breq	.+14     	; 0x9f6 <vfprintf+0x82>
 9e8:	80 33       	cpi	r24, 0x30	; 48
 9ea:	49 f4       	brne	.+18     	; 0x9fe <vfprintf+0x8a>
 9ec:	21 60       	ori	r18, 0x01	; 1
 9ee:	28 c0       	rjmp	.+80     	; 0xa40 <vfprintf+0xcc>
 9f0:	22 60       	ori	r18, 0x02	; 2
 9f2:	24 60       	ori	r18, 0x04	; 4
 9f4:	25 c0       	rjmp	.+74     	; 0xa40 <vfprintf+0xcc>
 9f6:	28 60       	ori	r18, 0x08	; 8
 9f8:	23 c0       	rjmp	.+70     	; 0xa40 <vfprintf+0xcc>
 9fa:	20 61       	ori	r18, 0x10	; 16
 9fc:	21 c0       	rjmp	.+66     	; 0xa40 <vfprintf+0xcc>
 9fe:	27 fd       	sbrc	r18, 7
 a00:	27 c0       	rjmp	.+78     	; 0xa50 <vfprintf+0xdc>
 a02:	38 2f       	mov	r19, r24
 a04:	30 53       	subi	r19, 0x30	; 48
 a06:	3a 30       	cpi	r19, 0x0A	; 10
 a08:	78 f4       	brcc	.+30     	; 0xa28 <vfprintf+0xb4>
 a0a:	26 ff       	sbrs	r18, 6
 a0c:	06 c0       	rjmp	.+12     	; 0xa1a <vfprintf+0xa6>
 a0e:	fa e0       	ldi	r31, 0x0A	; 10
 a10:	5f 9e       	mul	r5, r31
 a12:	30 0d       	add	r19, r0
 a14:	11 24       	eor	r1, r1
 a16:	53 2e       	mov	r5, r19
 a18:	13 c0       	rjmp	.+38     	; 0xa40 <vfprintf+0xcc>
 a1a:	8a e0       	ldi	r24, 0x0A	; 10
 a1c:	38 9e       	mul	r3, r24
 a1e:	30 0d       	add	r19, r0
 a20:	11 24       	eor	r1, r1
 a22:	33 2e       	mov	r3, r19
 a24:	20 62       	ori	r18, 0x20	; 32
 a26:	0c c0       	rjmp	.+24     	; 0xa40 <vfprintf+0xcc>
 a28:	8e 32       	cpi	r24, 0x2E	; 46
 a2a:	21 f4       	brne	.+8      	; 0xa34 <vfprintf+0xc0>
 a2c:	26 fd       	sbrc	r18, 6
 a2e:	65 c1       	rjmp	.+714    	; 0xcfa <vfprintf+0x386>
 a30:	20 64       	ori	r18, 0x40	; 64
 a32:	06 c0       	rjmp	.+12     	; 0xa40 <vfprintf+0xcc>
 a34:	8c 36       	cpi	r24, 0x6C	; 108
 a36:	11 f4       	brne	.+4      	; 0xa3c <vfprintf+0xc8>
 a38:	20 68       	ori	r18, 0x80	; 128
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <vfprintf+0xcc>
 a3c:	88 36       	cpi	r24, 0x68	; 104
 a3e:	41 f4       	brne	.+16     	; 0xa50 <vfprintf+0xdc>
 a40:	f6 01       	movw	r30, r12
 a42:	93 fd       	sbrc	r25, 3
 a44:	85 91       	lpm	r24, Z+
 a46:	93 ff       	sbrs	r25, 3
 a48:	81 91       	ld	r24, Z+
 a4a:	6f 01       	movw	r12, r30
 a4c:	81 11       	cpse	r24, r1
 a4e:	c0 cf       	rjmp	.-128    	; 0x9d0 <vfprintf+0x5c>
 a50:	98 2f       	mov	r25, r24
 a52:	95 54       	subi	r25, 0x45	; 69
 a54:	93 30       	cpi	r25, 0x03	; 3
 a56:	18 f0       	brcs	.+6      	; 0xa5e <vfprintf+0xea>
 a58:	90 52       	subi	r25, 0x20	; 32
 a5a:	93 30       	cpi	r25, 0x03	; 3
 a5c:	28 f4       	brcc	.+10     	; 0xa68 <vfprintf+0xf4>
 a5e:	0c 5f       	subi	r16, 0xFC	; 252
 a60:	1f 4f       	sbci	r17, 0xFF	; 255
 a62:	ff e3       	ldi	r31, 0x3F	; 63
 a64:	f9 83       	std	Y+1, r31	; 0x01
 a66:	0d c0       	rjmp	.+26     	; 0xa82 <vfprintf+0x10e>
 a68:	83 36       	cpi	r24, 0x63	; 99
 a6a:	31 f0       	breq	.+12     	; 0xa78 <vfprintf+0x104>
 a6c:	83 37       	cpi	r24, 0x73	; 115
 a6e:	71 f0       	breq	.+28     	; 0xa8c <vfprintf+0x118>
 a70:	83 35       	cpi	r24, 0x53	; 83
 a72:	09 f0       	breq	.+2      	; 0xa76 <vfprintf+0x102>
 a74:	5a c0       	rjmp	.+180    	; 0xb2a <vfprintf+0x1b6>
 a76:	22 c0       	rjmp	.+68     	; 0xabc <vfprintf+0x148>
 a78:	f8 01       	movw	r30, r16
 a7a:	80 81       	ld	r24, Z
 a7c:	89 83       	std	Y+1, r24	; 0x01
 a7e:	0e 5f       	subi	r16, 0xFE	; 254
 a80:	1f 4f       	sbci	r17, 0xFF	; 255
 a82:	44 24       	eor	r4, r4
 a84:	43 94       	inc	r4
 a86:	51 2c       	mov	r5, r1
 a88:	54 01       	movw	r10, r8
 a8a:	14 c0       	rjmp	.+40     	; 0xab4 <vfprintf+0x140>
 a8c:	38 01       	movw	r6, r16
 a8e:	f2 e0       	ldi	r31, 0x02	; 2
 a90:	6f 0e       	add	r6, r31
 a92:	71 1c       	adc	r7, r1
 a94:	f8 01       	movw	r30, r16
 a96:	a0 80       	ld	r10, Z
 a98:	b1 80       	ldd	r11, Z+1	; 0x01
 a9a:	26 ff       	sbrs	r18, 6
 a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <vfprintf+0x130>
 a9e:	65 2d       	mov	r22, r5
 aa0:	70 e0       	ldi	r23, 0x00	; 0
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <vfprintf+0x134>
 aa4:	6f ef       	ldi	r22, 0xFF	; 255
 aa6:	7f ef       	ldi	r23, 0xFF	; 255
 aa8:	c5 01       	movw	r24, r10
 aaa:	2c 87       	std	Y+12, r18	; 0x0c
 aac:	3b d1       	rcall	.+630    	; 0xd24 <strnlen>
 aae:	2c 01       	movw	r4, r24
 ab0:	83 01       	movw	r16, r6
 ab2:	2c 85       	ldd	r18, Y+12	; 0x0c
 ab4:	6f e7       	ldi	r22, 0x7F	; 127
 ab6:	26 2e       	mov	r2, r22
 ab8:	22 22       	and	r2, r18
 aba:	17 c0       	rjmp	.+46     	; 0xaea <vfprintf+0x176>
 abc:	38 01       	movw	r6, r16
 abe:	f2 e0       	ldi	r31, 0x02	; 2
 ac0:	6f 0e       	add	r6, r31
 ac2:	71 1c       	adc	r7, r1
 ac4:	f8 01       	movw	r30, r16
 ac6:	a0 80       	ld	r10, Z
 ac8:	b1 80       	ldd	r11, Z+1	; 0x01
 aca:	26 ff       	sbrs	r18, 6
 acc:	03 c0       	rjmp	.+6      	; 0xad4 <vfprintf+0x160>
 ace:	65 2d       	mov	r22, r5
 ad0:	70 e0       	ldi	r23, 0x00	; 0
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <vfprintf+0x164>
 ad4:	6f ef       	ldi	r22, 0xFF	; 255
 ad6:	7f ef       	ldi	r23, 0xFF	; 255
 ad8:	c5 01       	movw	r24, r10
 ada:	2c 87       	std	Y+12, r18	; 0x0c
 adc:	18 d1       	rcall	.+560    	; 0xd0e <strnlen_P>
 ade:	2c 01       	movw	r4, r24
 ae0:	2c 85       	ldd	r18, Y+12	; 0x0c
 ae2:	50 e8       	ldi	r21, 0x80	; 128
 ae4:	25 2e       	mov	r2, r21
 ae6:	22 2a       	or	r2, r18
 ae8:	83 01       	movw	r16, r6
 aea:	23 fc       	sbrc	r2, 3
 aec:	1a c0       	rjmp	.+52     	; 0xb22 <vfprintf+0x1ae>
 aee:	05 c0       	rjmp	.+10     	; 0xafa <vfprintf+0x186>
 af0:	b7 01       	movw	r22, r14
 af2:	80 e2       	ldi	r24, 0x20	; 32
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	21 d1       	rcall	.+578    	; 0xd3a <fputc>
 af8:	3a 94       	dec	r3
 afa:	83 2d       	mov	r24, r3
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	48 16       	cp	r4, r24
 b00:	59 06       	cpc	r5, r25
 b02:	b0 f3       	brcs	.-20     	; 0xaf0 <vfprintf+0x17c>
 b04:	0e c0       	rjmp	.+28     	; 0xb22 <vfprintf+0x1ae>
 b06:	f5 01       	movw	r30, r10
 b08:	27 fc       	sbrc	r2, 7
 b0a:	85 91       	lpm	r24, Z+
 b0c:	27 fe       	sbrs	r2, 7
 b0e:	81 91       	ld	r24, Z+
 b10:	5f 01       	movw	r10, r30
 b12:	b7 01       	movw	r22, r14
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	11 d1       	rcall	.+546    	; 0xd3a <fputc>
 b18:	31 10       	cpse	r3, r1
 b1a:	3a 94       	dec	r3
 b1c:	f1 e0       	ldi	r31, 0x01	; 1
 b1e:	4f 1a       	sub	r4, r31
 b20:	51 08       	sbc	r5, r1
 b22:	41 14       	cp	r4, r1
 b24:	51 04       	cpc	r5, r1
 b26:	79 f7       	brne	.-34     	; 0xb06 <vfprintf+0x192>
 b28:	e5 c0       	rjmp	.+458    	; 0xcf4 <vfprintf+0x380>
 b2a:	84 36       	cpi	r24, 0x64	; 100
 b2c:	11 f0       	breq	.+4      	; 0xb32 <vfprintf+0x1be>
 b2e:	89 36       	cpi	r24, 0x69	; 105
 b30:	39 f5       	brne	.+78     	; 0xb80 <vfprintf+0x20c>
 b32:	f8 01       	movw	r30, r16
 b34:	27 ff       	sbrs	r18, 7
 b36:	07 c0       	rjmp	.+14     	; 0xb46 <vfprintf+0x1d2>
 b38:	60 81       	ld	r22, Z
 b3a:	71 81       	ldd	r23, Z+1	; 0x01
 b3c:	82 81       	ldd	r24, Z+2	; 0x02
 b3e:	93 81       	ldd	r25, Z+3	; 0x03
 b40:	0c 5f       	subi	r16, 0xFC	; 252
 b42:	1f 4f       	sbci	r17, 0xFF	; 255
 b44:	08 c0       	rjmp	.+16     	; 0xb56 <vfprintf+0x1e2>
 b46:	60 81       	ld	r22, Z
 b48:	71 81       	ldd	r23, Z+1	; 0x01
 b4a:	88 27       	eor	r24, r24
 b4c:	77 fd       	sbrc	r23, 7
 b4e:	80 95       	com	r24
 b50:	98 2f       	mov	r25, r24
 b52:	0e 5f       	subi	r16, 0xFE	; 254
 b54:	1f 4f       	sbci	r17, 0xFF	; 255
 b56:	4f e6       	ldi	r20, 0x6F	; 111
 b58:	b4 2e       	mov	r11, r20
 b5a:	b2 22       	and	r11, r18
 b5c:	97 ff       	sbrs	r25, 7
 b5e:	09 c0       	rjmp	.+18     	; 0xb72 <vfprintf+0x1fe>
 b60:	90 95       	com	r25
 b62:	80 95       	com	r24
 b64:	70 95       	com	r23
 b66:	61 95       	neg	r22
 b68:	7f 4f       	sbci	r23, 0xFF	; 255
 b6a:	8f 4f       	sbci	r24, 0xFF	; 255
 b6c:	9f 4f       	sbci	r25, 0xFF	; 255
 b6e:	f0 e8       	ldi	r31, 0x80	; 128
 b70:	bf 2a       	or	r11, r31
 b72:	2a e0       	ldi	r18, 0x0A	; 10
 b74:	30 e0       	ldi	r19, 0x00	; 0
 b76:	a4 01       	movw	r20, r8
 b78:	0c d1       	rcall	.+536    	; 0xd92 <__ultoa_invert>
 b7a:	a8 2e       	mov	r10, r24
 b7c:	a8 18       	sub	r10, r8
 b7e:	42 c0       	rjmp	.+132    	; 0xc04 <vfprintf+0x290>
 b80:	85 37       	cpi	r24, 0x75	; 117
 b82:	31 f4       	brne	.+12     	; 0xb90 <vfprintf+0x21c>
 b84:	3f ee       	ldi	r19, 0xEF	; 239
 b86:	b3 2e       	mov	r11, r19
 b88:	b2 22       	and	r11, r18
 b8a:	2a e0       	ldi	r18, 0x0A	; 10
 b8c:	30 e0       	ldi	r19, 0x00	; 0
 b8e:	24 c0       	rjmp	.+72     	; 0xbd8 <vfprintf+0x264>
 b90:	99 ef       	ldi	r25, 0xF9	; 249
 b92:	b9 2e       	mov	r11, r25
 b94:	b2 22       	and	r11, r18
 b96:	8f 36       	cpi	r24, 0x6F	; 111
 b98:	b9 f0       	breq	.+46     	; 0xbc8 <vfprintf+0x254>
 b9a:	20 f4       	brcc	.+8      	; 0xba4 <vfprintf+0x230>
 b9c:	88 35       	cpi	r24, 0x58	; 88
 b9e:	09 f0       	breq	.+2      	; 0xba2 <vfprintf+0x22e>
 ba0:	ac c0       	rjmp	.+344    	; 0xcfa <vfprintf+0x386>
 ba2:	0d c0       	rjmp	.+26     	; 0xbbe <vfprintf+0x24a>
 ba4:	80 37       	cpi	r24, 0x70	; 112
 ba6:	21 f0       	breq	.+8      	; 0xbb0 <vfprintf+0x23c>
 ba8:	88 37       	cpi	r24, 0x78	; 120
 baa:	09 f0       	breq	.+2      	; 0xbae <vfprintf+0x23a>
 bac:	a6 c0       	rjmp	.+332    	; 0xcfa <vfprintf+0x386>
 bae:	02 c0       	rjmp	.+4      	; 0xbb4 <vfprintf+0x240>
 bb0:	20 e1       	ldi	r18, 0x10	; 16
 bb2:	b2 2a       	or	r11, r18
 bb4:	b4 fe       	sbrs	r11, 4
 bb6:	0b c0       	rjmp	.+22     	; 0xbce <vfprintf+0x25a>
 bb8:	84 e0       	ldi	r24, 0x04	; 4
 bba:	b8 2a       	or	r11, r24
 bbc:	08 c0       	rjmp	.+16     	; 0xbce <vfprintf+0x25a>
 bbe:	24 ff       	sbrs	r18, 4
 bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <vfprintf+0x260>
 bc2:	e6 e0       	ldi	r30, 0x06	; 6
 bc4:	be 2a       	or	r11, r30
 bc6:	06 c0       	rjmp	.+12     	; 0xbd4 <vfprintf+0x260>
 bc8:	28 e0       	ldi	r18, 0x08	; 8
 bca:	30 e0       	ldi	r19, 0x00	; 0
 bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <vfprintf+0x264>
 bce:	20 e1       	ldi	r18, 0x10	; 16
 bd0:	30 e0       	ldi	r19, 0x00	; 0
 bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <vfprintf+0x264>
 bd4:	20 e1       	ldi	r18, 0x10	; 16
 bd6:	32 e0       	ldi	r19, 0x02	; 2
 bd8:	f8 01       	movw	r30, r16
 bda:	b7 fe       	sbrs	r11, 7
 bdc:	07 c0       	rjmp	.+14     	; 0xbec <vfprintf+0x278>
 bde:	60 81       	ld	r22, Z
 be0:	71 81       	ldd	r23, Z+1	; 0x01
 be2:	82 81       	ldd	r24, Z+2	; 0x02
 be4:	93 81       	ldd	r25, Z+3	; 0x03
 be6:	0c 5f       	subi	r16, 0xFC	; 252
 be8:	1f 4f       	sbci	r17, 0xFF	; 255
 bea:	06 c0       	rjmp	.+12     	; 0xbf8 <vfprintf+0x284>
 bec:	60 81       	ld	r22, Z
 bee:	71 81       	ldd	r23, Z+1	; 0x01
 bf0:	80 e0       	ldi	r24, 0x00	; 0
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	0e 5f       	subi	r16, 0xFE	; 254
 bf6:	1f 4f       	sbci	r17, 0xFF	; 255
 bf8:	a4 01       	movw	r20, r8
 bfa:	cb d0       	rcall	.+406    	; 0xd92 <__ultoa_invert>
 bfc:	a8 2e       	mov	r10, r24
 bfe:	a8 18       	sub	r10, r8
 c00:	ff e7       	ldi	r31, 0x7F	; 127
 c02:	bf 22       	and	r11, r31
 c04:	b6 fe       	sbrs	r11, 6
 c06:	0b c0       	rjmp	.+22     	; 0xc1e <vfprintf+0x2aa>
 c08:	2b 2d       	mov	r18, r11
 c0a:	2e 7f       	andi	r18, 0xFE	; 254
 c0c:	a5 14       	cp	r10, r5
 c0e:	50 f4       	brcc	.+20     	; 0xc24 <vfprintf+0x2b0>
 c10:	b4 fe       	sbrs	r11, 4
 c12:	0a c0       	rjmp	.+20     	; 0xc28 <vfprintf+0x2b4>
 c14:	b2 fc       	sbrc	r11, 2
 c16:	08 c0       	rjmp	.+16     	; 0xc28 <vfprintf+0x2b4>
 c18:	2b 2d       	mov	r18, r11
 c1a:	2e 7e       	andi	r18, 0xEE	; 238
 c1c:	05 c0       	rjmp	.+10     	; 0xc28 <vfprintf+0x2b4>
 c1e:	7a 2c       	mov	r7, r10
 c20:	2b 2d       	mov	r18, r11
 c22:	03 c0       	rjmp	.+6      	; 0xc2a <vfprintf+0x2b6>
 c24:	7a 2c       	mov	r7, r10
 c26:	01 c0       	rjmp	.+2      	; 0xc2a <vfprintf+0x2b6>
 c28:	75 2c       	mov	r7, r5
 c2a:	24 ff       	sbrs	r18, 4
 c2c:	0d c0       	rjmp	.+26     	; 0xc48 <vfprintf+0x2d4>
 c2e:	fe 01       	movw	r30, r28
 c30:	ea 0d       	add	r30, r10
 c32:	f1 1d       	adc	r31, r1
 c34:	80 81       	ld	r24, Z
 c36:	80 33       	cpi	r24, 0x30	; 48
 c38:	11 f4       	brne	.+4      	; 0xc3e <vfprintf+0x2ca>
 c3a:	29 7e       	andi	r18, 0xE9	; 233
 c3c:	09 c0       	rjmp	.+18     	; 0xc50 <vfprintf+0x2dc>
 c3e:	22 ff       	sbrs	r18, 2
 c40:	06 c0       	rjmp	.+12     	; 0xc4e <vfprintf+0x2da>
 c42:	73 94       	inc	r7
 c44:	73 94       	inc	r7
 c46:	04 c0       	rjmp	.+8      	; 0xc50 <vfprintf+0x2dc>
 c48:	82 2f       	mov	r24, r18
 c4a:	86 78       	andi	r24, 0x86	; 134
 c4c:	09 f0       	breq	.+2      	; 0xc50 <vfprintf+0x2dc>
 c4e:	73 94       	inc	r7
 c50:	23 fd       	sbrc	r18, 3
 c52:	13 c0       	rjmp	.+38     	; 0xc7a <vfprintf+0x306>
 c54:	20 ff       	sbrs	r18, 0
 c56:	0e c0       	rjmp	.+28     	; 0xc74 <vfprintf+0x300>
 c58:	5a 2c       	mov	r5, r10
 c5a:	73 14       	cp	r7, r3
 c5c:	58 f4       	brcc	.+22     	; 0xc74 <vfprintf+0x300>
 c5e:	53 0c       	add	r5, r3
 c60:	57 18       	sub	r5, r7
 c62:	73 2c       	mov	r7, r3
 c64:	07 c0       	rjmp	.+14     	; 0xc74 <vfprintf+0x300>
 c66:	b7 01       	movw	r22, r14
 c68:	80 e2       	ldi	r24, 0x20	; 32
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	2c 87       	std	Y+12, r18	; 0x0c
 c6e:	65 d0       	rcall	.+202    	; 0xd3a <fputc>
 c70:	73 94       	inc	r7
 c72:	2c 85       	ldd	r18, Y+12	; 0x0c
 c74:	73 14       	cp	r7, r3
 c76:	b8 f3       	brcs	.-18     	; 0xc66 <vfprintf+0x2f2>
 c78:	04 c0       	rjmp	.+8      	; 0xc82 <vfprintf+0x30e>
 c7a:	73 14       	cp	r7, r3
 c7c:	10 f4       	brcc	.+4      	; 0xc82 <vfprintf+0x30e>
 c7e:	37 18       	sub	r3, r7
 c80:	01 c0       	rjmp	.+2      	; 0xc84 <vfprintf+0x310>
 c82:	31 2c       	mov	r3, r1
 c84:	24 ff       	sbrs	r18, 4
 c86:	11 c0       	rjmp	.+34     	; 0xcaa <vfprintf+0x336>
 c88:	b7 01       	movw	r22, r14
 c8a:	80 e3       	ldi	r24, 0x30	; 48
 c8c:	90 e0       	ldi	r25, 0x00	; 0
 c8e:	2c 87       	std	Y+12, r18	; 0x0c
 c90:	54 d0       	rcall	.+168    	; 0xd3a <fputc>
 c92:	2c 85       	ldd	r18, Y+12	; 0x0c
 c94:	22 ff       	sbrs	r18, 2
 c96:	1c c0       	rjmp	.+56     	; 0xcd0 <vfprintf+0x35c>
 c98:	21 ff       	sbrs	r18, 1
 c9a:	03 c0       	rjmp	.+6      	; 0xca2 <vfprintf+0x32e>
 c9c:	88 e5       	ldi	r24, 0x58	; 88
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	02 c0       	rjmp	.+4      	; 0xca6 <vfprintf+0x332>
 ca2:	88 e7       	ldi	r24, 0x78	; 120
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	b7 01       	movw	r22, r14
 ca8:	0c c0       	rjmp	.+24     	; 0xcc2 <vfprintf+0x34e>
 caa:	82 2f       	mov	r24, r18
 cac:	86 78       	andi	r24, 0x86	; 134
 cae:	81 f0       	breq	.+32     	; 0xcd0 <vfprintf+0x35c>
 cb0:	21 fd       	sbrc	r18, 1
 cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <vfprintf+0x344>
 cb4:	80 e2       	ldi	r24, 0x20	; 32
 cb6:	01 c0       	rjmp	.+2      	; 0xcba <vfprintf+0x346>
 cb8:	8b e2       	ldi	r24, 0x2B	; 43
 cba:	27 fd       	sbrc	r18, 7
 cbc:	8d e2       	ldi	r24, 0x2D	; 45
 cbe:	b7 01       	movw	r22, r14
 cc0:	90 e0       	ldi	r25, 0x00	; 0
 cc2:	3b d0       	rcall	.+118    	; 0xd3a <fputc>
 cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <vfprintf+0x35c>
 cc6:	b7 01       	movw	r22, r14
 cc8:	80 e3       	ldi	r24, 0x30	; 48
 cca:	90 e0       	ldi	r25, 0x00	; 0
 ccc:	36 d0       	rcall	.+108    	; 0xd3a <fputc>
 cce:	5a 94       	dec	r5
 cd0:	a5 14       	cp	r10, r5
 cd2:	c8 f3       	brcs	.-14     	; 0xcc6 <vfprintf+0x352>
 cd4:	aa 94       	dec	r10
 cd6:	f4 01       	movw	r30, r8
 cd8:	ea 0d       	add	r30, r10
 cda:	f1 1d       	adc	r31, r1
 cdc:	b7 01       	movw	r22, r14
 cde:	80 81       	ld	r24, Z
 ce0:	90 e0       	ldi	r25, 0x00	; 0
 ce2:	2b d0       	rcall	.+86     	; 0xd3a <fputc>
 ce4:	a1 10       	cpse	r10, r1
 ce6:	f6 cf       	rjmp	.-20     	; 0xcd4 <vfprintf+0x360>
 ce8:	05 c0       	rjmp	.+10     	; 0xcf4 <vfprintf+0x380>
 cea:	b7 01       	movw	r22, r14
 cec:	80 e2       	ldi	r24, 0x20	; 32
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	24 d0       	rcall	.+72     	; 0xd3a <fputc>
 cf2:	3a 94       	dec	r3
 cf4:	31 10       	cpse	r3, r1
 cf6:	f9 cf       	rjmp	.-14     	; 0xcea <vfprintf+0x376>
 cf8:	50 ce       	rjmp	.-864    	; 0x99a <vfprintf+0x26>
 cfa:	f7 01       	movw	r30, r14
 cfc:	26 81       	ldd	r18, Z+6	; 0x06
 cfe:	37 81       	ldd	r19, Z+7	; 0x07
 d00:	02 c0       	rjmp	.+4      	; 0xd06 <vfprintf+0x392>
 d02:	2f ef       	ldi	r18, 0xFF	; 255
 d04:	3f ef       	ldi	r19, 0xFF	; 255
 d06:	c9 01       	movw	r24, r18
 d08:	2c 96       	adiw	r28, 0x0c	; 12
 d0a:	e2 e1       	ldi	r30, 0x12	; 18
 d0c:	bc c0       	rjmp	.+376    	; 0xe86 <__epilogue_restores__>

00000d0e <strnlen_P>:
 d0e:	fc 01       	movw	r30, r24
 d10:	05 90       	lpm	r0, Z+
 d12:	61 50       	subi	r22, 0x01	; 1
 d14:	70 40       	sbci	r23, 0x00	; 0
 d16:	01 10       	cpse	r0, r1
 d18:	d8 f7       	brcc	.-10     	; 0xd10 <strnlen_P+0x2>
 d1a:	80 95       	com	r24
 d1c:	90 95       	com	r25
 d1e:	8e 0f       	add	r24, r30
 d20:	9f 1f       	adc	r25, r31
 d22:	08 95       	ret

00000d24 <strnlen>:
 d24:	fc 01       	movw	r30, r24
 d26:	61 50       	subi	r22, 0x01	; 1
 d28:	70 40       	sbci	r23, 0x00	; 0
 d2a:	01 90       	ld	r0, Z+
 d2c:	01 10       	cpse	r0, r1
 d2e:	d8 f7       	brcc	.-10     	; 0xd26 <strnlen+0x2>
 d30:	80 95       	com	r24
 d32:	90 95       	com	r25
 d34:	8e 0f       	add	r24, r30
 d36:	9f 1f       	adc	r25, r31
 d38:	08 95       	ret

00000d3a <fputc>:
 d3a:	0f 93       	push	r16
 d3c:	1f 93       	push	r17
 d3e:	cf 93       	push	r28
 d40:	df 93       	push	r29
 d42:	8c 01       	movw	r16, r24
 d44:	eb 01       	movw	r28, r22
 d46:	8b 81       	ldd	r24, Y+3	; 0x03
 d48:	81 fd       	sbrc	r24, 1
 d4a:	03 c0       	rjmp	.+6      	; 0xd52 <fputc+0x18>
 d4c:	0f ef       	ldi	r16, 0xFF	; 255
 d4e:	1f ef       	ldi	r17, 0xFF	; 255
 d50:	1a c0       	rjmp	.+52     	; 0xd86 <fputc+0x4c>
 d52:	82 ff       	sbrs	r24, 2
 d54:	0d c0       	rjmp	.+26     	; 0xd70 <fputc+0x36>
 d56:	2e 81       	ldd	r18, Y+6	; 0x06
 d58:	3f 81       	ldd	r19, Y+7	; 0x07
 d5a:	8c 81       	ldd	r24, Y+4	; 0x04
 d5c:	9d 81       	ldd	r25, Y+5	; 0x05
 d5e:	28 17       	cp	r18, r24
 d60:	39 07       	cpc	r19, r25
 d62:	64 f4       	brge	.+24     	; 0xd7c <fputc+0x42>
 d64:	e8 81       	ld	r30, Y
 d66:	f9 81       	ldd	r31, Y+1	; 0x01
 d68:	01 93       	st	Z+, r16
 d6a:	f9 83       	std	Y+1, r31	; 0x01
 d6c:	e8 83       	st	Y, r30
 d6e:	06 c0       	rjmp	.+12     	; 0xd7c <fputc+0x42>
 d70:	e8 85       	ldd	r30, Y+8	; 0x08
 d72:	f9 85       	ldd	r31, Y+9	; 0x09
 d74:	80 2f       	mov	r24, r16
 d76:	09 95       	icall
 d78:	89 2b       	or	r24, r25
 d7a:	41 f7       	brne	.-48     	; 0xd4c <fputc+0x12>
 d7c:	8e 81       	ldd	r24, Y+6	; 0x06
 d7e:	9f 81       	ldd	r25, Y+7	; 0x07
 d80:	01 96       	adiw	r24, 0x01	; 1
 d82:	9f 83       	std	Y+7, r25	; 0x07
 d84:	8e 83       	std	Y+6, r24	; 0x06
 d86:	c8 01       	movw	r24, r16
 d88:	df 91       	pop	r29
 d8a:	cf 91       	pop	r28
 d8c:	1f 91       	pop	r17
 d8e:	0f 91       	pop	r16
 d90:	08 95       	ret

00000d92 <__ultoa_invert>:
 d92:	fa 01       	movw	r30, r20
 d94:	aa 27       	eor	r26, r26
 d96:	28 30       	cpi	r18, 0x08	; 8
 d98:	51 f1       	breq	.+84     	; 0xdee <__ultoa_invert+0x5c>
 d9a:	20 31       	cpi	r18, 0x10	; 16
 d9c:	81 f1       	breq	.+96     	; 0xdfe <__ultoa_invert+0x6c>
 d9e:	e8 94       	clt
 da0:	6f 93       	push	r22
 da2:	6e 7f       	andi	r22, 0xFE	; 254
 da4:	6e 5f       	subi	r22, 0xFE	; 254
 da6:	7f 4f       	sbci	r23, 0xFF	; 255
 da8:	8f 4f       	sbci	r24, 0xFF	; 255
 daa:	9f 4f       	sbci	r25, 0xFF	; 255
 dac:	af 4f       	sbci	r26, 0xFF	; 255
 dae:	b1 e0       	ldi	r27, 0x01	; 1
 db0:	3e d0       	rcall	.+124    	; 0xe2e <__ultoa_invert+0x9c>
 db2:	b4 e0       	ldi	r27, 0x04	; 4
 db4:	3c d0       	rcall	.+120    	; 0xe2e <__ultoa_invert+0x9c>
 db6:	67 0f       	add	r22, r23
 db8:	78 1f       	adc	r23, r24
 dba:	89 1f       	adc	r24, r25
 dbc:	9a 1f       	adc	r25, r26
 dbe:	a1 1d       	adc	r26, r1
 dc0:	68 0f       	add	r22, r24
 dc2:	79 1f       	adc	r23, r25
 dc4:	8a 1f       	adc	r24, r26
 dc6:	91 1d       	adc	r25, r1
 dc8:	a1 1d       	adc	r26, r1
 dca:	6a 0f       	add	r22, r26
 dcc:	71 1d       	adc	r23, r1
 dce:	81 1d       	adc	r24, r1
 dd0:	91 1d       	adc	r25, r1
 dd2:	a1 1d       	adc	r26, r1
 dd4:	20 d0       	rcall	.+64     	; 0xe16 <__ultoa_invert+0x84>
 dd6:	09 f4       	brne	.+2      	; 0xdda <__ultoa_invert+0x48>
 dd8:	68 94       	set
 dda:	3f 91       	pop	r19
 ddc:	2a e0       	ldi	r18, 0x0A	; 10
 dde:	26 9f       	mul	r18, r22
 de0:	11 24       	eor	r1, r1
 de2:	30 19       	sub	r19, r0
 de4:	30 5d       	subi	r19, 0xD0	; 208
 de6:	31 93       	st	Z+, r19
 de8:	de f6       	brtc	.-74     	; 0xda0 <__ultoa_invert+0xe>
 dea:	cf 01       	movw	r24, r30
 dec:	08 95       	ret
 dee:	46 2f       	mov	r20, r22
 df0:	47 70       	andi	r20, 0x07	; 7
 df2:	40 5d       	subi	r20, 0xD0	; 208
 df4:	41 93       	st	Z+, r20
 df6:	b3 e0       	ldi	r27, 0x03	; 3
 df8:	0f d0       	rcall	.+30     	; 0xe18 <__ultoa_invert+0x86>
 dfa:	c9 f7       	brne	.-14     	; 0xdee <__ultoa_invert+0x5c>
 dfc:	f6 cf       	rjmp	.-20     	; 0xdea <__ultoa_invert+0x58>
 dfe:	46 2f       	mov	r20, r22
 e00:	4f 70       	andi	r20, 0x0F	; 15
 e02:	40 5d       	subi	r20, 0xD0	; 208
 e04:	4a 33       	cpi	r20, 0x3A	; 58
 e06:	18 f0       	brcs	.+6      	; 0xe0e <__ultoa_invert+0x7c>
 e08:	49 5d       	subi	r20, 0xD9	; 217
 e0a:	31 fd       	sbrc	r19, 1
 e0c:	40 52       	subi	r20, 0x20	; 32
 e0e:	41 93       	st	Z+, r20
 e10:	02 d0       	rcall	.+4      	; 0xe16 <__ultoa_invert+0x84>
 e12:	a9 f7       	brne	.-22     	; 0xdfe <__ultoa_invert+0x6c>
 e14:	ea cf       	rjmp	.-44     	; 0xdea <__ultoa_invert+0x58>
 e16:	b4 e0       	ldi	r27, 0x04	; 4
 e18:	a6 95       	lsr	r26
 e1a:	97 95       	ror	r25
 e1c:	87 95       	ror	r24
 e1e:	77 95       	ror	r23
 e20:	67 95       	ror	r22
 e22:	ba 95       	dec	r27
 e24:	c9 f7       	brne	.-14     	; 0xe18 <__ultoa_invert+0x86>
 e26:	00 97       	sbiw	r24, 0x00	; 0
 e28:	61 05       	cpc	r22, r1
 e2a:	71 05       	cpc	r23, r1
 e2c:	08 95       	ret
 e2e:	9b 01       	movw	r18, r22
 e30:	ac 01       	movw	r20, r24
 e32:	0a 2e       	mov	r0, r26
 e34:	06 94       	lsr	r0
 e36:	57 95       	ror	r21
 e38:	47 95       	ror	r20
 e3a:	37 95       	ror	r19
 e3c:	27 95       	ror	r18
 e3e:	ba 95       	dec	r27
 e40:	c9 f7       	brne	.-14     	; 0xe34 <__ultoa_invert+0xa2>
 e42:	62 0f       	add	r22, r18
 e44:	73 1f       	adc	r23, r19
 e46:	84 1f       	adc	r24, r20
 e48:	95 1f       	adc	r25, r21
 e4a:	a0 1d       	adc	r26, r0
 e4c:	08 95       	ret

00000e4e <__prologue_saves__>:
 e4e:	2f 92       	push	r2
 e50:	3f 92       	push	r3
 e52:	4f 92       	push	r4
 e54:	5f 92       	push	r5
 e56:	6f 92       	push	r6
 e58:	7f 92       	push	r7
 e5a:	8f 92       	push	r8
 e5c:	9f 92       	push	r9
 e5e:	af 92       	push	r10
 e60:	bf 92       	push	r11
 e62:	cf 92       	push	r12
 e64:	df 92       	push	r13
 e66:	ef 92       	push	r14
 e68:	ff 92       	push	r15
 e6a:	0f 93       	push	r16
 e6c:	1f 93       	push	r17
 e6e:	cf 93       	push	r28
 e70:	df 93       	push	r29
 e72:	cd b7       	in	r28, 0x3d	; 61
 e74:	de b7       	in	r29, 0x3e	; 62
 e76:	ca 1b       	sub	r28, r26
 e78:	db 0b       	sbc	r29, r27
 e7a:	0f b6       	in	r0, 0x3f	; 63
 e7c:	f8 94       	cli
 e7e:	de bf       	out	0x3e, r29	; 62
 e80:	0f be       	out	0x3f, r0	; 63
 e82:	cd bf       	out	0x3d, r28	; 61
 e84:	09 94       	ijmp

00000e86 <__epilogue_restores__>:
 e86:	2a 88       	ldd	r2, Y+18	; 0x12
 e88:	39 88       	ldd	r3, Y+17	; 0x11
 e8a:	48 88       	ldd	r4, Y+16	; 0x10
 e8c:	5f 84       	ldd	r5, Y+15	; 0x0f
 e8e:	6e 84       	ldd	r6, Y+14	; 0x0e
 e90:	7d 84       	ldd	r7, Y+13	; 0x0d
 e92:	8c 84       	ldd	r8, Y+12	; 0x0c
 e94:	9b 84       	ldd	r9, Y+11	; 0x0b
 e96:	aa 84       	ldd	r10, Y+10	; 0x0a
 e98:	b9 84       	ldd	r11, Y+9	; 0x09
 e9a:	c8 84       	ldd	r12, Y+8	; 0x08
 e9c:	df 80       	ldd	r13, Y+7	; 0x07
 e9e:	ee 80       	ldd	r14, Y+6	; 0x06
 ea0:	fd 80       	ldd	r15, Y+5	; 0x05
 ea2:	0c 81       	ldd	r16, Y+4	; 0x04
 ea4:	1b 81       	ldd	r17, Y+3	; 0x03
 ea6:	aa 81       	ldd	r26, Y+2	; 0x02
 ea8:	b9 81       	ldd	r27, Y+1	; 0x01
 eaa:	ce 0f       	add	r28, r30
 eac:	d1 1d       	adc	r29, r1
 eae:	0f b6       	in	r0, 0x3f	; 63
 eb0:	f8 94       	cli
 eb2:	de bf       	out	0x3e, r29	; 62
 eb4:	0f be       	out	0x3f, r0	; 63
 eb6:	cd bf       	out	0x3d, r28	; 61
 eb8:	ed 01       	movw	r28, r26
 eba:	08 95       	ret

00000ebc <_exit>:
 ebc:	f8 94       	cli

00000ebe <__stop_program>:
 ebe:	ff cf       	rjmp	.-2      	; 0xebe <__stop_program>
