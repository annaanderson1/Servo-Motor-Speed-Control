
Servo-Motor-Speed-Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002bc  00000350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000350  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e0  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000371  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027c  00000000  00000000  00000d81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d4  00000000  00000000  00001000  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a8  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000343  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000017bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	9b c0       	rjmp	.+310    	; 0x140 <__vector_4>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	e0 c0       	rjmp	.+448    	; 0x1e6 <__vector_18>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a9 30       	cpi	r26, 0x09	; 9
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	1a d1       	rcall	.+564    	; 0x286 <main>
  52:	32 c1       	rjmp	.+612    	; 0x2b8 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <setup_DDR>:
/* PRIVATE FUNCTIONS                                                    */
/************************************************************************/

void setup_DDR(){
	
	DDRB = 0x00;										// no output
  56:	14 b8       	out	0x04, r1	; 4
	DDRC = (1 << PC2) | (1 << PC1) | (1 << PC0);		// PC0-PC2 output
  58:	87 e0       	ldi	r24, 0x07	; 7
  5a:	87 b9       	out	0x07, r24	; 7
	DDRD = (1 << PD6) | (1 << PD5) | (1 << PD1);		// PD1, PD5 & PD6 output
  5c:	82 e6       	ldi	r24, 0x62	; 98
  5e:	8a b9       	out	0x0a, r24	; 10
  60:	08 95       	ret

00000062 <setup_PORT>:
	
}

void setup_PORT(){
		
	PORTB = 0x00;
  62:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;//(1 << PC2) | (1 << PC1) | (1 << PC0);		// Turns on LEDs
  64:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
  66:	1b b8       	out	0x0b, r1	; 11
  68:	08 95       	ret

0000006a <setup_PWM>:
}

// Sets up PWM on PD6
void setup_PWM(){
	
	TCCR0A = (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0) | (1 << WGM01) | (1 << WGM00);		// fast PWM, inverting (pg.113, 115)
  6a:	83 ef       	ldi	r24, 0xF3	; 243
  6c:	84 bd       	out	0x24, r24	; 36
	TCCR0B =  (0 << CS02) | (0 << CS01) | (1 << CS00);							// no pre scaling  (pg. 117)
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	85 bd       	out	0x25, r24	; 37
  72:	08 95       	ret

00000074 <setup_USART>:

}

void setup_USART(){
	
	DDRD |= (1 << PD1);
  74:	51 9a       	sbi	0x0a, 1	; 10
	unsigned int ubrr = (((F_CPU / (BAUD * 16UL))) - 1 );
	
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
  76:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
  7a:	89 e1       	ldi	r24, 0x19	; 25
  7c:	80 93 c4 00 	sts	0x00C4, r24
		
	// Enable reciever for interrupt and transmitter (pg. 202)
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0);
  80:	88 e9       	ldi	r24, 0x98	; 152
  82:	80 93 c1 00 	sts	0x00C1, r24
	
	// Set frame format: 8 data, 2 stop, 0 parity (pg. 204)
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  86:	86 e0       	ldi	r24, 0x06	; 6
  88:	80 93 c2 00 	sts	0x00C2, r24
  8c:	08 95       	ret

0000008e <turnOff_C>:
	
}

/* Turns off output on selected pin on PORTC */
void turnOff_C(int pin){
	PORTC &= ~(1 << pin);
  8e:	98 b1       	in	r25, 0x08	; 8
  90:	21 e0       	ldi	r18, 0x01	; 1
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <turnOff_C+0xc>
  96:	22 0f       	add	r18, r18
  98:	33 1f       	adc	r19, r19
  9a:	8a 95       	dec	r24
  9c:	e2 f7       	brpl	.-8      	; 0x96 <turnOff_C+0x8>
  9e:	20 95       	com	r18
  a0:	92 23       	and	r25, r18
  a2:	98 b9       	out	0x08, r25	; 8
  a4:	08 95       	ret

000000a6 <turnOn_C>:
	 
}
/* Turns on output on selected pin on PORTC */
void turnOn_C(int pin){
	PORTC |= (1 << pin);
  a6:	48 b1       	in	r20, 0x08	; 8
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	b9 01       	movw	r22, r18
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <turnOn_C+0xe>
  b0:	66 0f       	add	r22, r22
  b2:	77 1f       	adc	r23, r23
  b4:	8a 95       	dec	r24
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <turnOn_C+0xa>
  b8:	cb 01       	movw	r24, r22
  ba:	84 2b       	or	r24, r20
  bc:	88 b9       	out	0x08, r24	; 8
  be:	08 95       	ret

000000c0 <clockwise>:
}

/* Routine for clockwise rotation of encoder */
void clockwise(){
	turnOff_C(PC2);
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	e4 df       	rcall	.-56     	; 0x8e <turnOff_C>
	turnOn_C(PC0);
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	ed df       	rcall	.-38     	; 0xa6 <turnOn_C>
	if(pwm < 245){
  cc:	80 91 07 01 	lds	r24, 0x0107
  d0:	90 91 08 01 	lds	r25, 0x0108
  d4:	85 3f       	cpi	r24, 0xF5	; 245
  d6:	91 05       	cpc	r25, r1
  d8:	30 f4       	brcc	.+12     	; 0xe6 <clockwise+0x26>
		pwm += 10;
  da:	0a 96       	adiw	r24, 0x0a	; 10
  dc:	90 93 08 01 	sts	0x0108, r25
  e0:	80 93 07 01 	sts	0x0107, r24
  e4:	08 95       	ret
	}
	else{
		pwm = 255;
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	90 93 08 01 	sts	0x0108, r25
  ee:	80 93 07 01 	sts	0x0107, r24
  f2:	08 95       	ret

000000f4 <counterclockwise>:
	}
}

/* Routine for counterclockwise rotation of encoder */
void counterclockwise(){
	turnOff_C(PC0);
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	ca df       	rcall	.-108    	; 0x8e <turnOff_C>
	turnOn_C(PC2);
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	d3 df       	rcall	.-90     	; 0xa6 <turnOn_C>
	if(pwm > 10){
 100:	80 91 07 01 	lds	r24, 0x0107
 104:	90 91 08 01 	lds	r25, 0x0108
 108:	8b 30       	cpi	r24, 0x0B	; 11
 10a:	91 05       	cpc	r25, r1
 10c:	30 f0       	brcs	.+12     	; 0x11a <counterclockwise+0x26>
		pwm -= 10;
 10e:	0a 97       	sbiw	r24, 0x0a	; 10
 110:	90 93 08 01 	sts	0x0108, r25
 114:	80 93 07 01 	sts	0x0107, r24
 118:	08 95       	ret
	}
	else{
		pwm = 0;
 11a:	10 92 08 01 	sts	0x0108, r1
 11e:	10 92 07 01 	sts	0x0107, r1
 122:	08 95       	ret

00000124 <setup_registers>:
/************************************************************************/

/* Initial setup of registers */ 
void setup_registers(){
	
	setup_DDR();
 124:	98 df       	rcall	.-208    	; 0x56 <setup_DDR>
	setup_PORT();	
 126:	9d df       	rcall	.-198    	; 0x62 <setup_PORT>
	setup_PWM();
 128:	a0 df       	rcall	.-192    	; 0x6a <setup_PWM>
	setup_USART();
 12a:	a4 df       	rcall	.-184    	; 0x74 <setup_USART>
}


void setup_interrupts(){
	
	PCICR = (1 << PCIE1);						// Enables possibility of interrupts on pins 14-8
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	80 93 68 00 	sts	0x0068, r24
 132:	08 95       	ret

00000134 <set_trigger>:
}

/* Sets the PWM trigger value*/ 
Registers* set_trigger(Registers* reg, int setValue){
	
	reg->setValue = setValue;
 134:	fc 01       	movw	r30, r24
 136:	60 83       	st	Z, r22
 138:	71 83       	std	Z+1, r23	; 0x01
	OCR0A = setValue;
 13a:	67 bd       	out	0x27, r22	; 39
	OCR0B = setValue;
 13c:	68 bd       	out	0x28, r22	; 40
	
	return reg;
}
 13e:	08 95       	ret

00000140 <__vector_4>:
/************************************************************************/
/* INTERRUPT SERVICE ROUTINES											*/
/************************************************************************/

/* ISR for PCINT14-8 */
ISR(PCINT1_vect){
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	4f 93       	push	r20
 150:	5f 93       	push	r21
 152:	6f 93       	push	r22
 154:	7f 93       	push	r23
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	
	unsigned int ABnew = 0x00;
	unsigned int A = 0x00;
	unsigned int B = 0x00;
	
	A = (PINC & (1 << PC5));
 166:	c6 b1       	in	r28, 0x06	; 6
 168:	c0 72       	andi	r28, 0x20	; 32
 16a:	d0 e0       	ldi	r29, 0x00	; 0
	A = (A >> (PC5 - 1));	// Sets A in pos 1
	
	B = (PINC & (1 << PC4));
 16c:	26 b1       	in	r18, 0x06	; 6
	B = (B >> PC4);			// Sets B in pos 0
 16e:	24 fb       	bst	r18, 4
 170:	88 27       	eor	r24, r24
 172:	80 f9       	bld	r24, 0
 174:	90 e0       	ldi	r25, 0x00	; 0
	unsigned int ABnew = 0x00;
	unsigned int A = 0x00;
	unsigned int B = 0x00;
	
	A = (PINC & (1 << PC5));
	A = (A >> (PC5 - 1));	// Sets A in pos 1
 176:	d2 95       	swap	r29
 178:	c2 95       	swap	r28
 17a:	cf 70       	andi	r28, 0x0F	; 15
 17c:	cd 27       	eor	r28, r29
 17e:	df 70       	andi	r29, 0x0F	; 15
 180:	cd 27       	eor	r28, r29
	
	B = (PINC & (1 << PC4));
	B = (B >> PC4);			// Sets B in pos 0
	
	ABnew = A | B;
 182:	c8 2b       	or	r28, r24
 184:	d9 2b       	or	r29, r25
	
	switch(ABnew){
 186:	20 97       	sbiw	r28, 0x00	; 0
 188:	21 f0       	breq	.+8      	; 0x192 <__vector_4+0x52>
 18a:	c1 30       	cpi	r28, 0x01	; 1
 18c:	d1 05       	cpc	r29, r1
 18e:	59 f0       	breq	.+22     	; 0x1a6 <__vector_4+0x66>
 190:	13 c0       	rjmp	.+38     	; 0x1b8 <__vector_4+0x78>
		case 0:	
			if(AB == 2){
 192:	80 91 05 01 	lds	r24, 0x0105
 196:	90 91 06 01 	lds	r25, 0x0106
 19a:	02 97       	sbiw	r24, 0x02	; 2
 19c:	11 f4       	brne	.+4      	; 0x1a2 <__vector_4+0x62>
				clockwise();
 19e:	90 df       	rcall	.-224    	; 0xc0 <clockwise>
 1a0:	0b c0       	rjmp	.+22     	; 0x1b8 <__vector_4+0x78>
			}
			else{
				counterclockwise();
 1a2:	a8 df       	rcall	.-176    	; 0xf4 <counterclockwise>
 1a4:	09 c0       	rjmp	.+18     	; 0x1b8 <__vector_4+0x78>
			}
			break;
		
		case 1:
			if(AB == 0){
 1a6:	80 91 05 01 	lds	r24, 0x0105
 1aa:	90 91 06 01 	lds	r25, 0x0106
 1ae:	89 2b       	or	r24, r25
 1b0:	11 f4       	brne	.+4      	; 0x1b6 <__vector_4+0x76>
				clockwise();
 1b2:	86 df       	rcall	.-244    	; 0xc0 <clockwise>
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <__vector_4+0x78>
			}
			else{
				counterclockwise();
 1b6:	9e df       	rcall	.-196    	; 0xf4 <counterclockwise>
			}
			break;
	}
	AB = ABnew;
 1b8:	d0 93 06 01 	sts	0x0106, r29
 1bc:	c0 93 05 01 	sts	0x0105, r28

}
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	bf 91       	pop	r27
 1ca:	af 91       	pop	r26
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	7f 91       	pop	r23
 1d2:	6f 91       	pop	r22
 1d4:	5f 91       	pop	r21
 1d6:	4f 91       	pop	r20
 1d8:	3f 91       	pop	r19
 1da:	2f 91       	pop	r18
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_18>:

/* ISR for serial receiver */
ISR(USART_RX_vect){
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	2f 93       	push	r18
 1f2:	3f 93       	push	r19
 1f4:	4f 93       	push	r20
 1f6:	6f 93       	push	r22
 1f8:	7f 93       	push	r23
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
	cli();
 20a:	f8 94       	cli
	PORTC &= ~(1 << PC2);
 20c:	42 98       	cbi	0x08, 2	; 8
	PORTC |= (1 << PC1);
 20e:	41 9a       	sbi	0x08, 1	; 8
 210:	a0 e0       	ldi	r26, 0x00	; 0
 212:	b1 e0       	ldi	r27, 0x01	; 1
 214:	bd 01       	movw	r22, r26
 216:	25 e0       	ldi	r18, 0x05	; 5
 218:	31 e0       	ldi	r19, 0x01	; 1
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
 21a:	e0 ec       	ldi	r30, 0xC0	; 192
 21c:	f0 e0       	ldi	r31, 0x00	; 0
		recieved_bytes[i] = UDR0;
 21e:	c6 ec       	ldi	r28, 0xC6	; 198
 220:	d0 e0       	ldi	r29, 0x00	; 0
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
 222:	40 81       	ld	r20, Z
 224:	44 23       	and	r20, r20
 226:	ec f7       	brge	.-6      	; 0x222 <__vector_18+0x3c>
		recieved_bytes[i] = UDR0;
 228:	48 81       	ld	r20, Y
 22a:	4d 93       	st	X+, r20
/* ISR for serial receiver */
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
 22c:	a2 17       	cp	r26, r18
 22e:	b3 07       	cpc	r27, r19
 230:	c1 f7       	brne	.-16     	; 0x222 <__vector_18+0x3c>
		while( !(UCSR0A & (1 << RXC0)) );
		recieved_bytes[i] = UDR0;
	}
	PORTC &= ~(1 << PC1);
 232:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (1 << PC0);
 234:	40 9a       	sbi	0x08, 0	; 8
 236:	a5 e0       	ldi	r26, 0x05	; 5
 238:	b1 e0       	ldi	r27, 0x01	; 1
	for(int i = 4; i > -1; i--){
		while( !(UCSR0A & (1 << UDRE0)) );
 23a:	e0 ec       	ldi	r30, 0xC0	; 192
 23c:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = recieved_bytes[i];
 23e:	c6 ec       	ldi	r28, 0xC6	; 198
 240:	d0 e0       	ldi	r29, 0x00	; 0
		recieved_bytes[i] = UDR0;
	}
	PORTC &= ~(1 << PC1);
	PORTC |= (1 << PC0);
	for(int i = 4; i > -1; i--){
		while( !(UCSR0A & (1 << UDRE0)) );
 242:	20 81       	ld	r18, Z
 244:	25 ff       	sbrs	r18, 5
 246:	fd cf       	rjmp	.-6      	; 0x242 <__vector_18+0x5c>
		UDR0 = recieved_bytes[i];
 248:	2e 91       	ld	r18, -X
 24a:	28 83       	st	Y, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	9f e3       	ldi	r25, 0x3F	; 63
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <__vector_18+0x6a>
 254:	00 c0       	rjmp	.+0      	; 0x256 <__vector_18+0x70>
		while( !(UCSR0A & (1 << RXC0)) );
		recieved_bytes[i] = UDR0;
	}
	PORTC &= ~(1 << PC1);
	PORTC |= (1 << PC0);
	for(int i = 4; i > -1; i--){
 256:	a6 17       	cp	r26, r22
 258:	b7 07       	cpc	r27, r23
 25a:	99 f7       	brne	.-26     	; 0x242 <__vector_18+0x5c>
		while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = recieved_bytes[i];
		_delay_ms(100);
	}
	PORTC &= ~(1 << PC0);
 25c:	40 98       	cbi	0x08, 0	; 8
	
	PORTC |= (1 << PC2);
 25e:	42 9a       	sbi	0x08, 2	; 8
	sei();
 260:	78 94       	sei
}
 262:	ff 91       	pop	r31
 264:	ef 91       	pop	r30
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	bf 91       	pop	r27
 26c:	af 91       	pop	r26
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	7f 91       	pop	r23
 274:	6f 91       	pop	r22
 276:	4f 91       	pop	r20
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <main>:
unsigned int AB;
unsigned int pwm;
unsigned char recieved_bytes[5];


int main(void){
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	00 d0       	rcall	.+0      	; 0x28c <main+0x6>
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
	Registers registers;
	Registers *reg = &registers;
	AB = 0;
 290:	10 92 06 01 	sts	0x0106, r1
 294:	10 92 05 01 	sts	0x0105, r1
	pwm = 50;
 298:	82 e3       	ldi	r24, 0x32	; 50
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	90 93 08 01 	sts	0x0108, r25
 2a0:	80 93 07 01 	sts	0x0107, r24

	setup_registers();
 2a4:	3f df       	rcall	.-386    	; 0x124 <setup_registers>
	sei();
 2a6:	78 94       	sei
unsigned char recieved_bytes[5];


int main(void){
	Registers registers;
	Registers *reg = &registers;
 2a8:	ce 01       	movw	r24, r28
 2aa:	01 96       	adiw	r24, 0x01	; 1
	setup_registers();
	sei();
	unsigned char serial_flag = 'a';
	while(1){
		
		reg = set_trigger(reg, pwm);
 2ac:	60 91 07 01 	lds	r22, 0x0107
 2b0:	70 91 08 01 	lds	r23, 0x0108
 2b4:	3f df       	rcall	.-386    	; 0x134 <set_trigger>
 2b6:	fa cf       	rjmp	.-12     	; 0x2ac <main+0x26>

000002b8 <_exit>:
 2b8:	f8 94       	cli

000002ba <__stop_program>:
 2ba:	ff cf       	rjmp	.-2      	; 0x2ba <__stop_program>
