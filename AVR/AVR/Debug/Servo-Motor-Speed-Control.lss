
Servo-Motor-Speed-Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000014ec  00001580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080011c  0080011c  0000159c  2**0
                  ALLOC
  3 .stab         00000f3c  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000356  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000282e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000198  00000000  00000000  0000285d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b99  00000000  00000000  000029f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bb3  00000000  00000000  0000458e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000cb3  00000000  00000000  00005141  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000568  00000000  00000000  00005df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000606  00000000  00000000  0000635c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000017d9  00000000  00000000  00006962  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000168  00000000  00000000  0000813b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	22 c0       	rjmp	.+68     	; 0x46 <__ctors_end>
       2:	3c c0       	rjmp	.+120    	; 0x7c <__bad_interrupt>
       4:	3b c0       	rjmp	.+118    	; 0x7c <__bad_interrupt>
       6:	3a c0       	rjmp	.+116    	; 0x7c <__bad_interrupt>
       8:	b2 c1       	rjmp	.+868    	; 0x36e <__vector_4>
       a:	38 c0       	rjmp	.+112    	; 0x7c <__bad_interrupt>
       c:	37 c0       	rjmp	.+110    	; 0x7c <__bad_interrupt>
       e:	36 c0       	rjmp	.+108    	; 0x7c <__bad_interrupt>
      10:	35 c0       	rjmp	.+106    	; 0x7c <__bad_interrupt>
      12:	eb c1       	rjmp	.+982    	; 0x3ea <__vector_9>
      14:	33 c0       	rjmp	.+102    	; 0x7c <__bad_interrupt>
      16:	32 c0       	rjmp	.+100    	; 0x7c <__bad_interrupt>
      18:	31 c0       	rjmp	.+98     	; 0x7c <__bad_interrupt>
      1a:	30 c0       	rjmp	.+96     	; 0x7c <__bad_interrupt>
      1c:	2f c0       	rjmp	.+94     	; 0x7c <__bad_interrupt>
      1e:	2e c0       	rjmp	.+92     	; 0x7c <__bad_interrupt>
      20:	2d c0       	rjmp	.+90     	; 0x7c <__bad_interrupt>
      22:	2c c0       	rjmp	.+88     	; 0x7c <__bad_interrupt>
      24:	5f c3       	rjmp	.+1726   	; 0x6e4 <__vector_18>
      26:	2a c0       	rjmp	.+84     	; 0x7c <__bad_interrupt>
      28:	29 c0       	rjmp	.+82     	; 0x7c <__bad_interrupt>
      2a:	28 c0       	rjmp	.+80     	; 0x7c <__bad_interrupt>
      2c:	27 c0       	rjmp	.+78     	; 0x7c <__bad_interrupt>
      2e:	26 c0       	rjmp	.+76     	; 0x7c <__bad_interrupt>
      30:	25 c0       	rjmp	.+74     	; 0x7c <__bad_interrupt>
      32:	24 c0       	rjmp	.+72     	; 0x7c <__bad_interrupt>
      34:	0c c4       	rjmp	.+2072   	; 0x84e <main+0x7c>
      36:	12 c4       	rjmp	.+2084   	; 0x85c <main+0x8a>
      38:	17 c4       	rjmp	.+2094   	; 0x868 <main+0x96>
      3a:	1c c4       	rjmp	.+2104   	; 0x874 <main+0xa2>
      3c:	21 c4       	rjmp	.+2114   	; 0x880 <main+0xae>
      3e:	26 c4       	rjmp	.+2124   	; 0x88c <main+0xba>
      40:	2b c4       	rjmp	.+2134   	; 0x898 <main+0xc6>
      42:	30 c4       	rjmp	.+2144   	; 0x8a4 <main+0xd2>
      44:	35 c4       	rjmp	.+2154   	; 0x8b0 <main+0xde>

00000046 <__ctors_end>:
      46:	11 24       	eor	r1, r1
      48:	1f be       	out	0x3f, r1	; 63
      4a:	cf ef       	ldi	r28, 0xFF	; 255
      4c:	d4 e0       	ldi	r29, 0x04	; 4
      4e:	de bf       	out	0x3e, r29	; 62
      50:	cd bf       	out	0x3d, r28	; 61

00000052 <__do_copy_data>:
      52:	11 e0       	ldi	r17, 0x01	; 1
      54:	a0 e0       	ldi	r26, 0x00	; 0
      56:	b1 e0       	ldi	r27, 0x01	; 1
      58:	ec ee       	ldi	r30, 0xEC	; 236
      5a:	f4 e1       	ldi	r31, 0x14	; 20
      5c:	02 c0       	rjmp	.+4      	; 0x62 <__do_copy_data+0x10>
      5e:	05 90       	lpm	r0, Z+
      60:	0d 92       	st	X+, r0
      62:	ac 31       	cpi	r26, 0x1C	; 28
      64:	b1 07       	cpc	r27, r17
      66:	d9 f7       	brne	.-10     	; 0x5e <__do_copy_data+0xc>

00000068 <__do_clear_bss>:
      68:	21 e0       	ldi	r18, 0x01	; 1
      6a:	ac e1       	ldi	r26, 0x1C	; 28
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	01 c0       	rjmp	.+2      	; 0x72 <.do_clear_bss_start>

00000070 <.do_clear_bss_loop>:
      70:	1d 92       	st	X+, r1

00000072 <.do_clear_bss_start>:
      72:	ab 32       	cpi	r26, 0x2B	; 43
      74:	b2 07       	cpc	r27, r18
      76:	e1 f7       	brne	.-8      	; 0x70 <.do_clear_bss_loop>
      78:	ac d3       	rcall	.+1880   	; 0x7d2 <main>
      7a:	36 ca       	rjmp	.-2964   	; 0xfffff4e8 <__eeprom_end+0xff7ef4e8>

0000007c <__bad_interrupt>:
      7c:	c1 cf       	rjmp	.-126    	; 0x0 <__vectors>

0000007e <init_shared_data>:
} Shared_Data;

/*
 * Initiates the struct variables.
*/
void init_shared_data(Shared_Data* shared_ptr){
      7e:	fc 01       	movw	r30, r24
	shared_ptr->speed_set = 0;
      80:	11 82       	std	Z+1, r1	; 0x01
      82:	10 82       	st	Z, r1
	shared_ptr->pwm = 0;
      84:	13 82       	std	Z+3, r1	; 0x03
      86:	12 82       	std	Z+2, r1	; 0x02
	shared_ptr->error = 0;
      88:	15 82       	std	Z+5, r1	; 0x05
      8a:	14 82       	std	Z+4, r1	; 0x04
	shared_ptr->fine_tuning = 0;
      8c:	17 82       	std	Z+7, r1	; 0x07
      8e:	16 82       	std	Z+6, r1	; 0x06
	shared_ptr->integral = 0;
      90:	10 86       	std	Z+8, r1	; 0x08
      92:	11 86       	std	Z+9, r1	; 0x09
      94:	12 86       	std	Z+10, r1	; 0x0a
      96:	13 86       	std	Z+11, r1	; 0x0b
      98:	14 86       	std	Z+12, r1	; 0x0c
      9a:	15 86       	std	Z+13, r1	; 0x0d
      9c:	16 86       	std	Z+14, r1	; 0x0e
      9e:	17 86       	std	Z+15, r1	; 0x0f
	shared_ptr->rpm_curr = 0;
      a0:	10 8a       	std	Z+16, r1	; 0x10
      a2:	11 8a       	std	Z+17, r1	; 0x11
      a4:	12 8a       	std	Z+18, r1	; 0x12
      a6:	13 8a       	std	Z+19, r1	; 0x13
	shared_ptr->rpm_avg = 0;
      a8:	14 8a       	std	Z+20, r1	; 0x14
      aa:	15 8a       	std	Z+21, r1	; 0x15
      ac:	16 8a       	std	Z+22, r1	; 0x16
      ae:	17 8a       	std	Z+23, r1	; 0x17
	shared_ptr->delta_time = 0;
      b0:	e8 5e       	subi	r30, 0xE8	; 232
      b2:	fd 4f       	sbci	r31, 0xFD	; 253
      b4:	10 82       	st	Z, r1
      b6:	11 82       	std	Z+1, r1	; 0x01
      b8:	12 82       	std	Z+2, r1	; 0x02
      ba:	13 82       	std	Z+3, r1	; 0x03
      bc:	08 95       	ret

000000be <set_prescale>:

/* 
 *
*/
static void set_prescale(int ps){
	if (ps == 1){
      be:	81 30       	cpi	r24, 0x01	; 1
      c0:	91 05       	cpc	r25, r1
      c2:	39 f4       	brne	.+14     	; 0xd2 <set_prescale+0x14>
		TCCR1B &= ~ 0xff;
      c4:	e1 e8       	ldi	r30, 0x81	; 129
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	80 81       	ld	r24, Z
      ca:	10 82       	st	Z, r1
		TCCR1B = (1 << CS10);
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	80 83       	st	Z, r24
      d0:	08 95       	ret
	}
	else if(ps == 8){
      d2:	08 97       	sbiw	r24, 0x08	; 8
      d4:	31 f4       	brne	.+12     	; 0xe2 <set_prescale+0x24>
		TCCR1B &= ~ 0xff;
      d6:	e1 e8       	ldi	r30, 0x81	; 129
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	10 82       	st	Z, r1
		TCCR1B = (1 << CS11);
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	80 83       	st	Z, r24
      e2:	08 95       	ret

000000e4 <update_fine_tuning>:

/*
 * Updates the fine tuning value to first calculation since last function call.
 * Stores the value in shared_ptr->fine_tuning
*/
void update_fine_tuning(Shared_Data* shared_ptr){
      e4:	fc 01       	movw	r30, r24
	short fine_tuning;
	
	fine_tuning = ADCL;	
      e6:	80 91 78 00 	lds	r24, 0x0078
	fine_tuning |= (ADCH << 8);	// value: 0-1024
      ea:	90 91 79 00 	lds	r25, 0x0079
      ee:	39 2f       	mov	r19, r25
      f0:	20 e0       	ldi	r18, 0x00	; 0
      f2:	28 2b       	or	r18, r24
	TIFR1 |= (1 << TOV0);	// clear timer1 overflow flag
      f4:	b0 9a       	sbi	0x16, 0	; 22
	
	fine_tuning = (fine_tuning << 1);   // value: 0 - 2048
      f6:	c9 01       	movw	r24, r18
      f8:	88 0f       	add	r24, r24
      fa:	99 1f       	adc	r25, r25
	fine_tuning = fine_tuning - 1024;   // value: -1028 - 1028
      fc:	94 50       	subi	r25, 0x04	; 4
	fine_tuning = fine_tuning/100;		// value: -10 - 10
      fe:	64 e6       	ldi	r22, 0x64	; 100
     100:	70 e0       	ldi	r23, 0x00	; 0
     102:	d1 d5       	rcall	.+2978   	; 0xca6 <__divmodhi4>
	
	shared_ptr->fine_tuning = fine_tuning;
     104:	77 83       	std	Z+7, r23	; 0x07
     106:	66 83       	std	Z+6, r22	; 0x06
     108:	08 95       	ret

0000010a <calc_latest_rpm>:
/*	
 * Calculates the speed between two encoder-interrupts, using fixed point arithmetics.
 * Inserts the speed to the rpm-array in shared_ptr->rpm_measurements
 * Qm.n values defined in shared.h
*/
void calc_latest_rpm(Shared_Data* shared_ptr){
     10a:	4f 92       	push	r4
     10c:	5f 92       	push	r5
     10e:	6f 92       	push	r6
     110:	7f 92       	push	r7
     112:	8f 92       	push	r8
     114:	9f 92       	push	r9
     116:	af 92       	push	r10
     118:	bf 92       	push	r11
     11a:	cf 92       	push	r12
     11c:	df 92       	push	r13
     11e:	ef 92       	push	r14
     120:	ff 92       	push	r15
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
     12e:	28 97       	sbiw	r28, 0x08	; 8
     130:	0f b6       	in	r0, 0x3f	; 63
     132:	f8 94       	cli
     134:	de bf       	out	0x3e, r29	; 62
     136:	0f be       	out	0x3f, r0	; 63
     138:	cd bf       	out	0x3d, r28	; 61
     13a:	4c 01       	movw	r8, r24
	}
}

/*	Converts the difference in clk increments to microseconds */
static unsigned long calc_delta_time(Shared_Data* shared_ptr){
	unsigned short delta_clk = clk_elapsed;
     13c:	e0 90 27 01 	lds	r14, 0x0127
     140:	f0 90 28 01 	lds	r15, 0x0128

	// scales based on prescaling
	unsigned short prescale;
	
	if(shared_ptr->speed_set <= 20){
     144:	fc 01       	movw	r30, r24
     146:	80 81       	ld	r24, Z
     148:	91 81       	ldd	r25, Z+1	; 0x01
     14a:	45 97       	sbiw	r24, 0x15	; 21
     14c:	34 f4       	brge	.+12     	; 0x15a <calc_latest_rpm+0x50>
		prescale = 8;
		set_prescale(8);
     14e:	88 e0       	ldi	r24, 0x08	; 8
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	b5 df       	rcall	.-150    	; 0xbe <set_prescale>

	// scales based on prescaling
	unsigned short prescale;
	
	if(shared_ptr->speed_set <= 20){
		prescale = 8;
     154:	28 e0       	ldi	r18, 0x08	; 8
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	05 c0       	rjmp	.+10     	; 0x164 <calc_latest_rpm+0x5a>
		set_prescale(8);
	}
	else{
		prescale = 1;
		set_prescale(1);
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	af df       	rcall	.-162    	; 0xbe <set_prescale>
	if(shared_ptr->speed_set <= 20){
		prescale = 8;
		set_prescale(8);
	}
	else{
		prescale = 1;
     160:	21 e0       	ldi	r18, 0x01	; 1
     162:	30 e0       	ldi	r19, 0x00	; 0
		set_prescale(1);
	}

	unsigned long temp;

	temp = (unsigned long)delta_clk * prescale;
     164:	d7 01       	movw	r26, r14
     166:	b2 d5       	rcall	.+2916   	; 0xccc <__umulhisi3>
	unsigned long long denominator;
	unsigned long long rpm;
	
	delta_time = calc_delta_time(shared_ptr);
	
	delta_time = delta_time << N;
     168:	2b 01       	movw	r4, r22
     16a:	3c 01       	movw	r6, r24
     16c:	44 0c       	add	r4, r4
     16e:	55 1c       	adc	r5, r5
     170:	66 1c       	adc	r6, r6
     172:	77 1c       	adc	r7, r7
     174:	44 0c       	add	r4, r4
     176:	55 1c       	adc	r5, r5
     178:	66 1c       	adc	r6, r6
     17a:	77 1c       	adc	r7, r7
     17c:	44 0c       	add	r4, r4
     17e:	55 1c       	adc	r5, r5
     180:	66 1c       	adc	r6, r6
     182:	77 1c       	adc	r7, r7
     184:	44 0c       	add	r4, r4
     186:	55 1c       	adc	r5, r5
     188:	66 1c       	adc	r6, r6
     18a:	77 1c       	adc	r7, r7
	S_TO_MIN = S_TO_MIN << N;

	numerator = (unsigned long long)MS_TO_S * S_TO_MIN;
	numerator = numerator >> N;

	denominator = (unsigned long long)delta_rev_inverse * delta_time;
     18c:	a3 01       	movw	r20, r6
     18e:	92 01       	movw	r18, r4
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	cb 01       	movw	r24, r22
     196:	49 82       	std	Y+1, r4	; 0x01
     198:	3a 83       	std	Y+2, r19	; 0x02
     19a:	4b 83       	std	Y+3, r20	; 0x03
     19c:	5c 83       	std	Y+4, r21	; 0x04
     19e:	6d 83       	std	Y+5, r22	; 0x05
     1a0:	7e 83       	std	Y+6, r23	; 0x06
     1a2:	8f 83       	std	Y+7, r24	; 0x07
     1a4:	98 87       	std	Y+8, r25	; 0x08
     1a6:	a1 2c       	mov	r10, r1
     1a8:	0f 2e       	mov	r0, r31
     1aa:	f6 e0       	ldi	r31, 0x06	; 6
     1ac:	bf 2e       	mov	r11, r31
     1ae:	f0 2d       	mov	r31, r0
     1b0:	c1 2c       	mov	r12, r1
     1b2:	d1 2c       	mov	r13, r1
     1b4:	e1 2c       	mov	r14, r1
     1b6:	f1 2c       	mov	r15, r1
     1b8:	00 e0       	ldi	r16, 0x00	; 0
     1ba:	10 e0       	ldi	r17, 0x00	; 0
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	a6 d5       	rcall	.+2892   	; 0xd12 <__muldi3>
	denominator = denominator >> N;
     1c6:	04 e0       	ldi	r16, 0x04	; 4
     1c8:	52 d6       	rcall	.+3236   	; 0xe6e <__lshrdi3>
     1ca:	a2 2e       	mov	r10, r18
     1cc:	b3 2e       	mov	r11, r19
     1ce:	c4 2e       	mov	r12, r20
     1d0:	d5 2e       	mov	r13, r21
     1d2:	e6 2e       	mov	r14, r22
     1d4:	f7 2e       	mov	r15, r23
     1d6:	e8 2f       	mov	r30, r24
     1d8:	19 2f       	mov	r17, r25

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1);
     1da:	01 e0       	ldi	r16, 0x01	; 1
     1dc:	48 d6       	rcall	.+3216   	; 0xe6e <__lshrdi3>
     1de:	49 57       	subi	r20, 0x79	; 121
     1e0:	5c 46       	sbci	r21, 0x6C	; 108
     1e2:	6c 4f       	sbci	r22, 0xFC	; 252
     1e4:	7f 4f       	sbci	r23, 0xFF	; 255
     1e6:	8f 4f       	sbci	r24, 0xFF	; 255
     1e8:	9f 4f       	sbci	r25, 0xFF	; 255
	rpm = rpm / denominator;
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
     1ea:	d4 01       	movw	r26, r8
     1ec:	a8 5e       	subi	r26, 0xE8	; 232
     1ee:	bd 4f       	sbci	r27, 0xFD	; 253
     1f0:	68 94       	set
     1f2:	13 f8       	bld	r1, 3
     1f4:	76 94       	lsr	r7
     1f6:	67 94       	ror	r6
     1f8:	57 94       	ror	r5
     1fa:	47 94       	ror	r4
     1fc:	16 94       	lsr	r1
     1fe:	d1 f7       	brne	.-12     	; 0x1f4 <calc_latest_rpm+0xea>
     200:	4d 92       	st	X+, r4
     202:	5d 92       	st	X+, r5
     204:	6d 92       	st	X+, r6
     206:	7c 92       	st	X, r7
     208:	13 97       	sbiw	r26, 0x03	; 3
	denominator = (unsigned long long)delta_rev_inverse * delta_time;
	denominator = denominator >> N;

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1);
	rpm = rpm / denominator;
     20a:	0e 2f       	mov	r16, r30
     20c:	77 d5       	rcall	.+2798   	; 0xcfc <__udivdi3>
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
	shared_ptr->rpm_curr = (unsigned long)rpm >> N;	// Used for debugging
     20e:	82 2f       	mov	r24, r18
     210:	93 2f       	mov	r25, r19
     212:	a4 2f       	mov	r26, r20
     214:	b5 2f       	mov	r27, r21
     216:	72 2f       	mov	r23, r18
     218:	63 2f       	mov	r22, r19
     21a:	54 2f       	mov	r21, r20
     21c:	4b 2f       	mov	r20, r27
     21e:	68 94       	set
     220:	13 f8       	bld	r1, 3
     222:	b6 95       	lsr	r27
     224:	a7 95       	ror	r26
     226:	97 95       	ror	r25
     228:	87 95       	ror	r24
     22a:	16 94       	lsr	r1
     22c:	d1 f7       	brne	.-12     	; 0x222 <calc_latest_rpm+0x118>
     22e:	f4 01       	movw	r30, r8
     230:	80 8b       	std	Z+16, r24	; 0x10
     232:	91 8b       	std	Z+17, r25	; 0x11
     234:	a2 8b       	std	Z+18, r26	; 0x12
     236:	b3 8b       	std	Z+19, r27	; 0x13
    int i;
    unsigned long temp;

    temp = rpm >> N;

    if(temp < 0 || temp > 250 ){
     238:	8b 3f       	cpi	r24, 0xFB	; 251
     23a:	91 05       	cpc	r25, r1
     23c:	a1 05       	cpc	r26, r1
     23e:	b1 05       	cpc	r27, r1
     240:	b8 f4       	brcc	.+46     	; 0x270 <calc_latest_rpm+0x166>
/*	
 * Calculates the speed between two encoder-interrupts, using fixed point arithmetics.
 * Inserts the speed to the rpm-array in shared_ptr->rpm_measurements
 * Qm.n values defined in shared.h
*/
void calc_latest_rpm(Shared_Data* shared_ptr){
     242:	ec 5e       	subi	r30, 0xEC	; 236
     244:	fd 4f       	sbci	r31, 0xFD	; 253
     246:	2f e7       	ldi	r18, 0x7F	; 127
     248:	30 e0       	ldi	r19, 0x00	; 0
    if(temp < 0 || temp > 250 ){
        return;
    }

    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
     24a:	21 50       	subi	r18, 0x01	; 1
     24c:	31 09       	sbc	r19, r1
     24e:	b2 91       	ld	r27, -Z
     250:	a2 91       	ld	r26, -Z
     252:	92 91       	ld	r25, -Z
     254:	82 91       	ld	r24, -Z
     256:	84 83       	std	Z+4, r24	; 0x04
     258:	95 83       	std	Z+5, r25	; 0x05
     25a:	a6 83       	std	Z+6, r26	; 0x06
     25c:	b7 83       	std	Z+7, r27	; 0x07

    if(temp < 0 || temp > 250 ){
        return;
    }

    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
     25e:	2f 3f       	cpi	r18, 0xFF	; 255
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	38 07       	cpc	r19, r24
     264:	91 f7       	brne	.-28     	; 0x24a <calc_latest_rpm+0x140>
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
    }
    shared_ptr->rpm_measurements[0] = rpm;
     266:	f4 01       	movw	r30, r8
     268:	70 8f       	std	Z+24, r23	; 0x18
     26a:	61 8f       	std	Z+25, r22	; 0x19
     26c:	52 8f       	std	Z+26, r21	; 0x1a
     26e:	43 8f       	std	Z+27, r20	; 0x1b
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
	shared_ptr->rpm_curr = (unsigned long)rpm >> N;	// Used for debugging
	insert_rpm(shared_ptr, rpm);
	
}
     270:	28 96       	adiw	r28, 0x08	; 8
     272:	0f b6       	in	r0, 0x3f	; 63
     274:	f8 94       	cli
     276:	de bf       	out	0x3e, r29	; 62
     278:	0f be       	out	0x3f, r0	; 63
     27a:	cd bf       	out	0x3d, r28	; 61
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	1f 91       	pop	r17
     282:	0f 91       	pop	r16
     284:	ff 90       	pop	r15
     286:	ef 90       	pop	r14
     288:	df 90       	pop	r13
     28a:	cf 90       	pop	r12
     28c:	bf 90       	pop	r11
     28e:	af 90       	pop	r10
     290:	9f 90       	pop	r9
     292:	8f 90       	pop	r8
     294:	7f 90       	pop	r7
     296:	6f 90       	pop	r6
     298:	5f 90       	pop	r5
     29a:	4f 90       	pop	r4
     29c:	08 95       	ret

0000029e <calc_avg_rpm>:

/*
 * Calculates the filtered running average rpm. Stores result in shared_ptr->rpm_avg
 * Number of elements counted depends on speed_set
*/
void calc_avg_rpm(Shared_Data* shared_ptr){
     29e:	2f 92       	push	r2
     2a0:	3f 92       	push	r3
     2a2:	4f 92       	push	r4
     2a4:	5f 92       	push	r5
     2a6:	6f 92       	push	r6
     2a8:	7f 92       	push	r7
     2aa:	8f 92       	push	r8
     2ac:	9f 92       	push	r9
     2ae:	af 92       	push	r10
     2b0:	bf 92       	push	r11
     2b2:	cf 92       	push	r12
     2b4:	df 92       	push	r13
     2b6:	ef 92       	push	r14
     2b8:	ff 92       	push	r15
     2ba:	0f 93       	push	r16
     2bc:	1f 93       	push	r17
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	ec 01       	movw	r28, r24
     2c4:	dc 01       	movw	r26, r24
     2c6:	58 96       	adiw	r26, 0x18	; 24
     2c8:	e0 e2       	ldi	r30, 0x20	; 32
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned long long temp = 0;
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	40 e0       	ldi	r20, 0x00	; 0
     2d2:	50 e0       	ldi	r21, 0x00	; 0
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
		size_shift = DIVISION_32;
	}
	
	
	for(i = 0; i < size; i++){
		temp = temp + shared_ptr->rpm_measurements[i];
     2dc:	cd 90       	ld	r12, X+
     2de:	dd 90       	ld	r13, X+
     2e0:	ed 90       	ld	r14, X+
     2e2:	fd 90       	ld	r15, X+
     2e4:	16 01       	movw	r2, r12
     2e6:	27 01       	movw	r4, r14
     2e8:	ac 2c       	mov	r10, r12
     2ea:	b3 2c       	mov	r11, r3
     2ec:	c4 2c       	mov	r12, r4
     2ee:	d5 2c       	mov	r13, r5
     2f0:	e1 2c       	mov	r14, r1
     2f2:	f1 2c       	mov	r15, r1
     2f4:	00 e0       	ldi	r16, 0x00	; 0
     2f6:	10 e0       	ldi	r17, 0x00	; 0
     2f8:	c9 d5       	rcall	.+2962   	; 0xe8c <__adddi3>
     2fa:	31 97       	sbiw	r30, 0x01	; 1
		size = SIZE_32;
		size_shift = DIVISION_32;
	}
	
	
	for(i = 0; i < size; i++){
     2fc:	79 f7       	brne	.-34     	; 0x2dc <calc_avg_rpm+0x3e>
		temp = temp + shared_ptr->rpm_measurements[i];
	}
	
	// Divide by size
	temp = temp >> size_shift;
     2fe:	05 e0       	ldi	r16, 0x05	; 5
     300:	b6 d5       	rcall	.+2924   	; 0xe6e <__lshrdi3>
	
	shared_ptr->rpm_avg = temp;
     302:	2c 8b       	std	Y+20, r18	; 0x14
     304:	3d 8b       	std	Y+21, r19	; 0x15
     306:	4e 8b       	std	Y+22, r20	; 0x16
     308:	5f 8b       	std	Y+23, r21	; 0x17
}
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	1f 91       	pop	r17
     310:	0f 91       	pop	r16
     312:	ff 90       	pop	r15
     314:	ef 90       	pop	r14
     316:	df 90       	pop	r13
     318:	cf 90       	pop	r12
     31a:	bf 90       	pop	r11
     31c:	af 90       	pop	r10
     31e:	9f 90       	pop	r9
     320:	8f 90       	pop	r8
     322:	7f 90       	pop	r7
     324:	6f 90       	pop	r6
     326:	5f 90       	pop	r5
     328:	4f 90       	pop	r4
     32a:	3f 90       	pop	r3
     32c:	2f 90       	pop	r2
     32e:	08 95       	ret

00000330 <set_speed>:

/* Sets a new set value for the speed. Range: 0-120. */
void set_speed(Shared_Data* shared_ptr){
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	00 d0       	rcall	.+0      	; 0x33a <set_speed+0xa>
     33a:	00 d0       	rcall	.+0      	; 0x33c <set_speed+0xc>
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	8c 01       	movw	r16, r24
	char sub_str[4];
	int res;
	strncpy(sub_str, recieved_bytes + 1, 3);
     342:	43 e0       	ldi	r20, 0x03	; 3
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	6f e1       	ldi	r22, 0x1F	; 31
     348:	71 e0       	ldi	r23, 0x01	; 1
     34a:	ce 01       	movw	r24, r28
     34c:	01 96       	adiw	r24, 0x01	; 1
     34e:	e4 d5       	rcall	.+3016   	; 0xf18 <strncpy>
	
	res = atoi(sub_str);
     350:	ce 01       	movw	r24, r28
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	c4 d5       	rcall	.+2952   	; 0xede <atoi>
	shared_ptr->speed_set = res;
     356:	f8 01       	movw	r30, r16
     358:	91 83       	std	Z+1, r25	; 0x01
     35a:	80 83       	st	Z, r24
}
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	08 95       	ret

0000036e <__vector_4>:
/*
 * Interrupt Service Routine for the encoder mounted on the motor.
 * Calculates the difference in clk-value between current and previous interrupt.
 * Global bool newMeasurement flags that a new measurement have been recieved.
*/
ISR(PCINT1_vect){
     36e:	1f 92       	push	r1
     370:	0f 92       	push	r0
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	0f 92       	push	r0
     376:	11 24       	eor	r1, r1
     378:	2f 93       	push	r18
     37a:	3f 93       	push	r19
     37c:	4f 93       	push	r20
     37e:	5f 93       	push	r21
     380:	8f 93       	push	r24
     382:	9f 93       	push	r25
	cli();
     384:	f8 94       	cli
	
	clk_curr = TCNT1;
     386:	80 91 84 00 	lds	r24, 0x0084
     38a:	90 91 85 00 	lds	r25, 0x0085
     38e:	90 93 25 01 	sts	0x0125, r25
     392:	80 93 24 01 	sts	0x0124, r24
extern char recieved_bytes[5];
extern Shared_Data* shared_ptr;

static void calc_clk_elapsed(){
	
	if(clk_curr < clk_prev){
     396:	20 91 1c 01 	lds	r18, 0x011C
     39a:	30 91 1d 01 	lds	r19, 0x011D
     39e:	82 17       	cp	r24, r18
     3a0:	93 07       	cpc	r25, r19
     3a2:	48 f4       	brcc	.+18     	; 0x3b6 <__vector_4+0x48>
		unsigned short temp = 0xFFFF;
		temp = temp - clk_prev;
     3a4:	20 95       	com	r18
     3a6:	30 95       	com	r19
		temp = temp + clk_curr;
     3a8:	28 0f       	add	r18, r24
     3aa:	39 1f       	adc	r19, r25
		clk_elapsed = temp;
     3ac:	30 93 28 01 	sts	0x0128, r19
     3b0:	20 93 27 01 	sts	0x0127, r18
     3b4:	07 c0       	rjmp	.+14     	; 0x3c4 <__vector_4+0x56>
	}
	else{
		clk_elapsed = clk_curr - clk_prev;
     3b6:	ac 01       	movw	r20, r24
     3b8:	42 1b       	sub	r20, r18
     3ba:	53 0b       	sbc	r21, r19
     3bc:	50 93 28 01 	sts	0x0128, r21
     3c0:	40 93 27 01 	sts	0x0127, r20
		
	}
	clk_prev = clk_curr;
     3c4:	90 93 1d 01 	sts	0x011D, r25
     3c8:	80 93 1c 01 	sts	0x011C, r24
ISR(PCINT1_vect){
	cli();
	
	clk_curr = TCNT1;
	calc_clk_elapsed();
	newMeasurement = true;
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	80 93 26 01 	sts	0x0126, r24
	
	sei();
     3d2:	78 94       	sei
}
     3d4:	9f 91       	pop	r25
     3d6:	8f 91       	pop	r24
     3d8:	5f 91       	pop	r21
     3da:	4f 91       	pop	r20
     3dc:	3f 91       	pop	r19
     3de:	2f 91       	pop	r18
     3e0:	0f 90       	pop	r0
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	0f 90       	pop	r0
     3e6:	1f 90       	pop	r1
     3e8:	18 95       	reti

000003ea <__vector_9>:

/*
 * PI controller for the electrical motor, implemented using fixed point arithmetics.
 * Kp and Ki values is used to tune the controller, depending on different rpm.
*/
ISR(TIMER2_OVF_vect){
     3ea:	1f 92       	push	r1
     3ec:	0f 92       	push	r0
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	0f 92       	push	r0
     3f2:	11 24       	eor	r1, r1
     3f4:	2f 92       	push	r2
     3f6:	3f 92       	push	r3
     3f8:	4f 92       	push	r4
     3fa:	5f 92       	push	r5
     3fc:	6f 92       	push	r6
     3fe:	7f 92       	push	r7
     400:	8f 92       	push	r8
     402:	9f 92       	push	r9
     404:	af 92       	push	r10
     406:	bf 92       	push	r11
     408:	cf 92       	push	r12
     40a:	df 92       	push	r13
     40c:	ef 92       	push	r14
     40e:	ff 92       	push	r15
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
     414:	2f 93       	push	r18
     416:	3f 93       	push	r19
     418:	4f 93       	push	r20
     41a:	5f 93       	push	r21
     41c:	6f 93       	push	r22
     41e:	7f 93       	push	r23
     420:	8f 93       	push	r24
     422:	9f 93       	push	r25
     424:	af 93       	push	r26
     426:	bf 93       	push	r27
     428:	ef 93       	push	r30
     42a:	ff 93       	push	r31
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	27 97       	sbiw	r28, 0x07	; 7
     436:	de bf       	out	0x3e, r29	; 62
     438:	cd bf       	out	0x3d, r28	; 61
	
	cli();
     43a:	f8 94       	cli
	long Kp;
	long Ki;
		
	long e = ((long)shared_ptr->speed_set << N) - (long)shared_ptr->rpm_avg;
     43c:	e0 91 29 01 	lds	r30, 0x0129
     440:	f0 91 2a 01 	lds	r31, 0x012A
     444:	80 81       	ld	r24, Z
     446:	91 81       	ldd	r25, Z+1	; 0x01
     448:	aa 27       	eor	r26, r26
     44a:	97 fd       	sbrc	r25, 7
     44c:	a0 95       	com	r26
     44e:	ba 2f       	mov	r27, r26
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	aa 1f       	adc	r26, r26
     456:	bb 1f       	adc	r27, r27
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	aa 1f       	adc	r26, r26
     45e:	bb 1f       	adc	r27, r27
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	aa 1f       	adc	r26, r26
     466:	bb 1f       	adc	r27, r27
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	aa 1f       	adc	r26, r26
     46e:	bb 1f       	adc	r27, r27
     470:	44 89       	ldd	r20, Z+20	; 0x14
     472:	55 89       	ldd	r21, Z+21	; 0x15
     474:	66 89       	ldd	r22, Z+22	; 0x16
     476:	77 89       	ldd	r23, Z+23	; 0x17
     478:	84 1b       	sub	r24, r20
     47a:	95 0b       	sbc	r25, r21
     47c:	a6 0b       	sbc	r26, r22
     47e:	b7 0b       	sbc	r27, r23
	e = e + ((long)shared_ptr->fine_tuning << N);
     480:	46 80       	ldd	r4, Z+6	; 0x06
     482:	57 80       	ldd	r5, Z+7	; 0x07
     484:	66 24       	eor	r6, r6
     486:	57 fc       	sbrc	r5, 7
     488:	60 94       	com	r6
     48a:	76 2c       	mov	r7, r6
     48c:	44 0c       	add	r4, r4
     48e:	55 1c       	adc	r5, r5
     490:	66 1c       	adc	r6, r6
     492:	77 1c       	adc	r7, r7
     494:	44 0c       	add	r4, r4
     496:	55 1c       	adc	r5, r5
     498:	66 1c       	adc	r6, r6
     49a:	77 1c       	adc	r7, r7
     49c:	44 0c       	add	r4, r4
     49e:	55 1c       	adc	r5, r5
     4a0:	66 1c       	adc	r6, r6
     4a2:	77 1c       	adc	r7, r7
     4a4:	44 0c       	add	r4, r4
     4a6:	55 1c       	adc	r5, r5
     4a8:	66 1c       	adc	r6, r6
     4aa:	77 1c       	adc	r7, r7
     4ac:	48 0e       	add	r4, r24
     4ae:	59 1e       	adc	r5, r25
     4b0:	6a 1e       	adc	r6, r26
     4b2:	7b 1e       	adc	r7, r27
	shared_ptr->error = (short)e;	// For debugging
     4b4:	55 82       	std	Z+5, r5	; 0x05
     4b6:	44 82       	std	Z+4, r4	; 0x04
	
	e = e << (N_CTRL-N);
     4b8:	44 0c       	add	r4, r4
     4ba:	55 1c       	adc	r5, r5
     4bc:	66 1c       	adc	r6, r6
     4be:	77 1c       	adc	r7, r7
     4c0:	44 0c       	add	r4, r4
     4c2:	55 1c       	adc	r5, r5
     4c4:	66 1c       	adc	r6, r6
     4c6:	77 1c       	adc	r7, r7
     4c8:	44 0c       	add	r4, r4
     4ca:	55 1c       	adc	r5, r5
     4cc:	66 1c       	adc	r6, r6
     4ce:	77 1c       	adc	r7, r7
	}

	Kp = 130;	//175
	Ki = 117;	// 300
	
	long integral = Ki*e;
     4d0:	a5 e7       	ldi	r26, 0x75	; 117
     4d2:	b0 e0       	ldi	r27, 0x00	; 0
     4d4:	a3 01       	movw	r20, r6
     4d6:	92 01       	movw	r18, r4
     4d8:	05 d4       	rcall	.+2058   	; 0xce4 <__muluhisi3>
	integral = integral >> N_CTRL;
     4da:	4b 01       	movw	r8, r22
     4dc:	5c 01       	movw	r10, r24
     4de:	68 94       	set
     4e0:	16 f8       	bld	r1, 6
     4e2:	b5 94       	asr	r11
     4e4:	a7 94       	ror	r10
     4e6:	97 94       	ror	r9
     4e8:	87 94       	ror	r8
     4ea:	16 94       	lsr	r1
     4ec:	d1 f7       	brne	.-12     	; 0x4e2 <__vector_9+0xf8>
	shared_ptr->integral = shared_ptr->integral + integral;
     4ee:	6b 01       	movw	r12, r22
     4f0:	7c 01       	movw	r14, r24
     4f2:	ff 0c       	add	r15, r15
     4f4:	cc 08       	sbc	r12, r12
     4f6:	dc 2c       	mov	r13, r12
     4f8:	76 01       	movw	r14, r12
     4fa:	28 2d       	mov	r18, r8
     4fc:	39 2d       	mov	r19, r9
     4fe:	4a 2d       	mov	r20, r10
     500:	5b 2d       	mov	r21, r11
     502:	6c 2d       	mov	r22, r12
     504:	7c 2d       	mov	r23, r12
     506:	8c 2d       	mov	r24, r12
     508:	9c 2d       	mov	r25, r12
     50a:	a0 84       	ldd	r10, Z+8	; 0x08
     50c:	b1 84       	ldd	r11, Z+9	; 0x09
     50e:	c2 84       	ldd	r12, Z+10	; 0x0a
     510:	d3 84       	ldd	r13, Z+11	; 0x0b
     512:	e4 84       	ldd	r14, Z+12	; 0x0c
     514:	f5 84       	ldd	r15, Z+13	; 0x0d
     516:	06 85       	ldd	r16, Z+14	; 0x0e
     518:	17 85       	ldd	r17, Z+15	; 0x0f
     51a:	b8 d4       	rcall	.+2416   	; 0xe8c <__adddi3>
     51c:	22 2e       	mov	r2, r18
     51e:	33 2e       	mov	r3, r19
     520:	84 2e       	mov	r8, r20
     522:	95 2e       	mov	r9, r21
     524:	a6 2f       	mov	r26, r22
     526:	b7 2f       	mov	r27, r23
     528:	8e 83       	std	Y+6, r24	; 0x06
     52a:	9f 83       	std	Y+7, r25	; 0x07
     52c:	20 87       	std	Z+8, r18	; 0x08
     52e:	31 87       	std	Z+9, r19	; 0x09
     530:	42 87       	std	Z+10, r20	; 0x0a
     532:	53 87       	std	Z+11, r21	; 0x0b
     534:	64 87       	std	Z+12, r22	; 0x0c
     536:	75 87       	std	Z+13, r23	; 0x0d
     538:	86 87       	std	Z+14, r24	; 0x0e
     53a:	97 87       	std	Z+15, r25	; 0x0f
	
	long long pwm = (long long)e * Kp + shared_ptr->integral;
     53c:	73 01       	movw	r14, r6
     53e:	62 01       	movw	r12, r4
     540:	ff 0c       	add	r15, r15
     542:	cc 08       	sbc	r12, r12
     544:	dc 2c       	mov	r13, r12
     546:	76 01       	movw	r14, r12
     548:	24 2d       	mov	r18, r4
     54a:	35 2d       	mov	r19, r5
     54c:	46 2d       	mov	r20, r6
     54e:	57 2d       	mov	r21, r7
     550:	6c 2d       	mov	r22, r12
     552:	7c 2d       	mov	r23, r12
     554:	8c 2d       	mov	r24, r12
     556:	9c 2d       	mov	r25, r12
     558:	01 e0       	ldi	r16, 0x01	; 1
     55a:	6b d4       	rcall	.+2262   	; 0xe32 <__ashldi3>
     55c:	29 83       	std	Y+1, r18	; 0x01
     55e:	3a 83       	std	Y+2, r19	; 0x02
     560:	4b 83       	std	Y+3, r20	; 0x03
     562:	5c 83       	std	Y+4, r21	; 0x04
     564:	46 2e       	mov	r4, r22
     566:	57 2e       	mov	r5, r23
     568:	68 2e       	mov	r6, r24
     56a:	79 2e       	mov	r7, r25
     56c:	75 2d       	mov	r23, r5
     56e:	86 2d       	mov	r24, r6
     570:	97 2d       	mov	r25, r7
     572:	06 e0       	ldi	r16, 0x06	; 6
     574:	5e d4       	rcall	.+2236   	; 0xe32 <__ashldi3>
     576:	a2 2e       	mov	r10, r18
     578:	b3 2e       	mov	r11, r19
     57a:	c4 2e       	mov	r12, r20
     57c:	d5 2e       	mov	r13, r21
     57e:	e6 2e       	mov	r14, r22
     580:	f7 2e       	mov	r15, r23
     582:	08 2f       	mov	r16, r24
     584:	19 2f       	mov	r17, r25
     586:	29 81       	ldd	r18, Y+1	; 0x01
     588:	3a 81       	ldd	r19, Y+2	; 0x02
     58a:	4b 81       	ldd	r20, Y+3	; 0x03
     58c:	5c 81       	ldd	r21, Y+4	; 0x04
     58e:	64 2d       	mov	r22, r4
     590:	75 2d       	mov	r23, r5
     592:	86 2d       	mov	r24, r6
     594:	97 2d       	mov	r25, r7
     596:	7a d4       	rcall	.+2292   	; 0xe8c <__adddi3>
     598:	a2 2e       	mov	r10, r18
     59a:	b3 2e       	mov	r11, r19
     59c:	c4 2e       	mov	r12, r20
     59e:	d5 2e       	mov	r13, r21
     5a0:	e6 2e       	mov	r14, r22
     5a2:	f7 2e       	mov	r15, r23
     5a4:	08 2f       	mov	r16, r24
     5a6:	19 2f       	mov	r17, r25
     5a8:	22 2d       	mov	r18, r2
     5aa:	33 2d       	mov	r19, r3
     5ac:	48 2d       	mov	r20, r8
     5ae:	59 2d       	mov	r21, r9
     5b0:	6a 2f       	mov	r22, r26
     5b2:	7b 2f       	mov	r23, r27
     5b4:	8e 81       	ldd	r24, Y+6	; 0x06
     5b6:	9f 81       	ldd	r25, Y+7	; 0x07
     5b8:	69 d4       	rcall	.+2258   	; 0xe8c <__adddi3>
	pwm = pwm >> N_CTRL;
     5ba:	07 e0       	ldi	r16, 0x07	; 7
     5bc:	49 d4       	rcall	.+2194   	; 0xe50 <__ashrdi3>
	
	pwm = pwm >> N_CTRL;	// Convert to regular number
     5be:	48 d4       	rcall	.+2192   	; 0xe50 <__ashrdi3>
     5c0:	b2 2e       	mov	r11, r18
     5c2:	a3 2f       	mov	r26, r19
     5c4:	c4 2e       	mov	r12, r20
     5c6:	d5 2e       	mov	r13, r21
     5c8:	e6 2e       	mov	r14, r22
     5ca:	f7 2e       	mov	r15, r23
     5cc:	08 2f       	mov	r16, r24
     5ce:	19 2f       	mov	r17, r25
     5d0:	2f 3f       	cpi	r18, 0xFF	; 255
     5d2:	31 05       	cpc	r19, r1
     5d4:	41 05       	cpc	r20, r1
     5d6:	51 05       	cpc	r21, r1
     5d8:	61 05       	cpc	r22, r1
     5da:	71 05       	cpc	r23, r1
     5dc:	81 05       	cpc	r24, r1
     5de:	91 05       	cpc	r25, r1
     5e0:	51 f0       	breq	.+20     	; 0x5f6 <__stack+0xf7>
     5e2:	4c f0       	brlt	.+18     	; 0x5f6 <__stack+0xf7>
     5e4:	bb 24       	eor	r11, r11
     5e6:	ba 94       	dec	r11
     5e8:	a0 e0       	ldi	r26, 0x00	; 0
     5ea:	c1 2c       	mov	r12, r1
     5ec:	d1 2c       	mov	r13, r1
     5ee:	e1 2c       	mov	r14, r1
     5f0:	f1 2c       	mov	r15, r1
     5f2:	00 e0       	ldi	r16, 0x00	; 0
     5f4:	10 e0       	ldi	r17, 0x00	; 0
     5f6:	bb 2d       	mov	r27, r11
     5f8:	aa 2e       	mov	r10, r26
     5fa:	2b 2d       	mov	r18, r11
     5fc:	3a 2f       	mov	r19, r26
     5fe:	4c 2d       	mov	r20, r12
     600:	5d 2d       	mov	r21, r13
     602:	6e 2d       	mov	r22, r14
     604:	7f 2d       	mov	r23, r15
     606:	80 2f       	mov	r24, r16
     608:	91 2f       	mov	r25, r17
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	48 d4       	rcall	.+2192   	; 0xe9e <__cmpdi2_s8>
     60e:	14 f4       	brge	.+4      	; 0x614 <__stack+0x115>
     610:	b0 e0       	ldi	r27, 0x00	; 0
     612:	a1 2c       	mov	r10, r1
	}
	else if(pwm > 255){
		pwm = 255;
	}
	
	shared_ptr->pwm = (short)pwm;
     614:	b2 83       	std	Z+2, r27	; 0x02
     616:	a3 82       	std	Z+3, r10	; 0x03
	OCR0A = pwm;
     618:	b7 bd       	out	0x27, r27	; 39
	OCR0B = pwm;
     61a:	b8 bd       	out	0x28, r27	; 40
	sei();
     61c:	78 94       	sei
     61e:	27 96       	adiw	r28, 0x07	; 7
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	ff 91       	pop	r31
     630:	ef 91       	pop	r30
     632:	bf 91       	pop	r27
     634:	af 91       	pop	r26
     636:	9f 91       	pop	r25
     638:	8f 91       	pop	r24
     63a:	7f 91       	pop	r23
     63c:	6f 91       	pop	r22
     63e:	5f 91       	pop	r21
     640:	4f 91       	pop	r20
     642:	3f 91       	pop	r19
     644:	2f 91       	pop	r18
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	df 90       	pop	r13
     650:	cf 90       	pop	r12
     652:	bf 90       	pop	r11
     654:	af 90       	pop	r10
     656:	9f 90       	pop	r9
     658:	8f 90       	pop	r8
     65a:	7f 90       	pop	r7
     65c:	6f 90       	pop	r6
     65e:	5f 90       	pop	r5
     660:	4f 90       	pop	r4
     662:	3f 90       	pop	r3
     664:	2f 90       	pop	r2
     666:	0f 90       	pop	r0
     668:	0f be       	out	0x3f, r0	; 63
     66a:	0f 90       	pop	r0
     66c:	1f 90       	pop	r1
     66e:	18 95       	reti

00000670 <USART_transmit>:
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with "%"
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	00 d0       	rcall	.+0      	; 0x676 <USART_transmit+0x6>
     676:	00 d0       	rcall	.+0      	; 0x678 <USART_transmit+0x8>
     678:	00 d0       	rcall	.+0      	; 0x67a <USART_transmit+0xa>
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
	char buf[6];
	
	strcpy(buf,"%%%%%");
     67e:	26 e0       	ldi	r18, 0x06	; 6
     680:	e0 e0       	ldi	r30, 0x00	; 0
     682:	f1 e0       	ldi	r31, 0x01	; 1
     684:	de 01       	movw	r26, r28
     686:	11 96       	adiw	r26, 0x01	; 1
     688:	01 90       	ld	r0, Z+
     68a:	0d 92       	st	X+, r0
     68c:	2a 95       	dec	r18
     68e:	e1 f7       	brne	.-8      	; 0x688 <USART_transmit+0x18>
	strncpy(buf, data, 5);
     690:	45 e0       	ldi	r20, 0x05	; 5
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	bc 01       	movw	r22, r24
     696:	ce 01       	movw	r24, r28
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	3e d4       	rcall	.+2172   	; 0xf18 <strncpy>
     69c:	be 01       	movw	r22, r28
     69e:	6f 5f       	subi	r22, 0xFF	; 255
     6a0:	7f 4f       	sbci	r23, 0xFF	; 255
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with "%"
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
     6a2:	9e 01       	movw	r18, r28
     6a4:	2a 5f       	subi	r18, 0xFA	; 250
     6a6:	3f 4f       	sbci	r19, 0xFF	; 255
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
     6a8:	e0 ec       	ldi	r30, 0xC0	; 192
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = buf[i];
     6ac:	86 ec       	ldi	r24, 0xC6	; 198
     6ae:	90 e0       	ldi	r25, 0x00	; 0
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
     6b0:	40 81       	ld	r20, Z
     6b2:	45 ff       	sbrs	r20, 5
     6b4:	fd cf       	rjmp	.-6      	; 0x6b0 <USART_transmit+0x40>
		UDR0 = buf[i];
     6b6:	db 01       	movw	r26, r22
     6b8:	4d 91       	ld	r20, X+
     6ba:	bd 01       	movw	r22, r26
     6bc:	dc 01       	movw	r26, r24
     6be:	4c 93       	st	X, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6c0:	a1 ee       	ldi	r26, 0xE1	; 225
     6c2:	b4 e0       	ldi	r27, 0x04	; 4
     6c4:	11 97       	sbiw	r26, 0x01	; 1
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <USART_transmit+0x54>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <USART_transmit+0x5a>
     6ca:	00 00       	nop
	char buf[6];
	
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
     6cc:	62 17       	cp	r22, r18
     6ce:	73 07       	cpc	r23, r19
     6d0:	79 f7       	brne	.-34     	; 0x6b0 <USART_transmit+0x40>
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = buf[i];
		_delay_ms(5);
	}
}
     6d2:	26 96       	adiw	r28, 0x06	; 6
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	08 95       	ret

000006e4 <__vector_18>:
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
     6e4:	1f 92       	push	r1
     6e6:	0f 92       	push	r0
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	0f 92       	push	r0
     6ec:	11 24       	eor	r1, r1
     6ee:	2f 93       	push	r18
     6f0:	8f 93       	push	r24
     6f2:	9f 93       	push	r25
     6f4:	af 93       	push	r26
     6f6:	bf 93       	push	r27
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	ef 93       	push	r30
     6fe:	ff 93       	push	r31
	cli();
     700:	f8 94       	cli
	PORTC &= ~(1 << PC2);
     702:	42 98       	cbi	0x08, 2	; 8
	PORTC |= (1 << PC1);
     704:	41 9a       	sbi	0x08, 1	; 8
     706:	ae e1       	ldi	r26, 0x1E	; 30
     708:	b1 e0       	ldi	r27, 0x01	; 1
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
     70a:	83 e2       	ldi	r24, 0x23	; 35
     70c:	91 e0       	ldi	r25, 0x01	; 1
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
     70e:	e0 ec       	ldi	r30, 0xC0	; 192
     710:	f0 e0       	ldi	r31, 0x00	; 0
		recieved_bytes[i] = UDR0;
     712:	c6 ec       	ldi	r28, 0xC6	; 198
     714:	d0 e0       	ldi	r29, 0x00	; 0
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
     716:	20 81       	ld	r18, Z
     718:	22 23       	and	r18, r18
     71a:	ec f7       	brge	.-6      	; 0x716 <__vector_18+0x32>
		recieved_bytes[i] = UDR0;
     71c:	28 81       	ld	r18, Y
     71e:	2d 93       	st	X+, r18
*/
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
     720:	a8 17       	cp	r26, r24
     722:	b9 07       	cpc	r27, r25
     724:	c1 f7       	brne	.-16     	; 0x716 <__vector_18+0x32>
		while( !(UCSR0A & (1 << RXC0)) );
		recieved_bytes[i] = UDR0;
	}
	PORTC &= ~(1 << PC1);
     726:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (1 << PC2);
     728:	42 9a       	sbi	0x08, 2	; 8
	newCommand = true;
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	80 93 23 01 	sts	0x0123, r24
	sei();
     730:	78 94       	sei
}
     732:	ff 91       	pop	r31
     734:	ef 91       	pop	r30
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	bf 91       	pop	r27
     73c:	af 91       	pop	r26
     73e:	9f 91       	pop	r25
     740:	8f 91       	pop	r24
     742:	2f 91       	pop	r18
     744:	0f 90       	pop	r0
     746:	0f be       	out	0x3f, r0	; 63
     748:	0f 90       	pop	r0
     74a:	1f 90       	pop	r1
     74c:	18 95       	reti

0000074e <setup_registers>:
 *	PC1, PD5-PD6
 *	See details in datasheet pg. 99-100
*/
static void setup_DDR(){

	DDRB |= 0x00;
     74e:	84 b1       	in	r24, 0x04	; 4
     750:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC2) | (1 << PC1) | (1 << PC0);
     752:	87 b1       	in	r24, 0x07	; 7
     754:	87 60       	ori	r24, 0x07	; 7
     756:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PD6) | (1 << PD5) | (1 << PD1);
     758:	8a b1       	in	r24, 0x0a	; 10
     75a:	82 66       	ori	r24, 0x62	; 98
     75c:	8a b9       	out	0x0a, r24	; 10
 *	PWM-mode: fast PWM, inverted, no prescaling.
 *	See details in datasheet pg. 113-117
*/
static void setup_PWM(){

	TCCR0A = (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0) | (1 << WGM01) | (1 << WGM00);
     75e:	83 ef       	ldi	r24, 0xF3	; 243
     760:	84 bd       	out	0x24, r24	; 36
	TCCR0B =  (0 << CS02) | (0 << CS01) | (1 << CS00);
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	85 bd       	out	0x25, r24	; 37
 * 	Baud rate according to #define in shared.h
 * 	See details in datasheet pg. 201-205
*/
static void setup_USART(){

	DDRD |= (1 << PD1);
     766:	51 9a       	sbi	0x0a, 1	; 10
	unsigned int ubrr = (((F_CPU / (BAUD * 16UL))) - 1 );

	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
     768:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
     76c:	89 e1       	ldi	r24, 0x19	; 25
     76e:	80 93 c4 00 	sts	0x00C4, r24

	// Enable reciever for interrupt and transmitter
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0);
     772:	88 e9       	ldi	r24, 0x98	; 152
     774:	80 93 c1 00 	sts	0x00C1, r24

	// Set frame format: 8 data, 2 stop, 0 parity
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     778:	86 e0       	ldi	r24, 0x06	; 6
     77a:	80 93 c2 00 	sts	0x00C2, r24
 * 	See details in datasheet pg. 81-82
*/
static void setup_interrupts(){

	// Enables possibility of interrupts on pins 14-8
	PCICR = (1 << PCIE1);
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	80 93 68 00 	sts	0x0068, r24
	// Enables interrupts on pin PC4-PC5
	PCMSK1 = (1 << PCINT13) | (1 << PCINT12);
     784:	80 e3       	ldi	r24, 0x30	; 48
     786:	80 93 6c 00 	sts	0x006C, r24
/*	
 *	Sets up clk/8 prescaling on 16-bit timer OC1
 *	See details in datasheet pg. 141-147
*/	
static void setup_speed_clock(){
	TCCR1B |= (1 << CS11);
     78a:	e1 e8       	ldi	r30, 0x81	; 129
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	80 81       	ld	r24, Z
     790:	82 60       	ori	r24, 0x02	; 2
     792:	80 83       	st	Z, r24
 *		TIFR1 |= (1 << TOV0);
 * Disabled digital input on pin PC3 for less power usage
 * See details in datasheet pg. 268-272
 */
static void setup_ADC(){
	ADMUX |= (1 << REFS0) | (1 << MUX1) | (1 << MUX0);
     794:	ec e7       	ldi	r30, 0x7C	; 124
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	83 64       	ori	r24, 0x43	; 67
     79c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADATE);
     79e:	ea e7       	ldi	r30, 0x7A	; 122
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	80 81       	ld	r24, Z
     7a4:	80 6a       	ori	r24, 0xA0	; 160
     7a6:	80 83       	st	Z, r24
	ADCSRB |= (1 << ADTS2) | (1 << ADTS1);
     7a8:	eb e7       	ldi	r30, 0x7B	; 123
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	80 81       	ld	r24, Z
     7ae:	86 60       	ori	r24, 0x06	; 6
     7b0:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC3D);
     7b2:	ee e7       	ldi	r30, 0x7E	; 126
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
     7b8:	88 60       	ori	r24, 0x08	; 8
     7ba:	80 83       	st	Z, r24
	
}

static void setup_control(){
	TCCR2B |= (1 << CS22) | (0 << CS21) | (0 << CS20);
     7bc:	e1 eb       	ldi	r30, 0xB1	; 177
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	80 81       	ld	r24, Z
     7c2:	84 60       	ori	r24, 0x04	; 4
     7c4:	80 83       	st	Z, r24
	TIMSK2 |= (1 << TOIE2);
     7c6:	e0 e7       	ldi	r30, 0x70	; 112
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	80 81       	ld	r24, Z
     7cc:	81 60       	ori	r24, 0x01	; 1
     7ce:	80 83       	st	Z, r24
     7d0:	08 95       	ret

000007d2 <main>:
unsigned short clk_curr;
unsigned short clk_prev;
unsigned short clk_elapsed;
Shared_Data* shared_ptr;

int main(void){
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	cc 51       	subi	r28, 0x1C	; 28
     7dc:	d2 40       	sbci	r29, 0x02	; 2
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
	Shared_Data shared_data;
	//Shared_Data* shared_ptr = &shared_data;
	shared_ptr = &shared_data;
     7e8:	ce 01       	movw	r24, r28
     7ea:	01 96       	adiw	r24, 0x01	; 1
     7ec:	90 93 2a 01 	sts	0x012A, r25
     7f0:	80 93 29 01 	sts	0x0129, r24
	init_shared_data(shared_ptr);
     7f4:	44 dc       	rcall	.-1912   	; 0x7e <init_shared_data>
	
	newCommand = false;
     7f6:	10 92 23 01 	sts	0x0123, r1
	newMeasurement = false;
     7fa:	10 92 26 01 	sts	0x0126, r1
	clk_curr = 0;
     7fe:	10 92 25 01 	sts	0x0125, r1
     802:	10 92 24 01 	sts	0x0124, r1
	clk_prev = 0;
     806:	10 92 1d 01 	sts	0x011D, r1
     80a:	10 92 1c 01 	sts	0x011C, r1
	clk_elapsed = 0;
     80e:	10 92 28 01 	sts	0x0128, r1
     812:	10 92 27 01 	sts	0x0127, r1
	shared_ptr->speed_set = 50;
     816:	e0 91 29 01 	lds	r30, 0x0129
     81a:	f0 91 2a 01 	lds	r31, 0x012A
     81e:	82 e3       	ldi	r24, 0x32	; 50
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	91 83       	std	Z+1, r25	; 0x01
     824:	80 83       	st	Z, r24
	
	setup_registers();
     826:	93 df       	rcall	.-218    	; 0x74e <setup_registers>
	sei();
     828:	78 94       	sei
	
	while(1){
		
		if(newCommand){
			switch(*recieved_bytes){
     82a:	0e e1       	ldi	r16, 0x1E	; 30
     82c:	11 e0       	ldi	r17, 0x01	; 1
	setup_registers();
	sei();
	
	while(1){
		
		if(newCommand){
     82e:	80 91 23 01 	lds	r24, 0x0123
     832:	88 23       	and	r24, r24
     834:	09 f4       	brne	.+2      	; 0x838 <main+0x66>
     836:	45 c0       	rjmp	.+138    	; 0x8c2 <main+0xf0>
			switch(*recieved_bytes){
     838:	f8 01       	movw	r30, r16
     83a:	80 81       	ld	r24, Z
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	fc 01       	movw	r30, r24
     840:	f0 97       	sbiw	r30, 0x30	; 48
     842:	e9 30       	cpi	r30, 0x09	; 9
     844:	f1 05       	cpc	r31, r1
     846:	d0 f5       	brcc	.+116    	; 0x8bc <main+0xea>
     848:	e6 5e       	subi	r30, 0xE6	; 230
     84a:	ff 4f       	sbci	r31, 0xFF	; 255
     84c:	09 94       	ijmp
				case '0':
					set_speed(shared_ptr);
     84e:	80 91 29 01 	lds	r24, 0x0129
     852:	90 91 2a 01 	lds	r25, 0x012A
     856:	6c dd       	rcall	.-1320   	; 0x330 <set_speed>
					transmit_empty();
     858:	0a d2       	rcall	.+1044   	; 0xc6e <transmit_empty>
					break;
     85a:	31 c0       	rjmp	.+98     	; 0x8be <main+0xec>
				case '1':
					transmit_rpm_avg(shared_ptr);
     85c:	80 91 29 01 	lds	r24, 0x0129
     860:	90 91 2a 01 	lds	r25, 0x012A
     864:	8a d1       	rcall	.+788    	; 0xb7a <transmit_rpm_avg>
					break;
     866:	2b c0       	rjmp	.+86     	; 0x8be <main+0xec>
				case '2':
					transmit_fine_tuning(shared_ptr);
     868:	80 91 29 01 	lds	r24, 0x0129
     86c:	90 91 2a 01 	lds	r25, 0x012A
     870:	3f d0       	rcall	.+126    	; 0x8f0 <transmit_fine_tuning>
					break;
     872:	25 c0       	rjmp	.+74     	; 0x8be <main+0xec>
				case '3':
					transmit_error(shared_ptr);
     874:	80 91 29 01 	lds	r24, 0x0129
     878:	90 91 2a 01 	lds	r25, 0x012A
     87c:	41 d1       	rcall	.+642    	; 0xb00 <transmit_error>
					break;
     87e:	1f c0       	rjmp	.+62     	; 0x8be <main+0xec>
				case '4':
					transmit_pwm(shared_ptr);
     880:	80 91 29 01 	lds	r24, 0x0129
     884:	90 91 2a 01 	lds	r25, 0x012A
     888:	95 d0       	rcall	.+298    	; 0x9b4 <transmit_pwm>
					break;
     88a:	19 c0       	rjmp	.+50     	; 0x8be <main+0xec>
				case '5':
					transmit_speed_set(shared_ptr);
     88c:	80 91 29 01 	lds	r24, 0x0129
     890:	90 91 2a 01 	lds	r25, 0x012A
     894:	62 d0       	rcall	.+196    	; 0x95a <transmit_speed_set>
					break;
     896:	13 c0       	rjmp	.+38     	; 0x8be <main+0xec>
				case '6':
					transmit_rpm_curr(shared_ptr);
     898:	80 91 29 01 	lds	r24, 0x0129
     89c:	90 91 2a 01 	lds	r25, 0x012A
     8a0:	ad d1       	rcall	.+858    	; 0xbfc <transmit_rpm_curr>
					break;
     8a2:	0d c0       	rjmp	.+26     	; 0x8be <main+0xec>
				case '7':
					transmit_clk_elapsed(shared_ptr);
     8a4:	80 91 29 01 	lds	r24, 0x0129
     8a8:	90 91 2a 01 	lds	r25, 0x012A
     8ac:	b8 d0       	rcall	.+368    	; 0xa1e <transmit_clk_elapsed>
					break;
     8ae:	07 c0       	rjmp	.+14     	; 0x8be <main+0xec>
				case '8':
					transmit_delta_time(shared_ptr);
     8b0:	80 91 29 01 	lds	r24, 0x0129
     8b4:	90 91 2a 01 	lds	r25, 0x012A
     8b8:	e8 d0       	rcall	.+464    	; 0xa8a <transmit_delta_time>
					break;
     8ba:	01 c0       	rjmp	.+2      	; 0x8be <main+0xec>
				default:
					transmit_empty();
     8bc:	d8 d1       	rcall	.+944    	; 0xc6e <transmit_empty>
			}
			newCommand = false;
     8be:	10 92 23 01 	sts	0x0123, r1
		}
		if(newMeasurement){
     8c2:	80 91 26 01 	lds	r24, 0x0126
     8c6:	88 23       	and	r24, r24
     8c8:	09 f4       	brne	.+2      	; 0x8cc <main+0xfa>
     8ca:	b1 cf       	rjmp	.-158    	; 0x82e <main+0x5c>
			calc_latest_rpm(shared_ptr);
     8cc:	80 91 29 01 	lds	r24, 0x0129
     8d0:	90 91 2a 01 	lds	r25, 0x012A
     8d4:	1a dc       	rcall	.-1996   	; 0x10a <calc_latest_rpm>
			calc_avg_rpm(shared_ptr);
     8d6:	80 91 29 01 	lds	r24, 0x0129
     8da:	90 91 2a 01 	lds	r25, 0x012A
     8de:	df dc       	rcall	.-1602   	; 0x29e <calc_avg_rpm>
			update_fine_tuning(shared_ptr);
     8e0:	80 91 29 01 	lds	r24, 0x0129
     8e4:	90 91 2a 01 	lds	r25, 0x012A
     8e8:	fd db       	rcall	.-2054   	; 0xe4 <update_fine_tuning>
			//control(shared_ptr);
			newMeasurement = false;
     8ea:	10 92 26 01 	sts	0x0126, r1
     8ee:	9f cf       	rjmp	.-194    	; 0x82e <main+0x5c>

000008f0 <transmit_fine_tuning>:
extern unsigned short clk_curr;
extern char recieved_bytes[5];
extern unsigned short clk_elapsed;

/* Transmits the fine tuning over the USART. */
void transmit_fine_tuning(Shared_Data* shared_ptr){
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	00 d0       	rcall	.+0      	; 0x8fa <transmit_fine_tuning+0xa>
     8fa:	00 d0       	rcall	.+0      	; 0x8fc <transmit_fine_tuning+0xc>
     8fc:	00 d0       	rcall	.+0      	; 0x8fe <transmit_fine_tuning+0xe>
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     902:	25 e0       	ldi	r18, 0x05	; 5
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	f1 e0       	ldi	r31, 0x01	; 1
     908:	8e 01       	movw	r16, r28
     90a:	0f 5f       	subi	r16, 0xFF	; 255
     90c:	1f 4f       	sbci	r17, 0xFF	; 255
     90e:	d8 01       	movw	r26, r16
     910:	01 90       	ld	r0, Z+
     912:	0d 92       	st	X+, r0
     914:	2a 95       	dec	r18
     916:	e1 f7       	brne	.-8      	; 0x910 <transmit_fine_tuning+0x20>
	snprintf(temp, 6, "%hd", shared_ptr->fine_tuning);
     918:	fc 01       	movw	r30, r24
     91a:	27 81       	ldd	r18, Z+7	; 0x07
     91c:	2f 93       	push	r18
     91e:	86 81       	ldd	r24, Z+6	; 0x06
     920:	8f 93       	push	r24
     922:	8c e0       	ldi	r24, 0x0C	; 12
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	9f 93       	push	r25
     928:	8f 93       	push	r24
     92a:	1f 92       	push	r1
     92c:	86 e0       	ldi	r24, 0x06	; 6
     92e:	8f 93       	push	r24
     930:	1f 93       	push	r17
     932:	0f 93       	push	r16
     934:	08 d3       	rcall	.+1552   	; 0xf46 <snprintf>
	USART_transmit(temp);
     936:	c8 01       	movw	r24, r16
     938:	9b de       	rcall	.-714    	; 0x670 <USART_transmit>
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	de bf       	out	0x3e, r29	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	cd bf       	out	0x3d, r28	; 61
}
     944:	26 96       	adiw	r28, 0x06	; 6
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	f8 94       	cli
     94a:	de bf       	out	0x3e, r29	; 62
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	cd bf       	out	0x3d, r28	; 61
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	1f 91       	pop	r17
     956:	0f 91       	pop	r16
     958:	08 95       	ret

0000095a <transmit_speed_set>:

/* Transmits the set speed over the USART. */
void transmit_speed_set(Shared_Data* shared_ptr){
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	00 d0       	rcall	.+0      	; 0x964 <transmit_speed_set+0xa>
     964:	00 d0       	rcall	.+0      	; 0x966 <transmit_speed_set+0xc>
     966:	00 d0       	rcall	.+0      	; 0x968 <transmit_speed_set+0xe>
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	
	snprintf(temp, 6, "%hd",  shared_ptr->speed_set);
     96c:	fc 01       	movw	r30, r24
     96e:	21 81       	ldd	r18, Z+1	; 0x01
     970:	2f 93       	push	r18
     972:	80 81       	ld	r24, Z
     974:	8f 93       	push	r24
     976:	8c e0       	ldi	r24, 0x0C	; 12
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	9f 93       	push	r25
     97c:	8f 93       	push	r24
     97e:	1f 92       	push	r1
     980:	86 e0       	ldi	r24, 0x06	; 6
     982:	8f 93       	push	r24
     984:	8e 01       	movw	r16, r28
     986:	0f 5f       	subi	r16, 0xFF	; 255
     988:	1f 4f       	sbci	r17, 0xFF	; 255
     98a:	1f 93       	push	r17
     98c:	0f 93       	push	r16
     98e:	db d2       	rcall	.+1462   	; 0xf46 <snprintf>
	USART_transmit(temp);
     990:	c8 01       	movw	r24, r16
     992:	6e de       	rcall	.-804    	; 0x670 <USART_transmit>
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	de bf       	out	0x3e, r29	; 62
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	cd bf       	out	0x3d, r28	; 61
}
     99e:	26 96       	adiw	r28, 0x06	; 6
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	08 95       	ret

000009b4 <transmit_pwm>:

/* Transmits the pwm output over the USART. */
void transmit_pwm(Shared_Data* shared_ptr){
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	00 d0       	rcall	.+0      	; 0x9be <transmit_pwm+0xa>
     9be:	00 d0       	rcall	.+0      	; 0x9c0 <transmit_pwm+0xc>
     9c0:	00 d0       	rcall	.+0      	; 0x9c2 <transmit_pwm+0xe>
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     9c6:	25 e0       	ldi	r18, 0x05	; 5
     9c8:	e6 e0       	ldi	r30, 0x06	; 6
     9ca:	f1 e0       	ldi	r31, 0x01	; 1
     9cc:	8e 01       	movw	r16, r28
     9ce:	0f 5f       	subi	r16, 0xFF	; 255
     9d0:	1f 4f       	sbci	r17, 0xFF	; 255
     9d2:	d8 01       	movw	r26, r16
     9d4:	01 90       	ld	r0, Z+
     9d6:	0d 92       	st	X+, r0
     9d8:	2a 95       	dec	r18
     9da:	e1 f7       	brne	.-8      	; 0x9d4 <transmit_pwm+0x20>
	
	snprintf(temp, 6, "%d", shared_ptr->pwm);
     9dc:	fc 01       	movw	r30, r24
     9de:	23 81       	ldd	r18, Z+3	; 0x03
     9e0:	2f 93       	push	r18
     9e2:	82 81       	ldd	r24, Z+2	; 0x02
     9e4:	8f 93       	push	r24
     9e6:	80 e1       	ldi	r24, 0x10	; 16
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	9f 93       	push	r25
     9ec:	8f 93       	push	r24
     9ee:	1f 92       	push	r1
     9f0:	86 e0       	ldi	r24, 0x06	; 6
     9f2:	8f 93       	push	r24
     9f4:	1f 93       	push	r17
     9f6:	0f 93       	push	r16
     9f8:	a6 d2       	rcall	.+1356   	; 0xf46 <snprintf>
	USART_transmit(temp);
     9fa:	c8 01       	movw	r24, r16
     9fc:	39 de       	rcall	.-910    	; 0x670 <USART_transmit>
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	cd bf       	out	0x3d, r28	; 61
}
     a08:	26 96       	adiw	r28, 0x06	; 6
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	cd bf       	out	0x3d, r28	; 61
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	08 95       	ret

00000a1e <transmit_clk_elapsed>:

/* Transmits the clk_elapsed over the USART. */
void transmit_clk_elapsed(Shared_Data* shared_ptr){
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	00 d0       	rcall	.+0      	; 0xa28 <transmit_clk_elapsed+0xa>
     a28:	00 d0       	rcall	.+0      	; 0xa2a <transmit_clk_elapsed+0xc>
     a2a:	00 d0       	rcall	.+0      	; 0xa2c <transmit_clk_elapsed+0xe>
     a2c:	cd b7       	in	r28, 0x3d	; 61
     a2e:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     a30:	85 e0       	ldi	r24, 0x05	; 5
     a32:	e6 e0       	ldi	r30, 0x06	; 6
     a34:	f1 e0       	ldi	r31, 0x01	; 1
     a36:	8e 01       	movw	r16, r28
     a38:	0f 5f       	subi	r16, 0xFF	; 255
     a3a:	1f 4f       	sbci	r17, 0xFF	; 255
     a3c:	d8 01       	movw	r26, r16
     a3e:	01 90       	ld	r0, Z+
     a40:	0d 92       	st	X+, r0
     a42:	8a 95       	dec	r24
     a44:	e1 f7       	brne	.-8      	; 0xa3e <transmit_clk_elapsed+0x20>

	snprintf(temp, 6, "%hu", clk_elapsed);
     a46:	80 91 28 01 	lds	r24, 0x0128
     a4a:	8f 93       	push	r24
     a4c:	80 91 27 01 	lds	r24, 0x0127
     a50:	8f 93       	push	r24
     a52:	83 e1       	ldi	r24, 0x13	; 19
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	9f 93       	push	r25
     a58:	8f 93       	push	r24
     a5a:	1f 92       	push	r1
     a5c:	86 e0       	ldi	r24, 0x06	; 6
     a5e:	8f 93       	push	r24
     a60:	1f 93       	push	r17
     a62:	0f 93       	push	r16
     a64:	70 d2       	rcall	.+1248   	; 0xf46 <snprintf>
	USART_transmit(temp);
     a66:	c8 01       	movw	r24, r16
     a68:	03 de       	rcall	.-1018   	; 0x670 <USART_transmit>
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	cd bf       	out	0x3d, r28	; 61
}
     a74:	26 96       	adiw	r28, 0x06	; 6
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	de bf       	out	0x3e, r29	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	cd bf       	out	0x3d, r28	; 61
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	08 95       	ret

00000a8a <transmit_delta_time>:

/* Transmits the delta_time over the USART. */
void transmit_delta_time(Shared_Data* shared_ptr){
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	00 d0       	rcall	.+0      	; 0xa94 <transmit_delta_time+0xa>
     a94:	00 d0       	rcall	.+0      	; 0xa96 <transmit_delta_time+0xc>
     a96:	00 d0       	rcall	.+0      	; 0xa98 <transmit_delta_time+0xe>
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     a9c:	25 e0       	ldi	r18, 0x05	; 5
     a9e:	e6 e0       	ldi	r30, 0x06	; 6
     aa0:	f1 e0       	ldi	r31, 0x01	; 1
     aa2:	8e 01       	movw	r16, r28
     aa4:	0f 5f       	subi	r16, 0xFF	; 255
     aa6:	1f 4f       	sbci	r17, 0xFF	; 255
     aa8:	d8 01       	movw	r26, r16
     aaa:	01 90       	ld	r0, Z+
     aac:	0d 92       	st	X+, r0
     aae:	2a 95       	dec	r18
     ab0:	e1 f7       	brne	.-8      	; 0xaaa <transmit_delta_time+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->delta_time);
     ab2:	fc 01       	movw	r30, r24
     ab4:	e8 5e       	subi	r30, 0xE8	; 232
     ab6:	fd 4f       	sbci	r31, 0xFD	; 253
     ab8:	83 81       	ldd	r24, Z+3	; 0x03
     aba:	8f 93       	push	r24
     abc:	82 81       	ldd	r24, Z+2	; 0x02
     abe:	8f 93       	push	r24
     ac0:	81 81       	ldd	r24, Z+1	; 0x01
     ac2:	8f 93       	push	r24
     ac4:	80 81       	ld	r24, Z
     ac6:	8f 93       	push	r24
     ac8:	87 e1       	ldi	r24, 0x17	; 23
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	1f 92       	push	r1
     ad2:	86 e0       	ldi	r24, 0x06	; 6
     ad4:	8f 93       	push	r24
     ad6:	1f 93       	push	r17
     ad8:	0f 93       	push	r16
     ada:	35 d2       	rcall	.+1130   	; 0xf46 <snprintf>
	USART_transmit(temp);
     adc:	c8 01       	movw	r24, r16
     ade:	c8 dd       	rcall	.-1136   	; 0x670 <USART_transmit>
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	f8 94       	cli
     ae4:	de bf       	out	0x3e, r29	; 62
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	cd bf       	out	0x3d, r28	; 61
}
     aea:	26 96       	adiw	r28, 0x06	; 6
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	de bf       	out	0x3e, r29	; 62
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	cd bf       	out	0x3d, r28	; 61
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	08 95       	ret

00000b00 <transmit_error>:

/* Transmits the control error over the USART. */
void transmit_error(Shared_Data* shared_ptr){
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	00 d0       	rcall	.+0      	; 0xb0a <transmit_error+0xa>
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <transmit_error+0xc>
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <transmit_error+0xe>
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     b12:	25 e0       	ldi	r18, 0x05	; 5
     b14:	e6 e0       	ldi	r30, 0x06	; 6
     b16:	f1 e0       	ldi	r31, 0x01	; 1
     b18:	8e 01       	movw	r16, r28
     b1a:	0f 5f       	subi	r16, 0xFF	; 255
     b1c:	1f 4f       	sbci	r17, 0xFF	; 255
     b1e:	d8 01       	movw	r26, r16
     b20:	01 90       	ld	r0, Z+
     b22:	0d 92       	st	X+, r0
     b24:	2a 95       	dec	r18
     b26:	e1 f7       	brne	.-8      	; 0xb20 <transmit_error+0x20>
	snprintf(temp, 6, "%hd", (shared_ptr->error >> N));
     b28:	fc 01       	movw	r30, r24
     b2a:	84 81       	ldd	r24, Z+4	; 0x04
     b2c:	95 81       	ldd	r25, Z+5	; 0x05
     b2e:	95 95       	asr	r25
     b30:	87 95       	ror	r24
     b32:	95 95       	asr	r25
     b34:	87 95       	ror	r24
     b36:	95 95       	asr	r25
     b38:	87 95       	ror	r24
     b3a:	95 95       	asr	r25
     b3c:	87 95       	ror	r24
     b3e:	9f 93       	push	r25
     b40:	8f 93       	push	r24
     b42:	8c e0       	ldi	r24, 0x0C	; 12
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	9f 93       	push	r25
     b48:	8f 93       	push	r24
     b4a:	1f 92       	push	r1
     b4c:	86 e0       	ldi	r24, 0x06	; 6
     b4e:	8f 93       	push	r24
     b50:	1f 93       	push	r17
     b52:	0f 93       	push	r16
     b54:	f8 d1       	rcall	.+1008   	; 0xf46 <snprintf>
	USART_transmit(temp);
     b56:	c8 01       	movw	r24, r16
     b58:	8b dd       	rcall	.-1258   	; 0x670 <USART_transmit>
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	f8 94       	cli
     b5e:	de bf       	out	0x3e, r29	; 62
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	cd bf       	out	0x3d, r28	; 61
}
     b64:	26 96       	adiw	r28, 0x06	; 6
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	cd bf       	out	0x3d, r28	; 61
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	08 95       	ret

00000b7a <transmit_rpm_avg>:

/* Transmits the average rpm over the USART. */
void transmit_rpm_avg(Shared_Data* shared_ptr){
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	00 d0       	rcall	.+0      	; 0xb84 <transmit_rpm_avg+0xa>
     b84:	00 d0       	rcall	.+0      	; 0xb86 <transmit_rpm_avg+0xc>
     b86:	00 d0       	rcall	.+0      	; 0xb88 <transmit_rpm_avg+0xe>
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     b8c:	25 e0       	ldi	r18, 0x05	; 5
     b8e:	e6 e0       	ldi	r30, 0x06	; 6
     b90:	f1 e0       	ldi	r31, 0x01	; 1
     b92:	8e 01       	movw	r16, r28
     b94:	0f 5f       	subi	r16, 0xFF	; 255
     b96:	1f 4f       	sbci	r17, 0xFF	; 255
     b98:	d8 01       	movw	r26, r16
     b9a:	01 90       	ld	r0, Z+
     b9c:	0d 92       	st	X+, r0
     b9e:	2a 95       	dec	r18
     ba0:	e1 f7       	brne	.-8      	; 0xb9a <transmit_rpm_avg+0x20>
	snprintf(temp, 6, "%lu", (shared_ptr->rpm_avg >> N));
     ba2:	fc 01       	movw	r30, r24
     ba4:	44 89       	ldd	r20, Z+20	; 0x14
     ba6:	55 89       	ldd	r21, Z+21	; 0x15
     ba8:	66 89       	ldd	r22, Z+22	; 0x16
     baa:	77 89       	ldd	r23, Z+23	; 0x17
     bac:	68 94       	set
     bae:	13 f8       	bld	r1, 3
     bb0:	76 95       	lsr	r23
     bb2:	67 95       	ror	r22
     bb4:	57 95       	ror	r21
     bb6:	47 95       	ror	r20
     bb8:	16 94       	lsr	r1
     bba:	d1 f7       	brne	.-12     	; 0xbb0 <transmit_rpm_avg+0x36>
     bbc:	7f 93       	push	r23
     bbe:	6f 93       	push	r22
     bc0:	5f 93       	push	r21
     bc2:	4f 93       	push	r20
     bc4:	87 e1       	ldi	r24, 0x17	; 23
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	9f 93       	push	r25
     bca:	8f 93       	push	r24
     bcc:	1f 92       	push	r1
     bce:	86 e0       	ldi	r24, 0x06	; 6
     bd0:	8f 93       	push	r24
     bd2:	1f 93       	push	r17
     bd4:	0f 93       	push	r16
     bd6:	b7 d1       	rcall	.+878    	; 0xf46 <snprintf>
	USART_transmit(temp);
     bd8:	c8 01       	movw	r24, r16
     bda:	4a dd       	rcall	.-1388   	; 0x670 <USART_transmit>
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
}
     be6:	26 96       	adiw	r28, 0x06	; 6
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	08 95       	ret

00000bfc <transmit_rpm_curr>:

/* Transmits the latest measured rpm over the USART. */
void transmit_rpm_curr(Shared_Data* shared_ptr){
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	00 d0       	rcall	.+0      	; 0xc06 <transmit_rpm_curr+0xa>
     c06:	00 d0       	rcall	.+0      	; 0xc08 <transmit_rpm_curr+0xc>
     c08:	00 d0       	rcall	.+0      	; 0xc0a <transmit_rpm_curr+0xe>
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     c0e:	25 e0       	ldi	r18, 0x05	; 5
     c10:	e6 e0       	ldi	r30, 0x06	; 6
     c12:	f1 e0       	ldi	r31, 0x01	; 1
     c14:	8e 01       	movw	r16, r28
     c16:	0f 5f       	subi	r16, 0xFF	; 255
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	d8 01       	movw	r26, r16
     c1c:	01 90       	ld	r0, Z+
     c1e:	0d 92       	st	X+, r0
     c20:	2a 95       	dec	r18
     c22:	e1 f7       	brne	.-8      	; 0xc1c <transmit_rpm_curr+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->rpm_curr);
     c24:	fc 01       	movw	r30, r24
     c26:	23 89       	ldd	r18, Z+19	; 0x13
     c28:	2f 93       	push	r18
     c2a:	22 89       	ldd	r18, Z+18	; 0x12
     c2c:	2f 93       	push	r18
     c2e:	21 89       	ldd	r18, Z+17	; 0x11
     c30:	2f 93       	push	r18
     c32:	80 89       	ldd	r24, Z+16	; 0x10
     c34:	8f 93       	push	r24
     c36:	87 e1       	ldi	r24, 0x17	; 23
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	9f 93       	push	r25
     c3c:	8f 93       	push	r24
     c3e:	1f 92       	push	r1
     c40:	86 e0       	ldi	r24, 0x06	; 6
     c42:	8f 93       	push	r24
     c44:	1f 93       	push	r17
     c46:	0f 93       	push	r16
     c48:	7e d1       	rcall	.+764    	; 0xf46 <snprintf>
	USART_transmit(temp);
     c4a:	c8 01       	movw	r24, r16
     c4c:	11 dd       	rcall	.-1502   	; 0x670 <USART_transmit>
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
}
     c58:	26 96       	adiw	r28, 0x06	; 6
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	08 95       	ret

00000c6e <transmit_empty>:

/* Transmits five " " over the USART. */
void transmit_empty(){
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	00 d0       	rcall	.+0      	; 0xc74 <transmit_empty+0x6>
     c74:	00 d0       	rcall	.+0      	; 0xc76 <transmit_empty+0x8>
     c76:	00 d0       	rcall	.+0      	; 0xc78 <transmit_empty+0xa>
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     c7c:	85 e0       	ldi	r24, 0x05	; 5
     c7e:	e6 e0       	ldi	r30, 0x06	; 6
     c80:	f1 e0       	ldi	r31, 0x01	; 1
     c82:	de 01       	movw	r26, r28
     c84:	11 96       	adiw	r26, 0x01	; 1
     c86:	01 90       	ld	r0, Z+
     c88:	0d 92       	st	X+, r0
     c8a:	8a 95       	dec	r24
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <transmit_empty+0x18>
	USART_transmit(temp);
     c8e:	ce 01       	movw	r24, r28
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	ee dc       	rcall	.-1572   	; 0x670 <USART_transmit>
}
     c94:	26 96       	adiw	r28, 0x06	; 6
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <__divmodhi4>:
     ca6:	97 fb       	bst	r25, 7
     ca8:	07 2e       	mov	r0, r23
     caa:	16 f4       	brtc	.+4      	; 0xcb0 <__divmodhi4+0xa>
     cac:	00 94       	com	r0
     cae:	06 d0       	rcall	.+12     	; 0xcbc <__divmodhi4_neg1>
     cb0:	77 fd       	sbrc	r23, 7
     cb2:	08 d0       	rcall	.+16     	; 0xcc4 <__divmodhi4_neg2>
     cb4:	00 d1       	rcall	.+512    	; 0xeb6 <__udivmodhi4>
     cb6:	07 fc       	sbrc	r0, 7
     cb8:	05 d0       	rcall	.+10     	; 0xcc4 <__divmodhi4_neg2>
     cba:	3e f4       	brtc	.+14     	; 0xcca <__divmodhi4_exit>

00000cbc <__divmodhi4_neg1>:
     cbc:	90 95       	com	r25
     cbe:	81 95       	neg	r24
     cc0:	9f 4f       	sbci	r25, 0xFF	; 255
     cc2:	08 95       	ret

00000cc4 <__divmodhi4_neg2>:
     cc4:	70 95       	com	r23
     cc6:	61 95       	neg	r22
     cc8:	7f 4f       	sbci	r23, 0xFF	; 255

00000cca <__divmodhi4_exit>:
     cca:	08 95       	ret

00000ccc <__umulhisi3>:
     ccc:	a2 9f       	mul	r26, r18
     cce:	b0 01       	movw	r22, r0
     cd0:	b3 9f       	mul	r27, r19
     cd2:	c0 01       	movw	r24, r0
     cd4:	a3 9f       	mul	r26, r19
     cd6:	01 d0       	rcall	.+2      	; 0xcda <__umulhisi3+0xe>
     cd8:	b2 9f       	mul	r27, r18
     cda:	70 0d       	add	r23, r0
     cdc:	81 1d       	adc	r24, r1
     cde:	11 24       	eor	r1, r1
     ce0:	91 1d       	adc	r25, r1
     ce2:	08 95       	ret

00000ce4 <__muluhisi3>:
     ce4:	f3 df       	rcall	.-26     	; 0xccc <__umulhisi3>
     ce6:	a5 9f       	mul	r26, r21
     ce8:	90 0d       	add	r25, r0
     cea:	b4 9f       	mul	r27, r20
     cec:	90 0d       	add	r25, r0
     cee:	a4 9f       	mul	r26, r20
     cf0:	80 0d       	add	r24, r0
     cf2:	91 1d       	adc	r25, r1
     cf4:	11 24       	eor	r1, r1
     cf6:	08 95       	ret

00000cf8 <__umoddi3>:
     cf8:	68 94       	set
     cfa:	01 c0       	rjmp	.+2      	; 0xcfe <__udivdi3_umoddi3>

00000cfc <__udivdi3>:
     cfc:	e8 94       	clt

00000cfe <__udivdi3_umoddi3>:
     cfe:	8f 92       	push	r8
     d00:	9f 92       	push	r9
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	56 d0       	rcall	.+172    	; 0xdb4 <__udivmod64>
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	9f 90       	pop	r9
     d0e:	8f 90       	pop	r8
     d10:	08 95       	ret

00000d12 <__muldi3>:
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	1f 93       	push	r17
     d18:	0f 93       	push	r16
     d1a:	9a 9d       	mul	r25, r10
     d1c:	f0 2d       	mov	r31, r0
     d1e:	21 9f       	mul	r18, r17
     d20:	f0 0d       	add	r31, r0
     d22:	8b 9d       	mul	r24, r11
     d24:	f0 0d       	add	r31, r0
     d26:	8a 9d       	mul	r24, r10
     d28:	e0 2d       	mov	r30, r0
     d2a:	f1 0d       	add	r31, r1
     d2c:	03 9f       	mul	r16, r19
     d2e:	f0 0d       	add	r31, r0
     d30:	02 9f       	mul	r16, r18
     d32:	e0 0d       	add	r30, r0
     d34:	f1 1d       	adc	r31, r1
     d36:	4e 9d       	mul	r20, r14
     d38:	e0 0d       	add	r30, r0
     d3a:	f1 1d       	adc	r31, r1
     d3c:	5e 9d       	mul	r21, r14
     d3e:	f0 0d       	add	r31, r0
     d40:	4f 9d       	mul	r20, r15
     d42:	f0 0d       	add	r31, r0
     d44:	7f 93       	push	r23
     d46:	6f 93       	push	r22
     d48:	bf 92       	push	r11
     d4a:	af 92       	push	r10
     d4c:	5f 93       	push	r21
     d4e:	4f 93       	push	r20
     d50:	d5 01       	movw	r26, r10
     d52:	bc df       	rcall	.-136    	; 0xccc <__umulhisi3>
     d54:	8b 01       	movw	r16, r22
     d56:	ac 01       	movw	r20, r24
     d58:	d7 01       	movw	r26, r14
     d5a:	b8 df       	rcall	.-144    	; 0xccc <__umulhisi3>
     d5c:	eb 01       	movw	r28, r22
     d5e:	e8 0f       	add	r30, r24
     d60:	f9 1f       	adc	r31, r25
     d62:	d6 01       	movw	r26, r12
     d64:	1f d0       	rcall	.+62     	; 0xda4 <__muldi3_6>
     d66:	2f 91       	pop	r18
     d68:	3f 91       	pop	r19
     d6a:	d6 01       	movw	r26, r12
     d6c:	af df       	rcall	.-162    	; 0xccc <__umulhisi3>
     d6e:	c6 0f       	add	r28, r22
     d70:	d7 1f       	adc	r29, r23
     d72:	e8 1f       	adc	r30, r24
     d74:	f9 1f       	adc	r31, r25
     d76:	af 91       	pop	r26
     d78:	bf 91       	pop	r27
     d7a:	14 d0       	rcall	.+40     	; 0xda4 <__muldi3_6>
     d7c:	2f 91       	pop	r18
     d7e:	3f 91       	pop	r19
     d80:	a5 df       	rcall	.-182    	; 0xccc <__umulhisi3>
     d82:	c6 0f       	add	r28, r22
     d84:	d7 1f       	adc	r29, r23
     d86:	e8 1f       	adc	r30, r24
     d88:	f9 1f       	adc	r31, r25
     d8a:	d6 01       	movw	r26, r12
     d8c:	9f df       	rcall	.-194    	; 0xccc <__umulhisi3>
     d8e:	e6 0f       	add	r30, r22
     d90:	f7 1f       	adc	r31, r23
     d92:	98 01       	movw	r18, r16
     d94:	be 01       	movw	r22, r28
     d96:	cf 01       	movw	r24, r30
     d98:	11 24       	eor	r1, r1
     d9a:	0f 91       	pop	r16
     d9c:	1f 91       	pop	r17
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <__muldi3_6>:
     da4:	93 df       	rcall	.-218    	; 0xccc <__umulhisi3>
     da6:	46 0f       	add	r20, r22
     da8:	57 1f       	adc	r21, r23
     daa:	c8 1f       	adc	r28, r24
     dac:	d9 1f       	adc	r29, r25
     dae:	08 f4       	brcc	.+2      	; 0xdb2 <__muldi3_6+0xe>
     db0:	31 96       	adiw	r30, 0x01	; 1
     db2:	08 95       	ret

00000db4 <__udivmod64>:
     db4:	88 24       	eor	r8, r8
     db6:	99 24       	eor	r9, r9
     db8:	f4 01       	movw	r30, r8
     dba:	e4 01       	movw	r28, r8
     dbc:	b0 e4       	ldi	r27, 0x40	; 64
     dbe:	1b 2e       	mov	r1, r27
     dc0:	d4 01       	movw	r26, r8
     dc2:	9d 15       	cp	r25, r13
     dc4:	8e 04       	cpc	r8, r14
     dc6:	9f 04       	cpc	r9, r15
     dc8:	e0 07       	cpc	r30, r16
     dca:	f1 07       	cpc	r31, r17
     dcc:	38 f4       	brcc	.+14     	; 0xddc <__udivmod64+0x28>
     dce:	fc 01       	movw	r30, r24
     dd0:	4b 01       	movw	r8, r22
     dd2:	ca 01       	movw	r24, r20
     dd4:	b9 01       	movw	r22, r18
     dd6:	ad 01       	movw	r20, r26
     dd8:	9e 01       	movw	r18, r28
     dda:	16 94       	lsr	r1
     ddc:	22 0f       	add	r18, r18
     dde:	33 1f       	adc	r19, r19
     de0:	44 1f       	adc	r20, r20
     de2:	55 1f       	adc	r21, r21
     de4:	66 1f       	adc	r22, r22
     de6:	77 1f       	adc	r23, r23
     de8:	88 1f       	adc	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	88 1c       	adc	r8, r8
     dee:	99 1c       	adc	r9, r9
     df0:	ee 1f       	adc	r30, r30
     df2:	ff 1f       	adc	r31, r31
     df4:	cc 1f       	adc	r28, r28
     df6:	dd 1f       	adc	r29, r29
     df8:	aa 1f       	adc	r26, r26
     dfa:	bb 1f       	adc	r27, r27
     dfc:	8a 14       	cp	r8, r10
     dfe:	9b 04       	cpc	r9, r11
     e00:	ec 05       	cpc	r30, r12
     e02:	fd 05       	cpc	r31, r13
     e04:	ce 05       	cpc	r28, r14
     e06:	df 05       	cpc	r29, r15
     e08:	a0 07       	cpc	r26, r16
     e0a:	b1 07       	cpc	r27, r17
     e0c:	48 f0       	brcs	.+18     	; 0xe20 <__udivmod64+0x6c>
     e0e:	8a 18       	sub	r8, r10
     e10:	9b 08       	sbc	r9, r11
     e12:	ec 09       	sbc	r30, r12
     e14:	fd 09       	sbc	r31, r13
     e16:	ce 09       	sbc	r28, r14
     e18:	df 09       	sbc	r29, r15
     e1a:	a0 0b       	sbc	r26, r16
     e1c:	b1 0b       	sbc	r27, r17
     e1e:	21 60       	ori	r18, 0x01	; 1
     e20:	1a 94       	dec	r1
     e22:	e1 f6       	brne	.-72     	; 0xddc <__udivmod64+0x28>
     e24:	2e f4       	brtc	.+10     	; 0xe30 <__udivmod64+0x7c>
     e26:	94 01       	movw	r18, r8
     e28:	af 01       	movw	r20, r30
     e2a:	be 01       	movw	r22, r28
     e2c:	cd 01       	movw	r24, r26
     e2e:	00 0c       	add	r0, r0
     e30:	08 95       	ret

00000e32 <__ashldi3>:
     e32:	0f 93       	push	r16
     e34:	0f 73       	andi	r16, 0x3F	; 63
     e36:	51 f0       	breq	.+20     	; 0xe4c <__ashldi3+0x1a>
     e38:	22 0f       	add	r18, r18
     e3a:	33 1f       	adc	r19, r19
     e3c:	44 1f       	adc	r20, r20
     e3e:	55 1f       	adc	r21, r21
     e40:	66 1f       	adc	r22, r22
     e42:	77 1f       	adc	r23, r23
     e44:	88 1f       	adc	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 95       	dec	r16
     e4a:	b1 f7       	brne	.-20     	; 0xe38 <__ashldi3+0x6>
     e4c:	0f 91       	pop	r16
     e4e:	08 95       	ret

00000e50 <__ashrdi3>:
     e50:	0f 93       	push	r16
     e52:	0f 73       	andi	r16, 0x3F	; 63
     e54:	51 f0       	breq	.+20     	; 0xe6a <__ashrdi3+0x1a>
     e56:	95 95       	asr	r25
     e58:	87 95       	ror	r24
     e5a:	77 95       	ror	r23
     e5c:	67 95       	ror	r22
     e5e:	57 95       	ror	r21
     e60:	47 95       	ror	r20
     e62:	37 95       	ror	r19
     e64:	27 95       	ror	r18
     e66:	0a 95       	dec	r16
     e68:	b1 f7       	brne	.-20     	; 0xe56 <__ashrdi3+0x6>
     e6a:	0f 91       	pop	r16
     e6c:	08 95       	ret

00000e6e <__lshrdi3>:
     e6e:	0f 93       	push	r16
     e70:	0f 73       	andi	r16, 0x3F	; 63
     e72:	51 f0       	breq	.+20     	; 0xe88 <__lshrdi3+0x1a>
     e74:	96 95       	lsr	r25
     e76:	87 95       	ror	r24
     e78:	77 95       	ror	r23
     e7a:	67 95       	ror	r22
     e7c:	57 95       	ror	r21
     e7e:	47 95       	ror	r20
     e80:	37 95       	ror	r19
     e82:	27 95       	ror	r18
     e84:	0a 95       	dec	r16
     e86:	b1 f7       	brne	.-20     	; 0xe74 <__lshrdi3+0x6>
     e88:	0f 91       	pop	r16
     e8a:	08 95       	ret

00000e8c <__adddi3>:
     e8c:	2a 0d       	add	r18, r10
     e8e:	3b 1d       	adc	r19, r11
     e90:	4c 1d       	adc	r20, r12
     e92:	5d 1d       	adc	r21, r13
     e94:	6e 1d       	adc	r22, r14
     e96:	7f 1d       	adc	r23, r15
     e98:	80 1f       	adc	r24, r16
     e9a:	91 1f       	adc	r25, r17
     e9c:	08 95       	ret

00000e9e <__cmpdi2_s8>:
     e9e:	00 24       	eor	r0, r0
     ea0:	a7 fd       	sbrc	r26, 7
     ea2:	00 94       	com	r0
     ea4:	2a 17       	cp	r18, r26
     ea6:	30 05       	cpc	r19, r0
     ea8:	40 05       	cpc	r20, r0
     eaa:	50 05       	cpc	r21, r0
     eac:	60 05       	cpc	r22, r0
     eae:	70 05       	cpc	r23, r0
     eb0:	80 05       	cpc	r24, r0
     eb2:	90 05       	cpc	r25, r0
     eb4:	08 95       	ret

00000eb6 <__udivmodhi4>:
     eb6:	aa 1b       	sub	r26, r26
     eb8:	bb 1b       	sub	r27, r27
     eba:	51 e1       	ldi	r21, 0x11	; 17
     ebc:	07 c0       	rjmp	.+14     	; 0xecc <__udivmodhi4_ep>

00000ebe <__udivmodhi4_loop>:
     ebe:	aa 1f       	adc	r26, r26
     ec0:	bb 1f       	adc	r27, r27
     ec2:	a6 17       	cp	r26, r22
     ec4:	b7 07       	cpc	r27, r23
     ec6:	10 f0       	brcs	.+4      	; 0xecc <__udivmodhi4_ep>
     ec8:	a6 1b       	sub	r26, r22
     eca:	b7 0b       	sbc	r27, r23

00000ecc <__udivmodhi4_ep>:
     ecc:	88 1f       	adc	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	5a 95       	dec	r21
     ed2:	a9 f7       	brne	.-22     	; 0xebe <__udivmodhi4_loop>
     ed4:	80 95       	com	r24
     ed6:	90 95       	com	r25
     ed8:	bc 01       	movw	r22, r24
     eda:	cd 01       	movw	r24, r26
     edc:	08 95       	ret

00000ede <atoi>:
     ede:	fc 01       	movw	r30, r24
     ee0:	88 27       	eor	r24, r24
     ee2:	99 27       	eor	r25, r25
     ee4:	e8 94       	clt
     ee6:	21 91       	ld	r18, Z+
     ee8:	20 32       	cpi	r18, 0x20	; 32
     eea:	e9 f3       	breq	.-6      	; 0xee6 <atoi+0x8>
     eec:	29 30       	cpi	r18, 0x09	; 9
     eee:	10 f0       	brcs	.+4      	; 0xef4 <atoi+0x16>
     ef0:	2e 30       	cpi	r18, 0x0E	; 14
     ef2:	c8 f3       	brcs	.-14     	; 0xee6 <atoi+0x8>
     ef4:	2b 32       	cpi	r18, 0x2B	; 43
     ef6:	39 f0       	breq	.+14     	; 0xf06 <atoi+0x28>
     ef8:	2d 32       	cpi	r18, 0x2D	; 45
     efa:	31 f4       	brne	.+12     	; 0xf08 <atoi+0x2a>
     efc:	68 94       	set
     efe:	03 c0       	rjmp	.+6      	; 0xf06 <atoi+0x28>
     f00:	1a d0       	rcall	.+52     	; 0xf36 <__mulhi_const_10>
     f02:	82 0f       	add	r24, r18
     f04:	91 1d       	adc	r25, r1
     f06:	21 91       	ld	r18, Z+
     f08:	20 53       	subi	r18, 0x30	; 48
     f0a:	2a 30       	cpi	r18, 0x0A	; 10
     f0c:	c8 f3       	brcs	.-14     	; 0xf00 <atoi+0x22>
     f0e:	1e f4       	brtc	.+6      	; 0xf16 <atoi+0x38>
     f10:	90 95       	com	r25
     f12:	81 95       	neg	r24
     f14:	9f 4f       	sbci	r25, 0xFF	; 255
     f16:	08 95       	ret

00000f18 <strncpy>:
     f18:	fb 01       	movw	r30, r22
     f1a:	dc 01       	movw	r26, r24
     f1c:	41 50       	subi	r20, 0x01	; 1
     f1e:	50 40       	sbci	r21, 0x00	; 0
     f20:	48 f0       	brcs	.+18     	; 0xf34 <strncpy+0x1c>
     f22:	01 90       	ld	r0, Z+
     f24:	0d 92       	st	X+, r0
     f26:	00 20       	and	r0, r0
     f28:	c9 f7       	brne	.-14     	; 0xf1c <strncpy+0x4>
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <strncpy+0x16>
     f2c:	1d 92       	st	X+, r1
     f2e:	41 50       	subi	r20, 0x01	; 1
     f30:	50 40       	sbci	r21, 0x00	; 0
     f32:	e0 f7       	brcc	.-8      	; 0xf2c <strncpy+0x14>
     f34:	08 95       	ret

00000f36 <__mulhi_const_10>:
     f36:	7a e0       	ldi	r23, 0x0A	; 10
     f38:	97 9f       	mul	r25, r23
     f3a:	90 2d       	mov	r25, r0
     f3c:	87 9f       	mul	r24, r23
     f3e:	80 2d       	mov	r24, r0
     f40:	91 0d       	add	r25, r1
     f42:	11 24       	eor	r1, r1
     f44:	08 95       	ret

00000f46 <snprintf>:
     f46:	ae e0       	ldi	r26, 0x0E	; 14
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e8 ea       	ldi	r30, 0xA8	; 168
     f4c:	f7 e0       	ldi	r31, 0x07	; 7
     f4e:	a3 c2       	rjmp	.+1350   	; 0x1496 <__prologue_saves__+0x1c>
     f50:	0d 89       	ldd	r16, Y+21	; 0x15
     f52:	1e 89       	ldd	r17, Y+22	; 0x16
     f54:	8f 89       	ldd	r24, Y+23	; 0x17
     f56:	98 8d       	ldd	r25, Y+24	; 0x18
     f58:	26 e0       	ldi	r18, 0x06	; 6
     f5a:	2c 83       	std	Y+4, r18	; 0x04
     f5c:	1a 83       	std	Y+2, r17	; 0x02
     f5e:	09 83       	std	Y+1, r16	; 0x01
     f60:	97 ff       	sbrs	r25, 7
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <snprintf+0x22>
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e8       	ldi	r25, 0x80	; 128
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	9e 83       	std	Y+6, r25	; 0x06
     f6c:	8d 83       	std	Y+5, r24	; 0x05
     f6e:	ce 01       	movw	r24, r28
     f70:	4b 96       	adiw	r24, 0x1b	; 27
     f72:	ac 01       	movw	r20, r24
     f74:	69 8d       	ldd	r22, Y+25	; 0x19
     f76:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f78:	ce 01       	movw	r24, r28
     f7a:	01 96       	adiw	r24, 0x01	; 1
     f7c:	11 d0       	rcall	.+34     	; 0xfa0 <vfprintf>
     f7e:	4d 81       	ldd	r20, Y+5	; 0x05
     f80:	5e 81       	ldd	r21, Y+6	; 0x06
     f82:	57 fd       	sbrc	r21, 7
     f84:	0a c0       	rjmp	.+20     	; 0xf9a <snprintf+0x54>
     f86:	2f 81       	ldd	r18, Y+7	; 0x07
     f88:	38 85       	ldd	r19, Y+8	; 0x08
     f8a:	42 17       	cp	r20, r18
     f8c:	53 07       	cpc	r21, r19
     f8e:	0c f4       	brge	.+2      	; 0xf92 <snprintf+0x4c>
     f90:	9a 01       	movw	r18, r20
     f92:	f8 01       	movw	r30, r16
     f94:	e2 0f       	add	r30, r18
     f96:	f3 1f       	adc	r31, r19
     f98:	10 82       	st	Z, r1
     f9a:	2e 96       	adiw	r28, 0x0e	; 14
     f9c:	e4 e0       	ldi	r30, 0x04	; 4
     f9e:	97 c2       	rjmp	.+1326   	; 0x14ce <__epilogue_restores__+0x1c>

00000fa0 <vfprintf>:
     fa0:	ac e0       	ldi	r26, 0x0C	; 12
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e5 ed       	ldi	r30, 0xD5	; 213
     fa6:	f7 e0       	ldi	r31, 0x07	; 7
     fa8:	68 c2       	rjmp	.+1232   	; 0x147a <__prologue_saves__>
     faa:	7c 01       	movw	r14, r24
     fac:	6b 01       	movw	r12, r22
     fae:	8a 01       	movw	r16, r20
     fb0:	fc 01       	movw	r30, r24
     fb2:	17 82       	std	Z+7, r1	; 0x07
     fb4:	16 82       	std	Z+6, r1	; 0x06
     fb6:	83 81       	ldd	r24, Z+3	; 0x03
     fb8:	81 ff       	sbrs	r24, 1
     fba:	b9 c1       	rjmp	.+882    	; 0x132e <vfprintf+0x38e>
     fbc:	88 24       	eor	r8, r8
     fbe:	83 94       	inc	r8
     fc0:	91 2c       	mov	r9, r1
     fc2:	8c 0e       	add	r8, r28
     fc4:	9d 1e       	adc	r9, r29
     fc6:	f7 01       	movw	r30, r14
     fc8:	93 81       	ldd	r25, Z+3	; 0x03
     fca:	f6 01       	movw	r30, r12
     fcc:	93 fd       	sbrc	r25, 3
     fce:	85 91       	lpm	r24, Z+
     fd0:	93 ff       	sbrs	r25, 3
     fd2:	81 91       	ld	r24, Z+
     fd4:	6f 01       	movw	r12, r30
     fd6:	88 23       	and	r24, r24
     fd8:	09 f4       	brne	.+2      	; 0xfdc <vfprintf+0x3c>
     fda:	a5 c1       	rjmp	.+842    	; 0x1326 <vfprintf+0x386>
     fdc:	85 32       	cpi	r24, 0x25	; 37
     fde:	39 f4       	brne	.+14     	; 0xfee <vfprintf+0x4e>
     fe0:	93 fd       	sbrc	r25, 3
     fe2:	85 91       	lpm	r24, Z+
     fe4:	93 ff       	sbrs	r25, 3
     fe6:	81 91       	ld	r24, Z+
     fe8:	6f 01       	movw	r12, r30
     fea:	85 32       	cpi	r24, 0x25	; 37
     fec:	21 f4       	brne	.+8      	; 0xff6 <vfprintf+0x56>
     fee:	b7 01       	movw	r22, r14
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	b9 d1       	rcall	.+882    	; 0x1366 <fputc>
     ff4:	e8 cf       	rjmp	.-48     	; 0xfc6 <vfprintf+0x26>
     ff6:	51 2c       	mov	r5, r1
     ff8:	31 2c       	mov	r3, r1
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	20 32       	cpi	r18, 0x20	; 32
     ffe:	a8 f4       	brcc	.+42     	; 0x102a <vfprintf+0x8a>
    1000:	8b 32       	cpi	r24, 0x2B	; 43
    1002:	61 f0       	breq	.+24     	; 0x101c <vfprintf+0x7c>
    1004:	28 f4       	brcc	.+10     	; 0x1010 <vfprintf+0x70>
    1006:	80 32       	cpi	r24, 0x20	; 32
    1008:	51 f0       	breq	.+20     	; 0x101e <vfprintf+0x7e>
    100a:	83 32       	cpi	r24, 0x23	; 35
    100c:	71 f4       	brne	.+28     	; 0x102a <vfprintf+0x8a>
    100e:	0b c0       	rjmp	.+22     	; 0x1026 <vfprintf+0x86>
    1010:	8d 32       	cpi	r24, 0x2D	; 45
    1012:	39 f0       	breq	.+14     	; 0x1022 <vfprintf+0x82>
    1014:	80 33       	cpi	r24, 0x30	; 48
    1016:	49 f4       	brne	.+18     	; 0x102a <vfprintf+0x8a>
    1018:	21 60       	ori	r18, 0x01	; 1
    101a:	28 c0       	rjmp	.+80     	; 0x106c <vfprintf+0xcc>
    101c:	22 60       	ori	r18, 0x02	; 2
    101e:	24 60       	ori	r18, 0x04	; 4
    1020:	25 c0       	rjmp	.+74     	; 0x106c <vfprintf+0xcc>
    1022:	28 60       	ori	r18, 0x08	; 8
    1024:	23 c0       	rjmp	.+70     	; 0x106c <vfprintf+0xcc>
    1026:	20 61       	ori	r18, 0x10	; 16
    1028:	21 c0       	rjmp	.+66     	; 0x106c <vfprintf+0xcc>
    102a:	27 fd       	sbrc	r18, 7
    102c:	27 c0       	rjmp	.+78     	; 0x107c <vfprintf+0xdc>
    102e:	38 2f       	mov	r19, r24
    1030:	30 53       	subi	r19, 0x30	; 48
    1032:	3a 30       	cpi	r19, 0x0A	; 10
    1034:	78 f4       	brcc	.+30     	; 0x1054 <vfprintf+0xb4>
    1036:	26 ff       	sbrs	r18, 6
    1038:	06 c0       	rjmp	.+12     	; 0x1046 <vfprintf+0xa6>
    103a:	fa e0       	ldi	r31, 0x0A	; 10
    103c:	5f 9e       	mul	r5, r31
    103e:	30 0d       	add	r19, r0
    1040:	11 24       	eor	r1, r1
    1042:	53 2e       	mov	r5, r19
    1044:	13 c0       	rjmp	.+38     	; 0x106c <vfprintf+0xcc>
    1046:	8a e0       	ldi	r24, 0x0A	; 10
    1048:	38 9e       	mul	r3, r24
    104a:	30 0d       	add	r19, r0
    104c:	11 24       	eor	r1, r1
    104e:	33 2e       	mov	r3, r19
    1050:	20 62       	ori	r18, 0x20	; 32
    1052:	0c c0       	rjmp	.+24     	; 0x106c <vfprintf+0xcc>
    1054:	8e 32       	cpi	r24, 0x2E	; 46
    1056:	21 f4       	brne	.+8      	; 0x1060 <vfprintf+0xc0>
    1058:	26 fd       	sbrc	r18, 6
    105a:	65 c1       	rjmp	.+714    	; 0x1326 <vfprintf+0x386>
    105c:	20 64       	ori	r18, 0x40	; 64
    105e:	06 c0       	rjmp	.+12     	; 0x106c <vfprintf+0xcc>
    1060:	8c 36       	cpi	r24, 0x6C	; 108
    1062:	11 f4       	brne	.+4      	; 0x1068 <vfprintf+0xc8>
    1064:	20 68       	ori	r18, 0x80	; 128
    1066:	02 c0       	rjmp	.+4      	; 0x106c <vfprintf+0xcc>
    1068:	88 36       	cpi	r24, 0x68	; 104
    106a:	41 f4       	brne	.+16     	; 0x107c <vfprintf+0xdc>
    106c:	f6 01       	movw	r30, r12
    106e:	93 fd       	sbrc	r25, 3
    1070:	85 91       	lpm	r24, Z+
    1072:	93 ff       	sbrs	r25, 3
    1074:	81 91       	ld	r24, Z+
    1076:	6f 01       	movw	r12, r30
    1078:	81 11       	cpse	r24, r1
    107a:	c0 cf       	rjmp	.-128    	; 0xffc <vfprintf+0x5c>
    107c:	98 2f       	mov	r25, r24
    107e:	95 54       	subi	r25, 0x45	; 69
    1080:	93 30       	cpi	r25, 0x03	; 3
    1082:	18 f0       	brcs	.+6      	; 0x108a <vfprintf+0xea>
    1084:	90 52       	subi	r25, 0x20	; 32
    1086:	93 30       	cpi	r25, 0x03	; 3
    1088:	28 f4       	brcc	.+10     	; 0x1094 <vfprintf+0xf4>
    108a:	0c 5f       	subi	r16, 0xFC	; 252
    108c:	1f 4f       	sbci	r17, 0xFF	; 255
    108e:	ff e3       	ldi	r31, 0x3F	; 63
    1090:	f9 83       	std	Y+1, r31	; 0x01
    1092:	0d c0       	rjmp	.+26     	; 0x10ae <vfprintf+0x10e>
    1094:	83 36       	cpi	r24, 0x63	; 99
    1096:	31 f0       	breq	.+12     	; 0x10a4 <vfprintf+0x104>
    1098:	83 37       	cpi	r24, 0x73	; 115
    109a:	71 f0       	breq	.+28     	; 0x10b8 <vfprintf+0x118>
    109c:	83 35       	cpi	r24, 0x53	; 83
    109e:	09 f0       	breq	.+2      	; 0x10a2 <vfprintf+0x102>
    10a0:	5a c0       	rjmp	.+180    	; 0x1156 <vfprintf+0x1b6>
    10a2:	22 c0       	rjmp	.+68     	; 0x10e8 <vfprintf+0x148>
    10a4:	f8 01       	movw	r30, r16
    10a6:	80 81       	ld	r24, Z
    10a8:	89 83       	std	Y+1, r24	; 0x01
    10aa:	0e 5f       	subi	r16, 0xFE	; 254
    10ac:	1f 4f       	sbci	r17, 0xFF	; 255
    10ae:	44 24       	eor	r4, r4
    10b0:	43 94       	inc	r4
    10b2:	51 2c       	mov	r5, r1
    10b4:	54 01       	movw	r10, r8
    10b6:	14 c0       	rjmp	.+40     	; 0x10e0 <vfprintf+0x140>
    10b8:	38 01       	movw	r6, r16
    10ba:	f2 e0       	ldi	r31, 0x02	; 2
    10bc:	6f 0e       	add	r6, r31
    10be:	71 1c       	adc	r7, r1
    10c0:	f8 01       	movw	r30, r16
    10c2:	a0 80       	ld	r10, Z
    10c4:	b1 80       	ldd	r11, Z+1	; 0x01
    10c6:	26 ff       	sbrs	r18, 6
    10c8:	03 c0       	rjmp	.+6      	; 0x10d0 <vfprintf+0x130>
    10ca:	65 2d       	mov	r22, r5
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <vfprintf+0x134>
    10d0:	6f ef       	ldi	r22, 0xFF	; 255
    10d2:	7f ef       	ldi	r23, 0xFF	; 255
    10d4:	c5 01       	movw	r24, r10
    10d6:	2c 87       	std	Y+12, r18	; 0x0c
    10d8:	3b d1       	rcall	.+630    	; 0x1350 <strnlen>
    10da:	2c 01       	movw	r4, r24
    10dc:	83 01       	movw	r16, r6
    10de:	2c 85       	ldd	r18, Y+12	; 0x0c
    10e0:	6f e7       	ldi	r22, 0x7F	; 127
    10e2:	26 2e       	mov	r2, r22
    10e4:	22 22       	and	r2, r18
    10e6:	17 c0       	rjmp	.+46     	; 0x1116 <vfprintf+0x176>
    10e8:	38 01       	movw	r6, r16
    10ea:	f2 e0       	ldi	r31, 0x02	; 2
    10ec:	6f 0e       	add	r6, r31
    10ee:	71 1c       	adc	r7, r1
    10f0:	f8 01       	movw	r30, r16
    10f2:	a0 80       	ld	r10, Z
    10f4:	b1 80       	ldd	r11, Z+1	; 0x01
    10f6:	26 ff       	sbrs	r18, 6
    10f8:	03 c0       	rjmp	.+6      	; 0x1100 <vfprintf+0x160>
    10fa:	65 2d       	mov	r22, r5
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <vfprintf+0x164>
    1100:	6f ef       	ldi	r22, 0xFF	; 255
    1102:	7f ef       	ldi	r23, 0xFF	; 255
    1104:	c5 01       	movw	r24, r10
    1106:	2c 87       	std	Y+12, r18	; 0x0c
    1108:	18 d1       	rcall	.+560    	; 0x133a <strnlen_P>
    110a:	2c 01       	movw	r4, r24
    110c:	2c 85       	ldd	r18, Y+12	; 0x0c
    110e:	50 e8       	ldi	r21, 0x80	; 128
    1110:	25 2e       	mov	r2, r21
    1112:	22 2a       	or	r2, r18
    1114:	83 01       	movw	r16, r6
    1116:	23 fc       	sbrc	r2, 3
    1118:	1a c0       	rjmp	.+52     	; 0x114e <vfprintf+0x1ae>
    111a:	05 c0       	rjmp	.+10     	; 0x1126 <vfprintf+0x186>
    111c:	b7 01       	movw	r22, r14
    111e:	80 e2       	ldi	r24, 0x20	; 32
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	21 d1       	rcall	.+578    	; 0x1366 <fputc>
    1124:	3a 94       	dec	r3
    1126:	83 2d       	mov	r24, r3
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	48 16       	cp	r4, r24
    112c:	59 06       	cpc	r5, r25
    112e:	b0 f3       	brcs	.-20     	; 0x111c <vfprintf+0x17c>
    1130:	0e c0       	rjmp	.+28     	; 0x114e <vfprintf+0x1ae>
    1132:	f5 01       	movw	r30, r10
    1134:	27 fc       	sbrc	r2, 7
    1136:	85 91       	lpm	r24, Z+
    1138:	27 fe       	sbrs	r2, 7
    113a:	81 91       	ld	r24, Z+
    113c:	5f 01       	movw	r10, r30
    113e:	b7 01       	movw	r22, r14
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	11 d1       	rcall	.+546    	; 0x1366 <fputc>
    1144:	31 10       	cpse	r3, r1
    1146:	3a 94       	dec	r3
    1148:	f1 e0       	ldi	r31, 0x01	; 1
    114a:	4f 1a       	sub	r4, r31
    114c:	51 08       	sbc	r5, r1
    114e:	41 14       	cp	r4, r1
    1150:	51 04       	cpc	r5, r1
    1152:	79 f7       	brne	.-34     	; 0x1132 <vfprintf+0x192>
    1154:	e5 c0       	rjmp	.+458    	; 0x1320 <vfprintf+0x380>
    1156:	84 36       	cpi	r24, 0x64	; 100
    1158:	11 f0       	breq	.+4      	; 0x115e <vfprintf+0x1be>
    115a:	89 36       	cpi	r24, 0x69	; 105
    115c:	39 f5       	brne	.+78     	; 0x11ac <vfprintf+0x20c>
    115e:	f8 01       	movw	r30, r16
    1160:	27 ff       	sbrs	r18, 7
    1162:	07 c0       	rjmp	.+14     	; 0x1172 <vfprintf+0x1d2>
    1164:	60 81       	ld	r22, Z
    1166:	71 81       	ldd	r23, Z+1	; 0x01
    1168:	82 81       	ldd	r24, Z+2	; 0x02
    116a:	93 81       	ldd	r25, Z+3	; 0x03
    116c:	0c 5f       	subi	r16, 0xFC	; 252
    116e:	1f 4f       	sbci	r17, 0xFF	; 255
    1170:	08 c0       	rjmp	.+16     	; 0x1182 <vfprintf+0x1e2>
    1172:	60 81       	ld	r22, Z
    1174:	71 81       	ldd	r23, Z+1	; 0x01
    1176:	88 27       	eor	r24, r24
    1178:	77 fd       	sbrc	r23, 7
    117a:	80 95       	com	r24
    117c:	98 2f       	mov	r25, r24
    117e:	0e 5f       	subi	r16, 0xFE	; 254
    1180:	1f 4f       	sbci	r17, 0xFF	; 255
    1182:	4f e6       	ldi	r20, 0x6F	; 111
    1184:	b4 2e       	mov	r11, r20
    1186:	b2 22       	and	r11, r18
    1188:	97 ff       	sbrs	r25, 7
    118a:	09 c0       	rjmp	.+18     	; 0x119e <vfprintf+0x1fe>
    118c:	90 95       	com	r25
    118e:	80 95       	com	r24
    1190:	70 95       	com	r23
    1192:	61 95       	neg	r22
    1194:	7f 4f       	sbci	r23, 0xFF	; 255
    1196:	8f 4f       	sbci	r24, 0xFF	; 255
    1198:	9f 4f       	sbci	r25, 0xFF	; 255
    119a:	f0 e8       	ldi	r31, 0x80	; 128
    119c:	bf 2a       	or	r11, r31
    119e:	2a e0       	ldi	r18, 0x0A	; 10
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	a4 01       	movw	r20, r8
    11a4:	0c d1       	rcall	.+536    	; 0x13be <__ultoa_invert>
    11a6:	a8 2e       	mov	r10, r24
    11a8:	a8 18       	sub	r10, r8
    11aa:	42 c0       	rjmp	.+132    	; 0x1230 <vfprintf+0x290>
    11ac:	85 37       	cpi	r24, 0x75	; 117
    11ae:	31 f4       	brne	.+12     	; 0x11bc <vfprintf+0x21c>
    11b0:	3f ee       	ldi	r19, 0xEF	; 239
    11b2:	b3 2e       	mov	r11, r19
    11b4:	b2 22       	and	r11, r18
    11b6:	2a e0       	ldi	r18, 0x0A	; 10
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	24 c0       	rjmp	.+72     	; 0x1204 <vfprintf+0x264>
    11bc:	99 ef       	ldi	r25, 0xF9	; 249
    11be:	b9 2e       	mov	r11, r25
    11c0:	b2 22       	and	r11, r18
    11c2:	8f 36       	cpi	r24, 0x6F	; 111
    11c4:	b9 f0       	breq	.+46     	; 0x11f4 <vfprintf+0x254>
    11c6:	20 f4       	brcc	.+8      	; 0x11d0 <vfprintf+0x230>
    11c8:	88 35       	cpi	r24, 0x58	; 88
    11ca:	09 f0       	breq	.+2      	; 0x11ce <vfprintf+0x22e>
    11cc:	ac c0       	rjmp	.+344    	; 0x1326 <vfprintf+0x386>
    11ce:	0d c0       	rjmp	.+26     	; 0x11ea <vfprintf+0x24a>
    11d0:	80 37       	cpi	r24, 0x70	; 112
    11d2:	21 f0       	breq	.+8      	; 0x11dc <vfprintf+0x23c>
    11d4:	88 37       	cpi	r24, 0x78	; 120
    11d6:	09 f0       	breq	.+2      	; 0x11da <vfprintf+0x23a>
    11d8:	a6 c0       	rjmp	.+332    	; 0x1326 <vfprintf+0x386>
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <vfprintf+0x240>
    11dc:	20 e1       	ldi	r18, 0x10	; 16
    11de:	b2 2a       	or	r11, r18
    11e0:	b4 fe       	sbrs	r11, 4
    11e2:	0b c0       	rjmp	.+22     	; 0x11fa <vfprintf+0x25a>
    11e4:	84 e0       	ldi	r24, 0x04	; 4
    11e6:	b8 2a       	or	r11, r24
    11e8:	08 c0       	rjmp	.+16     	; 0x11fa <vfprintf+0x25a>
    11ea:	24 ff       	sbrs	r18, 4
    11ec:	09 c0       	rjmp	.+18     	; 0x1200 <vfprintf+0x260>
    11ee:	e6 e0       	ldi	r30, 0x06	; 6
    11f0:	be 2a       	or	r11, r30
    11f2:	06 c0       	rjmp	.+12     	; 0x1200 <vfprintf+0x260>
    11f4:	28 e0       	ldi	r18, 0x08	; 8
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <vfprintf+0x264>
    11fa:	20 e1       	ldi	r18, 0x10	; 16
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <vfprintf+0x264>
    1200:	20 e1       	ldi	r18, 0x10	; 16
    1202:	32 e0       	ldi	r19, 0x02	; 2
    1204:	f8 01       	movw	r30, r16
    1206:	b7 fe       	sbrs	r11, 7
    1208:	07 c0       	rjmp	.+14     	; 0x1218 <vfprintf+0x278>
    120a:	60 81       	ld	r22, Z
    120c:	71 81       	ldd	r23, Z+1	; 0x01
    120e:	82 81       	ldd	r24, Z+2	; 0x02
    1210:	93 81       	ldd	r25, Z+3	; 0x03
    1212:	0c 5f       	subi	r16, 0xFC	; 252
    1214:	1f 4f       	sbci	r17, 0xFF	; 255
    1216:	06 c0       	rjmp	.+12     	; 0x1224 <vfprintf+0x284>
    1218:	60 81       	ld	r22, Z
    121a:	71 81       	ldd	r23, Z+1	; 0x01
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 5f       	subi	r16, 0xFE	; 254
    1222:	1f 4f       	sbci	r17, 0xFF	; 255
    1224:	a4 01       	movw	r20, r8
    1226:	cb d0       	rcall	.+406    	; 0x13be <__ultoa_invert>
    1228:	a8 2e       	mov	r10, r24
    122a:	a8 18       	sub	r10, r8
    122c:	ff e7       	ldi	r31, 0x7F	; 127
    122e:	bf 22       	and	r11, r31
    1230:	b6 fe       	sbrs	r11, 6
    1232:	0b c0       	rjmp	.+22     	; 0x124a <vfprintf+0x2aa>
    1234:	2b 2d       	mov	r18, r11
    1236:	2e 7f       	andi	r18, 0xFE	; 254
    1238:	a5 14       	cp	r10, r5
    123a:	50 f4       	brcc	.+20     	; 0x1250 <vfprintf+0x2b0>
    123c:	b4 fe       	sbrs	r11, 4
    123e:	0a c0       	rjmp	.+20     	; 0x1254 <vfprintf+0x2b4>
    1240:	b2 fc       	sbrc	r11, 2
    1242:	08 c0       	rjmp	.+16     	; 0x1254 <vfprintf+0x2b4>
    1244:	2b 2d       	mov	r18, r11
    1246:	2e 7e       	andi	r18, 0xEE	; 238
    1248:	05 c0       	rjmp	.+10     	; 0x1254 <vfprintf+0x2b4>
    124a:	7a 2c       	mov	r7, r10
    124c:	2b 2d       	mov	r18, r11
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <vfprintf+0x2b6>
    1250:	7a 2c       	mov	r7, r10
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <vfprintf+0x2b6>
    1254:	75 2c       	mov	r7, r5
    1256:	24 ff       	sbrs	r18, 4
    1258:	0d c0       	rjmp	.+26     	; 0x1274 <vfprintf+0x2d4>
    125a:	fe 01       	movw	r30, r28
    125c:	ea 0d       	add	r30, r10
    125e:	f1 1d       	adc	r31, r1
    1260:	80 81       	ld	r24, Z
    1262:	80 33       	cpi	r24, 0x30	; 48
    1264:	11 f4       	brne	.+4      	; 0x126a <vfprintf+0x2ca>
    1266:	29 7e       	andi	r18, 0xE9	; 233
    1268:	09 c0       	rjmp	.+18     	; 0x127c <vfprintf+0x2dc>
    126a:	22 ff       	sbrs	r18, 2
    126c:	06 c0       	rjmp	.+12     	; 0x127a <vfprintf+0x2da>
    126e:	73 94       	inc	r7
    1270:	73 94       	inc	r7
    1272:	04 c0       	rjmp	.+8      	; 0x127c <vfprintf+0x2dc>
    1274:	82 2f       	mov	r24, r18
    1276:	86 78       	andi	r24, 0x86	; 134
    1278:	09 f0       	breq	.+2      	; 0x127c <vfprintf+0x2dc>
    127a:	73 94       	inc	r7
    127c:	23 fd       	sbrc	r18, 3
    127e:	13 c0       	rjmp	.+38     	; 0x12a6 <vfprintf+0x306>
    1280:	20 ff       	sbrs	r18, 0
    1282:	0e c0       	rjmp	.+28     	; 0x12a0 <vfprintf+0x300>
    1284:	5a 2c       	mov	r5, r10
    1286:	73 14       	cp	r7, r3
    1288:	58 f4       	brcc	.+22     	; 0x12a0 <vfprintf+0x300>
    128a:	53 0c       	add	r5, r3
    128c:	57 18       	sub	r5, r7
    128e:	73 2c       	mov	r7, r3
    1290:	07 c0       	rjmp	.+14     	; 0x12a0 <vfprintf+0x300>
    1292:	b7 01       	movw	r22, r14
    1294:	80 e2       	ldi	r24, 0x20	; 32
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	2c 87       	std	Y+12, r18	; 0x0c
    129a:	65 d0       	rcall	.+202    	; 0x1366 <fputc>
    129c:	73 94       	inc	r7
    129e:	2c 85       	ldd	r18, Y+12	; 0x0c
    12a0:	73 14       	cp	r7, r3
    12a2:	b8 f3       	brcs	.-18     	; 0x1292 <vfprintf+0x2f2>
    12a4:	04 c0       	rjmp	.+8      	; 0x12ae <vfprintf+0x30e>
    12a6:	73 14       	cp	r7, r3
    12a8:	10 f4       	brcc	.+4      	; 0x12ae <vfprintf+0x30e>
    12aa:	37 18       	sub	r3, r7
    12ac:	01 c0       	rjmp	.+2      	; 0x12b0 <vfprintf+0x310>
    12ae:	31 2c       	mov	r3, r1
    12b0:	24 ff       	sbrs	r18, 4
    12b2:	11 c0       	rjmp	.+34     	; 0x12d6 <vfprintf+0x336>
    12b4:	b7 01       	movw	r22, r14
    12b6:	80 e3       	ldi	r24, 0x30	; 48
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	2c 87       	std	Y+12, r18	; 0x0c
    12bc:	54 d0       	rcall	.+168    	; 0x1366 <fputc>
    12be:	2c 85       	ldd	r18, Y+12	; 0x0c
    12c0:	22 ff       	sbrs	r18, 2
    12c2:	1c c0       	rjmp	.+56     	; 0x12fc <vfprintf+0x35c>
    12c4:	21 ff       	sbrs	r18, 1
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <vfprintf+0x32e>
    12c8:	88 e5       	ldi	r24, 0x58	; 88
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <vfprintf+0x332>
    12ce:	88 e7       	ldi	r24, 0x78	; 120
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	b7 01       	movw	r22, r14
    12d4:	0c c0       	rjmp	.+24     	; 0x12ee <vfprintf+0x34e>
    12d6:	82 2f       	mov	r24, r18
    12d8:	86 78       	andi	r24, 0x86	; 134
    12da:	81 f0       	breq	.+32     	; 0x12fc <vfprintf+0x35c>
    12dc:	21 fd       	sbrc	r18, 1
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <vfprintf+0x344>
    12e0:	80 e2       	ldi	r24, 0x20	; 32
    12e2:	01 c0       	rjmp	.+2      	; 0x12e6 <vfprintf+0x346>
    12e4:	8b e2       	ldi	r24, 0x2B	; 43
    12e6:	27 fd       	sbrc	r18, 7
    12e8:	8d e2       	ldi	r24, 0x2D	; 45
    12ea:	b7 01       	movw	r22, r14
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	3b d0       	rcall	.+118    	; 0x1366 <fputc>
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <vfprintf+0x35c>
    12f2:	b7 01       	movw	r22, r14
    12f4:	80 e3       	ldi	r24, 0x30	; 48
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	36 d0       	rcall	.+108    	; 0x1366 <fputc>
    12fa:	5a 94       	dec	r5
    12fc:	a5 14       	cp	r10, r5
    12fe:	c8 f3       	brcs	.-14     	; 0x12f2 <vfprintf+0x352>
    1300:	aa 94       	dec	r10
    1302:	f4 01       	movw	r30, r8
    1304:	ea 0d       	add	r30, r10
    1306:	f1 1d       	adc	r31, r1
    1308:	b7 01       	movw	r22, r14
    130a:	80 81       	ld	r24, Z
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	2b d0       	rcall	.+86     	; 0x1366 <fputc>
    1310:	a1 10       	cpse	r10, r1
    1312:	f6 cf       	rjmp	.-20     	; 0x1300 <vfprintf+0x360>
    1314:	05 c0       	rjmp	.+10     	; 0x1320 <vfprintf+0x380>
    1316:	b7 01       	movw	r22, r14
    1318:	80 e2       	ldi	r24, 0x20	; 32
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	24 d0       	rcall	.+72     	; 0x1366 <fputc>
    131e:	3a 94       	dec	r3
    1320:	31 10       	cpse	r3, r1
    1322:	f9 cf       	rjmp	.-14     	; 0x1316 <vfprintf+0x376>
    1324:	50 ce       	rjmp	.-864    	; 0xfc6 <vfprintf+0x26>
    1326:	f7 01       	movw	r30, r14
    1328:	26 81       	ldd	r18, Z+6	; 0x06
    132a:	37 81       	ldd	r19, Z+7	; 0x07
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <vfprintf+0x392>
    132e:	2f ef       	ldi	r18, 0xFF	; 255
    1330:	3f ef       	ldi	r19, 0xFF	; 255
    1332:	c9 01       	movw	r24, r18
    1334:	2c 96       	adiw	r28, 0x0c	; 12
    1336:	e2 e1       	ldi	r30, 0x12	; 18
    1338:	bc c0       	rjmp	.+376    	; 0x14b2 <__epilogue_restores__>

0000133a <strnlen_P>:
    133a:	fc 01       	movw	r30, r24
    133c:	05 90       	lpm	r0, Z+
    133e:	61 50       	subi	r22, 0x01	; 1
    1340:	70 40       	sbci	r23, 0x00	; 0
    1342:	01 10       	cpse	r0, r1
    1344:	d8 f7       	brcc	.-10     	; 0x133c <strnlen_P+0x2>
    1346:	80 95       	com	r24
    1348:	90 95       	com	r25
    134a:	8e 0f       	add	r24, r30
    134c:	9f 1f       	adc	r25, r31
    134e:	08 95       	ret

00001350 <strnlen>:
    1350:	fc 01       	movw	r30, r24
    1352:	61 50       	subi	r22, 0x01	; 1
    1354:	70 40       	sbci	r23, 0x00	; 0
    1356:	01 90       	ld	r0, Z+
    1358:	01 10       	cpse	r0, r1
    135a:	d8 f7       	brcc	.-10     	; 0x1352 <strnlen+0x2>
    135c:	80 95       	com	r24
    135e:	90 95       	com	r25
    1360:	8e 0f       	add	r24, r30
    1362:	9f 1f       	adc	r25, r31
    1364:	08 95       	ret

00001366 <fputc>:
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	8c 01       	movw	r16, r24
    1370:	eb 01       	movw	r28, r22
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	81 fd       	sbrc	r24, 1
    1376:	03 c0       	rjmp	.+6      	; 0x137e <fputc+0x18>
    1378:	0f ef       	ldi	r16, 0xFF	; 255
    137a:	1f ef       	ldi	r17, 0xFF	; 255
    137c:	1a c0       	rjmp	.+52     	; 0x13b2 <fputc+0x4c>
    137e:	82 ff       	sbrs	r24, 2
    1380:	0d c0       	rjmp	.+26     	; 0x139c <fputc+0x36>
    1382:	2e 81       	ldd	r18, Y+6	; 0x06
    1384:	3f 81       	ldd	r19, Y+7	; 0x07
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	9d 81       	ldd	r25, Y+5	; 0x05
    138a:	28 17       	cp	r18, r24
    138c:	39 07       	cpc	r19, r25
    138e:	64 f4       	brge	.+24     	; 0x13a8 <fputc+0x42>
    1390:	e8 81       	ld	r30, Y
    1392:	f9 81       	ldd	r31, Y+1	; 0x01
    1394:	01 93       	st	Z+, r16
    1396:	f9 83       	std	Y+1, r31	; 0x01
    1398:	e8 83       	st	Y, r30
    139a:	06 c0       	rjmp	.+12     	; 0x13a8 <fputc+0x42>
    139c:	e8 85       	ldd	r30, Y+8	; 0x08
    139e:	f9 85       	ldd	r31, Y+9	; 0x09
    13a0:	80 2f       	mov	r24, r16
    13a2:	09 95       	icall
    13a4:	89 2b       	or	r24, r25
    13a6:	41 f7       	brne	.-48     	; 0x1378 <fputc+0x12>
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	01 96       	adiw	r24, 0x01	; 1
    13ae:	9f 83       	std	Y+7, r25	; 0x07
    13b0:	8e 83       	std	Y+6, r24	; 0x06
    13b2:	c8 01       	movw	r24, r16
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	08 95       	ret

000013be <__ultoa_invert>:
    13be:	fa 01       	movw	r30, r20
    13c0:	aa 27       	eor	r26, r26
    13c2:	28 30       	cpi	r18, 0x08	; 8
    13c4:	51 f1       	breq	.+84     	; 0x141a <__ultoa_invert+0x5c>
    13c6:	20 31       	cpi	r18, 0x10	; 16
    13c8:	81 f1       	breq	.+96     	; 0x142a <__ultoa_invert+0x6c>
    13ca:	e8 94       	clt
    13cc:	6f 93       	push	r22
    13ce:	6e 7f       	andi	r22, 0xFE	; 254
    13d0:	6e 5f       	subi	r22, 0xFE	; 254
    13d2:	7f 4f       	sbci	r23, 0xFF	; 255
    13d4:	8f 4f       	sbci	r24, 0xFF	; 255
    13d6:	9f 4f       	sbci	r25, 0xFF	; 255
    13d8:	af 4f       	sbci	r26, 0xFF	; 255
    13da:	b1 e0       	ldi	r27, 0x01	; 1
    13dc:	3e d0       	rcall	.+124    	; 0x145a <__ultoa_invert+0x9c>
    13de:	b4 e0       	ldi	r27, 0x04	; 4
    13e0:	3c d0       	rcall	.+120    	; 0x145a <__ultoa_invert+0x9c>
    13e2:	67 0f       	add	r22, r23
    13e4:	78 1f       	adc	r23, r24
    13e6:	89 1f       	adc	r24, r25
    13e8:	9a 1f       	adc	r25, r26
    13ea:	a1 1d       	adc	r26, r1
    13ec:	68 0f       	add	r22, r24
    13ee:	79 1f       	adc	r23, r25
    13f0:	8a 1f       	adc	r24, r26
    13f2:	91 1d       	adc	r25, r1
    13f4:	a1 1d       	adc	r26, r1
    13f6:	6a 0f       	add	r22, r26
    13f8:	71 1d       	adc	r23, r1
    13fa:	81 1d       	adc	r24, r1
    13fc:	91 1d       	adc	r25, r1
    13fe:	a1 1d       	adc	r26, r1
    1400:	20 d0       	rcall	.+64     	; 0x1442 <__ultoa_invert+0x84>
    1402:	09 f4       	brne	.+2      	; 0x1406 <__ultoa_invert+0x48>
    1404:	68 94       	set
    1406:	3f 91       	pop	r19
    1408:	2a e0       	ldi	r18, 0x0A	; 10
    140a:	26 9f       	mul	r18, r22
    140c:	11 24       	eor	r1, r1
    140e:	30 19       	sub	r19, r0
    1410:	30 5d       	subi	r19, 0xD0	; 208
    1412:	31 93       	st	Z+, r19
    1414:	de f6       	brtc	.-74     	; 0x13cc <__ultoa_invert+0xe>
    1416:	cf 01       	movw	r24, r30
    1418:	08 95       	ret
    141a:	46 2f       	mov	r20, r22
    141c:	47 70       	andi	r20, 0x07	; 7
    141e:	40 5d       	subi	r20, 0xD0	; 208
    1420:	41 93       	st	Z+, r20
    1422:	b3 e0       	ldi	r27, 0x03	; 3
    1424:	0f d0       	rcall	.+30     	; 0x1444 <__ultoa_invert+0x86>
    1426:	c9 f7       	brne	.-14     	; 0x141a <__ultoa_invert+0x5c>
    1428:	f6 cf       	rjmp	.-20     	; 0x1416 <__ultoa_invert+0x58>
    142a:	46 2f       	mov	r20, r22
    142c:	4f 70       	andi	r20, 0x0F	; 15
    142e:	40 5d       	subi	r20, 0xD0	; 208
    1430:	4a 33       	cpi	r20, 0x3A	; 58
    1432:	18 f0       	brcs	.+6      	; 0x143a <__ultoa_invert+0x7c>
    1434:	49 5d       	subi	r20, 0xD9	; 217
    1436:	31 fd       	sbrc	r19, 1
    1438:	40 52       	subi	r20, 0x20	; 32
    143a:	41 93       	st	Z+, r20
    143c:	02 d0       	rcall	.+4      	; 0x1442 <__ultoa_invert+0x84>
    143e:	a9 f7       	brne	.-22     	; 0x142a <__ultoa_invert+0x6c>
    1440:	ea cf       	rjmp	.-44     	; 0x1416 <__ultoa_invert+0x58>
    1442:	b4 e0       	ldi	r27, 0x04	; 4
    1444:	a6 95       	lsr	r26
    1446:	97 95       	ror	r25
    1448:	87 95       	ror	r24
    144a:	77 95       	ror	r23
    144c:	67 95       	ror	r22
    144e:	ba 95       	dec	r27
    1450:	c9 f7       	brne	.-14     	; 0x1444 <__ultoa_invert+0x86>
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	61 05       	cpc	r22, r1
    1456:	71 05       	cpc	r23, r1
    1458:	08 95       	ret
    145a:	9b 01       	movw	r18, r22
    145c:	ac 01       	movw	r20, r24
    145e:	0a 2e       	mov	r0, r26
    1460:	06 94       	lsr	r0
    1462:	57 95       	ror	r21
    1464:	47 95       	ror	r20
    1466:	37 95       	ror	r19
    1468:	27 95       	ror	r18
    146a:	ba 95       	dec	r27
    146c:	c9 f7       	brne	.-14     	; 0x1460 <__ultoa_invert+0xa2>
    146e:	62 0f       	add	r22, r18
    1470:	73 1f       	adc	r23, r19
    1472:	84 1f       	adc	r24, r20
    1474:	95 1f       	adc	r25, r21
    1476:	a0 1d       	adc	r26, r0
    1478:	08 95       	ret

0000147a <__prologue_saves__>:
    147a:	2f 92       	push	r2
    147c:	3f 92       	push	r3
    147e:	4f 92       	push	r4
    1480:	5f 92       	push	r5
    1482:	6f 92       	push	r6
    1484:	7f 92       	push	r7
    1486:	8f 92       	push	r8
    1488:	9f 92       	push	r9
    148a:	af 92       	push	r10
    148c:	bf 92       	push	r11
    148e:	cf 92       	push	r12
    1490:	df 92       	push	r13
    1492:	ef 92       	push	r14
    1494:	ff 92       	push	r15
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	ca 1b       	sub	r28, r26
    14a4:	db 0b       	sbc	r29, r27
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	09 94       	ijmp

000014b2 <__epilogue_restores__>:
    14b2:	2a 88       	ldd	r2, Y+18	; 0x12
    14b4:	39 88       	ldd	r3, Y+17	; 0x11
    14b6:	48 88       	ldd	r4, Y+16	; 0x10
    14b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    14ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    14bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    14be:	8c 84       	ldd	r8, Y+12	; 0x0c
    14c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    14c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    14c4:	b9 84       	ldd	r11, Y+9	; 0x09
    14c6:	c8 84       	ldd	r12, Y+8	; 0x08
    14c8:	df 80       	ldd	r13, Y+7	; 0x07
    14ca:	ee 80       	ldd	r14, Y+6	; 0x06
    14cc:	fd 80       	ldd	r15, Y+5	; 0x05
    14ce:	0c 81       	ldd	r16, Y+4	; 0x04
    14d0:	1b 81       	ldd	r17, Y+3	; 0x03
    14d2:	aa 81       	ldd	r26, Y+2	; 0x02
    14d4:	b9 81       	ldd	r27, Y+1	; 0x01
    14d6:	ce 0f       	add	r28, r30
    14d8:	d1 1d       	adc	r29, r1
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	ed 01       	movw	r28, r26
    14e6:	08 95       	ret

000014e8 <_exit>:
    14e8:	f8 94       	cli

000014ea <__stop_program>:
    14ea:	ff cf       	rjmp	.-2      	; 0x14ea <__stop_program>
