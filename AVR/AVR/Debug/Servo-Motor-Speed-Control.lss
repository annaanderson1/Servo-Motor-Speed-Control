
Servo-Motor-Speed-Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001524  000015b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001524  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080011c  0080011c  000015d4  2**0
                  ALLOC
  3 .stab         00000f3c  00000000  00000000  000015d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000356  00000000  00000000  00002510  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002866  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000190  00000000  00000000  00002895  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c6c  00000000  00000000  00002a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000baf  00000000  00000000  00004691  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000cbb  00000000  00000000  00005240  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000514  00000000  00000000  00005efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005f5  00000000  00000000  00006410  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000017bd  00000000  00000000  00006a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000160  00000000  00000000  000081c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	22 c0       	rjmp	.+68     	; 0x46 <__ctors_end>
       2:	3c c0       	rjmp	.+120    	; 0x7c <__bad_interrupt>
       4:	3b c0       	rjmp	.+118    	; 0x7c <__bad_interrupt>
       6:	3a c0       	rjmp	.+116    	; 0x7c <__bad_interrupt>
       8:	2e c3       	rjmp	.+1628   	; 0x666 <__vector_4>
       a:	38 c0       	rjmp	.+112    	; 0x7c <__bad_interrupt>
       c:	37 c0       	rjmp	.+110    	; 0x7c <__bad_interrupt>
       e:	36 c0       	rjmp	.+108    	; 0x7c <__bad_interrupt>
      10:	35 c0       	rjmp	.+106    	; 0x7c <__bad_interrupt>
      12:	34 c0       	rjmp	.+104    	; 0x7c <__bad_interrupt>
      14:	33 c0       	rjmp	.+102    	; 0x7c <__bad_interrupt>
      16:	32 c0       	rjmp	.+100    	; 0x7c <__bad_interrupt>
      18:	31 c0       	rjmp	.+98     	; 0x7c <__bad_interrupt>
      1a:	30 c0       	rjmp	.+96     	; 0x7c <__bad_interrupt>
      1c:	2f c0       	rjmp	.+94     	; 0x7c <__bad_interrupt>
      1e:	2e c0       	rjmp	.+92     	; 0x7c <__bad_interrupt>
      20:	2d c0       	rjmp	.+90     	; 0x7c <__bad_interrupt>
      22:	2c c0       	rjmp	.+88     	; 0x7c <__bad_interrupt>
      24:	98 c3       	rjmp	.+1840   	; 0x756 <__vector_18>
      26:	2a c0       	rjmp	.+84     	; 0x7c <__bad_interrupt>
      28:	29 c0       	rjmp	.+82     	; 0x7c <__bad_interrupt>
      2a:	28 c0       	rjmp	.+80     	; 0x7c <__bad_interrupt>
      2c:	27 c0       	rjmp	.+78     	; 0x7c <__bad_interrupt>
      2e:	26 c0       	rjmp	.+76     	; 0x7c <__bad_interrupt>
      30:	25 c0       	rjmp	.+74     	; 0x7c <__bad_interrupt>
      32:	24 c0       	rjmp	.+72     	; 0x7c <__bad_interrupt>
      34:	32 c4       	rjmp	.+2148   	; 0x89a <main+0x6a>
      36:	36 c4       	rjmp	.+2156   	; 0x8a4 <main+0x74>
      38:	39 c4       	rjmp	.+2162   	; 0x8ac <main+0x7c>
      3a:	3c c4       	rjmp	.+2168   	; 0x8b4 <main+0x84>
      3c:	3f c4       	rjmp	.+2174   	; 0x8bc <main+0x8c>
      3e:	42 c4       	rjmp	.+2180   	; 0x8c4 <main+0x94>
      40:	45 c4       	rjmp	.+2186   	; 0x8cc <main+0x9c>
      42:	48 c4       	rjmp	.+2192   	; 0x8d4 <main+0xa4>
      44:	4b c4       	rjmp	.+2198   	; 0x8dc <main+0xac>

00000046 <__ctors_end>:
      46:	11 24       	eor	r1, r1
      48:	1f be       	out	0x3f, r1	; 63
      4a:	cf ef       	ldi	r28, 0xFF	; 255
      4c:	d4 e0       	ldi	r29, 0x04	; 4
      4e:	de bf       	out	0x3e, r29	; 62
      50:	cd bf       	out	0x3d, r28	; 61

00000052 <__do_copy_data>:
      52:	11 e0       	ldi	r17, 0x01	; 1
      54:	a0 e0       	ldi	r26, 0x00	; 0
      56:	b1 e0       	ldi	r27, 0x01	; 1
      58:	e4 e2       	ldi	r30, 0x24	; 36
      5a:	f5 e1       	ldi	r31, 0x15	; 21
      5c:	02 c0       	rjmp	.+4      	; 0x62 <__do_copy_data+0x10>
      5e:	05 90       	lpm	r0, Z+
      60:	0d 92       	st	X+, r0
      62:	ac 31       	cpi	r26, 0x1C	; 28
      64:	b1 07       	cpc	r27, r17
      66:	d9 f7       	brne	.-10     	; 0x5e <__do_copy_data+0xc>

00000068 <__do_clear_bss>:
      68:	21 e0       	ldi	r18, 0x01	; 1
      6a:	ac e1       	ldi	r26, 0x1C	; 28
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	01 c0       	rjmp	.+2      	; 0x72 <.do_clear_bss_start>

00000070 <.do_clear_bss_loop>:
      70:	1d 92       	st	X+, r1

00000072 <.do_clear_bss_start>:
      72:	a9 32       	cpi	r26, 0x29	; 41
      74:	b2 07       	cpc	r27, r18
      76:	e1 f7       	brne	.-8      	; 0x70 <.do_clear_bss_loop>
      78:	db d3       	rcall	.+1974   	; 0x830 <main>
      7a:	52 ca       	rjmp	.-2908   	; 0xfffff520 <__eeprom_end+0xff7ef520>

0000007c <__bad_interrupt>:
      7c:	c1 cf       	rjmp	.-126    	; 0x0 <__vectors>

0000007e <init_shared_data>:
} Shared_Data;

/*
 * Initiates the struct variables.
*/
void init_shared_data(Shared_Data* shared_ptr){
      7e:	fc 01       	movw	r30, r24
	shared_ptr->speed_set = 0;
      80:	11 82       	std	Z+1, r1	; 0x01
      82:	10 82       	st	Z, r1
	shared_ptr->pwm = 0;
      84:	13 82       	std	Z+3, r1	; 0x03
      86:	12 82       	std	Z+2, r1	; 0x02
	shared_ptr->error = 0;
      88:	15 82       	std	Z+5, r1	; 0x05
      8a:	14 82       	std	Z+4, r1	; 0x04
	shared_ptr->fine_tuning = 0;
      8c:	17 82       	std	Z+7, r1	; 0x07
      8e:	16 82       	std	Z+6, r1	; 0x06
	shared_ptr->integral = 0;
      90:	10 86       	std	Z+8, r1	; 0x08
      92:	11 86       	std	Z+9, r1	; 0x09
      94:	12 86       	std	Z+10, r1	; 0x0a
      96:	13 86       	std	Z+11, r1	; 0x0b
      98:	14 86       	std	Z+12, r1	; 0x0c
      9a:	15 86       	std	Z+13, r1	; 0x0d
      9c:	16 86       	std	Z+14, r1	; 0x0e
      9e:	17 86       	std	Z+15, r1	; 0x0f
	shared_ptr->rpm_curr = 0;
      a0:	10 8a       	std	Z+16, r1	; 0x10
      a2:	11 8a       	std	Z+17, r1	; 0x11
      a4:	12 8a       	std	Z+18, r1	; 0x12
      a6:	13 8a       	std	Z+19, r1	; 0x13
	shared_ptr->rpm_avg = 0;
      a8:	14 8a       	std	Z+20, r1	; 0x14
      aa:	15 8a       	std	Z+21, r1	; 0x15
      ac:	16 8a       	std	Z+22, r1	; 0x16
      ae:	17 8a       	std	Z+23, r1	; 0x17
	shared_ptr->delta_time = 0;
      b0:	e8 5e       	subi	r30, 0xE8	; 232
      b2:	fd 4f       	sbci	r31, 0xFD	; 253
      b4:	10 82       	st	Z, r1
      b6:	11 82       	std	Z+1, r1	; 0x01
      b8:	12 82       	std	Z+2, r1	; 0x02
      ba:	13 82       	std	Z+3, r1	; 0x03
      bc:	08 95       	ret

000000be <set_prescale>:

/* 
 *
*/
static void set_prescale(int ps){
	if (ps == 1){
      be:	81 30       	cpi	r24, 0x01	; 1
      c0:	91 05       	cpc	r25, r1
      c2:	39 f4       	brne	.+14     	; 0xd2 <set_prescale+0x14>
		TCCR1B &= ~ 0xff;
      c4:	e1 e8       	ldi	r30, 0x81	; 129
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	80 81       	ld	r24, Z
      ca:	10 82       	st	Z, r1
		TCCR1B = (1 << CS10);
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	80 83       	st	Z, r24
      d0:	08 95       	ret
	}
	else if(ps == 8){
      d2:	08 97       	sbiw	r24, 0x08	; 8
      d4:	31 f4       	brne	.+12     	; 0xe2 <set_prescale+0x24>
		TCCR1B &= ~ 0xff;
      d6:	e1 e8       	ldi	r30, 0x81	; 129
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	10 82       	st	Z, r1
		TCCR1B = (1 << CS11);
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	80 83       	st	Z, r24
      e2:	08 95       	ret

000000e4 <calc_latest_rpm>:
/*	
 * Calculates the speed between two encoder-interrupts, using fixed point arithmetics.
 * Inserts the speed to the rpm-array in shared_ptr->rpm_measurements
 * Qm.n values defined in shared.h
*/
void calc_latest_rpm(Shared_Data* shared_ptr){
      e4:	4f 92       	push	r4
      e6:	5f 92       	push	r5
      e8:	6f 92       	push	r6
      ea:	7f 92       	push	r7
      ec:	8f 92       	push	r8
      ee:	9f 92       	push	r9
      f0:	af 92       	push	r10
      f2:	bf 92       	push	r11
      f4:	cf 92       	push	r12
      f6:	df 92       	push	r13
      f8:	ef 92       	push	r14
      fa:	ff 92       	push	r15
      fc:	0f 93       	push	r16
      fe:	1f 93       	push	r17
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
     104:	cd b7       	in	r28, 0x3d	; 61
     106:	de b7       	in	r29, 0x3e	; 62
     108:	28 97       	sbiw	r28, 0x08	; 8
     10a:	0f b6       	in	r0, 0x3f	; 63
     10c:	f8 94       	cli
     10e:	de bf       	out	0x3e, r29	; 62
     110:	0f be       	out	0x3f, r0	; 63
     112:	cd bf       	out	0x3d, r28	; 61
     114:	4c 01       	movw	r8, r24
	}
}

/*	Converts the difference in clk increments to microseconds */
static unsigned long calc_delta_time(Shared_Data* shared_ptr){
	unsigned short delta_clk = clk_elapsed;
     116:	e0 90 27 01 	lds	r14, 0x0127
     11a:	f0 90 28 01 	lds	r15, 0x0128

	// scales based on prescaling
	unsigned short prescale;
	
	if(shared_ptr->speed_set <= 20){
     11e:	fc 01       	movw	r30, r24
     120:	80 81       	ld	r24, Z
     122:	91 81       	ldd	r25, Z+1	; 0x01
     124:	45 97       	sbiw	r24, 0x15	; 21
     126:	34 f4       	brge	.+12     	; 0x134 <calc_latest_rpm+0x50>
		prescale = 8;
		set_prescale(8);
     128:	88 e0       	ldi	r24, 0x08	; 8
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	c8 df       	rcall	.-112    	; 0xbe <set_prescale>

	// scales based on prescaling
	unsigned short prescale;
	
	if(shared_ptr->speed_set <= 20){
		prescale = 8;
     12e:	28 e0       	ldi	r18, 0x08	; 8
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	05 c0       	rjmp	.+10     	; 0x13e <calc_latest_rpm+0x5a>
		set_prescale(8);
	}
	else{
		prescale = 1;
		set_prescale(1);
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	c2 df       	rcall	.-124    	; 0xbe <set_prescale>
	if(shared_ptr->speed_set <= 20){
		prescale = 8;
		set_prescale(8);
	}
	else{
		prescale = 1;
     13a:	21 e0       	ldi	r18, 0x01	; 1
     13c:	30 e0       	ldi	r19, 0x00	; 0
		set_prescale(1);
	}

	unsigned long temp;

	temp = (unsigned long)delta_clk * prescale;
     13e:	d7 01       	movw	r26, r14
     140:	e1 d5       	rcall	.+3010   	; 0xd04 <__umulhisi3>
	unsigned long long denominator;
	unsigned long long rpm;
	
	delta_time = calc_delta_time(shared_ptr);
	
	delta_time = delta_time << N;
     142:	2b 01       	movw	r4, r22
     144:	3c 01       	movw	r6, r24
     146:	44 0c       	add	r4, r4
     148:	55 1c       	adc	r5, r5
     14a:	66 1c       	adc	r6, r6
     14c:	77 1c       	adc	r7, r7
     14e:	44 0c       	add	r4, r4
     150:	55 1c       	adc	r5, r5
     152:	66 1c       	adc	r6, r6
     154:	77 1c       	adc	r7, r7
     156:	44 0c       	add	r4, r4
     158:	55 1c       	adc	r5, r5
     15a:	66 1c       	adc	r6, r6
     15c:	77 1c       	adc	r7, r7
     15e:	44 0c       	add	r4, r4
     160:	55 1c       	adc	r5, r5
     162:	66 1c       	adc	r6, r6
     164:	77 1c       	adc	r7, r7
	S_TO_MIN = S_TO_MIN << N;

	numerator = (unsigned long long)MS_TO_S * S_TO_MIN;
	numerator = numerator >> N;

	denominator = (unsigned long long)delta_rev_inverse * delta_time;
     166:	a3 01       	movw	r20, r6
     168:	92 01       	movw	r18, r4
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	70 e0       	ldi	r23, 0x00	; 0
     16e:	cb 01       	movw	r24, r22
     170:	49 82       	std	Y+1, r4	; 0x01
     172:	3a 83       	std	Y+2, r19	; 0x02
     174:	4b 83       	std	Y+3, r20	; 0x03
     176:	5c 83       	std	Y+4, r21	; 0x04
     178:	6d 83       	std	Y+5, r22	; 0x05
     17a:	7e 83       	std	Y+6, r23	; 0x06
     17c:	8f 83       	std	Y+7, r24	; 0x07
     17e:	98 87       	std	Y+8, r25	; 0x08
     180:	a1 2c       	mov	r10, r1
     182:	0f 2e       	mov	r0, r31
     184:	f6 e0       	ldi	r31, 0x06	; 6
     186:	bf 2e       	mov	r11, r31
     188:	f0 2d       	mov	r31, r0
     18a:	c1 2c       	mov	r12, r1
     18c:	d1 2c       	mov	r13, r1
     18e:	e1 2c       	mov	r14, r1
     190:	f1 2c       	mov	r15, r1
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	10 e0       	ldi	r17, 0x00	; 0
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	70 e0       	ldi	r23, 0x00	; 0
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	d5 d5       	rcall	.+2986   	; 0xd4a <__muldi3>
	denominator = denominator >> N;
     1a0:	04 e0       	ldi	r16, 0x04	; 4
     1a2:	81 d6       	rcall	.+3330   	; 0xea6 <__lshrdi3>
     1a4:	a2 2e       	mov	r10, r18
     1a6:	b3 2e       	mov	r11, r19
     1a8:	c4 2e       	mov	r12, r20
     1aa:	d5 2e       	mov	r13, r21
     1ac:	e6 2e       	mov	r14, r22
     1ae:	f7 2e       	mov	r15, r23
     1b0:	e8 2f       	mov	r30, r24
     1b2:	19 2f       	mov	r17, r25

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1);
     1b4:	01 e0       	ldi	r16, 0x01	; 1
     1b6:	77 d6       	rcall	.+3310   	; 0xea6 <__lshrdi3>
     1b8:	49 57       	subi	r20, 0x79	; 121
     1ba:	5c 46       	sbci	r21, 0x6C	; 108
     1bc:	6c 4f       	sbci	r22, 0xFC	; 252
     1be:	7f 4f       	sbci	r23, 0xFF	; 255
     1c0:	8f 4f       	sbci	r24, 0xFF	; 255
     1c2:	9f 4f       	sbci	r25, 0xFF	; 255
	rpm = rpm / denominator;
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
     1c4:	d4 01       	movw	r26, r8
     1c6:	a8 5e       	subi	r26, 0xE8	; 232
     1c8:	bd 4f       	sbci	r27, 0xFD	; 253
     1ca:	68 94       	set
     1cc:	13 f8       	bld	r1, 3
     1ce:	76 94       	lsr	r7
     1d0:	67 94       	ror	r6
     1d2:	57 94       	ror	r5
     1d4:	47 94       	ror	r4
     1d6:	16 94       	lsr	r1
     1d8:	d1 f7       	brne	.-12     	; 0x1ce <calc_latest_rpm+0xea>
     1da:	4d 92       	st	X+, r4
     1dc:	5d 92       	st	X+, r5
     1de:	6d 92       	st	X+, r6
     1e0:	7c 92       	st	X, r7
     1e2:	13 97       	sbiw	r26, 0x03	; 3
	denominator = (unsigned long long)delta_rev_inverse * delta_time;
	denominator = denominator >> N;

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1);
	rpm = rpm / denominator;
     1e4:	0e 2f       	mov	r16, r30
     1e6:	a6 d5       	rcall	.+2892   	; 0xd34 <__udivdi3>
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
	shared_ptr->rpm_curr = (unsigned long)rpm >> N;	// Used for debugging
     1e8:	82 2f       	mov	r24, r18
     1ea:	93 2f       	mov	r25, r19
     1ec:	a4 2f       	mov	r26, r20
     1ee:	b5 2f       	mov	r27, r21
     1f0:	72 2f       	mov	r23, r18
     1f2:	63 2f       	mov	r22, r19
     1f4:	54 2f       	mov	r21, r20
     1f6:	4b 2f       	mov	r20, r27
     1f8:	68 94       	set
     1fa:	13 f8       	bld	r1, 3
     1fc:	b6 95       	lsr	r27
     1fe:	a7 95       	ror	r26
     200:	97 95       	ror	r25
     202:	87 95       	ror	r24
     204:	16 94       	lsr	r1
     206:	d1 f7       	brne	.-12     	; 0x1fc <calc_latest_rpm+0x118>
     208:	f4 01       	movw	r30, r8
     20a:	80 8b       	std	Z+16, r24	; 0x10
     20c:	91 8b       	std	Z+17, r25	; 0x11
     20e:	a2 8b       	std	Z+18, r26	; 0x12
     210:	b3 8b       	std	Z+19, r27	; 0x13
    int i;
    unsigned long temp;

    temp = rpm >> N;

    if(temp < 0 || temp > 250 ){
     212:	8b 3f       	cpi	r24, 0xFB	; 251
     214:	91 05       	cpc	r25, r1
     216:	a1 05       	cpc	r26, r1
     218:	b1 05       	cpc	r27, r1
     21a:	b8 f4       	brcc	.+46     	; 0x24a <calc_latest_rpm+0x166>
/*	
 * Calculates the speed between two encoder-interrupts, using fixed point arithmetics.
 * Inserts the speed to the rpm-array in shared_ptr->rpm_measurements
 * Qm.n values defined in shared.h
*/
void calc_latest_rpm(Shared_Data* shared_ptr){
     21c:	ec 5e       	subi	r30, 0xEC	; 236
     21e:	fd 4f       	sbci	r31, 0xFD	; 253
     220:	2f e7       	ldi	r18, 0x7F	; 127
     222:	30 e0       	ldi	r19, 0x00	; 0
    if(temp < 0 || temp > 250 ){
        return;
    }

    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
     224:	21 50       	subi	r18, 0x01	; 1
     226:	31 09       	sbc	r19, r1
     228:	b2 91       	ld	r27, -Z
     22a:	a2 91       	ld	r26, -Z
     22c:	92 91       	ld	r25, -Z
     22e:	82 91       	ld	r24, -Z
     230:	84 83       	std	Z+4, r24	; 0x04
     232:	95 83       	std	Z+5, r25	; 0x05
     234:	a6 83       	std	Z+6, r26	; 0x06
     236:	b7 83       	std	Z+7, r27	; 0x07

    if(temp < 0 || temp > 250 ){
        return;
    }

    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
     238:	2f 3f       	cpi	r18, 0xFF	; 255
     23a:	8f ef       	ldi	r24, 0xFF	; 255
     23c:	38 07       	cpc	r19, r24
     23e:	91 f7       	brne	.-28     	; 0x224 <calc_latest_rpm+0x140>
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
    }
    shared_ptr->rpm_measurements[0] = rpm;
     240:	f4 01       	movw	r30, r8
     242:	70 8f       	std	Z+24, r23	; 0x18
     244:	61 8f       	std	Z+25, r22	; 0x19
     246:	52 8f       	std	Z+26, r21	; 0x1a
     248:	43 8f       	std	Z+27, r20	; 0x1b
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
	shared_ptr->rpm_curr = (unsigned long)rpm >> N;	// Used for debugging
	insert_rpm(shared_ptr, rpm);
	
}
     24a:	28 96       	adiw	r28, 0x08	; 8
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	de bf       	out	0x3e, r29	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	cd bf       	out	0x3d, r28	; 61
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	ff 90       	pop	r15
     260:	ef 90       	pop	r14
     262:	df 90       	pop	r13
     264:	cf 90       	pop	r12
     266:	bf 90       	pop	r11
     268:	af 90       	pop	r10
     26a:	9f 90       	pop	r9
     26c:	8f 90       	pop	r8
     26e:	7f 90       	pop	r7
     270:	6f 90       	pop	r6
     272:	5f 90       	pop	r5
     274:	4f 90       	pop	r4
     276:	08 95       	ret

00000278 <calc_avg_rpm>:

/*
 * Calculates the filtered running average rpm. Stores result in shared_ptr->rpm_avg
 * Number of elements counted depends on speed_set
*/
void calc_avg_rpm(Shared_Data* shared_ptr){
     278:	2f 92       	push	r2
     27a:	3f 92       	push	r3
     27c:	4f 92       	push	r4
     27e:	5f 92       	push	r5
     280:	6f 92       	push	r6
     282:	7f 92       	push	r7
     284:	8f 92       	push	r8
     286:	9f 92       	push	r9
     288:	af 92       	push	r10
     28a:	bf 92       	push	r11
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	00 d0       	rcall	.+0      	; 0x29e <calc_avg_rpm+0x26>
     29e:	00 d0       	rcall	.+0      	; 0x2a0 <calc_avg_rpm+0x28>
     2a0:	00 d0       	rcall	.+0      	; 0x2a2 <calc_avg_rpm+0x2a>
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
     2a6:	9a 83       	std	Y+2, r25	; 0x02
     2a8:	89 83       	std	Y+1, r24	; 0x01
	unsigned long long temp = 0;
	int i;
	int size;
	int size_shift;
	
	if(shared_ptr->speed_set <=20){
     2aa:	fc 01       	movw	r30, r24
     2ac:	80 81       	ld	r24, Z
     2ae:	91 81       	ldd	r25, Z+1	; 0x01
     2b0:	85 31       	cpi	r24, 0x15	; 21
     2b2:	91 05       	cpc	r25, r1
     2b4:	54 f1       	brlt	.+84     	; 0x30a <calc_avg_rpm+0x92>
	}
	else if(shared_ptr->speed_set <=50){
		size = SIZE_64;
		size_shift = DIVISION_64;
	}
	else if(shared_ptr->speed_set < 100){
     2b6:	84 36       	cpi	r24, 0x64	; 100
     2b8:	91 05       	cpc	r25, r1
     2ba:	84 f5       	brge	.+96     	; 0x31c <calc_avg_rpm+0xa4>
		size = SIZE_64;
		size_shift = DIVISION_64;
     2bc:	e6 e0       	ldi	r30, 0x06	; 6
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	fc 83       	std	Y+4, r31	; 0x04
     2c2:	eb 83       	std	Y+3, r30	; 0x03
	else if(shared_ptr->speed_set <=50){
		size = SIZE_64;
		size_shift = DIVISION_64;
	}
	else if(shared_ptr->speed_set < 100){
		size = SIZE_64;
     2c4:	e0 e4       	ldi	r30, 0x40	; 64
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	fe 83       	std	Y+6, r31	; 0x06
     2ca:	ed 83       	std	Y+5, r30	; 0x05
     2cc:	2f c0       	rjmp	.+94     	; 0x32c <calc_avg_rpm+0xb4>
		size = SIZE_32;
		size_shift = DIVISION_32;
	}
	
	for(i = 0; i < size; i++){
		temp = temp + shared_ptr->rpm_measurements[i];
     2ce:	cd 90       	ld	r12, X+
     2d0:	dd 90       	ld	r13, X+
     2d2:	ed 90       	ld	r14, X+
     2d4:	fd 90       	ld	r15, X+
     2d6:	16 01       	movw	r2, r12
     2d8:	27 01       	movw	r4, r14
     2da:	ac 2c       	mov	r10, r12
     2dc:	b3 2c       	mov	r11, r3
     2de:	c4 2c       	mov	r12, r4
     2e0:	d5 2c       	mov	r13, r5
     2e2:	e1 2c       	mov	r14, r1
     2e4:	f1 2c       	mov	r15, r1
     2e6:	00 e0       	ldi	r16, 0x00	; 0
     2e8:	10 e0       	ldi	r17, 0x00	; 0
     2ea:	ec d5       	rcall	.+3032   	; 0xec4 <__adddi3>
	else if(shared_ptr->speed_set >= 100){
		size = SIZE_32;
		size_shift = DIVISION_32;
	}
	
	for(i = 0; i < size; i++){
     2ec:	31 96       	adiw	r30, 0x01	; 1
     2ee:	0d 81       	ldd	r16, Y+5	; 0x05
     2f0:	1e 81       	ldd	r17, Y+6	; 0x06
     2f2:	e0 17       	cp	r30, r16
     2f4:	f1 07       	cpc	r31, r17
     2f6:	5c f3       	brlt	.-42     	; 0x2ce <calc_avg_rpm+0x56>
		temp = temp + shared_ptr->rpm_measurements[i];
	}
	
	// Divide by size
	temp = temp >> size_shift;
     2f8:	0b 81       	ldd	r16, Y+3	; 0x03
     2fa:	d5 d5       	rcall	.+2986   	; 0xea6 <__lshrdi3>
	
	shared_ptr->rpm_avg = temp;
     2fc:	e9 81       	ldd	r30, Y+1	; 0x01
     2fe:	fa 81       	ldd	r31, Y+2	; 0x02
     300:	24 8b       	std	Z+20, r18	; 0x14
     302:	35 8b       	std	Z+21, r19	; 0x15
     304:	46 8b       	std	Z+22, r20	; 0x16
     306:	57 8b       	std	Z+23, r21	; 0x17
     308:	1f c0       	rjmp	.+62     	; 0x348 <calc_avg_rpm+0xd0>
	int size;
	int size_shift;
	
	if(shared_ptr->speed_set <=20){
		size = SIZE_16;
		size_shift = DIVISION_16;
     30a:	e4 e0       	ldi	r30, 0x04	; 4
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	fc 83       	std	Y+4, r31	; 0x04
     310:	eb 83       	std	Y+3, r30	; 0x03
	int i;
	int size;
	int size_shift;
	
	if(shared_ptr->speed_set <=20){
		size = SIZE_16;
     312:	e0 e1       	ldi	r30, 0x10	; 16
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	fe 83       	std	Y+6, r31	; 0x06
     318:	ed 83       	std	Y+5, r30	; 0x05
     31a:	08 c0       	rjmp	.+16     	; 0x32c <calc_avg_rpm+0xb4>
		size = SIZE_64;
		size_shift = DIVISION_64;
	}
	else if(shared_ptr->speed_set >= 100){
		size = SIZE_32;
		size_shift = DIVISION_32;
     31c:	e5 e0       	ldi	r30, 0x05	; 5
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	fc 83       	std	Y+4, r31	; 0x04
     322:	eb 83       	std	Y+3, r30	; 0x03
	else if(shared_ptr->speed_set < 100){
		size = SIZE_64;
		size_shift = DIVISION_64;
	}
	else if(shared_ptr->speed_set >= 100){
		size = SIZE_32;
     324:	e0 e2       	ldi	r30, 0x20	; 32
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	fe 83       	std	Y+6, r31	; 0x06
     32a:	ed 83       	std	Y+5, r30	; 0x05

/*
 * Calculates the filtered running average rpm. Stores result in shared_ptr->rpm_avg
 * Number of elements counted depends on speed_set
*/
void calc_avg_rpm(Shared_Data* shared_ptr){
     32c:	a9 81       	ldd	r26, Y+1	; 0x01
     32e:	ba 81       	ldd	r27, Y+2	; 0x02
     330:	58 96       	adiw	r26, 0x18	; 24
	else if(shared_ptr->speed_set >= 100){
		size = SIZE_32;
		size_shift = DIVISION_32;
	}
	
	for(i = 0; i < size; i++){
     332:	e0 e0       	ldi	r30, 0x00	; 0
     334:	f0 e0       	ldi	r31, 0x00	; 0
/*
 * Calculates the filtered running average rpm. Stores result in shared_ptr->rpm_avg
 * Number of elements counted depends on speed_set
*/
void calc_avg_rpm(Shared_Data* shared_ptr){
	unsigned long long temp = 0;
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	50 e0       	ldi	r21, 0x00	; 0
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	c3 cf       	rjmp	.-122    	; 0x2ce <calc_avg_rpm+0x56>
	
	// Divide by size
	temp = temp >> size_shift;
	
	shared_ptr->rpm_avg = temp;
}
     348:	26 96       	adiw	r28, 0x06	; 6
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	f8 94       	cli
     34e:	de bf       	out	0x3e, r29	; 62
     350:	0f be       	out	0x3f, r0	; 63
     352:	cd bf       	out	0x3d, r28	; 61
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	1f 91       	pop	r17
     35a:	0f 91       	pop	r16
     35c:	ff 90       	pop	r15
     35e:	ef 90       	pop	r14
     360:	df 90       	pop	r13
     362:	cf 90       	pop	r12
     364:	bf 90       	pop	r11
     366:	af 90       	pop	r10
     368:	9f 90       	pop	r9
     36a:	8f 90       	pop	r8
     36c:	7f 90       	pop	r7
     36e:	6f 90       	pop	r6
     370:	5f 90       	pop	r5
     372:	4f 90       	pop	r4
     374:	3f 90       	pop	r3
     376:	2f 90       	pop	r2
     378:	08 95       	ret

0000037a <set_speed>:

/* Sets a new set value for the speed. Range: 0-120. */
void set_speed(Shared_Data* shared_ptr){
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	00 d0       	rcall	.+0      	; 0x384 <set_speed+0xa>
     384:	00 d0       	rcall	.+0      	; 0x386 <set_speed+0xc>
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
     38a:	8c 01       	movw	r16, r24
	char sub_str[4];
	int res;
	strncpy(sub_str, recieved_bytes + 1, 3);
     38c:	43 e0       	ldi	r20, 0x03	; 3
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	6f e1       	ldi	r22, 0x1F	; 31
     392:	71 e0       	ldi	r23, 0x01	; 1
     394:	ce 01       	movw	r24, r28
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	db d5       	rcall	.+2998   	; 0xf50 <strncpy>
	
	res = atoi(sub_str);
     39a:	ce 01       	movw	r24, r28
     39c:	01 96       	adiw	r24, 0x01	; 1
     39e:	bb d5       	rcall	.+2934   	; 0xf16 <atoi>
	shared_ptr->speed_set = res;
     3a0:	f8 01       	movw	r30, r16
     3a2:	91 83       	std	Z+1, r25	; 0x01
     3a4:	80 83       	st	Z, r24
}
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	08 95       	ret

000003b8 <control>:

/*
 * PI controller for the electrical motor, implemented using fixed point arithmetics.
 * Kp and Ki values is used to tune the controller, depending on different rpm.
*/
void control(Shared_Data* shared_ptr){
     3b8:	2f 92       	push	r2
     3ba:	3f 92       	push	r3
     3bc:	4f 92       	push	r4
     3be:	5f 92       	push	r5
     3c0:	6f 92       	push	r6
     3c2:	7f 92       	push	r7
     3c4:	8f 92       	push	r8
     3c6:	9f 92       	push	r9
     3c8:	af 92       	push	r10
     3ca:	bf 92       	push	r11
     3cc:	cf 92       	push	r12
     3ce:	df 92       	push	r13
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	27 97       	sbiw	r28, 0x07	; 7
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	fc 01       	movw	r30, r24
 * Stores the value in shared_ptr->fine_tuning
*/
static void update_fine_tuning(Shared_Data* shared_ptr){
	short fine_tuning;
	
	fine_tuning = ADCL;	
     3ee:	20 91 78 00 	lds	r18, 0x0078
	fine_tuning |= (ADCH << 8);	// value: 0-1024
     3f2:	30 91 79 00 	lds	r19, 0x0079
     3f6:	93 2f       	mov	r25, r19
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	82 2b       	or	r24, r18
	TIFR1 |= (1 << TOV0);	// clear timer1 overflow flag
     3fc:	b0 9a       	sbi	0x16, 0	; 22
	
	fine_tuning = (fine_tuning << 1);   // value: 0 - 2048
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
	fine_tuning = fine_tuning - 1024;   // value: -1028 - 1028
     402:	94 50       	subi	r25, 0x04	; 4
	fine_tuning = fine_tuning/100;		// value: -10 - 10
     404:	64 e6       	ldi	r22, 0x64	; 100
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	6a d4       	rcall	.+2260   	; 0xcde <__divmodhi4>
     40a:	2b 01       	movw	r4, r22
	
	shared_ptr->fine_tuning = fine_tuning;
     40c:	77 83       	std	Z+7, r23	; 0x07
     40e:	66 83       	std	Z+6, r22	; 0x06
	long Kp;
	long Ki;
	
	update_fine_tuning(shared_ptr);
	
	long e = ((long)shared_ptr->speed_set << N) - (long)shared_ptr->rpm_avg;
     410:	80 81       	ld	r24, Z
     412:	91 81       	ldd	r25, Z+1	; 0x01
     414:	ac 01       	movw	r20, r24
     416:	66 27       	eor	r22, r22
     418:	57 fd       	sbrc	r21, 7
     41a:	60 95       	com	r22
     41c:	76 2f       	mov	r23, r22
     41e:	44 0f       	add	r20, r20
     420:	55 1f       	adc	r21, r21
     422:	66 1f       	adc	r22, r22
     424:	77 1f       	adc	r23, r23
     426:	44 0f       	add	r20, r20
     428:	55 1f       	adc	r21, r21
     42a:	66 1f       	adc	r22, r22
     42c:	77 1f       	adc	r23, r23
     42e:	44 0f       	add	r20, r20
     430:	55 1f       	adc	r21, r21
     432:	66 1f       	adc	r22, r22
     434:	77 1f       	adc	r23, r23
     436:	44 0f       	add	r20, r20
     438:	55 1f       	adc	r21, r21
     43a:	66 1f       	adc	r22, r22
     43c:	77 1f       	adc	r23, r23
     43e:	04 89       	ldd	r16, Z+20	; 0x14
     440:	15 89       	ldd	r17, Z+21	; 0x15
     442:	26 89       	ldd	r18, Z+22	; 0x16
     444:	37 89       	ldd	r19, Z+23	; 0x17
     446:	40 1b       	sub	r20, r16
     448:	51 0b       	sbc	r21, r17
     44a:	62 0b       	sbc	r22, r18
     44c:	73 0b       	sbc	r23, r19
	e = e + ((long)shared_ptr->fine_tuning << N);
     44e:	66 24       	eor	r6, r6
     450:	57 fc       	sbrc	r5, 7
     452:	60 94       	com	r6
     454:	76 2c       	mov	r7, r6
     456:	44 0c       	add	r4, r4
     458:	55 1c       	adc	r5, r5
     45a:	66 1c       	adc	r6, r6
     45c:	77 1c       	adc	r7, r7
     45e:	44 0c       	add	r4, r4
     460:	55 1c       	adc	r5, r5
     462:	66 1c       	adc	r6, r6
     464:	77 1c       	adc	r7, r7
     466:	44 0c       	add	r4, r4
     468:	55 1c       	adc	r5, r5
     46a:	66 1c       	adc	r6, r6
     46c:	77 1c       	adc	r7, r7
     46e:	44 0c       	add	r4, r4
     470:	55 1c       	adc	r5, r5
     472:	66 1c       	adc	r6, r6
     474:	77 1c       	adc	r7, r7
     476:	44 0e       	add	r4, r20
     478:	55 1e       	adc	r5, r21
     47a:	66 1e       	adc	r6, r22
     47c:	77 1e       	adc	r7, r23
	shared_ptr->error = (short)e;	// For debugging
     47e:	55 82       	std	Z+5, r5	; 0x05
     480:	44 82       	std	Z+4, r4	; 0x04
	
	e = e << (N_CTRL-N);
     482:	44 0c       	add	r4, r4
     484:	55 1c       	adc	r5, r5
     486:	66 1c       	adc	r6, r6
     488:	77 1c       	adc	r7, r7
     48a:	44 0c       	add	r4, r4
     48c:	55 1c       	adc	r5, r5
     48e:	66 1c       	adc	r6, r6
     490:	77 1c       	adc	r7, r7
     492:	44 0c       	add	r4, r4
     494:	55 1c       	adc	r5, r5
     496:	66 1c       	adc	r6, r6
     498:	77 1c       	adc	r7, r7
	
	if(shared_ptr->speed_set >= 100){
     49a:	84 36       	cpi	r24, 0x64	; 100
     49c:	91 05       	cpc	r25, r1
     49e:	2c f0       	brlt	.+10     	; 0x4aa <control+0xf2>
		//Kp = 400;
		//Ki = 1000;
		Kp = 100;
		Ki = 1000;
     4a0:	28 ee       	ldi	r18, 0xE8	; 232
     4a2:	33 e0       	ldi	r19, 0x03	; 3
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	50 e0       	ldi	r21, 0x00	; 0
     4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <control+0xfa>
	}
	else if(shared_ptr->speed_set >= 80){
		Kp = 100;
		Ki = 550;
     4aa:	26 e2       	ldi	r18, 0x26	; 38
     4ac:	32 e0       	ldi	r19, 0x02	; 2
     4ae:	40 e0       	ldi	r20, 0x00	; 0
     4b0:	50 e0       	ldi	r21, 0x00	; 0
	else{
		Kp = 100;
		Ki = 550;
	}
	
	long integral = Ki*e;
     4b2:	c3 01       	movw	r24, r6
     4b4:	b2 01       	movw	r22, r4
     4b6:	04 d4       	rcall	.+2056   	; 0xcc0 <__mulsi3>
	integral = integral >> N_CTRL;
     4b8:	4b 01       	movw	r8, r22
     4ba:	5c 01       	movw	r10, r24
     4bc:	68 94       	set
     4be:	16 f8       	bld	r1, 6
     4c0:	b5 94       	asr	r11
     4c2:	a7 94       	ror	r10
     4c4:	97 94       	ror	r9
     4c6:	87 94       	ror	r8
     4c8:	16 94       	lsr	r1
     4ca:	d1 f7       	brne	.-12     	; 0x4c0 <control+0x108>
	shared_ptr->integral = shared_ptr->integral + integral;
     4cc:	6b 01       	movw	r12, r22
     4ce:	7c 01       	movw	r14, r24
     4d0:	ff 0c       	add	r15, r15
     4d2:	cc 08       	sbc	r12, r12
     4d4:	dc 2c       	mov	r13, r12
     4d6:	76 01       	movw	r14, r12
     4d8:	28 2d       	mov	r18, r8
     4da:	39 2d       	mov	r19, r9
     4dc:	4a 2d       	mov	r20, r10
     4de:	5b 2d       	mov	r21, r11
     4e0:	6c 2d       	mov	r22, r12
     4e2:	7c 2d       	mov	r23, r12
     4e4:	8c 2d       	mov	r24, r12
     4e6:	9c 2d       	mov	r25, r12
     4e8:	a0 84       	ldd	r10, Z+8	; 0x08
     4ea:	b1 84       	ldd	r11, Z+9	; 0x09
     4ec:	c2 84       	ldd	r12, Z+10	; 0x0a
     4ee:	d3 84       	ldd	r13, Z+11	; 0x0b
     4f0:	e4 84       	ldd	r14, Z+12	; 0x0c
     4f2:	f5 84       	ldd	r15, Z+13	; 0x0d
     4f4:	06 85       	ldd	r16, Z+14	; 0x0e
     4f6:	17 85       	ldd	r17, Z+15	; 0x0f
     4f8:	e5 d4       	rcall	.+2506   	; 0xec4 <__adddi3>
     4fa:	22 2e       	mov	r2, r18
     4fc:	33 2e       	mov	r3, r19
     4fe:	84 2e       	mov	r8, r20
     500:	95 2e       	mov	r9, r21
     502:	a6 2f       	mov	r26, r22
     504:	b7 2f       	mov	r27, r23
     506:	8e 83       	std	Y+6, r24	; 0x06
     508:	9f 83       	std	Y+7, r25	; 0x07
     50a:	20 87       	std	Z+8, r18	; 0x08
     50c:	31 87       	std	Z+9, r19	; 0x09
     50e:	42 87       	std	Z+10, r20	; 0x0a
     510:	53 87       	std	Z+11, r21	; 0x0b
     512:	64 87       	std	Z+12, r22	; 0x0c
     514:	75 87       	std	Z+13, r23	; 0x0d
     516:	86 87       	std	Z+14, r24	; 0x0e
     518:	97 87       	std	Z+15, r25	; 0x0f
	
	long long pwm = (long long)e * Kp + shared_ptr->integral;
     51a:	73 01       	movw	r14, r6
     51c:	62 01       	movw	r12, r4
     51e:	ff 0c       	add	r15, r15
     520:	cc 08       	sbc	r12, r12
     522:	dc 2c       	mov	r13, r12
     524:	76 01       	movw	r14, r12
     526:	24 2d       	mov	r18, r4
     528:	35 2d       	mov	r19, r5
     52a:	46 2d       	mov	r20, r6
     52c:	57 2d       	mov	r21, r7
     52e:	6c 2d       	mov	r22, r12
     530:	7c 2d       	mov	r23, r12
     532:	8c 2d       	mov	r24, r12
     534:	9c 2d       	mov	r25, r12
     536:	02 e0       	ldi	r16, 0x02	; 2
     538:	98 d4       	rcall	.+2352   	; 0xe6a <__ashldi3>
     53a:	29 83       	std	Y+1, r18	; 0x01
     53c:	3a 83       	std	Y+2, r19	; 0x02
     53e:	4b 83       	std	Y+3, r20	; 0x03
     540:	5c 83       	std	Y+4, r21	; 0x04
     542:	46 2e       	mov	r4, r22
     544:	57 2e       	mov	r5, r23
     546:	68 2e       	mov	r6, r24
     548:	79 2e       	mov	r7, r25
     54a:	75 2d       	mov	r23, r5
     54c:	86 2d       	mov	r24, r6
     54e:	97 2d       	mov	r25, r7
     550:	8c d4       	rcall	.+2328   	; 0xe6a <__ashldi3>
     552:	a2 2e       	mov	r10, r18
     554:	b3 2e       	mov	r11, r19
     556:	c4 2e       	mov	r12, r20
     558:	d5 2e       	mov	r13, r21
     55a:	e6 2e       	mov	r14, r22
     55c:	f7 2e       	mov	r15, r23
     55e:	08 2f       	mov	r16, r24
     560:	19 2f       	mov	r17, r25
     562:	29 81       	ldd	r18, Y+1	; 0x01
     564:	3a 81       	ldd	r19, Y+2	; 0x02
     566:	4b 81       	ldd	r20, Y+3	; 0x03
     568:	5c 81       	ldd	r21, Y+4	; 0x04
     56a:	64 2d       	mov	r22, r4
     56c:	75 2d       	mov	r23, r5
     56e:	86 2d       	mov	r24, r6
     570:	97 2d       	mov	r25, r7
     572:	a8 d4       	rcall	.+2384   	; 0xec4 <__adddi3>
     574:	29 83       	std	Y+1, r18	; 0x01
     576:	43 2e       	mov	r4, r19
     578:	54 2e       	mov	r5, r20
     57a:	65 2e       	mov	r6, r21
     57c:	76 2e       	mov	r7, r22
     57e:	7a 83       	std	Y+2, r23	; 0x02
     580:	8b 83       	std	Y+3, r24	; 0x03
     582:	9c 83       	std	Y+4, r25	; 0x04
     584:	45 2d       	mov	r20, r5
     586:	56 2d       	mov	r21, r6
     588:	67 2d       	mov	r22, r7
     58a:	02 e0       	ldi	r16, 0x02	; 2
     58c:	6e d4       	rcall	.+2268   	; 0xe6a <__ashldi3>
     58e:	a2 2e       	mov	r10, r18
     590:	b3 2e       	mov	r11, r19
     592:	c4 2e       	mov	r12, r20
     594:	d5 2e       	mov	r13, r21
     596:	e6 2e       	mov	r14, r22
     598:	f7 2e       	mov	r15, r23
     59a:	08 2f       	mov	r16, r24
     59c:	19 2f       	mov	r17, r25
     59e:	29 81       	ldd	r18, Y+1	; 0x01
     5a0:	34 2d       	mov	r19, r4
     5a2:	45 2d       	mov	r20, r5
     5a4:	56 2d       	mov	r21, r6
     5a6:	67 2d       	mov	r22, r7
     5a8:	7a 81       	ldd	r23, Y+2	; 0x02
     5aa:	8b 81       	ldd	r24, Y+3	; 0x03
     5ac:	9c 81       	ldd	r25, Y+4	; 0x04
     5ae:	8a d4       	rcall	.+2324   	; 0xec4 <__adddi3>
     5b0:	a2 2e       	mov	r10, r18
     5b2:	b3 2e       	mov	r11, r19
     5b4:	c4 2e       	mov	r12, r20
     5b6:	d5 2e       	mov	r13, r21
     5b8:	e6 2e       	mov	r14, r22
     5ba:	f7 2e       	mov	r15, r23
     5bc:	08 2f       	mov	r16, r24
     5be:	19 2f       	mov	r17, r25
     5c0:	22 2d       	mov	r18, r2
     5c2:	33 2d       	mov	r19, r3
     5c4:	48 2d       	mov	r20, r8
     5c6:	59 2d       	mov	r21, r9
     5c8:	6a 2f       	mov	r22, r26
     5ca:	7b 2f       	mov	r23, r27
     5cc:	8e 81       	ldd	r24, Y+6	; 0x06
     5ce:	9f 81       	ldd	r25, Y+7	; 0x07
     5d0:	79 d4       	rcall	.+2290   	; 0xec4 <__adddi3>
	pwm = pwm >> N_CTRL;
     5d2:	07 e0       	ldi	r16, 0x07	; 7
     5d4:	59 d4       	rcall	.+2226   	; 0xe88 <__ashrdi3>
	
	pwm = pwm >> N_CTRL;	// Convert to regular number
     5d6:	58 d4       	rcall	.+2224   	; 0xe88 <__ashrdi3>
     5d8:	b2 2e       	mov	r11, r18
     5da:	a3 2f       	mov	r26, r19
     5dc:	c4 2e       	mov	r12, r20
     5de:	d5 2e       	mov	r13, r21
     5e0:	e6 2e       	mov	r14, r22
     5e2:	f7 2e       	mov	r15, r23
     5e4:	08 2f       	mov	r16, r24
     5e6:	19 2f       	mov	r17, r25
     5e8:	2f 3f       	cpi	r18, 0xFF	; 255
     5ea:	31 05       	cpc	r19, r1
     5ec:	41 05       	cpc	r20, r1
     5ee:	51 05       	cpc	r21, r1
     5f0:	61 05       	cpc	r22, r1
     5f2:	71 05       	cpc	r23, r1
     5f4:	81 05       	cpc	r24, r1
     5f6:	91 05       	cpc	r25, r1
     5f8:	51 f0       	breq	.+20     	; 0x60e <__stack+0x10f>
     5fa:	4c f0       	brlt	.+18     	; 0x60e <__stack+0x10f>
     5fc:	bb 24       	eor	r11, r11
     5fe:	ba 94       	dec	r11
     600:	a0 e0       	ldi	r26, 0x00	; 0
     602:	c1 2c       	mov	r12, r1
     604:	d1 2c       	mov	r13, r1
     606:	e1 2c       	mov	r14, r1
     608:	f1 2c       	mov	r15, r1
     60a:	00 e0       	ldi	r16, 0x00	; 0
     60c:	10 e0       	ldi	r17, 0x00	; 0
     60e:	bb 2d       	mov	r27, r11
     610:	aa 2e       	mov	r10, r26
     612:	2b 2d       	mov	r18, r11
     614:	3a 2f       	mov	r19, r26
     616:	4c 2d       	mov	r20, r12
     618:	5d 2d       	mov	r21, r13
     61a:	6e 2d       	mov	r22, r14
     61c:	7f 2d       	mov	r23, r15
     61e:	80 2f       	mov	r24, r16
     620:	91 2f       	mov	r25, r17
     622:	a0 e0       	ldi	r26, 0x00	; 0
     624:	58 d4       	rcall	.+2224   	; 0xed6 <__cmpdi2_s8>
     626:	14 f4       	brge	.+4      	; 0x62c <__stack+0x12d>
     628:	b0 e0       	ldi	r27, 0x00	; 0
     62a:	a1 2c       	mov	r10, r1
	}
	else if(pwm > 255){
		pwm = 255;
	}
	
	shared_ptr->pwm = (short)pwm;
     62c:	b2 83       	std	Z+2, r27	; 0x02
     62e:	a3 82       	std	Z+3, r10	; 0x03
	OCR0A = pwm;
     630:	b7 bd       	out	0x27, r27	; 39
	OCR0B = pwm;
     632:	b8 bd       	out	0x28, r27	; 40
	
}
     634:	27 96       	adiw	r28, 0x07	; 7
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	bf 90       	pop	r11
     652:	af 90       	pop	r10
     654:	9f 90       	pop	r9
     656:	8f 90       	pop	r8
     658:	7f 90       	pop	r7
     65a:	6f 90       	pop	r6
     65c:	5f 90       	pop	r5
     65e:	4f 90       	pop	r4
     660:	3f 90       	pop	r3
     662:	2f 90       	pop	r2
     664:	08 95       	ret

00000666 <__vector_4>:
/*
 * Interrupt Service Routine for the encoder mounted on the motor.
 * Calculates the difference in clk-value between current and previous interrupt.
 * Global bool newMeasurement flags that a new measurement have been recieved.
*/
ISR(PCINT1_vect){
     666:	1f 92       	push	r1
     668:	0f 92       	push	r0
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	0f 92       	push	r0
     66e:	11 24       	eor	r1, r1
     670:	2f 93       	push	r18
     672:	3f 93       	push	r19
     674:	4f 93       	push	r20
     676:	5f 93       	push	r21
     678:	8f 93       	push	r24
     67a:	9f 93       	push	r25
	cli();
     67c:	f8 94       	cli
	
	clk_curr = TCNT1;
     67e:	80 91 84 00 	lds	r24, 0x0084
     682:	90 91 85 00 	lds	r25, 0x0085
     686:	90 93 25 01 	sts	0x0125, r25
     68a:	80 93 24 01 	sts	0x0124, r24
extern unsigned short clk_elapsed;
extern char recieved_bytes[5];

static void calc_clk_elapsed(){
	
	if(clk_curr < clk_prev){
     68e:	20 91 1c 01 	lds	r18, 0x011C
     692:	30 91 1d 01 	lds	r19, 0x011D
     696:	82 17       	cp	r24, r18
     698:	93 07       	cpc	r25, r19
     69a:	48 f4       	brcc	.+18     	; 0x6ae <__vector_4+0x48>
		unsigned short temp = 0xFFFF;
		temp = temp - clk_prev;
     69c:	20 95       	com	r18
     69e:	30 95       	com	r19
		temp = temp + clk_curr;
     6a0:	28 0f       	add	r18, r24
     6a2:	39 1f       	adc	r19, r25
		clk_elapsed = temp;
     6a4:	30 93 28 01 	sts	0x0128, r19
     6a8:	20 93 27 01 	sts	0x0127, r18
     6ac:	07 c0       	rjmp	.+14     	; 0x6bc <__vector_4+0x56>
	}
	else{
		clk_elapsed = clk_curr - clk_prev;
     6ae:	ac 01       	movw	r20, r24
     6b0:	42 1b       	sub	r20, r18
     6b2:	53 0b       	sbc	r21, r19
     6b4:	50 93 28 01 	sts	0x0128, r21
     6b8:	40 93 27 01 	sts	0x0127, r20
		
	}
	clk_prev = clk_curr;
     6bc:	90 93 1d 01 	sts	0x011D, r25
     6c0:	80 93 1c 01 	sts	0x011C, r24
ISR(PCINT1_vect){
	cli();
	
	clk_curr = TCNT1;
	calc_clk_elapsed();
	newMeasurement = true;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	80 93 26 01 	sts	0x0126, r24
	
	sei();
     6ca:	78 94       	sei
     6cc:	9f 91       	pop	r25
     6ce:	8f 91       	pop	r24
     6d0:	5f 91       	pop	r21
     6d2:	4f 91       	pop	r20
     6d4:	3f 91       	pop	r19
     6d6:	2f 91       	pop	r18
     6d8:	0f 90       	pop	r0
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	0f 90       	pop	r0
     6de:	1f 90       	pop	r1
     6e0:	18 95       	reti

000006e2 <USART_transmit>:
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with "%"
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <USART_transmit+0x6>
     6e8:	00 d0       	rcall	.+0      	; 0x6ea <USART_transmit+0x8>
     6ea:	00 d0       	rcall	.+0      	; 0x6ec <USART_transmit+0xa>
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
	char buf[6];
	
	strcpy(buf,"%%%%%");
     6f0:	26 e0       	ldi	r18, 0x06	; 6
     6f2:	e0 e0       	ldi	r30, 0x00	; 0
     6f4:	f1 e0       	ldi	r31, 0x01	; 1
     6f6:	de 01       	movw	r26, r28
     6f8:	11 96       	adiw	r26, 0x01	; 1
     6fa:	01 90       	ld	r0, Z+
     6fc:	0d 92       	st	X+, r0
     6fe:	2a 95       	dec	r18
     700:	e1 f7       	brne	.-8      	; 0x6fa <USART_transmit+0x18>
	strncpy(buf, data, 5);
     702:	45 e0       	ldi	r20, 0x05	; 5
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	bc 01       	movw	r22, r24
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	21 d4       	rcall	.+2114   	; 0xf50 <strncpy>
     70e:	be 01       	movw	r22, r28
     710:	6f 5f       	subi	r22, 0xFF	; 255
     712:	7f 4f       	sbci	r23, 0xFF	; 255
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with "%"
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
     714:	9e 01       	movw	r18, r28
     716:	2a 5f       	subi	r18, 0xFA	; 250
     718:	3f 4f       	sbci	r19, 0xFF	; 255
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
     71a:	e0 ec       	ldi	r30, 0xC0	; 192
     71c:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = buf[i];
     71e:	86 ec       	ldi	r24, 0xC6	; 198
     720:	90 e0       	ldi	r25, 0x00	; 0
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
     722:	40 81       	ld	r20, Z
     724:	45 ff       	sbrs	r20, 5
     726:	fd cf       	rjmp	.-6      	; 0x722 <USART_transmit+0x40>
		UDR0 = buf[i];
     728:	db 01       	movw	r26, r22
     72a:	4d 91       	ld	r20, X+
     72c:	bd 01       	movw	r22, r26
     72e:	dc 01       	movw	r26, r24
     730:	4c 93       	st	X, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     732:	a1 ee       	ldi	r26, 0xE1	; 225
     734:	b4 e0       	ldi	r27, 0x04	; 4
     736:	11 97       	sbiw	r26, 0x01	; 1
     738:	f1 f7       	brne	.-4      	; 0x736 <USART_transmit+0x54>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <USART_transmit+0x5a>
     73c:	00 00       	nop
	char buf[6];
	
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
     73e:	62 17       	cp	r22, r18
     740:	73 07       	cpc	r23, r19
     742:	79 f7       	brne	.-34     	; 0x722 <USART_transmit+0x40>
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = buf[i];
		_delay_ms(5);
	}
}
     744:	26 96       	adiw	r28, 0x06	; 6
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	cd bf       	out	0x3d, r28	; 61
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <__vector_18>:
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
     756:	1f 92       	push	r1
     758:	0f 92       	push	r0
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	0f 92       	push	r0
     75e:	11 24       	eor	r1, r1
     760:	2f 93       	push	r18
     762:	8f 93       	push	r24
     764:	9f 93       	push	r25
     766:	af 93       	push	r26
     768:	bf 93       	push	r27
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	ef 93       	push	r30
     770:	ff 93       	push	r31
	cli();
     772:	f8 94       	cli
	PORTC &= ~(1 << PC2);
     774:	42 98       	cbi	0x08, 2	; 8
	PORTC |= (1 << PC1);
     776:	41 9a       	sbi	0x08, 1	; 8
     778:	ae e1       	ldi	r26, 0x1E	; 30
     77a:	b1 e0       	ldi	r27, 0x01	; 1
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
     77c:	83 e2       	ldi	r24, 0x23	; 35
     77e:	91 e0       	ldi	r25, 0x01	; 1
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
     780:	e0 ec       	ldi	r30, 0xC0	; 192
     782:	f0 e0       	ldi	r31, 0x00	; 0
		recieved_bytes[i] = UDR0;
     784:	c6 ec       	ldi	r28, 0xC6	; 198
     786:	d0 e0       	ldi	r29, 0x00	; 0
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
     788:	20 81       	ld	r18, Z
     78a:	22 23       	and	r18, r18
     78c:	ec f7       	brge	.-6      	; 0x788 <__vector_18+0x32>
		recieved_bytes[i] = UDR0;
     78e:	28 81       	ld	r18, Y
     790:	2d 93       	st	X+, r18
*/
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
     792:	a8 17       	cp	r26, r24
     794:	b9 07       	cpc	r27, r25
     796:	c1 f7       	brne	.-16     	; 0x788 <__vector_18+0x32>
		while( !(UCSR0A & (1 << RXC0)) );
		recieved_bytes[i] = UDR0;
	}
	PORTC &= ~(1 << PC1);
     798:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (1 << PC2);
     79a:	42 9a       	sbi	0x08, 2	; 8
	newCommand = true;
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	80 93 23 01 	sts	0x0123, r24
	sei();
     7a2:	78 94       	sei
}
     7a4:	ff 91       	pop	r31
     7a6:	ef 91       	pop	r30
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	bf 91       	pop	r27
     7ae:	af 91       	pop	r26
     7b0:	9f 91       	pop	r25
     7b2:	8f 91       	pop	r24
     7b4:	2f 91       	pop	r18
     7b6:	0f 90       	pop	r0
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	0f 90       	pop	r0
     7bc:	1f 90       	pop	r1
     7be:	18 95       	reti

000007c0 <setup_registers>:
 *	PC1, PD5-PD6
 *	See details in datasheet pg. 99-100
*/
static void setup_DDR(){

	DDRB |= 0x00;
     7c0:	84 b1       	in	r24, 0x04	; 4
     7c2:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC2) | (1 << PC1) | (1 << PC0);
     7c4:	87 b1       	in	r24, 0x07	; 7
     7c6:	87 60       	ori	r24, 0x07	; 7
     7c8:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PD6) | (1 << PD5) | (1 << PD1);
     7ca:	8a b1       	in	r24, 0x0a	; 10
     7cc:	82 66       	ori	r24, 0x62	; 98
     7ce:	8a b9       	out	0x0a, r24	; 10
 *	PWM-mode: fast PWM, inverted, no prescaling.
 *	See details in datasheet pg. 113-117
*/
static void setup_PWM(){

	TCCR0A = (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0) | (1 << WGM01) | (1 << WGM00);
     7d0:	83 ef       	ldi	r24, 0xF3	; 243
     7d2:	84 bd       	out	0x24, r24	; 36
	TCCR0B =  (0 << CS02) | (0 << CS01) | (1 << CS00);
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	85 bd       	out	0x25, r24	; 37
 * 	Baud rate according to #define in shared.h
 * 	See details in datasheet pg. 201-205
*/
static void setup_USART(){

	DDRD |= (1 << PD1);
     7d8:	51 9a       	sbi	0x0a, 1	; 10
	unsigned int ubrr = (((F_CPU / (BAUD * 16UL))) - 1 );

	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
     7da:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
     7de:	89 e1       	ldi	r24, 0x19	; 25
     7e0:	80 93 c4 00 	sts	0x00C4, r24

	// Enable reciever for interrupt and transmitter
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0);
     7e4:	88 e9       	ldi	r24, 0x98	; 152
     7e6:	80 93 c1 00 	sts	0x00C1, r24

	// Set frame format: 8 data, 2 stop, 0 parity
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     7ea:	86 e0       	ldi	r24, 0x06	; 6
     7ec:	80 93 c2 00 	sts	0x00C2, r24
 * 	See details in datasheet pg. 81-82
*/
static void setup_interrupts(){

	// Enables possibility of interrupts on pins 14-8
	PCICR = (1 << PCIE1);
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	80 93 68 00 	sts	0x0068, r24
	// Enables interrupts on pin PC4-PC5
	PCMSK1 = (1 << PCINT13) | (1 << PCINT12);
     7f6:	80 e3       	ldi	r24, 0x30	; 48
     7f8:	80 93 6c 00 	sts	0x006C, r24
/*	
 *	Sets up clk/8 prescaling on 16-bit timer OC1
 *	See details in datasheet pg. 141-147
*/	
static void setup_speed_clock(){
	TCCR1B |= (1 << CS11);
     7fc:	e1 e8       	ldi	r30, 0x81	; 129
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	80 81       	ld	r24, Z
     802:	82 60       	ori	r24, 0x02	; 2
     804:	80 83       	st	Z, r24
 *		TIFR1 |= (1 << TOV0);
 * Disabled digital input on pin PC3 for less power usage
 * See details in datasheet pg. 268-272
 */
static void setup_ADC(){
	ADMUX |= (1 << REFS0) | (1 << MUX1) | (1 << MUX0);
     806:	ec e7       	ldi	r30, 0x7C	; 124
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	83 64       	ori	r24, 0x43	; 67
     80e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADATE);
     810:	ea e7       	ldi	r30, 0x7A	; 122
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	80 81       	ld	r24, Z
     816:	80 6a       	ori	r24, 0xA0	; 160
     818:	80 83       	st	Z, r24
	ADCSRB |= (1 << ADTS2) | (1 << ADTS1);
     81a:	eb e7       	ldi	r30, 0x7B	; 123
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	80 81       	ld	r24, Z
     820:	86 60       	ori	r24, 0x06	; 6
     822:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC3D);
     824:	ee e7       	ldi	r30, 0x7E	; 126
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 81       	ld	r24, Z
     82a:	88 60       	ori	r24, 0x08	; 8
     82c:	80 83       	st	Z, r24
     82e:	08 95       	ret

00000830 <main>:
char recieved_bytes[5];
unsigned short clk_curr;
unsigned short clk_prev;
unsigned short clk_elapsed;

int main(void){
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	cc 51       	subi	r28, 0x1C	; 28
     83a:	d2 40       	sbci	r29, 0x02	; 2
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	f8 94       	cli
     840:	de bf       	out	0x3e, r29	; 62
     842:	0f be       	out	0x3f, r0	; 63
     844:	cd bf       	out	0x3d, r28	; 61
	Shared_Data shared_data;
	Shared_Data* shared_ptr = &shared_data;
	init_shared_data(shared_ptr);
     846:	ce 01       	movw	r24, r28
     848:	01 96       	adiw	r24, 0x01	; 1
     84a:	19 dc       	rcall	.-1998   	; 0x7e <init_shared_data>
	
	newCommand = false;
     84c:	10 92 23 01 	sts	0x0123, r1
	newMeasurement = false;
     850:	10 92 26 01 	sts	0x0126, r1
	clk_curr = 0;
     854:	10 92 25 01 	sts	0x0125, r1
     858:	10 92 24 01 	sts	0x0124, r1
	clk_prev = 0;
     85c:	10 92 1d 01 	sts	0x011D, r1
     860:	10 92 1c 01 	sts	0x011C, r1
	clk_elapsed = 0;
     864:	10 92 28 01 	sts	0x0128, r1
     868:	10 92 27 01 	sts	0x0127, r1
	shared_ptr->speed_set = 110;
     86c:	8e e6       	ldi	r24, 0x6E	; 110
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	9a 83       	std	Y+2, r25	; 0x02
     872:	89 83       	std	Y+1, r24	; 0x01
	
	setup_registers();
     874:	a5 df       	rcall	.-182    	; 0x7c0 <setup_registers>
	sei();
     876:	78 94       	sei
	
	while(1){
		
		if(newCommand){
			switch(*recieved_bytes){
     878:	0e e1       	ldi	r16, 0x1E	; 30
     87a:	11 e0       	ldi	r17, 0x01	; 1
	setup_registers();
	sei();
	
	while(1){
		
		if(newCommand){
     87c:	80 91 23 01 	lds	r24, 0x0123
     880:	88 23       	and	r24, r24
     882:	99 f1       	breq	.+102    	; 0x8ea <main+0xba>
			switch(*recieved_bytes){
     884:	f8 01       	movw	r30, r16
     886:	80 81       	ld	r24, Z
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	fc 01       	movw	r30, r24
     88c:	f0 97       	sbiw	r30, 0x30	; 48
     88e:	e9 30       	cpi	r30, 0x09	; 9
     890:	f1 05       	cpc	r31, r1
     892:	40 f5       	brcc	.+80     	; 0x8e4 <main+0xb4>
     894:	e6 5e       	subi	r30, 0xE6	; 230
     896:	ff 4f       	sbci	r31, 0xFF	; 255
     898:	09 94       	ijmp
				case '0':
					set_speed(shared_ptr);
     89a:	ce 01       	movw	r24, r28
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	6d dd       	rcall	.-1318   	; 0x37a <set_speed>
					transmit_empty();
     8a0:	f3 d1       	rcall	.+998    	; 0xc88 <transmit_empty>
					break;
     8a2:	21 c0       	rjmp	.+66     	; 0x8e6 <main+0xb6>
				case '1':
					transmit_rpm_avg(shared_ptr);
     8a4:	ce 01       	movw	r24, r28
     8a6:	01 96       	adiw	r24, 0x01	; 1
     8a8:	75 d1       	rcall	.+746    	; 0xb94 <transmit_rpm_avg>
					break;
     8aa:	1d c0       	rjmp	.+58     	; 0x8e6 <main+0xb6>
				case '2':
					transmit_fine_tuning(shared_ptr);
     8ac:	ce 01       	movw	r24, r28
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	2c d0       	rcall	.+88     	; 0x90a <transmit_fine_tuning>
					break;
     8b2:	19 c0       	rjmp	.+50     	; 0x8e6 <main+0xb6>
				case '3':
					transmit_error(shared_ptr);
     8b4:	ce 01       	movw	r24, r28
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	30 d1       	rcall	.+608    	; 0xb1a <transmit_error>
					break;
     8ba:	15 c0       	rjmp	.+42     	; 0x8e6 <main+0xb6>
				case '4':
					transmit_pwm(shared_ptr);
     8bc:	ce 01       	movw	r24, r28
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	86 d0       	rcall	.+268    	; 0x9ce <transmit_pwm>
					break;
     8c2:	11 c0       	rjmp	.+34     	; 0x8e6 <main+0xb6>
				case '5':
					transmit_speed_set(shared_ptr);
     8c4:	ce 01       	movw	r24, r28
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	55 d0       	rcall	.+170    	; 0x974 <transmit_speed_set>
					break;
     8ca:	0d c0       	rjmp	.+26     	; 0x8e6 <main+0xb6>
				case '6':
					transmit_rpm_curr(shared_ptr);
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	a2 d1       	rcall	.+836    	; 0xc16 <transmit_rpm_curr>
					break;
     8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <main+0xb6>
				case '7':
					transmit_clk_elapsed(shared_ptr);
     8d4:	ce 01       	movw	r24, r28
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	af d0       	rcall	.+350    	; 0xa38 <transmit_clk_elapsed>
					break;
     8da:	05 c0       	rjmp	.+10     	; 0x8e6 <main+0xb6>
				case '8':
					transmit_delta_time(shared_ptr);
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	e1 d0       	rcall	.+450    	; 0xaa4 <transmit_delta_time>
					break;
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <main+0xb6>
				default:
					transmit_empty();
     8e4:	d1 d1       	rcall	.+930    	; 0xc88 <transmit_empty>
			}
			newCommand = false;
     8e6:	10 92 23 01 	sts	0x0123, r1
		}
		if(newMeasurement){
     8ea:	80 91 26 01 	lds	r24, 0x0126
     8ee:	88 23       	and	r24, r24
     8f0:	29 f2       	breq	.-118    	; 0x87c <main+0x4c>
			calc_latest_rpm(shared_ptr);
     8f2:	ce 01       	movw	r24, r28
     8f4:	01 96       	adiw	r24, 0x01	; 1
     8f6:	f6 db       	rcall	.-2068   	; 0xe4 <calc_latest_rpm>
			calc_avg_rpm(shared_ptr);
     8f8:	ce 01       	movw	r24, r28
     8fa:	01 96       	adiw	r24, 0x01	; 1
     8fc:	bd dc       	rcall	.-1670   	; 0x278 <calc_avg_rpm>
			control(shared_ptr);
     8fe:	ce 01       	movw	r24, r28
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	5a dd       	rcall	.-1356   	; 0x3b8 <control>
			newMeasurement = false;
     904:	10 92 26 01 	sts	0x0126, r1
     908:	b9 cf       	rjmp	.-142    	; 0x87c <main+0x4c>

0000090a <transmit_fine_tuning>:
extern unsigned short clk_curr;
extern char recieved_bytes[5];
extern unsigned short clk_elapsed;

/* Transmits the fine tuning over the USART. */
void transmit_fine_tuning(Shared_Data* shared_ptr){
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	00 d0       	rcall	.+0      	; 0x914 <transmit_fine_tuning+0xa>
     914:	00 d0       	rcall	.+0      	; 0x916 <transmit_fine_tuning+0xc>
     916:	00 d0       	rcall	.+0      	; 0x918 <transmit_fine_tuning+0xe>
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     91c:	25 e0       	ldi	r18, 0x05	; 5
     91e:	e6 e0       	ldi	r30, 0x06	; 6
     920:	f1 e0       	ldi	r31, 0x01	; 1
     922:	8e 01       	movw	r16, r28
     924:	0f 5f       	subi	r16, 0xFF	; 255
     926:	1f 4f       	sbci	r17, 0xFF	; 255
     928:	d8 01       	movw	r26, r16
     92a:	01 90       	ld	r0, Z+
     92c:	0d 92       	st	X+, r0
     92e:	2a 95       	dec	r18
     930:	e1 f7       	brne	.-8      	; 0x92a <transmit_fine_tuning+0x20>
	snprintf(temp, 6, "%hd", shared_ptr->fine_tuning);
     932:	fc 01       	movw	r30, r24
     934:	27 81       	ldd	r18, Z+7	; 0x07
     936:	2f 93       	push	r18
     938:	86 81       	ldd	r24, Z+6	; 0x06
     93a:	8f 93       	push	r24
     93c:	8c e0       	ldi	r24, 0x0C	; 12
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	9f 93       	push	r25
     942:	8f 93       	push	r24
     944:	1f 92       	push	r1
     946:	86 e0       	ldi	r24, 0x06	; 6
     948:	8f 93       	push	r24
     94a:	1f 93       	push	r17
     94c:	0f 93       	push	r16
     94e:	17 d3       	rcall	.+1582   	; 0xf7e <snprintf>
	USART_transmit(temp);
     950:	c8 01       	movw	r24, r16
     952:	c7 de       	rcall	.-626    	; 0x6e2 <USART_transmit>
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
}
     95e:	26 96       	adiw	r28, 0x06	; 6
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	de bf       	out	0x3e, r29	; 62
     966:	0f be       	out	0x3f, r0	; 63
     968:	cd bf       	out	0x3d, r28	; 61
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	08 95       	ret

00000974 <transmit_speed_set>:

/* Transmits the set speed over the USART. */
void transmit_speed_set(Shared_Data* shared_ptr){
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	00 d0       	rcall	.+0      	; 0x97e <transmit_speed_set+0xa>
     97e:	00 d0       	rcall	.+0      	; 0x980 <transmit_speed_set+0xc>
     980:	00 d0       	rcall	.+0      	; 0x982 <transmit_speed_set+0xe>
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	
	snprintf(temp, 6, "%hd",  shared_ptr->speed_set);
     986:	fc 01       	movw	r30, r24
     988:	21 81       	ldd	r18, Z+1	; 0x01
     98a:	2f 93       	push	r18
     98c:	80 81       	ld	r24, Z
     98e:	8f 93       	push	r24
     990:	8c e0       	ldi	r24, 0x0C	; 12
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	9f 93       	push	r25
     996:	8f 93       	push	r24
     998:	1f 92       	push	r1
     99a:	86 e0       	ldi	r24, 0x06	; 6
     99c:	8f 93       	push	r24
     99e:	8e 01       	movw	r16, r28
     9a0:	0f 5f       	subi	r16, 0xFF	; 255
     9a2:	1f 4f       	sbci	r17, 0xFF	; 255
     9a4:	1f 93       	push	r17
     9a6:	0f 93       	push	r16
     9a8:	ea d2       	rcall	.+1492   	; 0xf7e <snprintf>
	USART_transmit(temp);
     9aa:	c8 01       	movw	r24, r16
     9ac:	9a de       	rcall	.-716    	; 0x6e2 <USART_transmit>
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	cd bf       	out	0x3d, r28	; 61
}
     9b8:	26 96       	adiw	r28, 0x06	; 6
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	f8 94       	cli
     9be:	de bf       	out	0x3e, r29	; 62
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	cd bf       	out	0x3d, r28	; 61
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	08 95       	ret

000009ce <transmit_pwm>:

/* Transmits the pwm output over the USART. */
void transmit_pwm(Shared_Data* shared_ptr){
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	00 d0       	rcall	.+0      	; 0x9d8 <transmit_pwm+0xa>
     9d8:	00 d0       	rcall	.+0      	; 0x9da <transmit_pwm+0xc>
     9da:	00 d0       	rcall	.+0      	; 0x9dc <transmit_pwm+0xe>
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     9e0:	25 e0       	ldi	r18, 0x05	; 5
     9e2:	e6 e0       	ldi	r30, 0x06	; 6
     9e4:	f1 e0       	ldi	r31, 0x01	; 1
     9e6:	8e 01       	movw	r16, r28
     9e8:	0f 5f       	subi	r16, 0xFF	; 255
     9ea:	1f 4f       	sbci	r17, 0xFF	; 255
     9ec:	d8 01       	movw	r26, r16
     9ee:	01 90       	ld	r0, Z+
     9f0:	0d 92       	st	X+, r0
     9f2:	2a 95       	dec	r18
     9f4:	e1 f7       	brne	.-8      	; 0x9ee <transmit_pwm+0x20>
	
	snprintf(temp, 6, "%d", shared_ptr->pwm);
     9f6:	fc 01       	movw	r30, r24
     9f8:	23 81       	ldd	r18, Z+3	; 0x03
     9fa:	2f 93       	push	r18
     9fc:	82 81       	ldd	r24, Z+2	; 0x02
     9fe:	8f 93       	push	r24
     a00:	80 e1       	ldi	r24, 0x10	; 16
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	9f 93       	push	r25
     a06:	8f 93       	push	r24
     a08:	1f 92       	push	r1
     a0a:	86 e0       	ldi	r24, 0x06	; 6
     a0c:	8f 93       	push	r24
     a0e:	1f 93       	push	r17
     a10:	0f 93       	push	r16
     a12:	b5 d2       	rcall	.+1386   	; 0xf7e <snprintf>
	USART_transmit(temp);
     a14:	c8 01       	movw	r24, r16
     a16:	65 de       	rcall	.-822    	; 0x6e2 <USART_transmit>
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	de bf       	out	0x3e, r29	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	cd bf       	out	0x3d, r28	; 61
}
     a22:	26 96       	adiw	r28, 0x06	; 6
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	de bf       	out	0x3e, r29	; 62
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	cd bf       	out	0x3d, r28	; 61
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	08 95       	ret

00000a38 <transmit_clk_elapsed>:

/* Transmits the clk_elapsed over the USART. */
void transmit_clk_elapsed(Shared_Data* shared_ptr){
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	00 d0       	rcall	.+0      	; 0xa42 <transmit_clk_elapsed+0xa>
     a42:	00 d0       	rcall	.+0      	; 0xa44 <transmit_clk_elapsed+0xc>
     a44:	00 d0       	rcall	.+0      	; 0xa46 <transmit_clk_elapsed+0xe>
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     a4a:	85 e0       	ldi	r24, 0x05	; 5
     a4c:	e6 e0       	ldi	r30, 0x06	; 6
     a4e:	f1 e0       	ldi	r31, 0x01	; 1
     a50:	8e 01       	movw	r16, r28
     a52:	0f 5f       	subi	r16, 0xFF	; 255
     a54:	1f 4f       	sbci	r17, 0xFF	; 255
     a56:	d8 01       	movw	r26, r16
     a58:	01 90       	ld	r0, Z+
     a5a:	0d 92       	st	X+, r0
     a5c:	8a 95       	dec	r24
     a5e:	e1 f7       	brne	.-8      	; 0xa58 <transmit_clk_elapsed+0x20>

	snprintf(temp, 6, "%hu", clk_elapsed);
     a60:	80 91 28 01 	lds	r24, 0x0128
     a64:	8f 93       	push	r24
     a66:	80 91 27 01 	lds	r24, 0x0127
     a6a:	8f 93       	push	r24
     a6c:	83 e1       	ldi	r24, 0x13	; 19
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	9f 93       	push	r25
     a72:	8f 93       	push	r24
     a74:	1f 92       	push	r1
     a76:	86 e0       	ldi	r24, 0x06	; 6
     a78:	8f 93       	push	r24
     a7a:	1f 93       	push	r17
     a7c:	0f 93       	push	r16
     a7e:	7f d2       	rcall	.+1278   	; 0xf7e <snprintf>
	USART_transmit(temp);
     a80:	c8 01       	movw	r24, r16
     a82:	2f de       	rcall	.-930    	; 0x6e2 <USART_transmit>
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
}
     a8e:	26 96       	adiw	r28, 0x06	; 6
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	cd bf       	out	0x3d, r28	; 61
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	08 95       	ret

00000aa4 <transmit_delta_time>:

/* Transmits the delta_time over the USART. */
void transmit_delta_time(Shared_Data* shared_ptr){
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	00 d0       	rcall	.+0      	; 0xaae <transmit_delta_time+0xa>
     aae:	00 d0       	rcall	.+0      	; 0xab0 <transmit_delta_time+0xc>
     ab0:	00 d0       	rcall	.+0      	; 0xab2 <transmit_delta_time+0xe>
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     ab6:	25 e0       	ldi	r18, 0x05	; 5
     ab8:	e6 e0       	ldi	r30, 0x06	; 6
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	8e 01       	movw	r16, r28
     abe:	0f 5f       	subi	r16, 0xFF	; 255
     ac0:	1f 4f       	sbci	r17, 0xFF	; 255
     ac2:	d8 01       	movw	r26, r16
     ac4:	01 90       	ld	r0, Z+
     ac6:	0d 92       	st	X+, r0
     ac8:	2a 95       	dec	r18
     aca:	e1 f7       	brne	.-8      	; 0xac4 <transmit_delta_time+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->delta_time);
     acc:	fc 01       	movw	r30, r24
     ace:	e8 5e       	subi	r30, 0xE8	; 232
     ad0:	fd 4f       	sbci	r31, 0xFD	; 253
     ad2:	83 81       	ldd	r24, Z+3	; 0x03
     ad4:	8f 93       	push	r24
     ad6:	82 81       	ldd	r24, Z+2	; 0x02
     ad8:	8f 93       	push	r24
     ada:	81 81       	ldd	r24, Z+1	; 0x01
     adc:	8f 93       	push	r24
     ade:	80 81       	ld	r24, Z
     ae0:	8f 93       	push	r24
     ae2:	87 e1       	ldi	r24, 0x17	; 23
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	9f 93       	push	r25
     ae8:	8f 93       	push	r24
     aea:	1f 92       	push	r1
     aec:	86 e0       	ldi	r24, 0x06	; 6
     aee:	8f 93       	push	r24
     af0:	1f 93       	push	r17
     af2:	0f 93       	push	r16
     af4:	44 d2       	rcall	.+1160   	; 0xf7e <snprintf>
	USART_transmit(temp);
     af6:	c8 01       	movw	r24, r16
     af8:	f4 dd       	rcall	.-1048   	; 0x6e2 <USART_transmit>
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	cd bf       	out	0x3d, r28	; 61
}
     b04:	26 96       	adiw	r28, 0x06	; 6
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	cd bf       	out	0x3d, r28	; 61
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	08 95       	ret

00000b1a <transmit_error>:

/* Transmits the control error over the USART. */
void transmit_error(Shared_Data* shared_ptr){
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	00 d0       	rcall	.+0      	; 0xb24 <transmit_error+0xa>
     b24:	00 d0       	rcall	.+0      	; 0xb26 <transmit_error+0xc>
     b26:	00 d0       	rcall	.+0      	; 0xb28 <transmit_error+0xe>
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     b2c:	25 e0       	ldi	r18, 0x05	; 5
     b2e:	e6 e0       	ldi	r30, 0x06	; 6
     b30:	f1 e0       	ldi	r31, 0x01	; 1
     b32:	8e 01       	movw	r16, r28
     b34:	0f 5f       	subi	r16, 0xFF	; 255
     b36:	1f 4f       	sbci	r17, 0xFF	; 255
     b38:	d8 01       	movw	r26, r16
     b3a:	01 90       	ld	r0, Z+
     b3c:	0d 92       	st	X+, r0
     b3e:	2a 95       	dec	r18
     b40:	e1 f7       	brne	.-8      	; 0xb3a <transmit_error+0x20>
	snprintf(temp, 6, "%hd", (shared_ptr->error >> N));
     b42:	fc 01       	movw	r30, r24
     b44:	84 81       	ldd	r24, Z+4	; 0x04
     b46:	95 81       	ldd	r25, Z+5	; 0x05
     b48:	95 95       	asr	r25
     b4a:	87 95       	ror	r24
     b4c:	95 95       	asr	r25
     b4e:	87 95       	ror	r24
     b50:	95 95       	asr	r25
     b52:	87 95       	ror	r24
     b54:	95 95       	asr	r25
     b56:	87 95       	ror	r24
     b58:	9f 93       	push	r25
     b5a:	8f 93       	push	r24
     b5c:	8c e0       	ldi	r24, 0x0C	; 12
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	9f 93       	push	r25
     b62:	8f 93       	push	r24
     b64:	1f 92       	push	r1
     b66:	86 e0       	ldi	r24, 0x06	; 6
     b68:	8f 93       	push	r24
     b6a:	1f 93       	push	r17
     b6c:	0f 93       	push	r16
     b6e:	07 d2       	rcall	.+1038   	; 0xf7e <snprintf>
	USART_transmit(temp);
     b70:	c8 01       	movw	r24, r16
     b72:	b7 dd       	rcall	.-1170   	; 0x6e2 <USART_transmit>
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	f8 94       	cli
     b78:	de bf       	out	0x3e, r29	; 62
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	cd bf       	out	0x3d, r28	; 61
}
     b7e:	26 96       	adiw	r28, 0x06	; 6
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	08 95       	ret

00000b94 <transmit_rpm_avg>:

/* Transmits the average rpm over the USART. */
void transmit_rpm_avg(Shared_Data* shared_ptr){
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <transmit_rpm_avg+0xa>
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <transmit_rpm_avg+0xc>
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <transmit_rpm_avg+0xe>
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     ba6:	25 e0       	ldi	r18, 0x05	; 5
     ba8:	e6 e0       	ldi	r30, 0x06	; 6
     baa:	f1 e0       	ldi	r31, 0x01	; 1
     bac:	8e 01       	movw	r16, r28
     bae:	0f 5f       	subi	r16, 0xFF	; 255
     bb0:	1f 4f       	sbci	r17, 0xFF	; 255
     bb2:	d8 01       	movw	r26, r16
     bb4:	01 90       	ld	r0, Z+
     bb6:	0d 92       	st	X+, r0
     bb8:	2a 95       	dec	r18
     bba:	e1 f7       	brne	.-8      	; 0xbb4 <transmit_rpm_avg+0x20>
	snprintf(temp, 6, "%lu", (shared_ptr->rpm_avg >> N));
     bbc:	fc 01       	movw	r30, r24
     bbe:	44 89       	ldd	r20, Z+20	; 0x14
     bc0:	55 89       	ldd	r21, Z+21	; 0x15
     bc2:	66 89       	ldd	r22, Z+22	; 0x16
     bc4:	77 89       	ldd	r23, Z+23	; 0x17
     bc6:	68 94       	set
     bc8:	13 f8       	bld	r1, 3
     bca:	76 95       	lsr	r23
     bcc:	67 95       	ror	r22
     bce:	57 95       	ror	r21
     bd0:	47 95       	ror	r20
     bd2:	16 94       	lsr	r1
     bd4:	d1 f7       	brne	.-12     	; 0xbca <transmit_rpm_avg+0x36>
     bd6:	7f 93       	push	r23
     bd8:	6f 93       	push	r22
     bda:	5f 93       	push	r21
     bdc:	4f 93       	push	r20
     bde:	87 e1       	ldi	r24, 0x17	; 23
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	9f 93       	push	r25
     be4:	8f 93       	push	r24
     be6:	1f 92       	push	r1
     be8:	86 e0       	ldi	r24, 0x06	; 6
     bea:	8f 93       	push	r24
     bec:	1f 93       	push	r17
     bee:	0f 93       	push	r16
     bf0:	c6 d1       	rcall	.+908    	; 0xf7e <snprintf>
	USART_transmit(temp);
     bf2:	c8 01       	movw	r24, r16
     bf4:	76 dd       	rcall	.-1300   	; 0x6e2 <USART_transmit>
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61
}
     c00:	26 96       	adiw	r28, 0x06	; 6
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	08 95       	ret

00000c16 <transmit_rpm_curr>:

/* Transmits the latest measured rpm over the USART. */
void transmit_rpm_curr(Shared_Data* shared_ptr){
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <transmit_rpm_curr+0xa>
     c20:	00 d0       	rcall	.+0      	; 0xc22 <transmit_rpm_curr+0xc>
     c22:	00 d0       	rcall	.+0      	; 0xc24 <transmit_rpm_curr+0xe>
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     c28:	25 e0       	ldi	r18, 0x05	; 5
     c2a:	e6 e0       	ldi	r30, 0x06	; 6
     c2c:	f1 e0       	ldi	r31, 0x01	; 1
     c2e:	8e 01       	movw	r16, r28
     c30:	0f 5f       	subi	r16, 0xFF	; 255
     c32:	1f 4f       	sbci	r17, 0xFF	; 255
     c34:	d8 01       	movw	r26, r16
     c36:	01 90       	ld	r0, Z+
     c38:	0d 92       	st	X+, r0
     c3a:	2a 95       	dec	r18
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <transmit_rpm_curr+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->rpm_curr);
     c3e:	fc 01       	movw	r30, r24
     c40:	23 89       	ldd	r18, Z+19	; 0x13
     c42:	2f 93       	push	r18
     c44:	22 89       	ldd	r18, Z+18	; 0x12
     c46:	2f 93       	push	r18
     c48:	21 89       	ldd	r18, Z+17	; 0x11
     c4a:	2f 93       	push	r18
     c4c:	80 89       	ldd	r24, Z+16	; 0x10
     c4e:	8f 93       	push	r24
     c50:	87 e1       	ldi	r24, 0x17	; 23
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	9f 93       	push	r25
     c56:	8f 93       	push	r24
     c58:	1f 92       	push	r1
     c5a:	86 e0       	ldi	r24, 0x06	; 6
     c5c:	8f 93       	push	r24
     c5e:	1f 93       	push	r17
     c60:	0f 93       	push	r16
     c62:	8d d1       	rcall	.+794    	; 0xf7e <snprintf>
	USART_transmit(temp);
     c64:	c8 01       	movw	r24, r16
     c66:	3d dd       	rcall	.-1414   	; 0x6e2 <USART_transmit>
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
}
     c72:	26 96       	adiw	r28, 0x06	; 6
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	1f 91       	pop	r17
     c84:	0f 91       	pop	r16
     c86:	08 95       	ret

00000c88 <transmit_empty>:

/* Transmits five " " over the USART. */
void transmit_empty(){
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <transmit_empty+0x6>
     c8e:	00 d0       	rcall	.+0      	; 0xc90 <transmit_empty+0x8>
     c90:	00 d0       	rcall	.+0      	; 0xc92 <transmit_empty+0xa>
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     c96:	85 e0       	ldi	r24, 0x05	; 5
     c98:	e6 e0       	ldi	r30, 0x06	; 6
     c9a:	f1 e0       	ldi	r31, 0x01	; 1
     c9c:	de 01       	movw	r26, r28
     c9e:	11 96       	adiw	r26, 0x01	; 1
     ca0:	01 90       	ld	r0, Z+
     ca2:	0d 92       	st	X+, r0
     ca4:	8a 95       	dec	r24
     ca6:	e1 f7       	brne	.-8      	; 0xca0 <transmit_empty+0x18>
	USART_transmit(temp);
     ca8:	ce 01       	movw	r24, r28
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	1a dd       	rcall	.-1484   	; 0x6e2 <USART_transmit>
}
     cae:	26 96       	adiw	r28, 0x06	; 6
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <__mulsi3>:
     cc0:	db 01       	movw	r26, r22
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	2a d0       	rcall	.+84     	; 0xd1c <__muluhisi3>
     cc8:	bf 91       	pop	r27
     cca:	af 91       	pop	r26
     ccc:	a2 9f       	mul	r26, r18
     cce:	80 0d       	add	r24, r0
     cd0:	91 1d       	adc	r25, r1
     cd2:	a3 9f       	mul	r26, r19
     cd4:	90 0d       	add	r25, r0
     cd6:	b2 9f       	mul	r27, r18
     cd8:	90 0d       	add	r25, r0
     cda:	11 24       	eor	r1, r1
     cdc:	08 95       	ret

00000cde <__divmodhi4>:
     cde:	97 fb       	bst	r25, 7
     ce0:	07 2e       	mov	r0, r23
     ce2:	16 f4       	brtc	.+4      	; 0xce8 <__divmodhi4+0xa>
     ce4:	00 94       	com	r0
     ce6:	06 d0       	rcall	.+12     	; 0xcf4 <__divmodhi4_neg1>
     ce8:	77 fd       	sbrc	r23, 7
     cea:	08 d0       	rcall	.+16     	; 0xcfc <__divmodhi4_neg2>
     cec:	00 d1       	rcall	.+512    	; 0xeee <__udivmodhi4>
     cee:	07 fc       	sbrc	r0, 7
     cf0:	05 d0       	rcall	.+10     	; 0xcfc <__divmodhi4_neg2>
     cf2:	3e f4       	brtc	.+14     	; 0xd02 <__divmodhi4_exit>

00000cf4 <__divmodhi4_neg1>:
     cf4:	90 95       	com	r25
     cf6:	81 95       	neg	r24
     cf8:	9f 4f       	sbci	r25, 0xFF	; 255
     cfa:	08 95       	ret

00000cfc <__divmodhi4_neg2>:
     cfc:	70 95       	com	r23
     cfe:	61 95       	neg	r22
     d00:	7f 4f       	sbci	r23, 0xFF	; 255

00000d02 <__divmodhi4_exit>:
     d02:	08 95       	ret

00000d04 <__umulhisi3>:
     d04:	a2 9f       	mul	r26, r18
     d06:	b0 01       	movw	r22, r0
     d08:	b3 9f       	mul	r27, r19
     d0a:	c0 01       	movw	r24, r0
     d0c:	a3 9f       	mul	r26, r19
     d0e:	01 d0       	rcall	.+2      	; 0xd12 <__umulhisi3+0xe>
     d10:	b2 9f       	mul	r27, r18
     d12:	70 0d       	add	r23, r0
     d14:	81 1d       	adc	r24, r1
     d16:	11 24       	eor	r1, r1
     d18:	91 1d       	adc	r25, r1
     d1a:	08 95       	ret

00000d1c <__muluhisi3>:
     d1c:	f3 df       	rcall	.-26     	; 0xd04 <__umulhisi3>
     d1e:	a5 9f       	mul	r26, r21
     d20:	90 0d       	add	r25, r0
     d22:	b4 9f       	mul	r27, r20
     d24:	90 0d       	add	r25, r0
     d26:	a4 9f       	mul	r26, r20
     d28:	80 0d       	add	r24, r0
     d2a:	91 1d       	adc	r25, r1
     d2c:	11 24       	eor	r1, r1
     d2e:	08 95       	ret

00000d30 <__umoddi3>:
     d30:	68 94       	set
     d32:	01 c0       	rjmp	.+2      	; 0xd36 <__udivdi3_umoddi3>

00000d34 <__udivdi3>:
     d34:	e8 94       	clt

00000d36 <__udivdi3_umoddi3>:
     d36:	8f 92       	push	r8
     d38:	9f 92       	push	r9
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	56 d0       	rcall	.+172    	; 0xdec <__udivmod64>
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	9f 90       	pop	r9
     d46:	8f 90       	pop	r8
     d48:	08 95       	ret

00000d4a <__muldi3>:
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	1f 93       	push	r17
     d50:	0f 93       	push	r16
     d52:	9a 9d       	mul	r25, r10
     d54:	f0 2d       	mov	r31, r0
     d56:	21 9f       	mul	r18, r17
     d58:	f0 0d       	add	r31, r0
     d5a:	8b 9d       	mul	r24, r11
     d5c:	f0 0d       	add	r31, r0
     d5e:	8a 9d       	mul	r24, r10
     d60:	e0 2d       	mov	r30, r0
     d62:	f1 0d       	add	r31, r1
     d64:	03 9f       	mul	r16, r19
     d66:	f0 0d       	add	r31, r0
     d68:	02 9f       	mul	r16, r18
     d6a:	e0 0d       	add	r30, r0
     d6c:	f1 1d       	adc	r31, r1
     d6e:	4e 9d       	mul	r20, r14
     d70:	e0 0d       	add	r30, r0
     d72:	f1 1d       	adc	r31, r1
     d74:	5e 9d       	mul	r21, r14
     d76:	f0 0d       	add	r31, r0
     d78:	4f 9d       	mul	r20, r15
     d7a:	f0 0d       	add	r31, r0
     d7c:	7f 93       	push	r23
     d7e:	6f 93       	push	r22
     d80:	bf 92       	push	r11
     d82:	af 92       	push	r10
     d84:	5f 93       	push	r21
     d86:	4f 93       	push	r20
     d88:	d5 01       	movw	r26, r10
     d8a:	bc df       	rcall	.-136    	; 0xd04 <__umulhisi3>
     d8c:	8b 01       	movw	r16, r22
     d8e:	ac 01       	movw	r20, r24
     d90:	d7 01       	movw	r26, r14
     d92:	b8 df       	rcall	.-144    	; 0xd04 <__umulhisi3>
     d94:	eb 01       	movw	r28, r22
     d96:	e8 0f       	add	r30, r24
     d98:	f9 1f       	adc	r31, r25
     d9a:	d6 01       	movw	r26, r12
     d9c:	1f d0       	rcall	.+62     	; 0xddc <__muldi3_6>
     d9e:	2f 91       	pop	r18
     da0:	3f 91       	pop	r19
     da2:	d6 01       	movw	r26, r12
     da4:	af df       	rcall	.-162    	; 0xd04 <__umulhisi3>
     da6:	c6 0f       	add	r28, r22
     da8:	d7 1f       	adc	r29, r23
     daa:	e8 1f       	adc	r30, r24
     dac:	f9 1f       	adc	r31, r25
     dae:	af 91       	pop	r26
     db0:	bf 91       	pop	r27
     db2:	14 d0       	rcall	.+40     	; 0xddc <__muldi3_6>
     db4:	2f 91       	pop	r18
     db6:	3f 91       	pop	r19
     db8:	a5 df       	rcall	.-182    	; 0xd04 <__umulhisi3>
     dba:	c6 0f       	add	r28, r22
     dbc:	d7 1f       	adc	r29, r23
     dbe:	e8 1f       	adc	r30, r24
     dc0:	f9 1f       	adc	r31, r25
     dc2:	d6 01       	movw	r26, r12
     dc4:	9f df       	rcall	.-194    	; 0xd04 <__umulhisi3>
     dc6:	e6 0f       	add	r30, r22
     dc8:	f7 1f       	adc	r31, r23
     dca:	98 01       	movw	r18, r16
     dcc:	be 01       	movw	r22, r28
     dce:	cf 01       	movw	r24, r30
     dd0:	11 24       	eor	r1, r1
     dd2:	0f 91       	pop	r16
     dd4:	1f 91       	pop	r17
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <__muldi3_6>:
     ddc:	93 df       	rcall	.-218    	; 0xd04 <__umulhisi3>
     dde:	46 0f       	add	r20, r22
     de0:	57 1f       	adc	r21, r23
     de2:	c8 1f       	adc	r28, r24
     de4:	d9 1f       	adc	r29, r25
     de6:	08 f4       	brcc	.+2      	; 0xdea <__muldi3_6+0xe>
     de8:	31 96       	adiw	r30, 0x01	; 1
     dea:	08 95       	ret

00000dec <__udivmod64>:
     dec:	88 24       	eor	r8, r8
     dee:	99 24       	eor	r9, r9
     df0:	f4 01       	movw	r30, r8
     df2:	e4 01       	movw	r28, r8
     df4:	b0 e4       	ldi	r27, 0x40	; 64
     df6:	1b 2e       	mov	r1, r27
     df8:	d4 01       	movw	r26, r8
     dfa:	9d 15       	cp	r25, r13
     dfc:	8e 04       	cpc	r8, r14
     dfe:	9f 04       	cpc	r9, r15
     e00:	e0 07       	cpc	r30, r16
     e02:	f1 07       	cpc	r31, r17
     e04:	38 f4       	brcc	.+14     	; 0xe14 <__udivmod64+0x28>
     e06:	fc 01       	movw	r30, r24
     e08:	4b 01       	movw	r8, r22
     e0a:	ca 01       	movw	r24, r20
     e0c:	b9 01       	movw	r22, r18
     e0e:	ad 01       	movw	r20, r26
     e10:	9e 01       	movw	r18, r28
     e12:	16 94       	lsr	r1
     e14:	22 0f       	add	r18, r18
     e16:	33 1f       	adc	r19, r19
     e18:	44 1f       	adc	r20, r20
     e1a:	55 1f       	adc	r21, r21
     e1c:	66 1f       	adc	r22, r22
     e1e:	77 1f       	adc	r23, r23
     e20:	88 1f       	adc	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	88 1c       	adc	r8, r8
     e26:	99 1c       	adc	r9, r9
     e28:	ee 1f       	adc	r30, r30
     e2a:	ff 1f       	adc	r31, r31
     e2c:	cc 1f       	adc	r28, r28
     e2e:	dd 1f       	adc	r29, r29
     e30:	aa 1f       	adc	r26, r26
     e32:	bb 1f       	adc	r27, r27
     e34:	8a 14       	cp	r8, r10
     e36:	9b 04       	cpc	r9, r11
     e38:	ec 05       	cpc	r30, r12
     e3a:	fd 05       	cpc	r31, r13
     e3c:	ce 05       	cpc	r28, r14
     e3e:	df 05       	cpc	r29, r15
     e40:	a0 07       	cpc	r26, r16
     e42:	b1 07       	cpc	r27, r17
     e44:	48 f0       	brcs	.+18     	; 0xe58 <__udivmod64+0x6c>
     e46:	8a 18       	sub	r8, r10
     e48:	9b 08       	sbc	r9, r11
     e4a:	ec 09       	sbc	r30, r12
     e4c:	fd 09       	sbc	r31, r13
     e4e:	ce 09       	sbc	r28, r14
     e50:	df 09       	sbc	r29, r15
     e52:	a0 0b       	sbc	r26, r16
     e54:	b1 0b       	sbc	r27, r17
     e56:	21 60       	ori	r18, 0x01	; 1
     e58:	1a 94       	dec	r1
     e5a:	e1 f6       	brne	.-72     	; 0xe14 <__udivmod64+0x28>
     e5c:	2e f4       	brtc	.+10     	; 0xe68 <__udivmod64+0x7c>
     e5e:	94 01       	movw	r18, r8
     e60:	af 01       	movw	r20, r30
     e62:	be 01       	movw	r22, r28
     e64:	cd 01       	movw	r24, r26
     e66:	00 0c       	add	r0, r0
     e68:	08 95       	ret

00000e6a <__ashldi3>:
     e6a:	0f 93       	push	r16
     e6c:	0f 73       	andi	r16, 0x3F	; 63
     e6e:	51 f0       	breq	.+20     	; 0xe84 <__ashldi3+0x1a>
     e70:	22 0f       	add	r18, r18
     e72:	33 1f       	adc	r19, r19
     e74:	44 1f       	adc	r20, r20
     e76:	55 1f       	adc	r21, r21
     e78:	66 1f       	adc	r22, r22
     e7a:	77 1f       	adc	r23, r23
     e7c:	88 1f       	adc	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 95       	dec	r16
     e82:	b1 f7       	brne	.-20     	; 0xe70 <__ashldi3+0x6>
     e84:	0f 91       	pop	r16
     e86:	08 95       	ret

00000e88 <__ashrdi3>:
     e88:	0f 93       	push	r16
     e8a:	0f 73       	andi	r16, 0x3F	; 63
     e8c:	51 f0       	breq	.+20     	; 0xea2 <__ashrdi3+0x1a>
     e8e:	95 95       	asr	r25
     e90:	87 95       	ror	r24
     e92:	77 95       	ror	r23
     e94:	67 95       	ror	r22
     e96:	57 95       	ror	r21
     e98:	47 95       	ror	r20
     e9a:	37 95       	ror	r19
     e9c:	27 95       	ror	r18
     e9e:	0a 95       	dec	r16
     ea0:	b1 f7       	brne	.-20     	; 0xe8e <__ashrdi3+0x6>
     ea2:	0f 91       	pop	r16
     ea4:	08 95       	ret

00000ea6 <__lshrdi3>:
     ea6:	0f 93       	push	r16
     ea8:	0f 73       	andi	r16, 0x3F	; 63
     eaa:	51 f0       	breq	.+20     	; 0xec0 <__lshrdi3+0x1a>
     eac:	96 95       	lsr	r25
     eae:	87 95       	ror	r24
     eb0:	77 95       	ror	r23
     eb2:	67 95       	ror	r22
     eb4:	57 95       	ror	r21
     eb6:	47 95       	ror	r20
     eb8:	37 95       	ror	r19
     eba:	27 95       	ror	r18
     ebc:	0a 95       	dec	r16
     ebe:	b1 f7       	brne	.-20     	; 0xeac <__lshrdi3+0x6>
     ec0:	0f 91       	pop	r16
     ec2:	08 95       	ret

00000ec4 <__adddi3>:
     ec4:	2a 0d       	add	r18, r10
     ec6:	3b 1d       	adc	r19, r11
     ec8:	4c 1d       	adc	r20, r12
     eca:	5d 1d       	adc	r21, r13
     ecc:	6e 1d       	adc	r22, r14
     ece:	7f 1d       	adc	r23, r15
     ed0:	80 1f       	adc	r24, r16
     ed2:	91 1f       	adc	r25, r17
     ed4:	08 95       	ret

00000ed6 <__cmpdi2_s8>:
     ed6:	00 24       	eor	r0, r0
     ed8:	a7 fd       	sbrc	r26, 7
     eda:	00 94       	com	r0
     edc:	2a 17       	cp	r18, r26
     ede:	30 05       	cpc	r19, r0
     ee0:	40 05       	cpc	r20, r0
     ee2:	50 05       	cpc	r21, r0
     ee4:	60 05       	cpc	r22, r0
     ee6:	70 05       	cpc	r23, r0
     ee8:	80 05       	cpc	r24, r0
     eea:	90 05       	cpc	r25, r0
     eec:	08 95       	ret

00000eee <__udivmodhi4>:
     eee:	aa 1b       	sub	r26, r26
     ef0:	bb 1b       	sub	r27, r27
     ef2:	51 e1       	ldi	r21, 0x11	; 17
     ef4:	07 c0       	rjmp	.+14     	; 0xf04 <__udivmodhi4_ep>

00000ef6 <__udivmodhi4_loop>:
     ef6:	aa 1f       	adc	r26, r26
     ef8:	bb 1f       	adc	r27, r27
     efa:	a6 17       	cp	r26, r22
     efc:	b7 07       	cpc	r27, r23
     efe:	10 f0       	brcs	.+4      	; 0xf04 <__udivmodhi4_ep>
     f00:	a6 1b       	sub	r26, r22
     f02:	b7 0b       	sbc	r27, r23

00000f04 <__udivmodhi4_ep>:
     f04:	88 1f       	adc	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	5a 95       	dec	r21
     f0a:	a9 f7       	brne	.-22     	; 0xef6 <__udivmodhi4_loop>
     f0c:	80 95       	com	r24
     f0e:	90 95       	com	r25
     f10:	bc 01       	movw	r22, r24
     f12:	cd 01       	movw	r24, r26
     f14:	08 95       	ret

00000f16 <atoi>:
     f16:	fc 01       	movw	r30, r24
     f18:	88 27       	eor	r24, r24
     f1a:	99 27       	eor	r25, r25
     f1c:	e8 94       	clt
     f1e:	21 91       	ld	r18, Z+
     f20:	20 32       	cpi	r18, 0x20	; 32
     f22:	e9 f3       	breq	.-6      	; 0xf1e <atoi+0x8>
     f24:	29 30       	cpi	r18, 0x09	; 9
     f26:	10 f0       	brcs	.+4      	; 0xf2c <atoi+0x16>
     f28:	2e 30       	cpi	r18, 0x0E	; 14
     f2a:	c8 f3       	brcs	.-14     	; 0xf1e <atoi+0x8>
     f2c:	2b 32       	cpi	r18, 0x2B	; 43
     f2e:	39 f0       	breq	.+14     	; 0xf3e <atoi+0x28>
     f30:	2d 32       	cpi	r18, 0x2D	; 45
     f32:	31 f4       	brne	.+12     	; 0xf40 <atoi+0x2a>
     f34:	68 94       	set
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <atoi+0x28>
     f38:	1a d0       	rcall	.+52     	; 0xf6e <__mulhi_const_10>
     f3a:	82 0f       	add	r24, r18
     f3c:	91 1d       	adc	r25, r1
     f3e:	21 91       	ld	r18, Z+
     f40:	20 53       	subi	r18, 0x30	; 48
     f42:	2a 30       	cpi	r18, 0x0A	; 10
     f44:	c8 f3       	brcs	.-14     	; 0xf38 <atoi+0x22>
     f46:	1e f4       	brtc	.+6      	; 0xf4e <atoi+0x38>
     f48:	90 95       	com	r25
     f4a:	81 95       	neg	r24
     f4c:	9f 4f       	sbci	r25, 0xFF	; 255
     f4e:	08 95       	ret

00000f50 <strncpy>:
     f50:	fb 01       	movw	r30, r22
     f52:	dc 01       	movw	r26, r24
     f54:	41 50       	subi	r20, 0x01	; 1
     f56:	50 40       	sbci	r21, 0x00	; 0
     f58:	48 f0       	brcs	.+18     	; 0xf6c <strncpy+0x1c>
     f5a:	01 90       	ld	r0, Z+
     f5c:	0d 92       	st	X+, r0
     f5e:	00 20       	and	r0, r0
     f60:	c9 f7       	brne	.-14     	; 0xf54 <strncpy+0x4>
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <strncpy+0x16>
     f64:	1d 92       	st	X+, r1
     f66:	41 50       	subi	r20, 0x01	; 1
     f68:	50 40       	sbci	r21, 0x00	; 0
     f6a:	e0 f7       	brcc	.-8      	; 0xf64 <strncpy+0x14>
     f6c:	08 95       	ret

00000f6e <__mulhi_const_10>:
     f6e:	7a e0       	ldi	r23, 0x0A	; 10
     f70:	97 9f       	mul	r25, r23
     f72:	90 2d       	mov	r25, r0
     f74:	87 9f       	mul	r24, r23
     f76:	80 2d       	mov	r24, r0
     f78:	91 0d       	add	r25, r1
     f7a:	11 24       	eor	r1, r1
     f7c:	08 95       	ret

00000f7e <snprintf>:
     f7e:	ae e0       	ldi	r26, 0x0E	; 14
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e4 ec       	ldi	r30, 0xC4	; 196
     f84:	f7 e0       	ldi	r31, 0x07	; 7
     f86:	a3 c2       	rjmp	.+1350   	; 0x14ce <__prologue_saves__+0x1c>
     f88:	0d 89       	ldd	r16, Y+21	; 0x15
     f8a:	1e 89       	ldd	r17, Y+22	; 0x16
     f8c:	8f 89       	ldd	r24, Y+23	; 0x17
     f8e:	98 8d       	ldd	r25, Y+24	; 0x18
     f90:	26 e0       	ldi	r18, 0x06	; 6
     f92:	2c 83       	std	Y+4, r18	; 0x04
     f94:	1a 83       	std	Y+2, r17	; 0x02
     f96:	09 83       	std	Y+1, r16	; 0x01
     f98:	97 ff       	sbrs	r25, 7
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <snprintf+0x22>
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e8       	ldi	r25, 0x80	; 128
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	9e 83       	std	Y+6, r25	; 0x06
     fa4:	8d 83       	std	Y+5, r24	; 0x05
     fa6:	ce 01       	movw	r24, r28
     fa8:	4b 96       	adiw	r24, 0x1b	; 27
     faa:	ac 01       	movw	r20, r24
     fac:	69 8d       	ldd	r22, Y+25	; 0x19
     fae:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fb0:	ce 01       	movw	r24, r28
     fb2:	01 96       	adiw	r24, 0x01	; 1
     fb4:	11 d0       	rcall	.+34     	; 0xfd8 <vfprintf>
     fb6:	4d 81       	ldd	r20, Y+5	; 0x05
     fb8:	5e 81       	ldd	r21, Y+6	; 0x06
     fba:	57 fd       	sbrc	r21, 7
     fbc:	0a c0       	rjmp	.+20     	; 0xfd2 <snprintf+0x54>
     fbe:	2f 81       	ldd	r18, Y+7	; 0x07
     fc0:	38 85       	ldd	r19, Y+8	; 0x08
     fc2:	42 17       	cp	r20, r18
     fc4:	53 07       	cpc	r21, r19
     fc6:	0c f4       	brge	.+2      	; 0xfca <snprintf+0x4c>
     fc8:	9a 01       	movw	r18, r20
     fca:	f8 01       	movw	r30, r16
     fcc:	e2 0f       	add	r30, r18
     fce:	f3 1f       	adc	r31, r19
     fd0:	10 82       	st	Z, r1
     fd2:	2e 96       	adiw	r28, 0x0e	; 14
     fd4:	e4 e0       	ldi	r30, 0x04	; 4
     fd6:	97 c2       	rjmp	.+1326   	; 0x1506 <__epilogue_restores__+0x1c>

00000fd8 <vfprintf>:
     fd8:	ac e0       	ldi	r26, 0x0C	; 12
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e1 ef       	ldi	r30, 0xF1	; 241
     fde:	f7 e0       	ldi	r31, 0x07	; 7
     fe0:	68 c2       	rjmp	.+1232   	; 0x14b2 <__prologue_saves__>
     fe2:	7c 01       	movw	r14, r24
     fe4:	6b 01       	movw	r12, r22
     fe6:	8a 01       	movw	r16, r20
     fe8:	fc 01       	movw	r30, r24
     fea:	17 82       	std	Z+7, r1	; 0x07
     fec:	16 82       	std	Z+6, r1	; 0x06
     fee:	83 81       	ldd	r24, Z+3	; 0x03
     ff0:	81 ff       	sbrs	r24, 1
     ff2:	b9 c1       	rjmp	.+882    	; 0x1366 <vfprintf+0x38e>
     ff4:	88 24       	eor	r8, r8
     ff6:	83 94       	inc	r8
     ff8:	91 2c       	mov	r9, r1
     ffa:	8c 0e       	add	r8, r28
     ffc:	9d 1e       	adc	r9, r29
     ffe:	f7 01       	movw	r30, r14
    1000:	93 81       	ldd	r25, Z+3	; 0x03
    1002:	f6 01       	movw	r30, r12
    1004:	93 fd       	sbrc	r25, 3
    1006:	85 91       	lpm	r24, Z+
    1008:	93 ff       	sbrs	r25, 3
    100a:	81 91       	ld	r24, Z+
    100c:	6f 01       	movw	r12, r30
    100e:	88 23       	and	r24, r24
    1010:	09 f4       	brne	.+2      	; 0x1014 <vfprintf+0x3c>
    1012:	a5 c1       	rjmp	.+842    	; 0x135e <vfprintf+0x386>
    1014:	85 32       	cpi	r24, 0x25	; 37
    1016:	39 f4       	brne	.+14     	; 0x1026 <vfprintf+0x4e>
    1018:	93 fd       	sbrc	r25, 3
    101a:	85 91       	lpm	r24, Z+
    101c:	93 ff       	sbrs	r25, 3
    101e:	81 91       	ld	r24, Z+
    1020:	6f 01       	movw	r12, r30
    1022:	85 32       	cpi	r24, 0x25	; 37
    1024:	21 f4       	brne	.+8      	; 0x102e <vfprintf+0x56>
    1026:	b7 01       	movw	r22, r14
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	b9 d1       	rcall	.+882    	; 0x139e <fputc>
    102c:	e8 cf       	rjmp	.-48     	; 0xffe <vfprintf+0x26>
    102e:	51 2c       	mov	r5, r1
    1030:	31 2c       	mov	r3, r1
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	20 32       	cpi	r18, 0x20	; 32
    1036:	a8 f4       	brcc	.+42     	; 0x1062 <vfprintf+0x8a>
    1038:	8b 32       	cpi	r24, 0x2B	; 43
    103a:	61 f0       	breq	.+24     	; 0x1054 <vfprintf+0x7c>
    103c:	28 f4       	brcc	.+10     	; 0x1048 <vfprintf+0x70>
    103e:	80 32       	cpi	r24, 0x20	; 32
    1040:	51 f0       	breq	.+20     	; 0x1056 <vfprintf+0x7e>
    1042:	83 32       	cpi	r24, 0x23	; 35
    1044:	71 f4       	brne	.+28     	; 0x1062 <vfprintf+0x8a>
    1046:	0b c0       	rjmp	.+22     	; 0x105e <vfprintf+0x86>
    1048:	8d 32       	cpi	r24, 0x2D	; 45
    104a:	39 f0       	breq	.+14     	; 0x105a <vfprintf+0x82>
    104c:	80 33       	cpi	r24, 0x30	; 48
    104e:	49 f4       	brne	.+18     	; 0x1062 <vfprintf+0x8a>
    1050:	21 60       	ori	r18, 0x01	; 1
    1052:	28 c0       	rjmp	.+80     	; 0x10a4 <vfprintf+0xcc>
    1054:	22 60       	ori	r18, 0x02	; 2
    1056:	24 60       	ori	r18, 0x04	; 4
    1058:	25 c0       	rjmp	.+74     	; 0x10a4 <vfprintf+0xcc>
    105a:	28 60       	ori	r18, 0x08	; 8
    105c:	23 c0       	rjmp	.+70     	; 0x10a4 <vfprintf+0xcc>
    105e:	20 61       	ori	r18, 0x10	; 16
    1060:	21 c0       	rjmp	.+66     	; 0x10a4 <vfprintf+0xcc>
    1062:	27 fd       	sbrc	r18, 7
    1064:	27 c0       	rjmp	.+78     	; 0x10b4 <vfprintf+0xdc>
    1066:	38 2f       	mov	r19, r24
    1068:	30 53       	subi	r19, 0x30	; 48
    106a:	3a 30       	cpi	r19, 0x0A	; 10
    106c:	78 f4       	brcc	.+30     	; 0x108c <vfprintf+0xb4>
    106e:	26 ff       	sbrs	r18, 6
    1070:	06 c0       	rjmp	.+12     	; 0x107e <vfprintf+0xa6>
    1072:	fa e0       	ldi	r31, 0x0A	; 10
    1074:	5f 9e       	mul	r5, r31
    1076:	30 0d       	add	r19, r0
    1078:	11 24       	eor	r1, r1
    107a:	53 2e       	mov	r5, r19
    107c:	13 c0       	rjmp	.+38     	; 0x10a4 <vfprintf+0xcc>
    107e:	8a e0       	ldi	r24, 0x0A	; 10
    1080:	38 9e       	mul	r3, r24
    1082:	30 0d       	add	r19, r0
    1084:	11 24       	eor	r1, r1
    1086:	33 2e       	mov	r3, r19
    1088:	20 62       	ori	r18, 0x20	; 32
    108a:	0c c0       	rjmp	.+24     	; 0x10a4 <vfprintf+0xcc>
    108c:	8e 32       	cpi	r24, 0x2E	; 46
    108e:	21 f4       	brne	.+8      	; 0x1098 <vfprintf+0xc0>
    1090:	26 fd       	sbrc	r18, 6
    1092:	65 c1       	rjmp	.+714    	; 0x135e <vfprintf+0x386>
    1094:	20 64       	ori	r18, 0x40	; 64
    1096:	06 c0       	rjmp	.+12     	; 0x10a4 <vfprintf+0xcc>
    1098:	8c 36       	cpi	r24, 0x6C	; 108
    109a:	11 f4       	brne	.+4      	; 0x10a0 <vfprintf+0xc8>
    109c:	20 68       	ori	r18, 0x80	; 128
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <vfprintf+0xcc>
    10a0:	88 36       	cpi	r24, 0x68	; 104
    10a2:	41 f4       	brne	.+16     	; 0x10b4 <vfprintf+0xdc>
    10a4:	f6 01       	movw	r30, r12
    10a6:	93 fd       	sbrc	r25, 3
    10a8:	85 91       	lpm	r24, Z+
    10aa:	93 ff       	sbrs	r25, 3
    10ac:	81 91       	ld	r24, Z+
    10ae:	6f 01       	movw	r12, r30
    10b0:	81 11       	cpse	r24, r1
    10b2:	c0 cf       	rjmp	.-128    	; 0x1034 <vfprintf+0x5c>
    10b4:	98 2f       	mov	r25, r24
    10b6:	95 54       	subi	r25, 0x45	; 69
    10b8:	93 30       	cpi	r25, 0x03	; 3
    10ba:	18 f0       	brcs	.+6      	; 0x10c2 <vfprintf+0xea>
    10bc:	90 52       	subi	r25, 0x20	; 32
    10be:	93 30       	cpi	r25, 0x03	; 3
    10c0:	28 f4       	brcc	.+10     	; 0x10cc <vfprintf+0xf4>
    10c2:	0c 5f       	subi	r16, 0xFC	; 252
    10c4:	1f 4f       	sbci	r17, 0xFF	; 255
    10c6:	ff e3       	ldi	r31, 0x3F	; 63
    10c8:	f9 83       	std	Y+1, r31	; 0x01
    10ca:	0d c0       	rjmp	.+26     	; 0x10e6 <vfprintf+0x10e>
    10cc:	83 36       	cpi	r24, 0x63	; 99
    10ce:	31 f0       	breq	.+12     	; 0x10dc <vfprintf+0x104>
    10d0:	83 37       	cpi	r24, 0x73	; 115
    10d2:	71 f0       	breq	.+28     	; 0x10f0 <vfprintf+0x118>
    10d4:	83 35       	cpi	r24, 0x53	; 83
    10d6:	09 f0       	breq	.+2      	; 0x10da <vfprintf+0x102>
    10d8:	5a c0       	rjmp	.+180    	; 0x118e <vfprintf+0x1b6>
    10da:	22 c0       	rjmp	.+68     	; 0x1120 <vfprintf+0x148>
    10dc:	f8 01       	movw	r30, r16
    10de:	80 81       	ld	r24, Z
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	0e 5f       	subi	r16, 0xFE	; 254
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
    10e6:	44 24       	eor	r4, r4
    10e8:	43 94       	inc	r4
    10ea:	51 2c       	mov	r5, r1
    10ec:	54 01       	movw	r10, r8
    10ee:	14 c0       	rjmp	.+40     	; 0x1118 <vfprintf+0x140>
    10f0:	38 01       	movw	r6, r16
    10f2:	f2 e0       	ldi	r31, 0x02	; 2
    10f4:	6f 0e       	add	r6, r31
    10f6:	71 1c       	adc	r7, r1
    10f8:	f8 01       	movw	r30, r16
    10fa:	a0 80       	ld	r10, Z
    10fc:	b1 80       	ldd	r11, Z+1	; 0x01
    10fe:	26 ff       	sbrs	r18, 6
    1100:	03 c0       	rjmp	.+6      	; 0x1108 <vfprintf+0x130>
    1102:	65 2d       	mov	r22, r5
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	02 c0       	rjmp	.+4      	; 0x110c <vfprintf+0x134>
    1108:	6f ef       	ldi	r22, 0xFF	; 255
    110a:	7f ef       	ldi	r23, 0xFF	; 255
    110c:	c5 01       	movw	r24, r10
    110e:	2c 87       	std	Y+12, r18	; 0x0c
    1110:	3b d1       	rcall	.+630    	; 0x1388 <strnlen>
    1112:	2c 01       	movw	r4, r24
    1114:	83 01       	movw	r16, r6
    1116:	2c 85       	ldd	r18, Y+12	; 0x0c
    1118:	6f e7       	ldi	r22, 0x7F	; 127
    111a:	26 2e       	mov	r2, r22
    111c:	22 22       	and	r2, r18
    111e:	17 c0       	rjmp	.+46     	; 0x114e <vfprintf+0x176>
    1120:	38 01       	movw	r6, r16
    1122:	f2 e0       	ldi	r31, 0x02	; 2
    1124:	6f 0e       	add	r6, r31
    1126:	71 1c       	adc	r7, r1
    1128:	f8 01       	movw	r30, r16
    112a:	a0 80       	ld	r10, Z
    112c:	b1 80       	ldd	r11, Z+1	; 0x01
    112e:	26 ff       	sbrs	r18, 6
    1130:	03 c0       	rjmp	.+6      	; 0x1138 <vfprintf+0x160>
    1132:	65 2d       	mov	r22, r5
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	02 c0       	rjmp	.+4      	; 0x113c <vfprintf+0x164>
    1138:	6f ef       	ldi	r22, 0xFF	; 255
    113a:	7f ef       	ldi	r23, 0xFF	; 255
    113c:	c5 01       	movw	r24, r10
    113e:	2c 87       	std	Y+12, r18	; 0x0c
    1140:	18 d1       	rcall	.+560    	; 0x1372 <strnlen_P>
    1142:	2c 01       	movw	r4, r24
    1144:	2c 85       	ldd	r18, Y+12	; 0x0c
    1146:	50 e8       	ldi	r21, 0x80	; 128
    1148:	25 2e       	mov	r2, r21
    114a:	22 2a       	or	r2, r18
    114c:	83 01       	movw	r16, r6
    114e:	23 fc       	sbrc	r2, 3
    1150:	1a c0       	rjmp	.+52     	; 0x1186 <vfprintf+0x1ae>
    1152:	05 c0       	rjmp	.+10     	; 0x115e <vfprintf+0x186>
    1154:	b7 01       	movw	r22, r14
    1156:	80 e2       	ldi	r24, 0x20	; 32
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	21 d1       	rcall	.+578    	; 0x139e <fputc>
    115c:	3a 94       	dec	r3
    115e:	83 2d       	mov	r24, r3
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	48 16       	cp	r4, r24
    1164:	59 06       	cpc	r5, r25
    1166:	b0 f3       	brcs	.-20     	; 0x1154 <vfprintf+0x17c>
    1168:	0e c0       	rjmp	.+28     	; 0x1186 <vfprintf+0x1ae>
    116a:	f5 01       	movw	r30, r10
    116c:	27 fc       	sbrc	r2, 7
    116e:	85 91       	lpm	r24, Z+
    1170:	27 fe       	sbrs	r2, 7
    1172:	81 91       	ld	r24, Z+
    1174:	5f 01       	movw	r10, r30
    1176:	b7 01       	movw	r22, r14
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	11 d1       	rcall	.+546    	; 0x139e <fputc>
    117c:	31 10       	cpse	r3, r1
    117e:	3a 94       	dec	r3
    1180:	f1 e0       	ldi	r31, 0x01	; 1
    1182:	4f 1a       	sub	r4, r31
    1184:	51 08       	sbc	r5, r1
    1186:	41 14       	cp	r4, r1
    1188:	51 04       	cpc	r5, r1
    118a:	79 f7       	brne	.-34     	; 0x116a <vfprintf+0x192>
    118c:	e5 c0       	rjmp	.+458    	; 0x1358 <vfprintf+0x380>
    118e:	84 36       	cpi	r24, 0x64	; 100
    1190:	11 f0       	breq	.+4      	; 0x1196 <vfprintf+0x1be>
    1192:	89 36       	cpi	r24, 0x69	; 105
    1194:	39 f5       	brne	.+78     	; 0x11e4 <vfprintf+0x20c>
    1196:	f8 01       	movw	r30, r16
    1198:	27 ff       	sbrs	r18, 7
    119a:	07 c0       	rjmp	.+14     	; 0x11aa <vfprintf+0x1d2>
    119c:	60 81       	ld	r22, Z
    119e:	71 81       	ldd	r23, Z+1	; 0x01
    11a0:	82 81       	ldd	r24, Z+2	; 0x02
    11a2:	93 81       	ldd	r25, Z+3	; 0x03
    11a4:	0c 5f       	subi	r16, 0xFC	; 252
    11a6:	1f 4f       	sbci	r17, 0xFF	; 255
    11a8:	08 c0       	rjmp	.+16     	; 0x11ba <vfprintf+0x1e2>
    11aa:	60 81       	ld	r22, Z
    11ac:	71 81       	ldd	r23, Z+1	; 0x01
    11ae:	88 27       	eor	r24, r24
    11b0:	77 fd       	sbrc	r23, 7
    11b2:	80 95       	com	r24
    11b4:	98 2f       	mov	r25, r24
    11b6:	0e 5f       	subi	r16, 0xFE	; 254
    11b8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ba:	4f e6       	ldi	r20, 0x6F	; 111
    11bc:	b4 2e       	mov	r11, r20
    11be:	b2 22       	and	r11, r18
    11c0:	97 ff       	sbrs	r25, 7
    11c2:	09 c0       	rjmp	.+18     	; 0x11d6 <vfprintf+0x1fe>
    11c4:	90 95       	com	r25
    11c6:	80 95       	com	r24
    11c8:	70 95       	com	r23
    11ca:	61 95       	neg	r22
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	8f 4f       	sbci	r24, 0xFF	; 255
    11d0:	9f 4f       	sbci	r25, 0xFF	; 255
    11d2:	f0 e8       	ldi	r31, 0x80	; 128
    11d4:	bf 2a       	or	r11, r31
    11d6:	2a e0       	ldi	r18, 0x0A	; 10
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	a4 01       	movw	r20, r8
    11dc:	0c d1       	rcall	.+536    	; 0x13f6 <__ultoa_invert>
    11de:	a8 2e       	mov	r10, r24
    11e0:	a8 18       	sub	r10, r8
    11e2:	42 c0       	rjmp	.+132    	; 0x1268 <vfprintf+0x290>
    11e4:	85 37       	cpi	r24, 0x75	; 117
    11e6:	31 f4       	brne	.+12     	; 0x11f4 <vfprintf+0x21c>
    11e8:	3f ee       	ldi	r19, 0xEF	; 239
    11ea:	b3 2e       	mov	r11, r19
    11ec:	b2 22       	and	r11, r18
    11ee:	2a e0       	ldi	r18, 0x0A	; 10
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	24 c0       	rjmp	.+72     	; 0x123c <vfprintf+0x264>
    11f4:	99 ef       	ldi	r25, 0xF9	; 249
    11f6:	b9 2e       	mov	r11, r25
    11f8:	b2 22       	and	r11, r18
    11fa:	8f 36       	cpi	r24, 0x6F	; 111
    11fc:	b9 f0       	breq	.+46     	; 0x122c <vfprintf+0x254>
    11fe:	20 f4       	brcc	.+8      	; 0x1208 <vfprintf+0x230>
    1200:	88 35       	cpi	r24, 0x58	; 88
    1202:	09 f0       	breq	.+2      	; 0x1206 <vfprintf+0x22e>
    1204:	ac c0       	rjmp	.+344    	; 0x135e <vfprintf+0x386>
    1206:	0d c0       	rjmp	.+26     	; 0x1222 <vfprintf+0x24a>
    1208:	80 37       	cpi	r24, 0x70	; 112
    120a:	21 f0       	breq	.+8      	; 0x1214 <vfprintf+0x23c>
    120c:	88 37       	cpi	r24, 0x78	; 120
    120e:	09 f0       	breq	.+2      	; 0x1212 <vfprintf+0x23a>
    1210:	a6 c0       	rjmp	.+332    	; 0x135e <vfprintf+0x386>
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <vfprintf+0x240>
    1214:	20 e1       	ldi	r18, 0x10	; 16
    1216:	b2 2a       	or	r11, r18
    1218:	b4 fe       	sbrs	r11, 4
    121a:	0b c0       	rjmp	.+22     	; 0x1232 <vfprintf+0x25a>
    121c:	84 e0       	ldi	r24, 0x04	; 4
    121e:	b8 2a       	or	r11, r24
    1220:	08 c0       	rjmp	.+16     	; 0x1232 <vfprintf+0x25a>
    1222:	24 ff       	sbrs	r18, 4
    1224:	09 c0       	rjmp	.+18     	; 0x1238 <vfprintf+0x260>
    1226:	e6 e0       	ldi	r30, 0x06	; 6
    1228:	be 2a       	or	r11, r30
    122a:	06 c0       	rjmp	.+12     	; 0x1238 <vfprintf+0x260>
    122c:	28 e0       	ldi	r18, 0x08	; 8
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	05 c0       	rjmp	.+10     	; 0x123c <vfprintf+0x264>
    1232:	20 e1       	ldi	r18, 0x10	; 16
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	02 c0       	rjmp	.+4      	; 0x123c <vfprintf+0x264>
    1238:	20 e1       	ldi	r18, 0x10	; 16
    123a:	32 e0       	ldi	r19, 0x02	; 2
    123c:	f8 01       	movw	r30, r16
    123e:	b7 fe       	sbrs	r11, 7
    1240:	07 c0       	rjmp	.+14     	; 0x1250 <vfprintf+0x278>
    1242:	60 81       	ld	r22, Z
    1244:	71 81       	ldd	r23, Z+1	; 0x01
    1246:	82 81       	ldd	r24, Z+2	; 0x02
    1248:	93 81       	ldd	r25, Z+3	; 0x03
    124a:	0c 5f       	subi	r16, 0xFC	; 252
    124c:	1f 4f       	sbci	r17, 0xFF	; 255
    124e:	06 c0       	rjmp	.+12     	; 0x125c <vfprintf+0x284>
    1250:	60 81       	ld	r22, Z
    1252:	71 81       	ldd	r23, Z+1	; 0x01
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 5f       	subi	r16, 0xFE	; 254
    125a:	1f 4f       	sbci	r17, 0xFF	; 255
    125c:	a4 01       	movw	r20, r8
    125e:	cb d0       	rcall	.+406    	; 0x13f6 <__ultoa_invert>
    1260:	a8 2e       	mov	r10, r24
    1262:	a8 18       	sub	r10, r8
    1264:	ff e7       	ldi	r31, 0x7F	; 127
    1266:	bf 22       	and	r11, r31
    1268:	b6 fe       	sbrs	r11, 6
    126a:	0b c0       	rjmp	.+22     	; 0x1282 <vfprintf+0x2aa>
    126c:	2b 2d       	mov	r18, r11
    126e:	2e 7f       	andi	r18, 0xFE	; 254
    1270:	a5 14       	cp	r10, r5
    1272:	50 f4       	brcc	.+20     	; 0x1288 <vfprintf+0x2b0>
    1274:	b4 fe       	sbrs	r11, 4
    1276:	0a c0       	rjmp	.+20     	; 0x128c <vfprintf+0x2b4>
    1278:	b2 fc       	sbrc	r11, 2
    127a:	08 c0       	rjmp	.+16     	; 0x128c <vfprintf+0x2b4>
    127c:	2b 2d       	mov	r18, r11
    127e:	2e 7e       	andi	r18, 0xEE	; 238
    1280:	05 c0       	rjmp	.+10     	; 0x128c <vfprintf+0x2b4>
    1282:	7a 2c       	mov	r7, r10
    1284:	2b 2d       	mov	r18, r11
    1286:	03 c0       	rjmp	.+6      	; 0x128e <vfprintf+0x2b6>
    1288:	7a 2c       	mov	r7, r10
    128a:	01 c0       	rjmp	.+2      	; 0x128e <vfprintf+0x2b6>
    128c:	75 2c       	mov	r7, r5
    128e:	24 ff       	sbrs	r18, 4
    1290:	0d c0       	rjmp	.+26     	; 0x12ac <vfprintf+0x2d4>
    1292:	fe 01       	movw	r30, r28
    1294:	ea 0d       	add	r30, r10
    1296:	f1 1d       	adc	r31, r1
    1298:	80 81       	ld	r24, Z
    129a:	80 33       	cpi	r24, 0x30	; 48
    129c:	11 f4       	brne	.+4      	; 0x12a2 <vfprintf+0x2ca>
    129e:	29 7e       	andi	r18, 0xE9	; 233
    12a0:	09 c0       	rjmp	.+18     	; 0x12b4 <vfprintf+0x2dc>
    12a2:	22 ff       	sbrs	r18, 2
    12a4:	06 c0       	rjmp	.+12     	; 0x12b2 <vfprintf+0x2da>
    12a6:	73 94       	inc	r7
    12a8:	73 94       	inc	r7
    12aa:	04 c0       	rjmp	.+8      	; 0x12b4 <vfprintf+0x2dc>
    12ac:	82 2f       	mov	r24, r18
    12ae:	86 78       	andi	r24, 0x86	; 134
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <vfprintf+0x2dc>
    12b2:	73 94       	inc	r7
    12b4:	23 fd       	sbrc	r18, 3
    12b6:	13 c0       	rjmp	.+38     	; 0x12de <vfprintf+0x306>
    12b8:	20 ff       	sbrs	r18, 0
    12ba:	0e c0       	rjmp	.+28     	; 0x12d8 <vfprintf+0x300>
    12bc:	5a 2c       	mov	r5, r10
    12be:	73 14       	cp	r7, r3
    12c0:	58 f4       	brcc	.+22     	; 0x12d8 <vfprintf+0x300>
    12c2:	53 0c       	add	r5, r3
    12c4:	57 18       	sub	r5, r7
    12c6:	73 2c       	mov	r7, r3
    12c8:	07 c0       	rjmp	.+14     	; 0x12d8 <vfprintf+0x300>
    12ca:	b7 01       	movw	r22, r14
    12cc:	80 e2       	ldi	r24, 0x20	; 32
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	2c 87       	std	Y+12, r18	; 0x0c
    12d2:	65 d0       	rcall	.+202    	; 0x139e <fputc>
    12d4:	73 94       	inc	r7
    12d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    12d8:	73 14       	cp	r7, r3
    12da:	b8 f3       	brcs	.-18     	; 0x12ca <vfprintf+0x2f2>
    12dc:	04 c0       	rjmp	.+8      	; 0x12e6 <vfprintf+0x30e>
    12de:	73 14       	cp	r7, r3
    12e0:	10 f4       	brcc	.+4      	; 0x12e6 <vfprintf+0x30e>
    12e2:	37 18       	sub	r3, r7
    12e4:	01 c0       	rjmp	.+2      	; 0x12e8 <vfprintf+0x310>
    12e6:	31 2c       	mov	r3, r1
    12e8:	24 ff       	sbrs	r18, 4
    12ea:	11 c0       	rjmp	.+34     	; 0x130e <vfprintf+0x336>
    12ec:	b7 01       	movw	r22, r14
    12ee:	80 e3       	ldi	r24, 0x30	; 48
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	2c 87       	std	Y+12, r18	; 0x0c
    12f4:	54 d0       	rcall	.+168    	; 0x139e <fputc>
    12f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    12f8:	22 ff       	sbrs	r18, 2
    12fa:	1c c0       	rjmp	.+56     	; 0x1334 <vfprintf+0x35c>
    12fc:	21 ff       	sbrs	r18, 1
    12fe:	03 c0       	rjmp	.+6      	; 0x1306 <vfprintf+0x32e>
    1300:	88 e5       	ldi	r24, 0x58	; 88
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	02 c0       	rjmp	.+4      	; 0x130a <vfprintf+0x332>
    1306:	88 e7       	ldi	r24, 0x78	; 120
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	b7 01       	movw	r22, r14
    130c:	0c c0       	rjmp	.+24     	; 0x1326 <vfprintf+0x34e>
    130e:	82 2f       	mov	r24, r18
    1310:	86 78       	andi	r24, 0x86	; 134
    1312:	81 f0       	breq	.+32     	; 0x1334 <vfprintf+0x35c>
    1314:	21 fd       	sbrc	r18, 1
    1316:	02 c0       	rjmp	.+4      	; 0x131c <vfprintf+0x344>
    1318:	80 e2       	ldi	r24, 0x20	; 32
    131a:	01 c0       	rjmp	.+2      	; 0x131e <vfprintf+0x346>
    131c:	8b e2       	ldi	r24, 0x2B	; 43
    131e:	27 fd       	sbrc	r18, 7
    1320:	8d e2       	ldi	r24, 0x2D	; 45
    1322:	b7 01       	movw	r22, r14
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	3b d0       	rcall	.+118    	; 0x139e <fputc>
    1328:	05 c0       	rjmp	.+10     	; 0x1334 <vfprintf+0x35c>
    132a:	b7 01       	movw	r22, r14
    132c:	80 e3       	ldi	r24, 0x30	; 48
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	36 d0       	rcall	.+108    	; 0x139e <fputc>
    1332:	5a 94       	dec	r5
    1334:	a5 14       	cp	r10, r5
    1336:	c8 f3       	brcs	.-14     	; 0x132a <vfprintf+0x352>
    1338:	aa 94       	dec	r10
    133a:	f4 01       	movw	r30, r8
    133c:	ea 0d       	add	r30, r10
    133e:	f1 1d       	adc	r31, r1
    1340:	b7 01       	movw	r22, r14
    1342:	80 81       	ld	r24, Z
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	2b d0       	rcall	.+86     	; 0x139e <fputc>
    1348:	a1 10       	cpse	r10, r1
    134a:	f6 cf       	rjmp	.-20     	; 0x1338 <vfprintf+0x360>
    134c:	05 c0       	rjmp	.+10     	; 0x1358 <vfprintf+0x380>
    134e:	b7 01       	movw	r22, r14
    1350:	80 e2       	ldi	r24, 0x20	; 32
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	24 d0       	rcall	.+72     	; 0x139e <fputc>
    1356:	3a 94       	dec	r3
    1358:	31 10       	cpse	r3, r1
    135a:	f9 cf       	rjmp	.-14     	; 0x134e <vfprintf+0x376>
    135c:	50 ce       	rjmp	.-864    	; 0xffe <vfprintf+0x26>
    135e:	f7 01       	movw	r30, r14
    1360:	26 81       	ldd	r18, Z+6	; 0x06
    1362:	37 81       	ldd	r19, Z+7	; 0x07
    1364:	02 c0       	rjmp	.+4      	; 0x136a <vfprintf+0x392>
    1366:	2f ef       	ldi	r18, 0xFF	; 255
    1368:	3f ef       	ldi	r19, 0xFF	; 255
    136a:	c9 01       	movw	r24, r18
    136c:	2c 96       	adiw	r28, 0x0c	; 12
    136e:	e2 e1       	ldi	r30, 0x12	; 18
    1370:	bc c0       	rjmp	.+376    	; 0x14ea <__epilogue_restores__>

00001372 <strnlen_P>:
    1372:	fc 01       	movw	r30, r24
    1374:	05 90       	lpm	r0, Z+
    1376:	61 50       	subi	r22, 0x01	; 1
    1378:	70 40       	sbci	r23, 0x00	; 0
    137a:	01 10       	cpse	r0, r1
    137c:	d8 f7       	brcc	.-10     	; 0x1374 <strnlen_P+0x2>
    137e:	80 95       	com	r24
    1380:	90 95       	com	r25
    1382:	8e 0f       	add	r24, r30
    1384:	9f 1f       	adc	r25, r31
    1386:	08 95       	ret

00001388 <strnlen>:
    1388:	fc 01       	movw	r30, r24
    138a:	61 50       	subi	r22, 0x01	; 1
    138c:	70 40       	sbci	r23, 0x00	; 0
    138e:	01 90       	ld	r0, Z+
    1390:	01 10       	cpse	r0, r1
    1392:	d8 f7       	brcc	.-10     	; 0x138a <strnlen+0x2>
    1394:	80 95       	com	r24
    1396:	90 95       	com	r25
    1398:	8e 0f       	add	r24, r30
    139a:	9f 1f       	adc	r25, r31
    139c:	08 95       	ret

0000139e <fputc>:
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	8c 01       	movw	r16, r24
    13a8:	eb 01       	movw	r28, r22
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	81 fd       	sbrc	r24, 1
    13ae:	03 c0       	rjmp	.+6      	; 0x13b6 <fputc+0x18>
    13b0:	0f ef       	ldi	r16, 0xFF	; 255
    13b2:	1f ef       	ldi	r17, 0xFF	; 255
    13b4:	1a c0       	rjmp	.+52     	; 0x13ea <fputc+0x4c>
    13b6:	82 ff       	sbrs	r24, 2
    13b8:	0d c0       	rjmp	.+26     	; 0x13d4 <fputc+0x36>
    13ba:	2e 81       	ldd	r18, Y+6	; 0x06
    13bc:	3f 81       	ldd	r19, Y+7	; 0x07
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	9d 81       	ldd	r25, Y+5	; 0x05
    13c2:	28 17       	cp	r18, r24
    13c4:	39 07       	cpc	r19, r25
    13c6:	64 f4       	brge	.+24     	; 0x13e0 <fputc+0x42>
    13c8:	e8 81       	ld	r30, Y
    13ca:	f9 81       	ldd	r31, Y+1	; 0x01
    13cc:	01 93       	st	Z+, r16
    13ce:	f9 83       	std	Y+1, r31	; 0x01
    13d0:	e8 83       	st	Y, r30
    13d2:	06 c0       	rjmp	.+12     	; 0x13e0 <fputc+0x42>
    13d4:	e8 85       	ldd	r30, Y+8	; 0x08
    13d6:	f9 85       	ldd	r31, Y+9	; 0x09
    13d8:	80 2f       	mov	r24, r16
    13da:	09 95       	icall
    13dc:	89 2b       	or	r24, r25
    13de:	41 f7       	brne	.-48     	; 0x13b0 <fputc+0x12>
    13e0:	8e 81       	ldd	r24, Y+6	; 0x06
    13e2:	9f 81       	ldd	r25, Y+7	; 0x07
    13e4:	01 96       	adiw	r24, 0x01	; 1
    13e6:	9f 83       	std	Y+7, r25	; 0x07
    13e8:	8e 83       	std	Y+6, r24	; 0x06
    13ea:	c8 01       	movw	r24, r16
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	08 95       	ret

000013f6 <__ultoa_invert>:
    13f6:	fa 01       	movw	r30, r20
    13f8:	aa 27       	eor	r26, r26
    13fa:	28 30       	cpi	r18, 0x08	; 8
    13fc:	51 f1       	breq	.+84     	; 0x1452 <__ultoa_invert+0x5c>
    13fe:	20 31       	cpi	r18, 0x10	; 16
    1400:	81 f1       	breq	.+96     	; 0x1462 <__ultoa_invert+0x6c>
    1402:	e8 94       	clt
    1404:	6f 93       	push	r22
    1406:	6e 7f       	andi	r22, 0xFE	; 254
    1408:	6e 5f       	subi	r22, 0xFE	; 254
    140a:	7f 4f       	sbci	r23, 0xFF	; 255
    140c:	8f 4f       	sbci	r24, 0xFF	; 255
    140e:	9f 4f       	sbci	r25, 0xFF	; 255
    1410:	af 4f       	sbci	r26, 0xFF	; 255
    1412:	b1 e0       	ldi	r27, 0x01	; 1
    1414:	3e d0       	rcall	.+124    	; 0x1492 <__ultoa_invert+0x9c>
    1416:	b4 e0       	ldi	r27, 0x04	; 4
    1418:	3c d0       	rcall	.+120    	; 0x1492 <__ultoa_invert+0x9c>
    141a:	67 0f       	add	r22, r23
    141c:	78 1f       	adc	r23, r24
    141e:	89 1f       	adc	r24, r25
    1420:	9a 1f       	adc	r25, r26
    1422:	a1 1d       	adc	r26, r1
    1424:	68 0f       	add	r22, r24
    1426:	79 1f       	adc	r23, r25
    1428:	8a 1f       	adc	r24, r26
    142a:	91 1d       	adc	r25, r1
    142c:	a1 1d       	adc	r26, r1
    142e:	6a 0f       	add	r22, r26
    1430:	71 1d       	adc	r23, r1
    1432:	81 1d       	adc	r24, r1
    1434:	91 1d       	adc	r25, r1
    1436:	a1 1d       	adc	r26, r1
    1438:	20 d0       	rcall	.+64     	; 0x147a <__ultoa_invert+0x84>
    143a:	09 f4       	brne	.+2      	; 0x143e <__ultoa_invert+0x48>
    143c:	68 94       	set
    143e:	3f 91       	pop	r19
    1440:	2a e0       	ldi	r18, 0x0A	; 10
    1442:	26 9f       	mul	r18, r22
    1444:	11 24       	eor	r1, r1
    1446:	30 19       	sub	r19, r0
    1448:	30 5d       	subi	r19, 0xD0	; 208
    144a:	31 93       	st	Z+, r19
    144c:	de f6       	brtc	.-74     	; 0x1404 <__ultoa_invert+0xe>
    144e:	cf 01       	movw	r24, r30
    1450:	08 95       	ret
    1452:	46 2f       	mov	r20, r22
    1454:	47 70       	andi	r20, 0x07	; 7
    1456:	40 5d       	subi	r20, 0xD0	; 208
    1458:	41 93       	st	Z+, r20
    145a:	b3 e0       	ldi	r27, 0x03	; 3
    145c:	0f d0       	rcall	.+30     	; 0x147c <__ultoa_invert+0x86>
    145e:	c9 f7       	brne	.-14     	; 0x1452 <__ultoa_invert+0x5c>
    1460:	f6 cf       	rjmp	.-20     	; 0x144e <__ultoa_invert+0x58>
    1462:	46 2f       	mov	r20, r22
    1464:	4f 70       	andi	r20, 0x0F	; 15
    1466:	40 5d       	subi	r20, 0xD0	; 208
    1468:	4a 33       	cpi	r20, 0x3A	; 58
    146a:	18 f0       	brcs	.+6      	; 0x1472 <__ultoa_invert+0x7c>
    146c:	49 5d       	subi	r20, 0xD9	; 217
    146e:	31 fd       	sbrc	r19, 1
    1470:	40 52       	subi	r20, 0x20	; 32
    1472:	41 93       	st	Z+, r20
    1474:	02 d0       	rcall	.+4      	; 0x147a <__ultoa_invert+0x84>
    1476:	a9 f7       	brne	.-22     	; 0x1462 <__ultoa_invert+0x6c>
    1478:	ea cf       	rjmp	.-44     	; 0x144e <__ultoa_invert+0x58>
    147a:	b4 e0       	ldi	r27, 0x04	; 4
    147c:	a6 95       	lsr	r26
    147e:	97 95       	ror	r25
    1480:	87 95       	ror	r24
    1482:	77 95       	ror	r23
    1484:	67 95       	ror	r22
    1486:	ba 95       	dec	r27
    1488:	c9 f7       	brne	.-14     	; 0x147c <__ultoa_invert+0x86>
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	61 05       	cpc	r22, r1
    148e:	71 05       	cpc	r23, r1
    1490:	08 95       	ret
    1492:	9b 01       	movw	r18, r22
    1494:	ac 01       	movw	r20, r24
    1496:	0a 2e       	mov	r0, r26
    1498:	06 94       	lsr	r0
    149a:	57 95       	ror	r21
    149c:	47 95       	ror	r20
    149e:	37 95       	ror	r19
    14a0:	27 95       	ror	r18
    14a2:	ba 95       	dec	r27
    14a4:	c9 f7       	brne	.-14     	; 0x1498 <__ultoa_invert+0xa2>
    14a6:	62 0f       	add	r22, r18
    14a8:	73 1f       	adc	r23, r19
    14aa:	84 1f       	adc	r24, r20
    14ac:	95 1f       	adc	r25, r21
    14ae:	a0 1d       	adc	r26, r0
    14b0:	08 95       	ret

000014b2 <__prologue_saves__>:
    14b2:	2f 92       	push	r2
    14b4:	3f 92       	push	r3
    14b6:	4f 92       	push	r4
    14b8:	5f 92       	push	r5
    14ba:	6f 92       	push	r6
    14bc:	7f 92       	push	r7
    14be:	8f 92       	push	r8
    14c0:	9f 92       	push	r9
    14c2:	af 92       	push	r10
    14c4:	bf 92       	push	r11
    14c6:	cf 92       	push	r12
    14c8:	df 92       	push	r13
    14ca:	ef 92       	push	r14
    14cc:	ff 92       	push	r15
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	ca 1b       	sub	r28, r26
    14dc:	db 0b       	sbc	r29, r27
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	09 94       	ijmp

000014ea <__epilogue_restores__>:
    14ea:	2a 88       	ldd	r2, Y+18	; 0x12
    14ec:	39 88       	ldd	r3, Y+17	; 0x11
    14ee:	48 88       	ldd	r4, Y+16	; 0x10
    14f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    14f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    14f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    14f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    14f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    14fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    14fc:	b9 84       	ldd	r11, Y+9	; 0x09
    14fe:	c8 84       	ldd	r12, Y+8	; 0x08
    1500:	df 80       	ldd	r13, Y+7	; 0x07
    1502:	ee 80       	ldd	r14, Y+6	; 0x06
    1504:	fd 80       	ldd	r15, Y+5	; 0x05
    1506:	0c 81       	ldd	r16, Y+4	; 0x04
    1508:	1b 81       	ldd	r17, Y+3	; 0x03
    150a:	aa 81       	ldd	r26, Y+2	; 0x02
    150c:	b9 81       	ldd	r27, Y+1	; 0x01
    150e:	ce 0f       	add	r28, r30
    1510:	d1 1d       	adc	r29, r1
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	ed 01       	movw	r28, r26
    151e:	08 95       	ret

00001520 <_exit>:
    1520:	f8 94       	cli

00001522 <__stop_program>:
    1522:	ff cf       	rjmp	.-2      	; 0x1522 <__stop_program>
