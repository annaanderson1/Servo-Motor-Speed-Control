
Servo-Motor-Speed-Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000010ec  00001180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080011a  0080011a  0000119a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000119a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  000011f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001252  00000000  00000000  0000131e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f8  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c5  00000000  00000000  00002c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003dc  00000000  00000000  00003230  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000457  00000000  00000000  0000360c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d6a  00000000  00000000  00003a63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  000047cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	23 c0       	rjmp	.+70     	; 0x48 <__ctors_end>
       2:	3d c0       	rjmp	.+122    	; 0x7e <__bad_interrupt>
       4:	3c c0       	rjmp	.+120    	; 0x7e <__bad_interrupt>
       6:	3b c0       	rjmp	.+118    	; 0x7e <__bad_interrupt>
       8:	b2 c1       	rjmp	.+868    	; 0x36e <__vector_4>
       a:	39 c0       	rjmp	.+114    	; 0x7e <__bad_interrupt>
       c:	38 c0       	rjmp	.+112    	; 0x7e <__bad_interrupt>
       e:	37 c0       	rjmp	.+110    	; 0x7e <__bad_interrupt>
      10:	36 c0       	rjmp	.+108    	; 0x7e <__bad_interrupt>
      12:	35 c0       	rjmp	.+106    	; 0x7e <__bad_interrupt>
      14:	34 c0       	rjmp	.+104    	; 0x7e <__bad_interrupt>
      16:	33 c0       	rjmp	.+102    	; 0x7e <__bad_interrupt>
      18:	32 c0       	rjmp	.+100    	; 0x7e <__bad_interrupt>
      1a:	31 c0       	rjmp	.+98     	; 0x7e <__bad_interrupt>
      1c:	30 c0       	rjmp	.+96     	; 0x7e <__bad_interrupt>
      1e:	2f c0       	rjmp	.+94     	; 0x7e <__bad_interrupt>
      20:	2e c0       	rjmp	.+92     	; 0x7e <__bad_interrupt>
      22:	2d c0       	rjmp	.+90     	; 0x7e <__bad_interrupt>
      24:	1c c2       	rjmp	.+1080   	; 0x45e <__vector_18>
      26:	2b c0       	rjmp	.+86     	; 0x7e <__bad_interrupt>
      28:	2a c0       	rjmp	.+84     	; 0x7e <__bad_interrupt>
      2a:	29 c0       	rjmp	.+82     	; 0x7e <__bad_interrupt>
      2c:	28 c0       	rjmp	.+80     	; 0x7e <__bad_interrupt>
      2e:	27 c0       	rjmp	.+78     	; 0x7e <__bad_interrupt>
      30:	26 c0       	rjmp	.+76     	; 0x7e <__bad_interrupt>
      32:	25 c0       	rjmp	.+74     	; 0x7e <__bad_interrupt>
      34:	c0 c2       	rjmp	.+1408   	; 0x5b6 <main+0xa6>
      36:	c3 c2       	rjmp	.+1414   	; 0x5be <main+0xae>
      38:	c6 c2       	rjmp	.+1420   	; 0x5c6 <main+0xb6>
      3a:	c9 c2       	rjmp	.+1426   	; 0x5ce <main+0xbe>
      3c:	cc c2       	rjmp	.+1432   	; 0x5d6 <main+0xc6>
      3e:	cf c2       	rjmp	.+1438   	; 0x5de <main+0xce>
      40:	d2 c2       	rjmp	.+1444   	; 0x5e6 <main+0xd6>
      42:	d5 c2       	rjmp	.+1450   	; 0x5ee <main+0xde>
      44:	d8 c2       	rjmp	.+1456   	; 0x5f6 <main+0xe6>
      46:	db c2       	rjmp	.+1462   	; 0x5fe <main+0xee>

00000048 <__ctors_end>:
      48:	11 24       	eor	r1, r1
      4a:	1f be       	out	0x3f, r1	; 63
      4c:	cf ef       	ldi	r28, 0xFF	; 255
      4e:	d4 e0       	ldi	r29, 0x04	; 4
      50:	de bf       	out	0x3e, r29	; 62
      52:	cd bf       	out	0x3d, r28	; 61

00000054 <__do_copy_data>:
      54:	11 e0       	ldi	r17, 0x01	; 1
      56:	a0 e0       	ldi	r26, 0x00	; 0
      58:	b1 e0       	ldi	r27, 0x01	; 1
      5a:	ec ee       	ldi	r30, 0xEC	; 236
      5c:	f0 e1       	ldi	r31, 0x10	; 16
      5e:	02 c0       	rjmp	.+4      	; 0x64 <__do_copy_data+0x10>
      60:	05 90       	lpm	r0, Z+
      62:	0d 92       	st	X+, r0
      64:	aa 31       	cpi	r26, 0x1A	; 26
      66:	b1 07       	cpc	r27, r17
      68:	d9 f7       	brne	.-10     	; 0x60 <__do_copy_data+0xc>

0000006a <__do_clear_bss>:
      6a:	21 e0       	ldi	r18, 0x01	; 1
      6c:	aa e1       	ldi	r26, 0x1A	; 26
      6e:	b1 e0       	ldi	r27, 0x01	; 1
      70:	01 c0       	rjmp	.+2      	; 0x74 <.do_clear_bss_start>

00000072 <.do_clear_bss_loop>:
      72:	1d 92       	st	X+, r1

00000074 <.do_clear_bss_start>:
      74:	a7 32       	cpi	r26, 0x27	; 39
      76:	b2 07       	cpc	r27, r18
      78:	e1 f7       	brne	.-8      	; 0x72 <.do_clear_bss_loop>
      7a:	4a d2       	rcall	.+1172   	; 0x510 <main>
      7c:	35 c8       	rjmp	.-3990   	; 0xfffff0e8 <__eeprom_end+0xff7ef0e8>

0000007e <__bad_interrupt>:
      7e:	c0 cf       	rjmp	.-128    	; 0x0 <__vectors>

00000080 <init_shared_data>:
	unsigned long rpm_avg;
	unsigned long rpm_measurements[MEASUREMENTS_SIZE];
	unsigned long delta_time;
} Shared_Data;

void init_shared_data(Shared_Data* shared_ptr){
      80:	fc 01       	movw	r30, r24
	shared_ptr->speed_set = 0;
      82:	11 82       	std	Z+1, r1	; 0x01
      84:	10 82       	st	Z, r1
	shared_ptr->speed_actual = 0;
      86:	13 82       	std	Z+3, r1	; 0x03
      88:	12 82       	std	Z+2, r1	; 0x02
	//shared_ptr->clk_prev = 0;
	//shared_ptr->clk_elapsed = 0;
	shared_ptr->curr_rpm = 0;
      8a:	14 82       	std	Z+4, r1	; 0x04
      8c:	15 82       	std	Z+5, r1	; 0x05
      8e:	16 82       	std	Z+6, r1	; 0x06
      90:	17 82       	std	Z+7, r1	; 0x07
	shared_ptr->rpm_avg = 0;
      92:	10 86       	std	Z+8, r1	; 0x08
      94:	11 86       	std	Z+9, r1	; 0x09
      96:	12 86       	std	Z+10, r1	; 0x0a
      98:	13 86       	std	Z+11, r1	; 0x0b
	shared_ptr->delta_time = 0;
      9a:	e4 57       	subi	r30, 0x74	; 116
      9c:	ff 4f       	sbci	r31, 0xFF	; 255
      9e:	10 82       	st	Z, r1
      a0:	11 82       	std	Z+1, r1	; 0x01
      a2:	12 82       	std	Z+2, r1	; 0x02
      a4:	13 82       	std	Z+3, r1	; 0x03
      a6:	08 95       	ret

000000a8 <calc_latest_rpm>:
}

/*	Calculates the speed between two encoder-interrupts, using fixed point arithmetics.
 *	Qm.n values defined in shared.h
*/
void calc_latest_rpm(Shared_Data* shared_ptr){
      a8:	2f 92       	push	r2
      aa:	3f 92       	push	r3
      ac:	4f 92       	push	r4
      ae:	5f 92       	push	r5
      b0:	6f 92       	push	r6
      b2:	7f 92       	push	r7
      b4:	8f 92       	push	r8
      b6:	9f 92       	push	r9
      b8:	af 92       	push	r10
      ba:	bf 92       	push	r11
      bc:	cf 92       	push	r12
      be:	df 92       	push	r13
      c0:	ef 92       	push	r14
      c2:	ff 92       	push	r15
      c4:	0f 93       	push	r16
      c6:	1f 93       	push	r17
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62
      d0:	2c 97       	sbiw	r28, 0x0c	; 12
      d2:	0f b6       	in	r0, 0x3f	; 63
      d4:	f8 94       	cli
      d6:	de bf       	out	0x3e, r29	; 62
      d8:	0f be       	out	0x3f, r0	; 63
      da:	cd bf       	out	0x3d, r28	; 61
      dc:	9a 87       	std	Y+10, r25	; 0x0a
      de:	89 87       	std	Y+9, r24	; 0x09
	// scales based on prescaling
	unsigned short prescale = 8;

	unsigned long temp;

	temp = (unsigned long)delta_clk * prescale;
      e0:	80 91 25 01 	lds	r24, 0x0125
      e4:	90 91 26 01 	lds	r25, 0x0126
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b0 e0       	ldi	r27, 0x00	; 0
      ec:	88 0f       	add	r24, r24
      ee:	99 1f       	adc	r25, r25
      f0:	aa 1f       	adc	r26, r26
      f2:	bb 1f       	adc	r27, r27
      f4:	88 0f       	add	r24, r24
      f6:	99 1f       	adc	r25, r25
      f8:	aa 1f       	adc	r26, r26
      fa:	bb 1f       	adc	r27, r27
	unsigned long long denominator;
	unsigned long long rpm;
	
	delta_time = calc_delta_time(shared_ptr);
	
	delta_time = delta_time << N;
      fc:	88 0f       	add	r24, r24
      fe:	99 1f       	adc	r25, r25
     100:	aa 1f       	adc	r26, r26
     102:	bb 1f       	adc	r27, r27
     104:	88 0f       	add	r24, r24
     106:	99 1f       	adc	r25, r25
     108:	aa 1f       	adc	r26, r26
     10a:	bb 1f       	adc	r27, r27
     10c:	88 0f       	add	r24, r24
     10e:	99 1f       	adc	r25, r25
     110:	aa 1f       	adc	r26, r26
     112:	bb 1f       	adc	r27, r27
     114:	88 0f       	add	r24, r24
     116:	99 1f       	adc	r25, r25
     118:	aa 1f       	adc	r26, r26
     11a:	bb 1f       	adc	r27, r27
     11c:	9c 01       	movw	r18, r24
     11e:	ad 01       	movw	r20, r26
     120:	22 0f       	add	r18, r18
     122:	33 1f       	adc	r19, r19
     124:	44 1f       	adc	r20, r20
     126:	55 1f       	adc	r21, r21
     128:	29 83       	std	Y+1, r18	; 0x01
     12a:	3a 83       	std	Y+2, r19	; 0x02
     12c:	4b 83       	std	Y+3, r20	; 0x03
     12e:	5c 83       	std	Y+4, r21	; 0x04
	S_TO_MIN = S_TO_MIN << N;

	numerator = (unsigned long long)MS_TO_S * S_TO_MIN;
	numerator = numerator >> N;

	denominator = (unsigned long long)delta_rev_inverse * delta_time;
     130:	19 01       	movw	r2, r18
     132:	2a 01       	movw	r4, r20
     134:	33 2d       	mov	r19, r3
     136:	44 2d       	mov	r20, r4
     138:	55 2d       	mov	r21, r5
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	70 e0       	ldi	r23, 0x00	; 0
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	02 e0       	ldi	r16, 0x02	; 2
     144:	87 d4       	rcall	.+2318   	; 0xa54 <__ashldi3>
     146:	a2 2c       	mov	r10, r2
     148:	b3 2c       	mov	r11, r3
     14a:	c4 2c       	mov	r12, r4
     14c:	d5 2c       	mov	r13, r5
     14e:	e1 2c       	mov	r14, r1
     150:	f1 2c       	mov	r15, r1
     152:	00 e0       	ldi	r16, 0x00	; 0
     154:	10 e0       	ldi	r17, 0x00	; 0
     156:	be d4       	rcall	.+2428   	; 0xad4 <__subdi3>
     158:	02 e0       	ldi	r16, 0x02	; 2
     15a:	7c d4       	rcall	.+2296   	; 0xa54 <__ashldi3>
     15c:	00 e0       	ldi	r16, 0x00	; 0
     15e:	ba d4       	rcall	.+2420   	; 0xad4 <__subdi3>
     160:	a2 2e       	mov	r10, r18
     162:	b3 2e       	mov	r11, r19
     164:	c4 2e       	mov	r12, r20
     166:	d5 2e       	mov	r13, r21
     168:	e6 2e       	mov	r14, r22
     16a:	f7 2e       	mov	r15, r23
     16c:	e8 2f       	mov	r30, r24
     16e:	19 2f       	mov	r17, r25
     170:	03 e0       	ldi	r16, 0x03	; 3
     172:	70 d4       	rcall	.+2272   	; 0xa54 <__ashldi3>
     174:	0e 2f       	mov	r16, r30
     176:	ae d4       	rcall	.+2396   	; 0xad4 <__subdi3>
     178:	02 e0       	ldi	r16, 0x02	; 2
     17a:	6c d4       	rcall	.+2264   	; 0xa54 <__ashldi3>
     17c:	a2 2c       	mov	r10, r2
     17e:	b3 2c       	mov	r11, r3
     180:	c4 2c       	mov	r12, r4
     182:	d5 2c       	mov	r13, r5
     184:	e1 2c       	mov	r14, r1
     186:	f1 2c       	mov	r15, r1
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	10 e0       	ldi	r17, 0x00	; 0
     18c:	a3 d4       	rcall	.+2374   	; 0xad4 <__subdi3>
     18e:	e2 2f       	mov	r30, r18
     190:	f3 2f       	mov	r31, r19
     192:	b4 2f       	mov	r27, r20
     194:	a5 2f       	mov	r26, r21
     196:	6b 87       	std	Y+11, r22	; 0x0b
     198:	7c 87       	std	Y+12, r23	; 0x0c
     19a:	8f 83       	std	Y+7, r24	; 0x07
     19c:	98 87       	std	Y+8, r25	; 0x08
     19e:	02 e0       	ldi	r16, 0x02	; 2
     1a0:	59 d4       	rcall	.+2226   	; 0xa54 <__ashldi3>
     1a2:	a2 2e       	mov	r10, r18
     1a4:	b3 2e       	mov	r11, r19
     1a6:	c4 2e       	mov	r12, r20
     1a8:	d5 2e       	mov	r13, r21
     1aa:	e6 2e       	mov	r14, r22
     1ac:	f7 2e       	mov	r15, r23
     1ae:	08 2f       	mov	r16, r24
     1b0:	19 2f       	mov	r17, r25
     1b2:	2e 2f       	mov	r18, r30
     1b4:	3f 2f       	mov	r19, r31
     1b6:	4b 2f       	mov	r20, r27
     1b8:	5a 2f       	mov	r21, r26
     1ba:	6b 85       	ldd	r22, Y+11	; 0x0b
     1bc:	7c 85       	ldd	r23, Y+12	; 0x0c
     1be:	8f 81       	ldd	r24, Y+7	; 0x07
     1c0:	98 85       	ldd	r25, Y+8	; 0x08
     1c2:	7f d4       	rcall	.+2302   	; 0xac2 <__adddi3>
     1c4:	a2 2c       	mov	r10, r2
     1c6:	b3 2c       	mov	r11, r3
     1c8:	c4 2c       	mov	r12, r4
     1ca:	d5 2c       	mov	r13, r5
     1cc:	e1 2c       	mov	r14, r1
     1ce:	f1 2c       	mov	r15, r1
     1d0:	00 e0       	ldi	r16, 0x00	; 0
     1d2:	10 e0       	ldi	r17, 0x00	; 0
     1d4:	76 d4       	rcall	.+2284   	; 0xac2 <__adddi3>
	denominator = denominator >> N;
     1d6:	04 e0       	ldi	r16, 0x04	; 4
     1d8:	58 d4       	rcall	.+2224   	; 0xa8a <__lshrdi3>
     1da:	a2 2e       	mov	r10, r18
     1dc:	b3 2e       	mov	r11, r19
     1de:	c4 2e       	mov	r12, r20
     1e0:	d5 2e       	mov	r13, r21
     1e2:	e6 2e       	mov	r14, r22
     1e4:	f7 2e       	mov	r15, r23
     1e6:	a8 2f       	mov	r26, r24
     1e8:	19 2f       	mov	r17, r25

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1);
     1ea:	01 e0       	ldi	r16, 0x01	; 1
     1ec:	4e d4       	rcall	.+2204   	; 0xa8a <__lshrdi3>
     1ee:	49 57       	subi	r20, 0x79	; 121
     1f0:	5c 46       	sbci	r21, 0x6C	; 108
     1f2:	6c 4f       	sbci	r22, 0xFC	; 252
     1f4:	7f 4f       	sbci	r23, 0xFF	; 255
     1f6:	8f 4f       	sbci	r24, 0xFF	; 255
     1f8:	9f 4f       	sbci	r25, 0xFF	; 255
	rpm = rpm / denominator;
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
     1fa:	89 84       	ldd	r8, Y+9	; 0x09
     1fc:	9a 84       	ldd	r9, Y+10	; 0x0a
     1fe:	b0 e9       	ldi	r27, 0x90	; 144
     200:	8b 0e       	add	r8, r27
     202:	91 1c       	adc	r9, r1
     204:	49 80       	ldd	r4, Y+1	; 0x01
     206:	5a 80       	ldd	r5, Y+2	; 0x02
     208:	6b 80       	ldd	r6, Y+3	; 0x03
     20a:	7c 80       	ldd	r7, Y+4	; 0x04
     20c:	68 94       	set
     20e:	13 f8       	bld	r1, 3
     210:	76 94       	lsr	r7
     212:	67 94       	ror	r6
     214:	57 94       	ror	r5
     216:	47 94       	ror	r4
     218:	16 94       	lsr	r1
     21a:	d1 f7       	brne	.-12     	; 0x210 <calc_latest_rpm+0x168>
     21c:	f4 01       	movw	r30, r8
     21e:	40 82       	st	Z, r4
     220:	51 82       	std	Z+1, r5	; 0x01
     222:	62 82       	std	Z+2, r6	; 0x02
     224:	73 82       	std	Z+3, r7	; 0x03
	denominator = (unsigned long long)delta_rev_inverse * delta_time;
	denominator = denominator >> N;

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1);
	rpm = rpm / denominator;
     226:	0a 2f       	mov	r16, r26
     228:	cb d3       	rcall	.+1942   	; 0x9c0 <__udivdi3>
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
	shared_ptr->curr_rpm = (unsigned long)rpm >> N;	// Used for debugging
     22a:	82 2f       	mov	r24, r18
     22c:	93 2f       	mov	r25, r19
     22e:	a4 2f       	mov	r26, r20
     230:	b5 2f       	mov	r27, r21
     232:	72 2f       	mov	r23, r18
     234:	63 2f       	mov	r22, r19
     236:	54 2f       	mov	r21, r20
     238:	4b 2f       	mov	r20, r27
     23a:	68 94       	set
     23c:	13 f8       	bld	r1, 3
     23e:	b6 95       	lsr	r27
     240:	a7 95       	ror	r26
     242:	97 95       	ror	r25
     244:	87 95       	ror	r24
     246:	16 94       	lsr	r1
     248:	d1 f7       	brne	.-12     	; 0x23e <calc_latest_rpm+0x196>
     24a:	e9 85       	ldd	r30, Y+9	; 0x09
     24c:	fa 85       	ldd	r31, Y+10	; 0x0a
     24e:	80 87       	std	Z+8, r24	; 0x08
     250:	91 87       	std	Z+9, r25	; 0x09
     252:	a2 87       	std	Z+10, r26	; 0x0a
     254:	b3 87       	std	Z+11, r27	; 0x0b
    int i;
    unsigned long temp;

    temp = rpm >> N;

    if(temp < 0 || temp > 150){
     256:	87 39       	cpi	r24, 0x97	; 151
     258:	91 05       	cpc	r25, r1
     25a:	a1 05       	cpc	r26, r1
     25c:	b1 05       	cpc	r27, r1
     25e:	10 f5       	brcc	.+68     	; 0x2a4 <calc_latest_rpm+0x1fc>
     260:	e4 57       	subi	r30, 0x74	; 116
     262:	ff 4f       	sbci	r31, 0xFF	; 255
     264:	2f e1       	ldi	r18, 0x1F	; 31
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	09 85       	ldd	r16, Y+9	; 0x09
     26a:	1a 85       	ldd	r17, Y+10	; 0x0a
        return;
    }

    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
     26c:	21 50       	subi	r18, 0x01	; 1
     26e:	31 09       	sbc	r19, r1
     270:	b2 91       	ld	r27, -Z
     272:	a2 91       	ld	r26, -Z
     274:	92 91       	ld	r25, -Z
     276:	82 91       	ld	r24, -Z
     278:	84 83       	std	Z+4, r24	; 0x04
     27a:	95 83       	std	Z+5, r25	; 0x05
     27c:	a6 83       	std	Z+6, r26	; 0x06
     27e:	b7 83       	std	Z+7, r27	; 0x07

    if(temp < 0 || temp > 150){
        return;
    }

    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
     280:	2f 3f       	cpi	r18, 0xFF	; 255
     282:	8f ef       	ldi	r24, 0xFF	; 255
     284:	38 07       	cpc	r19, r24
     286:	91 f7       	brne	.-28     	; 0x26c <calc_latest_rpm+0x1c4>
     288:	1a 87       	std	Y+10, r17	; 0x0a
     28a:	09 87       	std	Y+9, r16	; 0x09
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
    }
    shared_ptr->rpm_measurements[0] = rpm;
     28c:	d8 01       	movw	r26, r16
     28e:	50 96       	adiw	r26, 0x10	; 16
     290:	7c 93       	st	X, r23
     292:	50 97       	sbiw	r26, 0x10	; 16
     294:	51 96       	adiw	r26, 0x11	; 17
     296:	6c 93       	st	X, r22
     298:	51 97       	sbiw	r26, 0x11	; 17
     29a:	52 96       	adiw	r26, 0x12	; 18
     29c:	5c 93       	st	X, r21
     29e:	52 97       	sbiw	r26, 0x12	; 18
     2a0:	53 96       	adiw	r26, 0x13	; 19
     2a2:	4c 93       	st	X, r20
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
	shared_ptr->curr_rpm = (unsigned long)rpm >> N;	// Used for debugging
	insert_rpm(shared_ptr, rpm);
	
}
     2a4:	2c 96       	adiw	r28, 0x0c	; 12
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	1f 91       	pop	r17
     2b6:	0f 91       	pop	r16
     2b8:	ff 90       	pop	r15
     2ba:	ef 90       	pop	r14
     2bc:	df 90       	pop	r13
     2be:	cf 90       	pop	r12
     2c0:	bf 90       	pop	r11
     2c2:	af 90       	pop	r10
     2c4:	9f 90       	pop	r9
     2c6:	8f 90       	pop	r8
     2c8:	7f 90       	pop	r7
     2ca:	6f 90       	pop	r6
     2cc:	5f 90       	pop	r5
     2ce:	4f 90       	pop	r4
     2d0:	3f 90       	pop	r3
     2d2:	2f 90       	pop	r2
     2d4:	08 95       	ret

000002d6 <calc_avg_rpm>:


void calc_avg_rpm(Shared_Data* shared_ptr){
     2d6:	2f 92       	push	r2
     2d8:	3f 92       	push	r3
     2da:	4f 92       	push	r4
     2dc:	5f 92       	push	r5
     2de:	6f 92       	push	r6
     2e0:	7f 92       	push	r7
     2e2:	8f 92       	push	r8
     2e4:	9f 92       	push	r9
     2e6:	af 92       	push	r10
     2e8:	bf 92       	push	r11
     2ea:	cf 92       	push	r12
     2ec:	df 92       	push	r13
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	ec 01       	movw	r28, r24
     2fc:	dc 01       	movw	r26, r24
     2fe:	50 96       	adiw	r26, 0x10	; 16
     300:	e0 e2       	ldi	r30, 0x20	; 32
     302:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned long long temp = 0;
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	40 e0       	ldi	r20, 0x00	; 0
     30a:	50 e0       	ldi	r21, 0x00	; 0
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
	int i;
	
	for(i = 0; i < MEASUREMENTS_SIZE; i++){
		temp = temp + shared_ptr->rpm_measurements[i];
     314:	cd 90       	ld	r12, X+
     316:	dd 90       	ld	r13, X+
     318:	ed 90       	ld	r14, X+
     31a:	fd 90       	ld	r15, X+
     31c:	16 01       	movw	r2, r12
     31e:	27 01       	movw	r4, r14
     320:	ac 2c       	mov	r10, r12
     322:	b3 2c       	mov	r11, r3
     324:	c4 2c       	mov	r12, r4
     326:	d5 2c       	mov	r13, r5
     328:	e1 2c       	mov	r14, r1
     32a:	f1 2c       	mov	r15, r1
     32c:	00 e0       	ldi	r16, 0x00	; 0
     32e:	10 e0       	ldi	r17, 0x00	; 0
     330:	c8 d3       	rcall	.+1936   	; 0xac2 <__adddi3>
     332:	31 97       	sbiw	r30, 0x01	; 1

void calc_avg_rpm(Shared_Data* shared_ptr){
	unsigned long long temp = 0;
	int i;
	
	for(i = 0; i < MEASUREMENTS_SIZE; i++){
     334:	30 97       	sbiw	r30, 0x00	; 0
     336:	71 f7       	brne	.-36     	; 0x314 <calc_avg_rpm+0x3e>
		temp = temp + shared_ptr->rpm_measurements[i];
	}
	
	// Divide by MEASUREMENTS_SIZE (64)
	temp = temp >> 5;
     338:	05 e0       	ldi	r16, 0x05	; 5
     33a:	a7 d3       	rcall	.+1870   	; 0xa8a <__lshrdi3>
	
	// convert back from Qm.n to normal int
	temp = temp >> N;
     33c:	04 e0       	ldi	r16, 0x04	; 4
     33e:	a5 d3       	rcall	.+1866   	; 0xa8a <__lshrdi3>
	shared_ptr->rpm_avg = temp;
     340:	2c 87       	std	Y+12, r18	; 0x0c
     342:	3d 87       	std	Y+13, r19	; 0x0d
     344:	4e 87       	std	Y+14, r20	; 0x0e
     346:	5f 87       	std	Y+15, r21	; 0x0f
	
}
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	bf 90       	pop	r11
     35a:	af 90       	pop	r10
     35c:	9f 90       	pop	r9
     35e:	8f 90       	pop	r8
     360:	7f 90       	pop	r7
     362:	6f 90       	pop	r6
     364:	5f 90       	pop	r5
     366:	4f 90       	pop	r4
     368:	3f 90       	pop	r3
     36a:	2f 90       	pop	r2
     36c:	08 95       	ret

0000036e <__vector_4>:
		
	}
	clk_prev = clk_curr;
}

ISR(PCINT1_vect){
     36e:	1f 92       	push	r1
     370:	0f 92       	push	r0
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	0f 92       	push	r0
     376:	11 24       	eor	r1, r1
     378:	2f 93       	push	r18
     37a:	3f 93       	push	r19
     37c:	4f 93       	push	r20
     37e:	5f 93       	push	r21
     380:	8f 93       	push	r24
     382:	9f 93       	push	r25
	cli();
     384:	f8 94       	cli
	
	clk_curr = TCNT1;
     386:	80 91 84 00 	lds	r24, 0x0084
     38a:	90 91 85 00 	lds	r25, 0x0085
     38e:	90 93 23 01 	sts	0x0123, r25
     392:	80 93 22 01 	sts	0x0122, r24
	
}

static void calc_clk_elapsed(){
	
	if(clk_curr < clk_prev){
     396:	20 91 1a 01 	lds	r18, 0x011A
     39a:	30 91 1b 01 	lds	r19, 0x011B
     39e:	82 17       	cp	r24, r18
     3a0:	93 07       	cpc	r25, r19
     3a2:	48 f4       	brcc	.+18     	; 0x3b6 <__vector_4+0x48>
		unsigned short temp = 0xFFFF;
		temp = temp - clk_prev;
     3a4:	20 95       	com	r18
     3a6:	30 95       	com	r19
		temp = temp + clk_curr;
     3a8:	28 0f       	add	r18, r24
     3aa:	39 1f       	adc	r19, r25
		clk_elapsed = temp;
     3ac:	30 93 26 01 	sts	0x0126, r19
     3b0:	20 93 25 01 	sts	0x0125, r18
     3b4:	07 c0       	rjmp	.+14     	; 0x3c4 <__vector_4+0x56>
	}
	else{
		clk_elapsed = clk_curr - clk_prev;
     3b6:	ac 01       	movw	r20, r24
     3b8:	42 1b       	sub	r20, r18
     3ba:	53 0b       	sbc	r21, r19
     3bc:	50 93 26 01 	sts	0x0126, r21
     3c0:	40 93 25 01 	sts	0x0125, r20
		
	}
	clk_prev = clk_curr;
     3c4:	90 93 1b 01 	sts	0x011B, r25
     3c8:	80 93 1a 01 	sts	0x011A, r24
ISR(PCINT1_vect){
	cli();
	
	clk_curr = TCNT1;
	calc_clk_elapsed();
	newMeasurement = true;
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	80 93 24 01 	sts	0x0124, r24
	
	sei();
     3d2:	78 94       	sei
     3d4:	9f 91       	pop	r25
     3d6:	8f 91       	pop	r24
     3d8:	5f 91       	pop	r21
     3da:	4f 91       	pop	r20
     3dc:	3f 91       	pop	r19
     3de:	2f 91       	pop	r18
     3e0:	0f 90       	pop	r0
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	0f 90       	pop	r0
     3e6:	1f 90       	pop	r1
     3e8:	18 95       	reti

000003ea <USART_transmit>:
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with " "
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	00 d0       	rcall	.+0      	; 0x3f0 <USART_transmit+0x6>
     3f0:	00 d0       	rcall	.+0      	; 0x3f2 <USART_transmit+0x8>
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <USART_transmit+0xa>
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
	char buf[6];
	
	strcpy(buf,"%%%%%");
     3f8:	26 e0       	ldi	r18, 0x06	; 6
     3fa:	e0 e0       	ldi	r30, 0x00	; 0
     3fc:	f1 e0       	ldi	r31, 0x01	; 1
     3fe:	de 01       	movw	r26, r28
     400:	11 96       	adiw	r26, 0x01	; 1
     402:	01 90       	ld	r0, Z+
     404:	0d 92       	st	X+, r0
     406:	2a 95       	dec	r18
     408:	e1 f7       	brne	.-8      	; 0x402 <USART_transmit+0x18>
	strncpy(buf, data, 5);
     40a:	45 e0       	ldi	r20, 0x05	; 5
     40c:	50 e0       	ldi	r21, 0x00	; 0
     40e:	bc 01       	movw	r22, r24
     410:	ce 01       	movw	r24, r28
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	85 d3       	rcall	.+1802   	; 0xb20 <strncpy>
     416:	be 01       	movw	r22, r28
     418:	6f 5f       	subi	r22, 0xFF	; 255
     41a:	7f 4f       	sbci	r23, 0xFF	; 255
     41c:	9e 01       	movw	r18, r28
     41e:	2a 5f       	subi	r18, 0xFA	; 250
     420:	3f 4f       	sbci	r19, 0xFF	; 255

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
     422:	e0 ec       	ldi	r30, 0xC0	; 192
     424:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = buf[i];
     426:	86 ec       	ldi	r24, 0xC6	; 198
     428:	90 e0       	ldi	r25, 0x00	; 0
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
     42a:	40 81       	ld	r20, Z
     42c:	45 ff       	sbrs	r20, 5
     42e:	fd cf       	rjmp	.-6      	; 0x42a <USART_transmit+0x40>
		UDR0 = buf[i];
     430:	db 01       	movw	r26, r22
     432:	4d 91       	ld	r20, X+
     434:	bd 01       	movw	r22, r26
     436:	dc 01       	movw	r26, r24
     438:	4c 93       	st	X, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     43a:	a1 ee       	ldi	r26, 0xE1	; 225
     43c:	b4 e0       	ldi	r27, 0x04	; 4
     43e:	11 97       	sbiw	r26, 0x01	; 1
     440:	f1 f7       	brne	.-4      	; 0x43e <USART_transmit+0x54>
     442:	00 c0       	rjmp	.+0      	; 0x444 <USART_transmit+0x5a>
     444:	00 00       	nop
	char buf[6];
	
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
     446:	62 17       	cp	r22, r18
     448:	73 07       	cpc	r23, r19
     44a:	79 f7       	brne	.-34     	; 0x42a <USART_transmit+0x40>
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = buf[i];
		_delay_ms(5);
	}
}
     44c:	26 96       	adiw	r28, 0x06	; 6
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	f8 94       	cli
     452:	de bf       	out	0x3e, r29	; 62
     454:	0f be       	out	0x3f, r0	; 63
     456:	cd bf       	out	0x3d, r28	; 61
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <__vector_18>:
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
     45e:	1f 92       	push	r1
     460:	0f 92       	push	r0
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	0f 92       	push	r0
     466:	11 24       	eor	r1, r1
     468:	2f 93       	push	r18
     46a:	8f 93       	push	r24
     46c:	9f 93       	push	r25
     46e:	af 93       	push	r26
     470:	bf 93       	push	r27
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	ef 93       	push	r30
     478:	ff 93       	push	r31
	cli();
     47a:	f8 94       	cli
	PORTC &= ~(1 << PC2);
     47c:	42 98       	cbi	0x08, 2	; 8
	PORTC |= (1 << PC1);
     47e:	41 9a       	sbi	0x08, 1	; 8
     480:	ac e1       	ldi	r26, 0x1C	; 28
     482:	b1 e0       	ldi	r27, 0x01	; 1
     484:	81 e2       	ldi	r24, 0x21	; 33
     486:	91 e0       	ldi	r25, 0x01	; 1
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
     488:	e0 ec       	ldi	r30, 0xC0	; 192
     48a:	f0 e0       	ldi	r31, 0x00	; 0
		recieved_bytes[i] = UDR0;
     48c:	c6 ec       	ldi	r28, 0xC6	; 198
     48e:	d0 e0       	ldi	r29, 0x00	; 0
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
     490:	20 81       	ld	r18, Z
     492:	22 23       	and	r18, r18
     494:	ec f7       	brge	.-6      	; 0x490 <__vector_18+0x32>
		recieved_bytes[i] = UDR0;
     496:	28 81       	ld	r18, Y
     498:	2d 93       	st	X+, r18
*/
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
     49a:	a8 17       	cp	r26, r24
     49c:	b9 07       	cpc	r27, r25
     49e:	c1 f7       	brne	.-16     	; 0x490 <__vector_18+0x32>
		while( !(UCSR0A & (1 << RXC0)) );
		recieved_bytes[i] = UDR0;
	}
	PORTC &= ~(1 << PC1);
     4a0:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (1 << PC2);
     4a2:	42 9a       	sbi	0x08, 2	; 8
	newCommand = true;
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	80 93 21 01 	sts	0x0121, r24
	sei();
     4aa:	78 94       	sei
}
     4ac:	ff 91       	pop	r31
     4ae:	ef 91       	pop	r30
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	bf 91       	pop	r27
     4b6:	af 91       	pop	r26
     4b8:	9f 91       	pop	r25
     4ba:	8f 91       	pop	r24
     4bc:	2f 91       	pop	r18
     4be:	0f 90       	pop	r0
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	0f 90       	pop	r0
     4c4:	1f 90       	pop	r1
     4c6:	18 95       	reti

000004c8 <setup_registers>:
 *	PC1, PD5-PD6
 *	See details in datasheet pg. 99-100
*/
static void setup_DDR(){

	DDRB |= 0x00;
     4c8:	84 b1       	in	r24, 0x04	; 4
     4ca:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC2) | (1 << PC1) | (1 << PC0);
     4cc:	87 b1       	in	r24, 0x07	; 7
     4ce:	87 60       	ori	r24, 0x07	; 7
     4d0:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PD6) | (1 << PD5) | (1 << PD1);
     4d2:	8a b1       	in	r24, 0x0a	; 10
     4d4:	82 66       	ori	r24, 0x62	; 98
     4d6:	8a b9       	out	0x0a, r24	; 10
 *	PWM-mode: fast PWM, inverted, no prescaling.
 *	See details in datasheet pg. 113-117
*/
static void setup_PWM(){

	TCCR0A = (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0) | (1 << WGM01) | (1 << WGM00);
     4d8:	83 ef       	ldi	r24, 0xF3	; 243
     4da:	84 bd       	out	0x24, r24	; 36
	TCCR0B =  (0 << CS02) | (0 << CS01) | (1 << CS00);
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	85 bd       	out	0x25, r24	; 37
 * 	Baud rate according to #define in shared.h
 * 	See details in datasheet pg. 201-205
*/
static void setup_USART(){

	DDRD |= (1 << PD1);
     4e0:	51 9a       	sbi	0x0a, 1	; 10
	unsigned int ubrr = (((F_CPU / (BAUD * 16UL))) - 1 );

	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
     4e2:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
     4e6:	89 e1       	ldi	r24, 0x19	; 25
     4e8:	80 93 c4 00 	sts	0x00C4, r24

	// Enable reciever for interrupt and transmitter
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0);
     4ec:	88 e9       	ldi	r24, 0x98	; 152
     4ee:	80 93 c1 00 	sts	0x00C1, r24

	// Set frame format: 8 data, 2 stop, 0 parity
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     4f2:	86 e0       	ldi	r24, 0x06	; 6
     4f4:	80 93 c2 00 	sts	0x00C2, r24
 * 	See details in datasheet pg. 81-82
*/
static void setup_interrupts(){

	// Enables possibility of interrupts on pins 14-8
	PCICR = (1 << PCIE1);
     4f8:	82 e0       	ldi	r24, 0x02	; 2
     4fa:	80 93 68 00 	sts	0x0068, r24
	// Enables interrupts on pin PC4-PC5
	PCMSK1 = (1 << PCINT13) | (1 << PCINT12);
     4fe:	80 e3       	ldi	r24, 0x30	; 48
     500:	80 93 6c 00 	sts	0x006C, r24
/*	
 *	Sets up clk/64 prescaling on 16-bit timer OC1
 *	See details in datasheet pg. 141-147
*/	
static void setup_speed_clock(){
	TCCR1B |= (1 << CS11);
     504:	e1 e8       	ldi	r30, 0x81	; 129
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 81       	ld	r24, Z
     50a:	82 60       	ori	r24, 0x02	; 2
     50c:	80 83       	st	Z, r24
     50e:	08 95       	ret

00000510 <main>:
unsigned short clk_curr;
char recieved_bytes[5];
unsigned short clk_prev;
unsigned short clk_elapsed;

int main(void){
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	c4 59       	subi	r28, 0x94	; 148
     51a:	d1 09       	sbc	r29, r1
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	f8 94       	cli
     520:	de bf       	out	0x3e, r29	; 62
     522:	0f be       	out	0x3f, r0	; 63
     524:	cd bf       	out	0x3d, r28	; 61
	Shared_Data shared_data;
	Shared_Data* shared_ptr = &shared_data;
	init_shared_data(shared_ptr);
     526:	ce 01       	movw	r24, r28
     528:	01 96       	adiw	r24, 0x01	; 1
     52a:	aa dd       	rcall	.-1196   	; 0x80 <init_shared_data>
	
	newCommand = false;
     52c:	10 92 21 01 	sts	0x0121, r1
	newMeasurement = false;
     530:	10 92 24 01 	sts	0x0124, r1
	clk_curr = 0;
     534:	10 92 23 01 	sts	0x0123, r1
     538:	10 92 22 01 	sts	0x0122, r1
	clk_prev = 0;
     53c:	10 92 1b 01 	sts	0x011B, r1
     540:	10 92 1a 01 	sts	0x011A, r1
	clk_elapsed = 0;
     544:	10 92 26 01 	sts	0x0126, r1
     548:	10 92 25 01 	sts	0x0125, r1
	OCR0A = 150;
     54c:	86 e9       	ldi	r24, 0x96	; 150
     54e:	87 bd       	out	0x27, r24	; 39
	OCR0B = 150;
     550:	88 bd       	out	0x28, r24	; 40
	
	setup_registers();
     552:	ba df       	rcall	.-140    	; 0x4c8 <setup_registers>
	sei();
     554:	78 94       	sei
	long i = 0;
	while(1){
		i++;
     556:	c1 2c       	mov	r12, r1
     558:	d1 2c       	mov	r13, r1
     55a:	76 01       	movw	r14, r12
     55c:	c3 94       	inc	r12
			transmit_8(shared_ptr);
			transmit_0(shared_ptr);
			i = 0;
		}
		if(newCommand){
			switch(*recieved_bytes){
     55e:	0c e1       	ldi	r16, 0x1C	; 28
     560:	11 e0       	ldi	r17, 0x01	; 1
	while(1){
		i++;
		if(i == 10000){
			transmit_8(shared_ptr);
			transmit_0(shared_ptr);
			i = 0;
     562:	81 2c       	mov	r8, r1
     564:	91 2c       	mov	r9, r1
     566:	a1 2c       	mov	r10, r1
     568:	b1 2c       	mov	r11, r1
     56a:	16 c0       	rjmp	.+44     	; 0x598 <main+0x88>
	
	setup_registers();
	sei();
	long i = 0;
	while(1){
		i++;
     56c:	8f ef       	ldi	r24, 0xFF	; 255
     56e:	c8 1a       	sub	r12, r24
     570:	d8 0a       	sbc	r13, r24
     572:	e8 0a       	sbc	r14, r24
     574:	f8 0a       	sbc	r15, r24
		if(i == 10000){
     576:	e0 e1       	ldi	r30, 0x10	; 16
     578:	ce 16       	cp	r12, r30
     57a:	e7 e2       	ldi	r30, 0x27	; 39
     57c:	de 06       	cpc	r13, r30
     57e:	e1 04       	cpc	r14, r1
     580:	f1 04       	cpc	r15, r1
     582:	51 f4       	brne	.+20     	; 0x598 <main+0x88>
			transmit_8(shared_ptr);
     584:	ce 01       	movw	r24, r28
     586:	01 96       	adiw	r24, 0x01	; 1
     588:	8b d1       	rcall	.+790    	; 0x8a0 <transmit_8>
			transmit_0(shared_ptr);
     58a:	ce 01       	movw	r24, r28
     58c:	01 96       	adiw	r24, 0x01	; 1
     58e:	4c d0       	rcall	.+152    	; 0x628 <transmit_0>
			i = 0;
     590:	c8 2c       	mov	r12, r8
     592:	d9 2c       	mov	r13, r9
     594:	ea 2c       	mov	r14, r10
     596:	fb 2c       	mov	r15, r11
		}
		if(newCommand){
     598:	80 91 21 01 	lds	r24, 0x0121
     59c:	88 23       	and	r24, r24
     59e:	b1 f1       	breq	.+108    	; 0x60c <main+0xfc>
			switch(*recieved_bytes){
     5a0:	f8 01       	movw	r30, r16
     5a2:	80 81       	ld	r24, Z
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	fc 01       	movw	r30, r24
     5a8:	f0 97       	sbiw	r30, 0x30	; 48
     5aa:	ea 30       	cpi	r30, 0x0A	; 10
     5ac:	f1 05       	cpc	r31, r1
     5ae:	58 f5       	brcc	.+86     	; 0x606 <main+0xf6>
     5b0:	e6 5e       	subi	r30, 0xE6	; 230
     5b2:	ff 4f       	sbci	r31, 0xFF	; 255
     5b4:	09 94       	ijmp
				case '0':
					transmit_0(shared_ptr);
     5b6:	ce 01       	movw	r24, r28
     5b8:	01 96       	adiw	r24, 0x01	; 1
     5ba:	36 d0       	rcall	.+108    	; 0x628 <transmit_0>
					break;
     5bc:	25 c0       	rjmp	.+74     	; 0x608 <main+0xf8>
				case '1':
					transmit_1(shared_ptr);
     5be:	ce 01       	movw	r24, r28
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	4c d0       	rcall	.+152    	; 0x65c <transmit_1>
					break;
     5c4:	21 c0       	rjmp	.+66     	; 0x608 <main+0xf8>
				case '2':
					transmit_2(shared_ptr);
     5c6:	ce 01       	movw	r24, r28
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	49 d0       	rcall	.+146    	; 0x65e <transmit_2>
					break;
     5cc:	1d c0       	rjmp	.+58     	; 0x608 <main+0xf8>
				case '3':
					transmit_3(shared_ptr);
     5ce:	ce 01       	movw	r24, r28
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	78 d0       	rcall	.+240    	; 0x6c4 <transmit_3>
					break;
     5d4:	19 c0       	rjmp	.+50     	; 0x608 <main+0xf8>
				case '4':
					transmit_4(shared_ptr);
     5d6:	ce 01       	movw	r24, r28
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	a1 d0       	rcall	.+322    	; 0x71e <transmit_4>
					break;
     5dc:	15 c0       	rjmp	.+42     	; 0x608 <main+0xf8>
				case '5':
					transmit_5(shared_ptr);
     5de:	ce 01       	movw	r24, r28
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	d2 d0       	rcall	.+420    	; 0x788 <transmit_5>
					break;
     5e4:	11 c0       	rjmp	.+34     	; 0x608 <main+0xf8>
				case '6':
					transmit_6(shared_ptr);
     5e6:	ce 01       	movw	r24, r28
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	03 d1       	rcall	.+518    	; 0x7f2 <transmit_6>
					break;
     5ec:	0d c0       	rjmp	.+26     	; 0x608 <main+0xf8>
				case '7':
					transmit_7(shared_ptr);
     5ee:	ce 01       	movw	r24, r28
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	3a d1       	rcall	.+628    	; 0x868 <transmit_7>
					break;
     5f4:	09 c0       	rjmp	.+18     	; 0x608 <main+0xf8>
				case '8':
					transmit_8(shared_ptr);
     5f6:	ce 01       	movw	r24, r28
     5f8:	01 96       	adiw	r24, 0x01	; 1
     5fa:	52 d1       	rcall	.+676    	; 0x8a0 <transmit_8>
					break;
     5fc:	05 c0       	rjmp	.+10     	; 0x608 <main+0xf8>
				case '9':
					transmit_9(shared_ptr);
     5fe:	ce 01       	movw	r24, r28
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	87 d1       	rcall	.+782    	; 0x912 <transmit_9>
					break;
     604:	01 c0       	rjmp	.+2      	; 0x608 <main+0xf8>
				default:
					transmit_empty();
     606:	be d1       	rcall	.+892    	; 0x984 <transmit_empty>
			}
			newCommand = false;
     608:	10 92 21 01 	sts	0x0121, r1
		}
	
		if(newMeasurement){
     60c:	80 91 24 01 	lds	r24, 0x0124
     610:	88 23       	and	r24, r24
     612:	09 f4       	brne	.+2      	; 0x616 <main+0x106>
     614:	ab cf       	rjmp	.-170    	; 0x56c <main+0x5c>
			calc_latest_rpm(shared_ptr);
     616:	ce 01       	movw	r24, r28
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	46 dd       	rcall	.-1396   	; 0xa8 <calc_latest_rpm>
			calc_avg_rpm(shared_ptr);
     61c:	ce 01       	movw	r24, r28
     61e:	01 96       	adiw	r24, 0x01	; 1
     620:	5a de       	rcall	.-844    	; 0x2d6 <calc_avg_rpm>
			newMeasurement = false;
     622:	10 92 24 01 	sts	0x0124, r1
     626:	a2 cf       	rjmp	.-188    	; 0x56c <main+0x5c>

00000628 <transmit_0>:
extern bool newCommand;
extern bool newMeasurement;
extern unsigned short clk_curr;
extern char recieved_bytes[5];

void transmit_0(Shared_Data* shared_ptr){
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	00 d0       	rcall	.+0      	; 0x62e <transmit_0+0x6>
     62e:	00 d0       	rcall	.+0      	; 0x630 <transmit_0+0x8>
     630:	00 d0       	rcall	.+0      	; 0x632 <transmit_0+0xa>
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "\n", 5);
     636:	45 e0       	ldi	r20, 0x05	; 5
     638:	50 e0       	ldi	r21, 0x00	; 0
     63a:	66 e0       	ldi	r22, 0x06	; 6
     63c:	71 e0       	ldi	r23, 0x01	; 1
     63e:	ce 01       	movw	r24, r28
     640:	01 96       	adiw	r24, 0x01	; 1
     642:	6e d2       	rcall	.+1244   	; 0xb20 <strncpy>
	USART_transmit(temp);
     644:	ce 01       	movw	r24, r28
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	d0 de       	rcall	.-608    	; 0x3ea <USART_transmit>
}
     64a:	26 96       	adiw	r28, 0x06	; 6
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	de bf       	out	0x3e, r29	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	cd bf       	out	0x3d, r28	; 61
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	08 95       	ret

0000065c <transmit_1>:

void transmit_1(Shared_Data* shared_ptr){
     65c:	08 95       	ret

0000065e <transmit_2>:

}

/* Sets a new set value for the speed. Range: 0-120. Transmits an empty message. */
void transmit_2(Shared_Data* shared_ptr){
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	2a 97       	sbiw	r28, 0x0a	; 10
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	8c 01       	movw	r16, r24
	char temp[6];
	char sub_str[4];
	int res;
	strncpy(temp, "     ", 5);
     678:	85 e0       	ldi	r24, 0x05	; 5
     67a:	e8 e0       	ldi	r30, 0x08	; 8
     67c:	f1 e0       	ldi	r31, 0x01	; 1
     67e:	de 01       	movw	r26, r28
     680:	11 96       	adiw	r26, 0x01	; 1
     682:	01 90       	ld	r0, Z+
     684:	0d 92       	st	X+, r0
     686:	8a 95       	dec	r24
     688:	e1 f7       	brne	.-8      	; 0x682 <transmit_2+0x24>
	strncpy(sub_str, recieved_bytes + 1, 3);
     68a:	43 e0       	ldi	r20, 0x03	; 3
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	6d e1       	ldi	r22, 0x1D	; 29
     690:	71 e0       	ldi	r23, 0x01	; 1
     692:	ce 01       	movw	r24, r28
     694:	07 96       	adiw	r24, 0x07	; 7
     696:	44 d2       	rcall	.+1160   	; 0xb20 <strncpy>
		
	res = atoi(sub_str);
     698:	ce 01       	movw	r24, r28
     69a:	07 96       	adiw	r24, 0x07	; 7
     69c:	24 d2       	rcall	.+1096   	; 0xae6 <atoi>
	shared_ptr->speed_set = res;
     69e:	f8 01       	movw	r30, r16
     6a0:	80 83       	st	Z, r24
     6a2:	91 83       	std	Z+1, r25	; 0x01
	OCR0A = res;
     6a4:	87 bd       	out	0x27, r24	; 39
	OCR0B = res;
     6a6:	88 bd       	out	0x28, r24	; 40
	USART_transmit(temp);
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	9e de       	rcall	.-708    	; 0x3ea <USART_transmit>

}
     6ae:	2a 96       	adiw	r28, 0x0a	; 10
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	cd bf       	out	0x3d, r28	; 61
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	08 95       	ret

000006c4 <transmit_3>:

/* Transmits the set speed. */
void transmit_3(Shared_Data* shared_ptr){
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	00 d0       	rcall	.+0      	; 0x6ce <transmit_3+0xa>
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <transmit_3+0xc>
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <transmit_3+0xe>
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	
	snprintf(temp, 6, "%d",  shared_ptr->speed_set);
     6d6:	fc 01       	movw	r30, r24
     6d8:	21 81       	ldd	r18, Z+1	; 0x01
     6da:	2f 93       	push	r18
     6dc:	80 81       	ld	r24, Z
     6de:	8f 93       	push	r24
     6e0:	8e e0       	ldi	r24, 0x0E	; 14
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	9f 93       	push	r25
     6e6:	8f 93       	push	r24
     6e8:	1f 92       	push	r1
     6ea:	86 e0       	ldi	r24, 0x06	; 6
     6ec:	8f 93       	push	r24
     6ee:	8e 01       	movw	r16, r28
     6f0:	0f 5f       	subi	r16, 0xFF	; 255
     6f2:	1f 4f       	sbci	r17, 0xFF	; 255
     6f4:	1f 93       	push	r17
     6f6:	0f 93       	push	r16
     6f8:	2a d2       	rcall	.+1108   	; 0xb4e <snprintf>
	USART_transmit(temp);
     6fa:	c8 01       	movw	r24, r16
     6fc:	76 de       	rcall	.-788    	; 0x3ea <USART_transmit>
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
}
     708:	26 96       	adiw	r28, 0x06	; 6
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	de bf       	out	0x3e, r29	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	cd bf       	out	0x3d, r28	; 61
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	08 95       	ret

0000071e <transmit_4>:


void transmit_4(Shared_Data* shared_ptr){
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	00 d0       	rcall	.+0      	; 0x728 <transmit_4+0xa>
     728:	00 d0       	rcall	.+0      	; 0x72a <transmit_4+0xc>
     72a:	00 d0       	rcall	.+0      	; 0x72c <transmit_4+0xe>
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     730:	25 e0       	ldi	r18, 0x05	; 5
     732:	e8 e0       	ldi	r30, 0x08	; 8
     734:	f1 e0       	ldi	r31, 0x01	; 1
     736:	8e 01       	movw	r16, r28
     738:	0f 5f       	subi	r16, 0xFF	; 255
     73a:	1f 4f       	sbci	r17, 0xFF	; 255
     73c:	d8 01       	movw	r26, r16
     73e:	01 90       	ld	r0, Z+
     740:	0d 92       	st	X+, r0
     742:	2a 95       	dec	r18
     744:	e1 f7       	brne	.-8      	; 0x73e <transmit_4+0x20>
	
	snprintf(temp, 6, "%d", shared_ptr->speed_actual);
     746:	fc 01       	movw	r30, r24
     748:	23 81       	ldd	r18, Z+3	; 0x03
     74a:	2f 93       	push	r18
     74c:	82 81       	ldd	r24, Z+2	; 0x02
     74e:	8f 93       	push	r24
     750:	8e e0       	ldi	r24, 0x0E	; 14
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	9f 93       	push	r25
     756:	8f 93       	push	r24
     758:	1f 92       	push	r1
     75a:	86 e0       	ldi	r24, 0x06	; 6
     75c:	8f 93       	push	r24
     75e:	1f 93       	push	r17
     760:	0f 93       	push	r16
     762:	f5 d1       	rcall	.+1002   	; 0xb4e <snprintf>
	USART_transmit(temp);
     764:	c8 01       	movw	r24, r16
     766:	41 de       	rcall	.-894    	; 0x3ea <USART_transmit>
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	de bf       	out	0x3e, r29	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	cd bf       	out	0x3d, r28	; 61
}
     772:	26 96       	adiw	r28, 0x06	; 6
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	f8 94       	cli
     778:	de bf       	out	0x3e, r29	; 62
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	cd bf       	out	0x3d, r28	; 61
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	08 95       	ret

00000788 <transmit_5>:

void transmit_5(Shared_Data* shared_ptr){
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	00 d0       	rcall	.+0      	; 0x792 <transmit_5+0xa>
     792:	00 d0       	rcall	.+0      	; 0x794 <transmit_5+0xc>
     794:	00 d0       	rcall	.+0      	; 0x796 <transmit_5+0xe>
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     79a:	25 e0       	ldi	r18, 0x05	; 5
     79c:	e8 e0       	ldi	r30, 0x08	; 8
     79e:	f1 e0       	ldi	r31, 0x01	; 1
     7a0:	8e 01       	movw	r16, r28
     7a2:	0f 5f       	subi	r16, 0xFF	; 255
     7a4:	1f 4f       	sbci	r17, 0xFF	; 255
     7a6:	d8 01       	movw	r26, r16
     7a8:	01 90       	ld	r0, Z+
     7aa:	0d 92       	st	X+, r0
     7ac:	2a 95       	dec	r18
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <transmit_5+0x20>

	snprintf(temp, 6, "%hu", shared_ptr->clk_elapsed);
     7b0:	fc 01       	movw	r30, r24
     7b2:	27 81       	ldd	r18, Z+7	; 0x07
     7b4:	2f 93       	push	r18
     7b6:	86 81       	ldd	r24, Z+6	; 0x06
     7b8:	8f 93       	push	r24
     7ba:	81 e1       	ldi	r24, 0x11	; 17
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	9f 93       	push	r25
     7c0:	8f 93       	push	r24
     7c2:	1f 92       	push	r1
     7c4:	86 e0       	ldi	r24, 0x06	; 6
     7c6:	8f 93       	push	r24
     7c8:	1f 93       	push	r17
     7ca:	0f 93       	push	r16
     7cc:	c0 d1       	rcall	.+896    	; 0xb4e <snprintf>
	USART_transmit(temp);
     7ce:	c8 01       	movw	r24, r16
     7d0:	0c de       	rcall	.-1000   	; 0x3ea <USART_transmit>
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	f8 94       	cli
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	cd bf       	out	0x3d, r28	; 61
}
     7dc:	26 96       	adiw	r28, 0x06	; 6
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	08 95       	ret

000007f2 <transmit_6>:

void transmit_6(Shared_Data* shared_ptr){
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	00 d0       	rcall	.+0      	; 0x7fc <transmit_6+0xa>
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <transmit_6+0xc>
     7fe:	00 d0       	rcall	.+0      	; 0x800 <transmit_6+0xe>
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     804:	25 e0       	ldi	r18, 0x05	; 5
     806:	e8 e0       	ldi	r30, 0x08	; 8
     808:	f1 e0       	ldi	r31, 0x01	; 1
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5f       	subi	r16, 0xFF	; 255
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	d8 01       	movw	r26, r16
     812:	01 90       	ld	r0, Z+
     814:	0d 92       	st	X+, r0
     816:	2a 95       	dec	r18
     818:	e1 f7       	brne	.-8      	; 0x812 <transmit_6+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->delta_time);
     81a:	fc 01       	movw	r30, r24
     81c:	e0 57       	subi	r30, 0x70	; 112
     81e:	ff 4f       	sbci	r31, 0xFF	; 255
     820:	83 81       	ldd	r24, Z+3	; 0x03
     822:	8f 93       	push	r24
     824:	82 81       	ldd	r24, Z+2	; 0x02
     826:	8f 93       	push	r24
     828:	81 81       	ldd	r24, Z+1	; 0x01
     82a:	8f 93       	push	r24
     82c:	80 81       	ld	r24, Z
     82e:	8f 93       	push	r24
     830:	85 e1       	ldi	r24, 0x15	; 21
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	9f 93       	push	r25
     836:	8f 93       	push	r24
     838:	1f 92       	push	r1
     83a:	86 e0       	ldi	r24, 0x06	; 6
     83c:	8f 93       	push	r24
     83e:	1f 93       	push	r17
     840:	0f 93       	push	r16
     842:	85 d1       	rcall	.+778    	; 0xb4e <snprintf>
	USART_transmit(temp);
     844:	c8 01       	movw	r24, r16
     846:	d1 dd       	rcall	.-1118   	; 0x3ea <USART_transmit>
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	de bf       	out	0x3e, r29	; 62
     84e:	0f be       	out	0x3f, r0	; 63
     850:	cd bf       	out	0x3d, r28	; 61
}
     852:	26 96       	adiw	r28, 0x06	; 6
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	f8 94       	cli
     858:	de bf       	out	0x3e, r29	; 62
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	cd bf       	out	0x3d, r28	; 61
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	08 95       	ret

00000868 <transmit_7>:

void transmit_7(Shared_Data* shared_ptr){
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	00 d0       	rcall	.+0      	; 0x86e <transmit_7+0x6>
     86e:	00 d0       	rcall	.+0      	; 0x870 <transmit_7+0x8>
     870:	00 d0       	rcall	.+0      	; 0x872 <transmit_7+0xa>
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     876:	85 e0       	ldi	r24, 0x05	; 5
     878:	e8 e0       	ldi	r30, 0x08	; 8
     87a:	f1 e0       	ldi	r31, 0x01	; 1
     87c:	de 01       	movw	r26, r28
     87e:	11 96       	adiw	r26, 0x01	; 1
     880:	01 90       	ld	r0, Z+
     882:	0d 92       	st	X+, r0
     884:	8a 95       	dec	r24
     886:	e1 f7       	brne	.-8      	; 0x880 <transmit_7+0x18>
	USART_transmit(temp);
     888:	ce 01       	movw	r24, r28
     88a:	01 96       	adiw	r24, 0x01	; 1
     88c:	ae dd       	rcall	.-1188   	; 0x3ea <USART_transmit>
}
     88e:	26 96       	adiw	r28, 0x06	; 6
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	de bf       	out	0x3e, r29	; 62
     896:	0f be       	out	0x3f, r0	; 63
     898:	cd bf       	out	0x3d, r28	; 61
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <transmit_8>:

void transmit_8(Shared_Data* shared_ptr){
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	00 d0       	rcall	.+0      	; 0x8aa <transmit_8+0xa>
     8aa:	00 d0       	rcall	.+0      	; 0x8ac <transmit_8+0xc>
     8ac:	00 d0       	rcall	.+0      	; 0x8ae <transmit_8+0xe>
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     8b2:	25 e0       	ldi	r18, 0x05	; 5
     8b4:	e8 e0       	ldi	r30, 0x08	; 8
     8b6:	f1 e0       	ldi	r31, 0x01	; 1
     8b8:	8e 01       	movw	r16, r28
     8ba:	0f 5f       	subi	r16, 0xFF	; 255
     8bc:	1f 4f       	sbci	r17, 0xFF	; 255
     8be:	d8 01       	movw	r26, r16
     8c0:	01 90       	ld	r0, Z+
     8c2:	0d 92       	st	X+, r0
     8c4:	2a 95       	dec	r18
     8c6:	e1 f7       	brne	.-8      	; 0x8c0 <transmit_8+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->rpm_avg);
     8c8:	fc 01       	movw	r30, r24
     8ca:	27 85       	ldd	r18, Z+15	; 0x0f
     8cc:	2f 93       	push	r18
     8ce:	26 85       	ldd	r18, Z+14	; 0x0e
     8d0:	2f 93       	push	r18
     8d2:	25 85       	ldd	r18, Z+13	; 0x0d
     8d4:	2f 93       	push	r18
     8d6:	84 85       	ldd	r24, Z+12	; 0x0c
     8d8:	8f 93       	push	r24
     8da:	85 e1       	ldi	r24, 0x15	; 21
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	9f 93       	push	r25
     8e0:	8f 93       	push	r24
     8e2:	1f 92       	push	r1
     8e4:	86 e0       	ldi	r24, 0x06	; 6
     8e6:	8f 93       	push	r24
     8e8:	1f 93       	push	r17
     8ea:	0f 93       	push	r16
     8ec:	30 d1       	rcall	.+608    	; 0xb4e <snprintf>
	USART_transmit(temp);
     8ee:	c8 01       	movw	r24, r16
     8f0:	7c dd       	rcall	.-1288   	; 0x3ea <USART_transmit>
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	cd bf       	out	0x3d, r28	; 61
}
     8fc:	26 96       	adiw	r28, 0x06	; 6
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	de bf       	out	0x3e, r29	; 62
     904:	0f be       	out	0x3f, r0	; 63
     906:	cd bf       	out	0x3d, r28	; 61
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	08 95       	ret

00000912 <transmit_9>:

void transmit_9(Shared_Data* shared_ptr){
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	00 d0       	rcall	.+0      	; 0x91c <transmit_9+0xa>
     91c:	00 d0       	rcall	.+0      	; 0x91e <transmit_9+0xc>
     91e:	00 d0       	rcall	.+0      	; 0x920 <transmit_9+0xe>
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     924:	25 e0       	ldi	r18, 0x05	; 5
     926:	e8 e0       	ldi	r30, 0x08	; 8
     928:	f1 e0       	ldi	r31, 0x01	; 1
     92a:	8e 01       	movw	r16, r28
     92c:	0f 5f       	subi	r16, 0xFF	; 255
     92e:	1f 4f       	sbci	r17, 0xFF	; 255
     930:	d8 01       	movw	r26, r16
     932:	01 90       	ld	r0, Z+
     934:	0d 92       	st	X+, r0
     936:	2a 95       	dec	r18
     938:	e1 f7       	brne	.-8      	; 0x932 <transmit_9+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->curr_rpm);
     93a:	fc 01       	movw	r30, r24
     93c:	23 85       	ldd	r18, Z+11	; 0x0b
     93e:	2f 93       	push	r18
     940:	22 85       	ldd	r18, Z+10	; 0x0a
     942:	2f 93       	push	r18
     944:	21 85       	ldd	r18, Z+9	; 0x09
     946:	2f 93       	push	r18
     948:	80 85       	ldd	r24, Z+8	; 0x08
     94a:	8f 93       	push	r24
     94c:	85 e1       	ldi	r24, 0x15	; 21
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	9f 93       	push	r25
     952:	8f 93       	push	r24
     954:	1f 92       	push	r1
     956:	86 e0       	ldi	r24, 0x06	; 6
     958:	8f 93       	push	r24
     95a:	1f 93       	push	r17
     95c:	0f 93       	push	r16
     95e:	f7 d0       	rcall	.+494    	; 0xb4e <snprintf>
	USART_transmit(temp);
     960:	c8 01       	movw	r24, r16
     962:	43 dd       	rcall	.-1402   	; 0x3ea <USART_transmit>
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	f8 94       	cli
     968:	de bf       	out	0x3e, r29	; 62
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	cd bf       	out	0x3d, r28	; 61
}
     96e:	26 96       	adiw	r28, 0x06	; 6
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	f8 94       	cli
     974:	de bf       	out	0x3e, r29	; 62
     976:	0f be       	out	0x3f, r0	; 63
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	08 95       	ret

00000984 <transmit_empty>:

void transmit_empty(){
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	00 d0       	rcall	.+0      	; 0x98a <transmit_empty+0x6>
     98a:	00 d0       	rcall	.+0      	; 0x98c <transmit_empty+0x8>
     98c:	00 d0       	rcall	.+0      	; 0x98e <transmit_empty+0xa>
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     992:	85 e0       	ldi	r24, 0x05	; 5
     994:	e8 e0       	ldi	r30, 0x08	; 8
     996:	f1 e0       	ldi	r31, 0x01	; 1
     998:	de 01       	movw	r26, r28
     99a:	11 96       	adiw	r26, 0x01	; 1
     99c:	01 90       	ld	r0, Z+
     99e:	0d 92       	st	X+, r0
     9a0:	8a 95       	dec	r24
     9a2:	e1 f7       	brne	.-8      	; 0x99c <transmit_empty+0x18>
	USART_transmit(temp);
     9a4:	ce 01       	movw	r24, r28
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	20 dd       	rcall	.-1472   	; 0x3ea <USART_transmit>
}
     9aa:	26 96       	adiw	r28, 0x06	; 6
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	cd bf       	out	0x3d, r28	; 61
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <__umoddi3>:
     9bc:	68 94       	set
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <__udivdi3_umoddi3>

000009c0 <__udivdi3>:
     9c0:	e8 94       	clt

000009c2 <__udivdi3_umoddi3>:
     9c2:	8f 92       	push	r8
     9c4:	9f 92       	push	r9
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	05 d0       	rcall	.+10     	; 0x9d6 <__udivmod64>
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	9f 90       	pop	r9
     9d2:	8f 90       	pop	r8
     9d4:	08 95       	ret

000009d6 <__udivmod64>:
     9d6:	88 24       	eor	r8, r8
     9d8:	99 24       	eor	r9, r9
     9da:	f4 01       	movw	r30, r8
     9dc:	e4 01       	movw	r28, r8
     9de:	b0 e4       	ldi	r27, 0x40	; 64
     9e0:	1b 2e       	mov	r1, r27
     9e2:	d4 01       	movw	r26, r8
     9e4:	9d 15       	cp	r25, r13
     9e6:	8e 04       	cpc	r8, r14
     9e8:	9f 04       	cpc	r9, r15
     9ea:	e0 07       	cpc	r30, r16
     9ec:	f1 07       	cpc	r31, r17
     9ee:	38 f4       	brcc	.+14     	; 0x9fe <__udivmod64+0x28>
     9f0:	fc 01       	movw	r30, r24
     9f2:	4b 01       	movw	r8, r22
     9f4:	ca 01       	movw	r24, r20
     9f6:	b9 01       	movw	r22, r18
     9f8:	ad 01       	movw	r20, r26
     9fa:	9e 01       	movw	r18, r28
     9fc:	16 94       	lsr	r1
     9fe:	22 0f       	add	r18, r18
     a00:	33 1f       	adc	r19, r19
     a02:	44 1f       	adc	r20, r20
     a04:	55 1f       	adc	r21, r21
     a06:	66 1f       	adc	r22, r22
     a08:	77 1f       	adc	r23, r23
     a0a:	88 1f       	adc	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	88 1c       	adc	r8, r8
     a10:	99 1c       	adc	r9, r9
     a12:	ee 1f       	adc	r30, r30
     a14:	ff 1f       	adc	r31, r31
     a16:	cc 1f       	adc	r28, r28
     a18:	dd 1f       	adc	r29, r29
     a1a:	aa 1f       	adc	r26, r26
     a1c:	bb 1f       	adc	r27, r27
     a1e:	8a 14       	cp	r8, r10
     a20:	9b 04       	cpc	r9, r11
     a22:	ec 05       	cpc	r30, r12
     a24:	fd 05       	cpc	r31, r13
     a26:	ce 05       	cpc	r28, r14
     a28:	df 05       	cpc	r29, r15
     a2a:	a0 07       	cpc	r26, r16
     a2c:	b1 07       	cpc	r27, r17
     a2e:	48 f0       	brcs	.+18     	; 0xa42 <__udivmod64+0x6c>
     a30:	8a 18       	sub	r8, r10
     a32:	9b 08       	sbc	r9, r11
     a34:	ec 09       	sbc	r30, r12
     a36:	fd 09       	sbc	r31, r13
     a38:	ce 09       	sbc	r28, r14
     a3a:	df 09       	sbc	r29, r15
     a3c:	a0 0b       	sbc	r26, r16
     a3e:	b1 0b       	sbc	r27, r17
     a40:	21 60       	ori	r18, 0x01	; 1
     a42:	1a 94       	dec	r1
     a44:	e1 f6       	brne	.-72     	; 0x9fe <__udivmod64+0x28>
     a46:	2e f4       	brtc	.+10     	; 0xa52 <__udivmod64+0x7c>
     a48:	94 01       	movw	r18, r8
     a4a:	af 01       	movw	r20, r30
     a4c:	be 01       	movw	r22, r28
     a4e:	cd 01       	movw	r24, r26
     a50:	00 0c       	add	r0, r0
     a52:	08 95       	ret

00000a54 <__ashldi3>:
     a54:	0f 93       	push	r16
     a56:	08 30       	cpi	r16, 0x08	; 8
     a58:	90 f0       	brcs	.+36     	; 0xa7e <__ashldi3+0x2a>
     a5a:	98 2f       	mov	r25, r24
     a5c:	87 2f       	mov	r24, r23
     a5e:	76 2f       	mov	r23, r22
     a60:	65 2f       	mov	r22, r21
     a62:	54 2f       	mov	r21, r20
     a64:	43 2f       	mov	r20, r19
     a66:	32 2f       	mov	r19, r18
     a68:	22 27       	eor	r18, r18
     a6a:	08 50       	subi	r16, 0x08	; 8
     a6c:	f4 cf       	rjmp	.-24     	; 0xa56 <__ashldi3+0x2>
     a6e:	22 0f       	add	r18, r18
     a70:	33 1f       	adc	r19, r19
     a72:	44 1f       	adc	r20, r20
     a74:	55 1f       	adc	r21, r21
     a76:	66 1f       	adc	r22, r22
     a78:	77 1f       	adc	r23, r23
     a7a:	88 1f       	adc	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	0a 95       	dec	r16
     a80:	b2 f7       	brpl	.-20     	; 0xa6e <__ashldi3+0x1a>
     a82:	0f 91       	pop	r16
     a84:	08 95       	ret

00000a86 <__ashrdi3>:
     a86:	97 fb       	bst	r25, 7
     a88:	10 f8       	bld	r1, 0

00000a8a <__lshrdi3>:
     a8a:	16 94       	lsr	r1
     a8c:	00 08       	sbc	r0, r0
     a8e:	0f 93       	push	r16
     a90:	08 30       	cpi	r16, 0x08	; 8
     a92:	98 f0       	brcs	.+38     	; 0xaba <__lshrdi3+0x30>
     a94:	08 50       	subi	r16, 0x08	; 8
     a96:	23 2f       	mov	r18, r19
     a98:	34 2f       	mov	r19, r20
     a9a:	45 2f       	mov	r20, r21
     a9c:	56 2f       	mov	r21, r22
     a9e:	67 2f       	mov	r22, r23
     aa0:	78 2f       	mov	r23, r24
     aa2:	89 2f       	mov	r24, r25
     aa4:	90 2d       	mov	r25, r0
     aa6:	f4 cf       	rjmp	.-24     	; 0xa90 <__lshrdi3+0x6>
     aa8:	05 94       	asr	r0
     aaa:	97 95       	ror	r25
     aac:	87 95       	ror	r24
     aae:	77 95       	ror	r23
     ab0:	67 95       	ror	r22
     ab2:	57 95       	ror	r21
     ab4:	47 95       	ror	r20
     ab6:	37 95       	ror	r19
     ab8:	27 95       	ror	r18
     aba:	0a 95       	dec	r16
     abc:	aa f7       	brpl	.-22     	; 0xaa8 <__lshrdi3+0x1e>
     abe:	0f 91       	pop	r16
     ac0:	08 95       	ret

00000ac2 <__adddi3>:
     ac2:	2a 0d       	add	r18, r10
     ac4:	3b 1d       	adc	r19, r11
     ac6:	4c 1d       	adc	r20, r12
     ac8:	5d 1d       	adc	r21, r13
     aca:	6e 1d       	adc	r22, r14
     acc:	7f 1d       	adc	r23, r15
     ace:	80 1f       	adc	r24, r16
     ad0:	91 1f       	adc	r25, r17
     ad2:	08 95       	ret

00000ad4 <__subdi3>:
     ad4:	2a 19       	sub	r18, r10
     ad6:	3b 09       	sbc	r19, r11
     ad8:	4c 09       	sbc	r20, r12
     ada:	5d 09       	sbc	r21, r13
     adc:	6e 09       	sbc	r22, r14
     ade:	7f 09       	sbc	r23, r15
     ae0:	80 0b       	sbc	r24, r16
     ae2:	91 0b       	sbc	r25, r17
     ae4:	08 95       	ret

00000ae6 <atoi>:
     ae6:	fc 01       	movw	r30, r24
     ae8:	88 27       	eor	r24, r24
     aea:	99 27       	eor	r25, r25
     aec:	e8 94       	clt
     aee:	21 91       	ld	r18, Z+
     af0:	20 32       	cpi	r18, 0x20	; 32
     af2:	e9 f3       	breq	.-6      	; 0xaee <atoi+0x8>
     af4:	29 30       	cpi	r18, 0x09	; 9
     af6:	10 f0       	brcs	.+4      	; 0xafc <atoi+0x16>
     af8:	2e 30       	cpi	r18, 0x0E	; 14
     afa:	c8 f3       	brcs	.-14     	; 0xaee <atoi+0x8>
     afc:	2b 32       	cpi	r18, 0x2B	; 43
     afe:	39 f0       	breq	.+14     	; 0xb0e <atoi+0x28>
     b00:	2d 32       	cpi	r18, 0x2D	; 45
     b02:	31 f4       	brne	.+12     	; 0xb10 <atoi+0x2a>
     b04:	68 94       	set
     b06:	03 c0       	rjmp	.+6      	; 0xb0e <atoi+0x28>
     b08:	1a d0       	rcall	.+52     	; 0xb3e <__mulhi_const_10>
     b0a:	82 0f       	add	r24, r18
     b0c:	91 1d       	adc	r25, r1
     b0e:	21 91       	ld	r18, Z+
     b10:	20 53       	subi	r18, 0x30	; 48
     b12:	2a 30       	cpi	r18, 0x0A	; 10
     b14:	c8 f3       	brcs	.-14     	; 0xb08 <atoi+0x22>
     b16:	1e f4       	brtc	.+6      	; 0xb1e <atoi+0x38>
     b18:	90 95       	com	r25
     b1a:	81 95       	neg	r24
     b1c:	9f 4f       	sbci	r25, 0xFF	; 255
     b1e:	08 95       	ret

00000b20 <strncpy>:
     b20:	fb 01       	movw	r30, r22
     b22:	dc 01       	movw	r26, r24
     b24:	41 50       	subi	r20, 0x01	; 1
     b26:	50 40       	sbci	r21, 0x00	; 0
     b28:	48 f0       	brcs	.+18     	; 0xb3c <strncpy+0x1c>
     b2a:	01 90       	ld	r0, Z+
     b2c:	0d 92       	st	X+, r0
     b2e:	00 20       	and	r0, r0
     b30:	c9 f7       	brne	.-14     	; 0xb24 <strncpy+0x4>
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <strncpy+0x16>
     b34:	1d 92       	st	X+, r1
     b36:	41 50       	subi	r20, 0x01	; 1
     b38:	50 40       	sbci	r21, 0x00	; 0
     b3a:	e0 f7       	brcc	.-8      	; 0xb34 <strncpy+0x14>
     b3c:	08 95       	ret

00000b3e <__mulhi_const_10>:
     b3e:	7a e0       	ldi	r23, 0x0A	; 10
     b40:	97 9f       	mul	r25, r23
     b42:	90 2d       	mov	r25, r0
     b44:	87 9f       	mul	r24, r23
     b46:	80 2d       	mov	r24, r0
     b48:	91 0d       	add	r25, r1
     b4a:	11 24       	eor	r1, r1
     b4c:	08 95       	ret

00000b4e <snprintf>:
     b4e:	ae e0       	ldi	r26, 0x0E	; 14
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ec ea       	ldi	r30, 0xAC	; 172
     b54:	f5 e0       	ldi	r31, 0x05	; 5
     b56:	9f c2       	rjmp	.+1342   	; 0x1096 <__prologue_saves__+0x1c>
     b58:	0d 89       	ldd	r16, Y+21	; 0x15
     b5a:	1e 89       	ldd	r17, Y+22	; 0x16
     b5c:	8f 89       	ldd	r24, Y+23	; 0x17
     b5e:	98 8d       	ldd	r25, Y+24	; 0x18
     b60:	26 e0       	ldi	r18, 0x06	; 6
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	1a 83       	std	Y+2, r17	; 0x02
     b66:	09 83       	std	Y+1, r16	; 0x01
     b68:	97 ff       	sbrs	r25, 7
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <snprintf+0x22>
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e8       	ldi	r25, 0x80	; 128
     b70:	01 97       	sbiw	r24, 0x01	; 1
     b72:	9e 83       	std	Y+6, r25	; 0x06
     b74:	8d 83       	std	Y+5, r24	; 0x05
     b76:	ae 01       	movw	r20, r28
     b78:	45 5e       	subi	r20, 0xE5	; 229
     b7a:	5f 4f       	sbci	r21, 0xFF	; 255
     b7c:	69 8d       	ldd	r22, Y+25	; 0x19
     b7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b80:	ce 01       	movw	r24, r28
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	11 d0       	rcall	.+34     	; 0xba8 <vfprintf>
     b86:	4d 81       	ldd	r20, Y+5	; 0x05
     b88:	5e 81       	ldd	r21, Y+6	; 0x06
     b8a:	57 fd       	sbrc	r21, 7
     b8c:	0a c0       	rjmp	.+20     	; 0xba2 <snprintf+0x54>
     b8e:	2f 81       	ldd	r18, Y+7	; 0x07
     b90:	38 85       	ldd	r19, Y+8	; 0x08
     b92:	42 17       	cp	r20, r18
     b94:	53 07       	cpc	r21, r19
     b96:	0c f4       	brge	.+2      	; 0xb9a <snprintf+0x4c>
     b98:	9a 01       	movw	r18, r20
     b9a:	f8 01       	movw	r30, r16
     b9c:	e2 0f       	add	r30, r18
     b9e:	f3 1f       	adc	r31, r19
     ba0:	10 82       	st	Z, r1
     ba2:	2e 96       	adiw	r28, 0x0e	; 14
     ba4:	e4 e0       	ldi	r30, 0x04	; 4
     ba6:	93 c2       	rjmp	.+1318   	; 0x10ce <__epilogue_restores__+0x1c>

00000ba8 <vfprintf>:
     ba8:	ac e0       	ldi	r26, 0x0C	; 12
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	e9 ed       	ldi	r30, 0xD9	; 217
     bae:	f5 e0       	ldi	r31, 0x05	; 5
     bb0:	64 c2       	rjmp	.+1224   	; 0x107a <__prologue_saves__>
     bb2:	7c 01       	movw	r14, r24
     bb4:	6b 01       	movw	r12, r22
     bb6:	8a 01       	movw	r16, r20
     bb8:	fc 01       	movw	r30, r24
     bba:	17 82       	std	Z+7, r1	; 0x07
     bbc:	16 82       	std	Z+6, r1	; 0x06
     bbe:	83 81       	ldd	r24, Z+3	; 0x03
     bc0:	81 ff       	sbrs	r24, 1
     bc2:	b0 c1       	rjmp	.+864    	; 0xf24 <vfprintf+0x37c>
     bc4:	ce 01       	movw	r24, r28
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	4c 01       	movw	r8, r24
     bca:	f7 01       	movw	r30, r14
     bcc:	93 81       	ldd	r25, Z+3	; 0x03
     bce:	f6 01       	movw	r30, r12
     bd0:	93 fd       	sbrc	r25, 3
     bd2:	85 91       	lpm	r24, Z+
     bd4:	93 ff       	sbrs	r25, 3
     bd6:	81 91       	ld	r24, Z+
     bd8:	6f 01       	movw	r12, r30
     bda:	88 23       	and	r24, r24
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <vfprintf+0x38>
     bde:	9e c1       	rjmp	.+828    	; 0xf1c <vfprintf+0x374>
     be0:	85 32       	cpi	r24, 0x25	; 37
     be2:	39 f4       	brne	.+14     	; 0xbf2 <vfprintf+0x4a>
     be4:	93 fd       	sbrc	r25, 3
     be6:	85 91       	lpm	r24, Z+
     be8:	93 ff       	sbrs	r25, 3
     bea:	81 91       	ld	r24, Z+
     bec:	6f 01       	movw	r12, r30
     bee:	85 32       	cpi	r24, 0x25	; 37
     bf0:	21 f4       	brne	.+8      	; 0xbfa <vfprintf+0x52>
     bf2:	b7 01       	movw	r22, r14
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	b1 d1       	rcall	.+866    	; 0xf5a <fputc>
     bf8:	e8 cf       	rjmp	.-48     	; 0xbca <vfprintf+0x22>
     bfa:	51 2c       	mov	r5, r1
     bfc:	31 2c       	mov	r3, r1
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	20 32       	cpi	r18, 0x20	; 32
     c02:	a0 f4       	brcc	.+40     	; 0xc2c <vfprintf+0x84>
     c04:	8b 32       	cpi	r24, 0x2B	; 43
     c06:	69 f0       	breq	.+26     	; 0xc22 <vfprintf+0x7a>
     c08:	30 f4       	brcc	.+12     	; 0xc16 <vfprintf+0x6e>
     c0a:	80 32       	cpi	r24, 0x20	; 32
     c0c:	59 f0       	breq	.+22     	; 0xc24 <vfprintf+0x7c>
     c0e:	83 32       	cpi	r24, 0x23	; 35
     c10:	69 f4       	brne	.+26     	; 0xc2c <vfprintf+0x84>
     c12:	20 61       	ori	r18, 0x10	; 16
     c14:	2c c0       	rjmp	.+88     	; 0xc6e <vfprintf+0xc6>
     c16:	8d 32       	cpi	r24, 0x2D	; 45
     c18:	39 f0       	breq	.+14     	; 0xc28 <vfprintf+0x80>
     c1a:	80 33       	cpi	r24, 0x30	; 48
     c1c:	39 f4       	brne	.+14     	; 0xc2c <vfprintf+0x84>
     c1e:	21 60       	ori	r18, 0x01	; 1
     c20:	26 c0       	rjmp	.+76     	; 0xc6e <vfprintf+0xc6>
     c22:	22 60       	ori	r18, 0x02	; 2
     c24:	24 60       	ori	r18, 0x04	; 4
     c26:	23 c0       	rjmp	.+70     	; 0xc6e <vfprintf+0xc6>
     c28:	28 60       	ori	r18, 0x08	; 8
     c2a:	21 c0       	rjmp	.+66     	; 0xc6e <vfprintf+0xc6>
     c2c:	27 fd       	sbrc	r18, 7
     c2e:	27 c0       	rjmp	.+78     	; 0xc7e <vfprintf+0xd6>
     c30:	30 ed       	ldi	r19, 0xD0	; 208
     c32:	38 0f       	add	r19, r24
     c34:	3a 30       	cpi	r19, 0x0A	; 10
     c36:	78 f4       	brcc	.+30     	; 0xc56 <vfprintf+0xae>
     c38:	26 ff       	sbrs	r18, 6
     c3a:	06 c0       	rjmp	.+12     	; 0xc48 <vfprintf+0xa0>
     c3c:	fa e0       	ldi	r31, 0x0A	; 10
     c3e:	5f 9e       	mul	r5, r31
     c40:	30 0d       	add	r19, r0
     c42:	11 24       	eor	r1, r1
     c44:	53 2e       	mov	r5, r19
     c46:	13 c0       	rjmp	.+38     	; 0xc6e <vfprintf+0xc6>
     c48:	8a e0       	ldi	r24, 0x0A	; 10
     c4a:	38 9e       	mul	r3, r24
     c4c:	30 0d       	add	r19, r0
     c4e:	11 24       	eor	r1, r1
     c50:	33 2e       	mov	r3, r19
     c52:	20 62       	ori	r18, 0x20	; 32
     c54:	0c c0       	rjmp	.+24     	; 0xc6e <vfprintf+0xc6>
     c56:	8e 32       	cpi	r24, 0x2E	; 46
     c58:	21 f4       	brne	.+8      	; 0xc62 <vfprintf+0xba>
     c5a:	26 fd       	sbrc	r18, 6
     c5c:	5f c1       	rjmp	.+702    	; 0xf1c <vfprintf+0x374>
     c5e:	20 64       	ori	r18, 0x40	; 64
     c60:	06 c0       	rjmp	.+12     	; 0xc6e <vfprintf+0xc6>
     c62:	8c 36       	cpi	r24, 0x6C	; 108
     c64:	11 f4       	brne	.+4      	; 0xc6a <vfprintf+0xc2>
     c66:	20 68       	ori	r18, 0x80	; 128
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <vfprintf+0xc6>
     c6a:	88 36       	cpi	r24, 0x68	; 104
     c6c:	41 f4       	brne	.+16     	; 0xc7e <vfprintf+0xd6>
     c6e:	f6 01       	movw	r30, r12
     c70:	93 fd       	sbrc	r25, 3
     c72:	85 91       	lpm	r24, Z+
     c74:	93 ff       	sbrs	r25, 3
     c76:	81 91       	ld	r24, Z+
     c78:	6f 01       	movw	r12, r30
     c7a:	81 11       	cpse	r24, r1
     c7c:	c1 cf       	rjmp	.-126    	; 0xc00 <vfprintf+0x58>
     c7e:	98 2f       	mov	r25, r24
     c80:	9f 7d       	andi	r25, 0xDF	; 223
     c82:	95 54       	subi	r25, 0x45	; 69
     c84:	93 30       	cpi	r25, 0x03	; 3
     c86:	28 f4       	brcc	.+10     	; 0xc92 <vfprintf+0xea>
     c88:	0c 5f       	subi	r16, 0xFC	; 252
     c8a:	1f 4f       	sbci	r17, 0xFF	; 255
     c8c:	ff e3       	ldi	r31, 0x3F	; 63
     c8e:	f9 83       	std	Y+1, r31	; 0x01
     c90:	0d c0       	rjmp	.+26     	; 0xcac <vfprintf+0x104>
     c92:	83 36       	cpi	r24, 0x63	; 99
     c94:	31 f0       	breq	.+12     	; 0xca2 <vfprintf+0xfa>
     c96:	83 37       	cpi	r24, 0x73	; 115
     c98:	71 f0       	breq	.+28     	; 0xcb6 <vfprintf+0x10e>
     c9a:	83 35       	cpi	r24, 0x53	; 83
     c9c:	09 f0       	breq	.+2      	; 0xca0 <vfprintf+0xf8>
     c9e:	57 c0       	rjmp	.+174    	; 0xd4e <vfprintf+0x1a6>
     ca0:	21 c0       	rjmp	.+66     	; 0xce4 <vfprintf+0x13c>
     ca2:	f8 01       	movw	r30, r16
     ca4:	80 81       	ld	r24, Z
     ca6:	89 83       	std	Y+1, r24	; 0x01
     ca8:	0e 5f       	subi	r16, 0xFE	; 254
     caa:	1f 4f       	sbci	r17, 0xFF	; 255
     cac:	44 24       	eor	r4, r4
     cae:	43 94       	inc	r4
     cb0:	51 2c       	mov	r5, r1
     cb2:	54 01       	movw	r10, r8
     cb4:	14 c0       	rjmp	.+40     	; 0xcde <vfprintf+0x136>
     cb6:	38 01       	movw	r6, r16
     cb8:	f2 e0       	ldi	r31, 0x02	; 2
     cba:	6f 0e       	add	r6, r31
     cbc:	71 1c       	adc	r7, r1
     cbe:	f8 01       	movw	r30, r16
     cc0:	a0 80       	ld	r10, Z
     cc2:	b1 80       	ldd	r11, Z+1	; 0x01
     cc4:	26 ff       	sbrs	r18, 6
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <vfprintf+0x126>
     cc8:	65 2d       	mov	r22, r5
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <vfprintf+0x12a>
     cce:	6f ef       	ldi	r22, 0xFF	; 255
     cd0:	7f ef       	ldi	r23, 0xFF	; 255
     cd2:	c5 01       	movw	r24, r10
     cd4:	2c 87       	std	Y+12, r18	; 0x0c
     cd6:	36 d1       	rcall	.+620    	; 0xf44 <strnlen>
     cd8:	2c 01       	movw	r4, r24
     cda:	83 01       	movw	r16, r6
     cdc:	2c 85       	ldd	r18, Y+12	; 0x0c
     cde:	2f 77       	andi	r18, 0x7F	; 127
     ce0:	22 2e       	mov	r2, r18
     ce2:	16 c0       	rjmp	.+44     	; 0xd10 <vfprintf+0x168>
     ce4:	38 01       	movw	r6, r16
     ce6:	f2 e0       	ldi	r31, 0x02	; 2
     ce8:	6f 0e       	add	r6, r31
     cea:	71 1c       	adc	r7, r1
     cec:	f8 01       	movw	r30, r16
     cee:	a0 80       	ld	r10, Z
     cf0:	b1 80       	ldd	r11, Z+1	; 0x01
     cf2:	26 ff       	sbrs	r18, 6
     cf4:	03 c0       	rjmp	.+6      	; 0xcfc <vfprintf+0x154>
     cf6:	65 2d       	mov	r22, r5
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <vfprintf+0x158>
     cfc:	6f ef       	ldi	r22, 0xFF	; 255
     cfe:	7f ef       	ldi	r23, 0xFF	; 255
     d00:	c5 01       	movw	r24, r10
     d02:	2c 87       	std	Y+12, r18	; 0x0c
     d04:	14 d1       	rcall	.+552    	; 0xf2e <strnlen_P>
     d06:	2c 01       	movw	r4, r24
     d08:	2c 85       	ldd	r18, Y+12	; 0x0c
     d0a:	20 68       	ori	r18, 0x80	; 128
     d0c:	22 2e       	mov	r2, r18
     d0e:	83 01       	movw	r16, r6
     d10:	23 fc       	sbrc	r2, 3
     d12:	19 c0       	rjmp	.+50     	; 0xd46 <vfprintf+0x19e>
     d14:	83 2d       	mov	r24, r3
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	48 16       	cp	r4, r24
     d1a:	59 06       	cpc	r5, r25
     d1c:	a0 f4       	brcc	.+40     	; 0xd46 <vfprintf+0x19e>
     d1e:	b7 01       	movw	r22, r14
     d20:	80 e2       	ldi	r24, 0x20	; 32
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	1a d1       	rcall	.+564    	; 0xf5a <fputc>
     d26:	3a 94       	dec	r3
     d28:	f5 cf       	rjmp	.-22     	; 0xd14 <vfprintf+0x16c>
     d2a:	f5 01       	movw	r30, r10
     d2c:	27 fc       	sbrc	r2, 7
     d2e:	85 91       	lpm	r24, Z+
     d30:	27 fe       	sbrs	r2, 7
     d32:	81 91       	ld	r24, Z+
     d34:	5f 01       	movw	r10, r30
     d36:	b7 01       	movw	r22, r14
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0f d1       	rcall	.+542    	; 0xf5a <fputc>
     d3c:	31 10       	cpse	r3, r1
     d3e:	3a 94       	dec	r3
     d40:	f1 e0       	ldi	r31, 0x01	; 1
     d42:	4f 1a       	sub	r4, r31
     d44:	51 08       	sbc	r5, r1
     d46:	41 14       	cp	r4, r1
     d48:	51 04       	cpc	r5, r1
     d4a:	79 f7       	brne	.-34     	; 0xd2a <vfprintf+0x182>
     d4c:	de c0       	rjmp	.+444    	; 0xf0a <vfprintf+0x362>
     d4e:	84 36       	cpi	r24, 0x64	; 100
     d50:	11 f0       	breq	.+4      	; 0xd56 <vfprintf+0x1ae>
     d52:	89 36       	cpi	r24, 0x69	; 105
     d54:	31 f5       	brne	.+76     	; 0xda2 <vfprintf+0x1fa>
     d56:	f8 01       	movw	r30, r16
     d58:	27 ff       	sbrs	r18, 7
     d5a:	07 c0       	rjmp	.+14     	; 0xd6a <vfprintf+0x1c2>
     d5c:	60 81       	ld	r22, Z
     d5e:	71 81       	ldd	r23, Z+1	; 0x01
     d60:	82 81       	ldd	r24, Z+2	; 0x02
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	0c 5f       	subi	r16, 0xFC	; 252
     d66:	1f 4f       	sbci	r17, 0xFF	; 255
     d68:	08 c0       	rjmp	.+16     	; 0xd7a <vfprintf+0x1d2>
     d6a:	60 81       	ld	r22, Z
     d6c:	71 81       	ldd	r23, Z+1	; 0x01
     d6e:	88 27       	eor	r24, r24
     d70:	77 fd       	sbrc	r23, 7
     d72:	80 95       	com	r24
     d74:	98 2f       	mov	r25, r24
     d76:	0e 5f       	subi	r16, 0xFE	; 254
     d78:	1f 4f       	sbci	r17, 0xFF	; 255
     d7a:	2f 76       	andi	r18, 0x6F	; 111
     d7c:	b2 2e       	mov	r11, r18
     d7e:	97 ff       	sbrs	r25, 7
     d80:	09 c0       	rjmp	.+18     	; 0xd94 <vfprintf+0x1ec>
     d82:	90 95       	com	r25
     d84:	80 95       	com	r24
     d86:	70 95       	com	r23
     d88:	61 95       	neg	r22
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
     d8c:	8f 4f       	sbci	r24, 0xFF	; 255
     d8e:	9f 4f       	sbci	r25, 0xFF	; 255
     d90:	20 68       	ori	r18, 0x80	; 128
     d92:	b2 2e       	mov	r11, r18
     d94:	2a e0       	ldi	r18, 0x0A	; 10
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	a4 01       	movw	r20, r8
     d9a:	11 d1       	rcall	.+546    	; 0xfbe <__ultoa_invert>
     d9c:	a8 2e       	mov	r10, r24
     d9e:	a8 18       	sub	r10, r8
     da0:	43 c0       	rjmp	.+134    	; 0xe28 <vfprintf+0x280>
     da2:	85 37       	cpi	r24, 0x75	; 117
     da4:	29 f4       	brne	.+10     	; 0xdb0 <vfprintf+0x208>
     da6:	2f 7e       	andi	r18, 0xEF	; 239
     da8:	b2 2e       	mov	r11, r18
     daa:	2a e0       	ldi	r18, 0x0A	; 10
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	25 c0       	rjmp	.+74     	; 0xdfa <vfprintf+0x252>
     db0:	f2 2f       	mov	r31, r18
     db2:	f9 7f       	andi	r31, 0xF9	; 249
     db4:	bf 2e       	mov	r11, r31
     db6:	8f 36       	cpi	r24, 0x6F	; 111
     db8:	c1 f0       	breq	.+48     	; 0xdea <vfprintf+0x242>
     dba:	18 f4       	brcc	.+6      	; 0xdc2 <vfprintf+0x21a>
     dbc:	88 35       	cpi	r24, 0x58	; 88
     dbe:	79 f0       	breq	.+30     	; 0xdde <vfprintf+0x236>
     dc0:	ad c0       	rjmp	.+346    	; 0xf1c <vfprintf+0x374>
     dc2:	80 37       	cpi	r24, 0x70	; 112
     dc4:	19 f0       	breq	.+6      	; 0xdcc <vfprintf+0x224>
     dc6:	88 37       	cpi	r24, 0x78	; 120
     dc8:	21 f0       	breq	.+8      	; 0xdd2 <vfprintf+0x22a>
     dca:	a8 c0       	rjmp	.+336    	; 0xf1c <vfprintf+0x374>
     dcc:	2f 2f       	mov	r18, r31
     dce:	20 61       	ori	r18, 0x10	; 16
     dd0:	b2 2e       	mov	r11, r18
     dd2:	b4 fe       	sbrs	r11, 4
     dd4:	0d c0       	rjmp	.+26     	; 0xdf0 <vfprintf+0x248>
     dd6:	8b 2d       	mov	r24, r11
     dd8:	84 60       	ori	r24, 0x04	; 4
     dda:	b8 2e       	mov	r11, r24
     ddc:	09 c0       	rjmp	.+18     	; 0xdf0 <vfprintf+0x248>
     dde:	24 ff       	sbrs	r18, 4
     de0:	0a c0       	rjmp	.+20     	; 0xdf6 <vfprintf+0x24e>
     de2:	9f 2f       	mov	r25, r31
     de4:	96 60       	ori	r25, 0x06	; 6
     de6:	b9 2e       	mov	r11, r25
     de8:	06 c0       	rjmp	.+12     	; 0xdf6 <vfprintf+0x24e>
     dea:	28 e0       	ldi	r18, 0x08	; 8
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	05 c0       	rjmp	.+10     	; 0xdfa <vfprintf+0x252>
     df0:	20 e1       	ldi	r18, 0x10	; 16
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <vfprintf+0x252>
     df6:	20 e1       	ldi	r18, 0x10	; 16
     df8:	32 e0       	ldi	r19, 0x02	; 2
     dfa:	f8 01       	movw	r30, r16
     dfc:	b7 fe       	sbrs	r11, 7
     dfe:	07 c0       	rjmp	.+14     	; 0xe0e <vfprintf+0x266>
     e00:	60 81       	ld	r22, Z
     e02:	71 81       	ldd	r23, Z+1	; 0x01
     e04:	82 81       	ldd	r24, Z+2	; 0x02
     e06:	93 81       	ldd	r25, Z+3	; 0x03
     e08:	0c 5f       	subi	r16, 0xFC	; 252
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	06 c0       	rjmp	.+12     	; 0xe1a <vfprintf+0x272>
     e0e:	60 81       	ld	r22, Z
     e10:	71 81       	ldd	r23, Z+1	; 0x01
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 5f       	subi	r16, 0xFE	; 254
     e18:	1f 4f       	sbci	r17, 0xFF	; 255
     e1a:	a4 01       	movw	r20, r8
     e1c:	d0 d0       	rcall	.+416    	; 0xfbe <__ultoa_invert>
     e1e:	a8 2e       	mov	r10, r24
     e20:	a8 18       	sub	r10, r8
     e22:	fb 2d       	mov	r31, r11
     e24:	ff 77       	andi	r31, 0x7F	; 127
     e26:	bf 2e       	mov	r11, r31
     e28:	b6 fe       	sbrs	r11, 6
     e2a:	0b c0       	rjmp	.+22     	; 0xe42 <vfprintf+0x29a>
     e2c:	2b 2d       	mov	r18, r11
     e2e:	2e 7f       	andi	r18, 0xFE	; 254
     e30:	a5 14       	cp	r10, r5
     e32:	50 f4       	brcc	.+20     	; 0xe48 <vfprintf+0x2a0>
     e34:	b4 fe       	sbrs	r11, 4
     e36:	0a c0       	rjmp	.+20     	; 0xe4c <vfprintf+0x2a4>
     e38:	b2 fc       	sbrc	r11, 2
     e3a:	08 c0       	rjmp	.+16     	; 0xe4c <vfprintf+0x2a4>
     e3c:	2b 2d       	mov	r18, r11
     e3e:	2e 7e       	andi	r18, 0xEE	; 238
     e40:	05 c0       	rjmp	.+10     	; 0xe4c <vfprintf+0x2a4>
     e42:	7a 2c       	mov	r7, r10
     e44:	2b 2d       	mov	r18, r11
     e46:	03 c0       	rjmp	.+6      	; 0xe4e <vfprintf+0x2a6>
     e48:	7a 2c       	mov	r7, r10
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <vfprintf+0x2a6>
     e4c:	75 2c       	mov	r7, r5
     e4e:	24 ff       	sbrs	r18, 4
     e50:	0d c0       	rjmp	.+26     	; 0xe6c <vfprintf+0x2c4>
     e52:	fe 01       	movw	r30, r28
     e54:	ea 0d       	add	r30, r10
     e56:	f1 1d       	adc	r31, r1
     e58:	80 81       	ld	r24, Z
     e5a:	80 33       	cpi	r24, 0x30	; 48
     e5c:	11 f4       	brne	.+4      	; 0xe62 <vfprintf+0x2ba>
     e5e:	29 7e       	andi	r18, 0xE9	; 233
     e60:	09 c0       	rjmp	.+18     	; 0xe74 <vfprintf+0x2cc>
     e62:	22 ff       	sbrs	r18, 2
     e64:	06 c0       	rjmp	.+12     	; 0xe72 <vfprintf+0x2ca>
     e66:	73 94       	inc	r7
     e68:	73 94       	inc	r7
     e6a:	04 c0       	rjmp	.+8      	; 0xe74 <vfprintf+0x2cc>
     e6c:	82 2f       	mov	r24, r18
     e6e:	86 78       	andi	r24, 0x86	; 134
     e70:	09 f0       	breq	.+2      	; 0xe74 <vfprintf+0x2cc>
     e72:	73 94       	inc	r7
     e74:	23 fd       	sbrc	r18, 3
     e76:	12 c0       	rjmp	.+36     	; 0xe9c <vfprintf+0x2f4>
     e78:	20 ff       	sbrs	r18, 0
     e7a:	06 c0       	rjmp	.+12     	; 0xe88 <vfprintf+0x2e0>
     e7c:	5a 2c       	mov	r5, r10
     e7e:	73 14       	cp	r7, r3
     e80:	18 f4       	brcc	.+6      	; 0xe88 <vfprintf+0x2e0>
     e82:	53 0c       	add	r5, r3
     e84:	57 18       	sub	r5, r7
     e86:	73 2c       	mov	r7, r3
     e88:	73 14       	cp	r7, r3
     e8a:	60 f4       	brcc	.+24     	; 0xea4 <vfprintf+0x2fc>
     e8c:	b7 01       	movw	r22, r14
     e8e:	80 e2       	ldi	r24, 0x20	; 32
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	2c 87       	std	Y+12, r18	; 0x0c
     e94:	62 d0       	rcall	.+196    	; 0xf5a <fputc>
     e96:	73 94       	inc	r7
     e98:	2c 85       	ldd	r18, Y+12	; 0x0c
     e9a:	f6 cf       	rjmp	.-20     	; 0xe88 <vfprintf+0x2e0>
     e9c:	73 14       	cp	r7, r3
     e9e:	10 f4       	brcc	.+4      	; 0xea4 <vfprintf+0x2fc>
     ea0:	37 18       	sub	r3, r7
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <vfprintf+0x2fe>
     ea4:	31 2c       	mov	r3, r1
     ea6:	24 ff       	sbrs	r18, 4
     ea8:	11 c0       	rjmp	.+34     	; 0xecc <vfprintf+0x324>
     eaa:	b7 01       	movw	r22, r14
     eac:	80 e3       	ldi	r24, 0x30	; 48
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	2c 87       	std	Y+12, r18	; 0x0c
     eb2:	53 d0       	rcall	.+166    	; 0xf5a <fputc>
     eb4:	2c 85       	ldd	r18, Y+12	; 0x0c
     eb6:	22 ff       	sbrs	r18, 2
     eb8:	16 c0       	rjmp	.+44     	; 0xee6 <vfprintf+0x33e>
     eba:	21 ff       	sbrs	r18, 1
     ebc:	03 c0       	rjmp	.+6      	; 0xec4 <vfprintf+0x31c>
     ebe:	88 e5       	ldi	r24, 0x58	; 88
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <vfprintf+0x320>
     ec4:	88 e7       	ldi	r24, 0x78	; 120
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	b7 01       	movw	r22, r14
     eca:	0c c0       	rjmp	.+24     	; 0xee4 <vfprintf+0x33c>
     ecc:	82 2f       	mov	r24, r18
     ece:	86 78       	andi	r24, 0x86	; 134
     ed0:	51 f0       	breq	.+20     	; 0xee6 <vfprintf+0x33e>
     ed2:	21 fd       	sbrc	r18, 1
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <vfprintf+0x332>
     ed6:	80 e2       	ldi	r24, 0x20	; 32
     ed8:	01 c0       	rjmp	.+2      	; 0xedc <vfprintf+0x334>
     eda:	8b e2       	ldi	r24, 0x2B	; 43
     edc:	27 fd       	sbrc	r18, 7
     ede:	8d e2       	ldi	r24, 0x2D	; 45
     ee0:	b7 01       	movw	r22, r14
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	3a d0       	rcall	.+116    	; 0xf5a <fputc>
     ee6:	a5 14       	cp	r10, r5
     ee8:	30 f4       	brcc	.+12     	; 0xef6 <vfprintf+0x34e>
     eea:	b7 01       	movw	r22, r14
     eec:	80 e3       	ldi	r24, 0x30	; 48
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	34 d0       	rcall	.+104    	; 0xf5a <fputc>
     ef2:	5a 94       	dec	r5
     ef4:	f8 cf       	rjmp	.-16     	; 0xee6 <vfprintf+0x33e>
     ef6:	aa 94       	dec	r10
     ef8:	f4 01       	movw	r30, r8
     efa:	ea 0d       	add	r30, r10
     efc:	f1 1d       	adc	r31, r1
     efe:	80 81       	ld	r24, Z
     f00:	b7 01       	movw	r22, r14
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	2a d0       	rcall	.+84     	; 0xf5a <fputc>
     f06:	a1 10       	cpse	r10, r1
     f08:	f6 cf       	rjmp	.-20     	; 0xef6 <vfprintf+0x34e>
     f0a:	33 20       	and	r3, r3
     f0c:	09 f4       	brne	.+2      	; 0xf10 <vfprintf+0x368>
     f0e:	5d ce       	rjmp	.-838    	; 0xbca <vfprintf+0x22>
     f10:	b7 01       	movw	r22, r14
     f12:	80 e2       	ldi	r24, 0x20	; 32
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	21 d0       	rcall	.+66     	; 0xf5a <fputc>
     f18:	3a 94       	dec	r3
     f1a:	f7 cf       	rjmp	.-18     	; 0xf0a <vfprintf+0x362>
     f1c:	f7 01       	movw	r30, r14
     f1e:	86 81       	ldd	r24, Z+6	; 0x06
     f20:	97 81       	ldd	r25, Z+7	; 0x07
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <vfprintf+0x380>
     f24:	8f ef       	ldi	r24, 0xFF	; 255
     f26:	9f ef       	ldi	r25, 0xFF	; 255
     f28:	2c 96       	adiw	r28, 0x0c	; 12
     f2a:	e2 e1       	ldi	r30, 0x12	; 18
     f2c:	c2 c0       	rjmp	.+388    	; 0x10b2 <__epilogue_restores__>

00000f2e <strnlen_P>:
     f2e:	fc 01       	movw	r30, r24
     f30:	05 90       	lpm	r0, Z+
     f32:	61 50       	subi	r22, 0x01	; 1
     f34:	70 40       	sbci	r23, 0x00	; 0
     f36:	01 10       	cpse	r0, r1
     f38:	d8 f7       	brcc	.-10     	; 0xf30 <strnlen_P+0x2>
     f3a:	80 95       	com	r24
     f3c:	90 95       	com	r25
     f3e:	8e 0f       	add	r24, r30
     f40:	9f 1f       	adc	r25, r31
     f42:	08 95       	ret

00000f44 <strnlen>:
     f44:	fc 01       	movw	r30, r24
     f46:	61 50       	subi	r22, 0x01	; 1
     f48:	70 40       	sbci	r23, 0x00	; 0
     f4a:	01 90       	ld	r0, Z+
     f4c:	01 10       	cpse	r0, r1
     f4e:	d8 f7       	brcc	.-10     	; 0xf46 <strnlen+0x2>
     f50:	80 95       	com	r24
     f52:	90 95       	com	r25
     f54:	8e 0f       	add	r24, r30
     f56:	9f 1f       	adc	r25, r31
     f58:	08 95       	ret

00000f5a <fputc>:
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	18 2f       	mov	r17, r24
     f64:	09 2f       	mov	r16, r25
     f66:	eb 01       	movw	r28, r22
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	81 fd       	sbrc	r24, 1
     f6c:	03 c0       	rjmp	.+6      	; 0xf74 <fputc+0x1a>
     f6e:	8f ef       	ldi	r24, 0xFF	; 255
     f70:	9f ef       	ldi	r25, 0xFF	; 255
     f72:	20 c0       	rjmp	.+64     	; 0xfb4 <fputc+0x5a>
     f74:	82 ff       	sbrs	r24, 2
     f76:	10 c0       	rjmp	.+32     	; 0xf98 <fputc+0x3e>
     f78:	4e 81       	ldd	r20, Y+6	; 0x06
     f7a:	5f 81       	ldd	r21, Y+7	; 0x07
     f7c:	2c 81       	ldd	r18, Y+4	; 0x04
     f7e:	3d 81       	ldd	r19, Y+5	; 0x05
     f80:	42 17       	cp	r20, r18
     f82:	53 07       	cpc	r21, r19
     f84:	7c f4       	brge	.+30     	; 0xfa4 <fputc+0x4a>
     f86:	e8 81       	ld	r30, Y
     f88:	f9 81       	ldd	r31, Y+1	; 0x01
     f8a:	9f 01       	movw	r18, r30
     f8c:	2f 5f       	subi	r18, 0xFF	; 255
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	39 83       	std	Y+1, r19	; 0x01
     f92:	28 83       	st	Y, r18
     f94:	10 83       	st	Z, r17
     f96:	06 c0       	rjmp	.+12     	; 0xfa4 <fputc+0x4a>
     f98:	e8 85       	ldd	r30, Y+8	; 0x08
     f9a:	f9 85       	ldd	r31, Y+9	; 0x09
     f9c:	81 2f       	mov	r24, r17
     f9e:	09 95       	icall
     fa0:	89 2b       	or	r24, r25
     fa2:	29 f7       	brne	.-54     	; 0xf6e <fputc+0x14>
     fa4:	2e 81       	ldd	r18, Y+6	; 0x06
     fa6:	3f 81       	ldd	r19, Y+7	; 0x07
     fa8:	2f 5f       	subi	r18, 0xFF	; 255
     faa:	3f 4f       	sbci	r19, 0xFF	; 255
     fac:	3f 83       	std	Y+7, r19	; 0x07
     fae:	2e 83       	std	Y+6, r18	; 0x06
     fb0:	81 2f       	mov	r24, r17
     fb2:	90 2f       	mov	r25, r16
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <__ultoa_invert>:
     fbe:	fa 01       	movw	r30, r20
     fc0:	aa 27       	eor	r26, r26
     fc2:	28 30       	cpi	r18, 0x08	; 8
     fc4:	51 f1       	breq	.+84     	; 0x101a <__ultoa_invert+0x5c>
     fc6:	20 31       	cpi	r18, 0x10	; 16
     fc8:	81 f1       	breq	.+96     	; 0x102a <__ultoa_invert+0x6c>
     fca:	e8 94       	clt
     fcc:	6f 93       	push	r22
     fce:	6e 7f       	andi	r22, 0xFE	; 254
     fd0:	6e 5f       	subi	r22, 0xFE	; 254
     fd2:	7f 4f       	sbci	r23, 0xFF	; 255
     fd4:	8f 4f       	sbci	r24, 0xFF	; 255
     fd6:	9f 4f       	sbci	r25, 0xFF	; 255
     fd8:	af 4f       	sbci	r26, 0xFF	; 255
     fda:	b1 e0       	ldi	r27, 0x01	; 1
     fdc:	3e d0       	rcall	.+124    	; 0x105a <__ultoa_invert+0x9c>
     fde:	b4 e0       	ldi	r27, 0x04	; 4
     fe0:	3c d0       	rcall	.+120    	; 0x105a <__ultoa_invert+0x9c>
     fe2:	67 0f       	add	r22, r23
     fe4:	78 1f       	adc	r23, r24
     fe6:	89 1f       	adc	r24, r25
     fe8:	9a 1f       	adc	r25, r26
     fea:	a1 1d       	adc	r26, r1
     fec:	68 0f       	add	r22, r24
     fee:	79 1f       	adc	r23, r25
     ff0:	8a 1f       	adc	r24, r26
     ff2:	91 1d       	adc	r25, r1
     ff4:	a1 1d       	adc	r26, r1
     ff6:	6a 0f       	add	r22, r26
     ff8:	71 1d       	adc	r23, r1
     ffa:	81 1d       	adc	r24, r1
     ffc:	91 1d       	adc	r25, r1
     ffe:	a1 1d       	adc	r26, r1
    1000:	20 d0       	rcall	.+64     	; 0x1042 <__ultoa_invert+0x84>
    1002:	09 f4       	brne	.+2      	; 0x1006 <__ultoa_invert+0x48>
    1004:	68 94       	set
    1006:	3f 91       	pop	r19
    1008:	2a e0       	ldi	r18, 0x0A	; 10
    100a:	26 9f       	mul	r18, r22
    100c:	11 24       	eor	r1, r1
    100e:	30 19       	sub	r19, r0
    1010:	30 5d       	subi	r19, 0xD0	; 208
    1012:	31 93       	st	Z+, r19
    1014:	de f6       	brtc	.-74     	; 0xfcc <__ultoa_invert+0xe>
    1016:	cf 01       	movw	r24, r30
    1018:	08 95       	ret
    101a:	46 2f       	mov	r20, r22
    101c:	47 70       	andi	r20, 0x07	; 7
    101e:	40 5d       	subi	r20, 0xD0	; 208
    1020:	41 93       	st	Z+, r20
    1022:	b3 e0       	ldi	r27, 0x03	; 3
    1024:	0f d0       	rcall	.+30     	; 0x1044 <__ultoa_invert+0x86>
    1026:	c9 f7       	brne	.-14     	; 0x101a <__ultoa_invert+0x5c>
    1028:	f6 cf       	rjmp	.-20     	; 0x1016 <__ultoa_invert+0x58>
    102a:	46 2f       	mov	r20, r22
    102c:	4f 70       	andi	r20, 0x0F	; 15
    102e:	40 5d       	subi	r20, 0xD0	; 208
    1030:	4a 33       	cpi	r20, 0x3A	; 58
    1032:	18 f0       	brcs	.+6      	; 0x103a <__ultoa_invert+0x7c>
    1034:	49 5d       	subi	r20, 0xD9	; 217
    1036:	31 fd       	sbrc	r19, 1
    1038:	40 52       	subi	r20, 0x20	; 32
    103a:	41 93       	st	Z+, r20
    103c:	02 d0       	rcall	.+4      	; 0x1042 <__ultoa_invert+0x84>
    103e:	a9 f7       	brne	.-22     	; 0x102a <__ultoa_invert+0x6c>
    1040:	ea cf       	rjmp	.-44     	; 0x1016 <__ultoa_invert+0x58>
    1042:	b4 e0       	ldi	r27, 0x04	; 4
    1044:	a6 95       	lsr	r26
    1046:	97 95       	ror	r25
    1048:	87 95       	ror	r24
    104a:	77 95       	ror	r23
    104c:	67 95       	ror	r22
    104e:	ba 95       	dec	r27
    1050:	c9 f7       	brne	.-14     	; 0x1044 <__ultoa_invert+0x86>
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	61 05       	cpc	r22, r1
    1056:	71 05       	cpc	r23, r1
    1058:	08 95       	ret
    105a:	9b 01       	movw	r18, r22
    105c:	ac 01       	movw	r20, r24
    105e:	0a 2e       	mov	r0, r26
    1060:	06 94       	lsr	r0
    1062:	57 95       	ror	r21
    1064:	47 95       	ror	r20
    1066:	37 95       	ror	r19
    1068:	27 95       	ror	r18
    106a:	ba 95       	dec	r27
    106c:	c9 f7       	brne	.-14     	; 0x1060 <__ultoa_invert+0xa2>
    106e:	62 0f       	add	r22, r18
    1070:	73 1f       	adc	r23, r19
    1072:	84 1f       	adc	r24, r20
    1074:	95 1f       	adc	r25, r21
    1076:	a0 1d       	adc	r26, r0
    1078:	08 95       	ret

0000107a <__prologue_saves__>:
    107a:	2f 92       	push	r2
    107c:	3f 92       	push	r3
    107e:	4f 92       	push	r4
    1080:	5f 92       	push	r5
    1082:	6f 92       	push	r6
    1084:	7f 92       	push	r7
    1086:	8f 92       	push	r8
    1088:	9f 92       	push	r9
    108a:	af 92       	push	r10
    108c:	bf 92       	push	r11
    108e:	cf 92       	push	r12
    1090:	df 92       	push	r13
    1092:	ef 92       	push	r14
    1094:	ff 92       	push	r15
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	ca 1b       	sub	r28, r26
    10a4:	db 0b       	sbc	r29, r27
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	09 94       	ijmp

000010b2 <__epilogue_restores__>:
    10b2:	2a 88       	ldd	r2, Y+18	; 0x12
    10b4:	39 88       	ldd	r3, Y+17	; 0x11
    10b6:	48 88       	ldd	r4, Y+16	; 0x10
    10b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    10ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    10bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    10be:	8c 84       	ldd	r8, Y+12	; 0x0c
    10c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    10c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    10c4:	b9 84       	ldd	r11, Y+9	; 0x09
    10c6:	c8 84       	ldd	r12, Y+8	; 0x08
    10c8:	df 80       	ldd	r13, Y+7	; 0x07
    10ca:	ee 80       	ldd	r14, Y+6	; 0x06
    10cc:	fd 80       	ldd	r15, Y+5	; 0x05
    10ce:	0c 81       	ldd	r16, Y+4	; 0x04
    10d0:	1b 81       	ldd	r17, Y+3	; 0x03
    10d2:	aa 81       	ldd	r26, Y+2	; 0x02
    10d4:	b9 81       	ldd	r27, Y+1	; 0x01
    10d6:	ce 0f       	add	r28, r30
    10d8:	d1 1d       	adc	r29, r1
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	ed 01       	movw	r28, r26
    10e6:	08 95       	ret

000010e8 <_exit>:
    10e8:	f8 94       	cli

000010ea <__stop_program>:
    10ea:	ff cf       	rjmp	.-2      	; 0x10ea <__stop_program>
