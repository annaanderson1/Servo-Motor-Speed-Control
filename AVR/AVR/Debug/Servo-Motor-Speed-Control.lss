
Servo-Motor-Speed-Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000015d6  0000166a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800120  00800120  0000168a  2**0
                  ALLOC
  3 .stab         00000f3c  00000000  00000000  0000168c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000356  00000000  00000000  000025c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000291e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000198  00000000  00000000  0000294d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001cda  00000000  00000000  00002ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b7a  00000000  00000000  000047bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e1c  00000000  00000000  00005339  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000540  00000000  00000000  00006158  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005fc  00000000  00000000  00006698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000185a  00000000  00000000  00006c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000168  00000000  00000000  000084ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	23 c0       	rjmp	.+70     	; 0x48 <__ctors_end>
       2:	3d c0       	rjmp	.+122    	; 0x7e <__bad_interrupt>
       4:	3c c0       	rjmp	.+120    	; 0x7e <__bad_interrupt>
       6:	3b c0       	rjmp	.+118    	; 0x7e <__bad_interrupt>
       8:	12 c3       	rjmp	.+1572   	; 0x62e <__vector_4>
       a:	39 c0       	rjmp	.+114    	; 0x7e <__bad_interrupt>
       c:	38 c0       	rjmp	.+112    	; 0x7e <__bad_interrupt>
       e:	37 c0       	rjmp	.+110    	; 0x7e <__bad_interrupt>
      10:	36 c0       	rjmp	.+108    	; 0x7e <__bad_interrupt>
      12:	35 c0       	rjmp	.+106    	; 0x7e <__bad_interrupt>
      14:	34 c0       	rjmp	.+104    	; 0x7e <__bad_interrupt>
      16:	33 c0       	rjmp	.+102    	; 0x7e <__bad_interrupt>
      18:	32 c0       	rjmp	.+100    	; 0x7e <__bad_interrupt>
      1a:	31 c0       	rjmp	.+98     	; 0x7e <__bad_interrupt>
      1c:	30 c0       	rjmp	.+96     	; 0x7e <__bad_interrupt>
      1e:	2f c0       	rjmp	.+94     	; 0x7e <__bad_interrupt>
      20:	2e c0       	rjmp	.+92     	; 0x7e <__bad_interrupt>
      22:	2d c0       	rjmp	.+90     	; 0x7e <__bad_interrupt>
      24:	7c c3       	rjmp	.+1784   	; 0x71e <__vector_18>
      26:	2b c0       	rjmp	.+86     	; 0x7e <__bad_interrupt>
      28:	2a c0       	rjmp	.+84     	; 0x7e <__bad_interrupt>
      2a:	29 c0       	rjmp	.+82     	; 0x7e <__bad_interrupt>
      2c:	28 c0       	rjmp	.+80     	; 0x7e <__bad_interrupt>
      2e:	27 c0       	rjmp	.+78     	; 0x7e <__bad_interrupt>
      30:	26 c0       	rjmp	.+76     	; 0x7e <__bad_interrupt>
      32:	25 c0       	rjmp	.+74     	; 0x7e <__bad_interrupt>
      34:	16 c4       	rjmp	.+2092   	; 0x862 <main+0x6a>
      36:	19 c4       	rjmp	.+2098   	; 0x86a <main+0x72>
      38:	1c c4       	rjmp	.+2104   	; 0x872 <main+0x7a>
      3a:	1f c4       	rjmp	.+2110   	; 0x87a <main+0x82>
      3c:	22 c4       	rjmp	.+2116   	; 0x882 <main+0x8a>
      3e:	25 c4       	rjmp	.+2122   	; 0x88a <main+0x92>
      40:	28 c4       	rjmp	.+2128   	; 0x892 <main+0x9a>
      42:	2b c4       	rjmp	.+2134   	; 0x89a <main+0xa2>
      44:	2e c4       	rjmp	.+2140   	; 0x8a2 <main+0xaa>
      46:	31 c4       	rjmp	.+2146   	; 0x8aa <main+0xb2>

00000048 <__ctors_end>:
      48:	11 24       	eor	r1, r1
      4a:	1f be       	out	0x3f, r1	; 63
      4c:	cf ef       	ldi	r28, 0xFF	; 255
      4e:	d4 e0       	ldi	r29, 0x04	; 4
      50:	de bf       	out	0x3e, r29	; 62
      52:	cd bf       	out	0x3d, r28	; 61

00000054 <__do_copy_data>:
      54:	11 e0       	ldi	r17, 0x01	; 1
      56:	a0 e0       	ldi	r26, 0x00	; 0
      58:	b1 e0       	ldi	r27, 0x01	; 1
      5a:	e6 ed       	ldi	r30, 0xD6	; 214
      5c:	f5 e1       	ldi	r31, 0x15	; 21
      5e:	02 c0       	rjmp	.+4      	; 0x64 <__do_copy_data+0x10>
      60:	05 90       	lpm	r0, Z+
      62:	0d 92       	st	X+, r0
      64:	a0 32       	cpi	r26, 0x20	; 32
      66:	b1 07       	cpc	r27, r17
      68:	d9 f7       	brne	.-10     	; 0x60 <__do_copy_data+0xc>

0000006a <__do_clear_bss>:
      6a:	21 e0       	ldi	r18, 0x01	; 1
      6c:	a0 e2       	ldi	r26, 0x20	; 32
      6e:	b1 e0       	ldi	r27, 0x01	; 1
      70:	01 c0       	rjmp	.+2      	; 0x74 <.do_clear_bss_start>

00000072 <.do_clear_bss_loop>:
      72:	1d 92       	st	X+, r1

00000074 <.do_clear_bss_start>:
      74:	ad 32       	cpi	r26, 0x2D	; 45
      76:	b2 07       	cpc	r27, r18
      78:	e1 f7       	brne	.-8      	; 0x72 <.do_clear_bss_loop>
      7a:	be d3       	rcall	.+1916   	; 0x7f8 <main>
      7c:	aa ca       	rjmp	.-2732   	; 0xfffff5d2 <__eeprom_end+0xff7ef5d2>

0000007e <__bad_interrupt>:
      7e:	c0 cf       	rjmp	.-128    	; 0x0 <__vectors>

00000080 <init_shared_data>:
} Shared_Data;

/*
 * Initiates the struct variables.
*/
void init_shared_data(Shared_Data* shared_ptr){
      80:	fc 01       	movw	r30, r24
	shared_ptr->speed_set = 0;
      82:	11 82       	std	Z+1, r1	; 0x01
      84:	10 82       	st	Z, r1
	shared_ptr->pwm = 0;
      86:	13 82       	std	Z+3, r1	; 0x03
      88:	12 82       	std	Z+2, r1	; 0x02
	shared_ptr->error = 0;
      8a:	15 82       	std	Z+5, r1	; 0x05
      8c:	14 82       	std	Z+4, r1	; 0x04
	shared_ptr->fine_tuning = 0;
      8e:	17 82       	std	Z+7, r1	; 0x07
      90:	16 82       	std	Z+6, r1	; 0x06
	shared_ptr->integral = 0;
      92:	10 86       	std	Z+8, r1	; 0x08
      94:	11 86       	std	Z+9, r1	; 0x09
      96:	12 86       	std	Z+10, r1	; 0x0a
      98:	13 86       	std	Z+11, r1	; 0x0b
      9a:	14 86       	std	Z+12, r1	; 0x0c
      9c:	15 86       	std	Z+13, r1	; 0x0d
      9e:	16 86       	std	Z+14, r1	; 0x0e
      a0:	17 86       	std	Z+15, r1	; 0x0f
	shared_ptr->rpm_curr = 0;
      a2:	10 8a       	std	Z+16, r1	; 0x10
      a4:	11 8a       	std	Z+17, r1	; 0x11
      a6:	12 8a       	std	Z+18, r1	; 0x12
      a8:	13 8a       	std	Z+19, r1	; 0x13
	shared_ptr->rpm_avg = 0;
      aa:	14 8a       	std	Z+20, r1	; 0x14
      ac:	15 8a       	std	Z+21, r1	; 0x15
      ae:	16 8a       	std	Z+22, r1	; 0x16
      b0:	17 8a       	std	Z+23, r1	; 0x17
	shared_ptr->delta_time = 0;
      b2:	e8 5e       	subi	r30, 0xE8	; 232
      b4:	fd 4f       	sbci	r31, 0xFD	; 253
      b6:	10 82       	st	Z, r1
      b8:	11 82       	std	Z+1, r1	; 0x01
      ba:	12 82       	std	Z+2, r1	; 0x02
      bc:	13 82       	std	Z+3, r1	; 0x03
      be:	08 95       	ret

000000c0 <set_prescale>:

/* 
 *
*/
static void set_prescale(int ps){
	if (ps == 1){
      c0:	81 30       	cpi	r24, 0x01	; 1
      c2:	91 05       	cpc	r25, r1
      c4:	39 f4       	brne	.+14     	; 0xd4 <set_prescale+0x14>
		TCCR1B &= ~ 0xff;
      c6:	e1 e8       	ldi	r30, 0x81	; 129
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	80 81       	ld	r24, Z
      cc:	10 82       	st	Z, r1
		TCCR1B = (1 << CS10);
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	80 83       	st	Z, r24
      d2:	08 95       	ret
	}
	else if(ps == 8){
      d4:	08 97       	sbiw	r24, 0x08	; 8
      d6:	31 f4       	brne	.+12     	; 0xe4 <set_prescale+0x24>
		TCCR1B &= ~ 0xff;
      d8:	e1 e8       	ldi	r30, 0x81	; 129
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 81       	ld	r24, Z
      de:	10 82       	st	Z, r1
		TCCR1B = (1 << CS11);
      e0:	82 e0       	ldi	r24, 0x02	; 2
      e2:	80 83       	st	Z, r24
      e4:	08 95       	ret

000000e6 <calc_latest_rpm>:
/*	
 * Calculates the speed between two encoder-interrupts, using fixed point arithmetics.
 * Inserts the speed to the rpm-array in shared_ptr->rpm_measurements
 * Qm.n values defined in shared.h
*/
void calc_latest_rpm(Shared_Data* shared_ptr){
      e6:	4f 92       	push	r4
      e8:	5f 92       	push	r5
      ea:	6f 92       	push	r6
      ec:	7f 92       	push	r7
      ee:	8f 92       	push	r8
      f0:	9f 92       	push	r9
      f2:	af 92       	push	r10
      f4:	bf 92       	push	r11
      f6:	cf 92       	push	r12
      f8:	df 92       	push	r13
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	cd b7       	in	r28, 0x3d	; 61
     108:	de b7       	in	r29, 0x3e	; 62
     10a:	28 97       	sbiw	r28, 0x08	; 8
     10c:	0f b6       	in	r0, 0x3f	; 63
     10e:	f8 94       	cli
     110:	de bf       	out	0x3e, r29	; 62
     112:	0f be       	out	0x3f, r0	; 63
     114:	cd bf       	out	0x3d, r28	; 61
     116:	4c 01       	movw	r8, r24
		TCCR1B = (1 << CS11);
	}
}
/*	Converts the difference in clk increments to microseconds */
static unsigned long calc_delta_time(Shared_Data* shared_ptr){
	unsigned short delta_clk = clk_elapsed;
     118:	e0 90 2b 01 	lds	r14, 0x012B
     11c:	f0 90 2c 01 	lds	r15, 0x012C

	// scales based on prescaling
	unsigned short prescale;
	
	if(shared_ptr->speed_set <= 20){
     120:	fc 01       	movw	r30, r24
     122:	80 81       	ld	r24, Z
     124:	91 81       	ldd	r25, Z+1	; 0x01
     126:	45 97       	sbiw	r24, 0x15	; 21
     128:	34 f4       	brge	.+12     	; 0x136 <calc_latest_rpm+0x50>
		prescale = 8;
		set_prescale(8);
     12a:	88 e0       	ldi	r24, 0x08	; 8
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	c8 df       	rcall	.-112    	; 0xc0 <set_prescale>

	// scales based on prescaling
	unsigned short prescale;
	
	if(shared_ptr->speed_set <= 20){
		prescale = 8;
     130:	28 e0       	ldi	r18, 0x08	; 8
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	05 c0       	rjmp	.+10     	; 0x140 <calc_latest_rpm+0x5a>
		set_prescale(8);
	}
	else{
		prescale = 1;
		set_prescale(1);
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	c2 df       	rcall	.-124    	; 0xc0 <set_prescale>
	if(shared_ptr->speed_set <= 20){
		prescale = 8;
		set_prescale(8);
	}
	else{
		prescale = 1;
     13c:	21 e0       	ldi	r18, 0x01	; 1
     13e:	30 e0       	ldi	r19, 0x00	; 0
		set_prescale(1);
	}

	unsigned long temp;

	temp = (unsigned long)delta_clk * prescale;
     140:	d7 01       	movw	r26, r14
     142:	39 d6       	rcall	.+3186   	; 0xdb6 <__umulhisi3>
	unsigned long long denominator;
	unsigned long long rpm;
	
	delta_time = calc_delta_time(shared_ptr);
	
	delta_time = delta_time << N;
     144:	2b 01       	movw	r4, r22
     146:	3c 01       	movw	r6, r24
     148:	44 0c       	add	r4, r4
     14a:	55 1c       	adc	r5, r5
     14c:	66 1c       	adc	r6, r6
     14e:	77 1c       	adc	r7, r7
     150:	44 0c       	add	r4, r4
     152:	55 1c       	adc	r5, r5
     154:	66 1c       	adc	r6, r6
     156:	77 1c       	adc	r7, r7
     158:	44 0c       	add	r4, r4
     15a:	55 1c       	adc	r5, r5
     15c:	66 1c       	adc	r6, r6
     15e:	77 1c       	adc	r7, r7
     160:	44 0c       	add	r4, r4
     162:	55 1c       	adc	r5, r5
     164:	66 1c       	adc	r6, r6
     166:	77 1c       	adc	r7, r7
	S_TO_MIN = S_TO_MIN << N;

	numerator = (unsigned long long)MS_TO_S * S_TO_MIN;
	numerator = numerator >> N;

	denominator = (unsigned long long)delta_rev_inverse * delta_time;
     168:	a3 01       	movw	r20, r6
     16a:	92 01       	movw	r18, r4
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	cb 01       	movw	r24, r22
     172:	49 82       	std	Y+1, r4	; 0x01
     174:	3a 83       	std	Y+2, r19	; 0x02
     176:	4b 83       	std	Y+3, r20	; 0x03
     178:	5c 83       	std	Y+4, r21	; 0x04
     17a:	6d 83       	std	Y+5, r22	; 0x05
     17c:	7e 83       	std	Y+6, r23	; 0x06
     17e:	8f 83       	std	Y+7, r24	; 0x07
     180:	98 87       	std	Y+8, r25	; 0x08
     182:	a1 2c       	mov	r10, r1
     184:	0f 2e       	mov	r0, r31
     186:	f6 e0       	ldi	r31, 0x06	; 6
     188:	bf 2e       	mov	r11, r31
     18a:	f0 2d       	mov	r31, r0
     18c:	c1 2c       	mov	r12, r1
     18e:	d1 2c       	mov	r13, r1
     190:	e1 2c       	mov	r14, r1
     192:	f1 2c       	mov	r15, r1
     194:	00 e0       	ldi	r16, 0x00	; 0
     196:	10 e0       	ldi	r17, 0x00	; 0
     198:	60 e0       	ldi	r22, 0x00	; 0
     19a:	70 e0       	ldi	r23, 0x00	; 0
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	2d d6       	rcall	.+3162   	; 0xdfc <__muldi3>
	denominator = denominator >> N;
     1a2:	04 e0       	ldi	r16, 0x04	; 4
     1a4:	d9 d6       	rcall	.+3506   	; 0xf58 <__lshrdi3>
     1a6:	a2 2e       	mov	r10, r18
     1a8:	b3 2e       	mov	r11, r19
     1aa:	c4 2e       	mov	r12, r20
     1ac:	d5 2e       	mov	r13, r21
     1ae:	e6 2e       	mov	r14, r22
     1b0:	f7 2e       	mov	r15, r23
     1b2:	e8 2f       	mov	r30, r24
     1b4:	19 2f       	mov	r17, r25

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1);
     1b6:	01 e0       	ldi	r16, 0x01	; 1
     1b8:	cf d6       	rcall	.+3486   	; 0xf58 <__lshrdi3>
     1ba:	49 57       	subi	r20, 0x79	; 121
     1bc:	5c 46       	sbci	r21, 0x6C	; 108
     1be:	6c 4f       	sbci	r22, 0xFC	; 252
     1c0:	7f 4f       	sbci	r23, 0xFF	; 255
     1c2:	8f 4f       	sbci	r24, 0xFF	; 255
     1c4:	9f 4f       	sbci	r25, 0xFF	; 255
	rpm = rpm / denominator;
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
     1c6:	d4 01       	movw	r26, r8
     1c8:	a8 5e       	subi	r26, 0xE8	; 232
     1ca:	bd 4f       	sbci	r27, 0xFD	; 253
     1cc:	68 94       	set
     1ce:	13 f8       	bld	r1, 3
     1d0:	76 94       	lsr	r7
     1d2:	67 94       	ror	r6
     1d4:	57 94       	ror	r5
     1d6:	47 94       	ror	r4
     1d8:	16 94       	lsr	r1
     1da:	d1 f7       	brne	.-12     	; 0x1d0 <calc_latest_rpm+0xea>
     1dc:	4d 92       	st	X+, r4
     1de:	5d 92       	st	X+, r5
     1e0:	6d 92       	st	X+, r6
     1e2:	7c 92       	st	X, r7
     1e4:	13 97       	sbiw	r26, 0x03	; 3
	denominator = (unsigned long long)delta_rev_inverse * delta_time;
	denominator = denominator >> N;

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1);
	rpm = rpm / denominator;
     1e6:	0e 2f       	mov	r16, r30
     1e8:	fe d5       	rcall	.+3068   	; 0xde6 <__udivdi3>
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
	shared_ptr->rpm_curr = (unsigned long)rpm >> N;	// Used for debugging
     1ea:	82 2f       	mov	r24, r18
     1ec:	93 2f       	mov	r25, r19
     1ee:	a4 2f       	mov	r26, r20
     1f0:	b5 2f       	mov	r27, r21
     1f2:	72 2f       	mov	r23, r18
     1f4:	63 2f       	mov	r22, r19
     1f6:	54 2f       	mov	r21, r20
     1f8:	4b 2f       	mov	r20, r27
     1fa:	68 94       	set
     1fc:	13 f8       	bld	r1, 3
     1fe:	b6 95       	lsr	r27
     200:	a7 95       	ror	r26
     202:	97 95       	ror	r25
     204:	87 95       	ror	r24
     206:	16 94       	lsr	r1
     208:	d1 f7       	brne	.-12     	; 0x1fe <calc_latest_rpm+0x118>
     20a:	f4 01       	movw	r30, r8
     20c:	80 8b       	std	Z+16, r24	; 0x10
     20e:	91 8b       	std	Z+17, r25	; 0x11
     210:	a2 8b       	std	Z+18, r26	; 0x12
     212:	b3 8b       	std	Z+19, r27	; 0x13
    int i;
    unsigned long temp;

    temp = rpm >> N;

    if(temp < 0 || temp > 250 ){
     214:	8b 3f       	cpi	r24, 0xFB	; 251
     216:	91 05       	cpc	r25, r1
     218:	a1 05       	cpc	r26, r1
     21a:	b1 05       	cpc	r27, r1
     21c:	b8 f4       	brcc	.+46     	; 0x24c <calc_latest_rpm+0x166>
/*	
 * Calculates the speed between two encoder-interrupts, using fixed point arithmetics.
 * Inserts the speed to the rpm-array in shared_ptr->rpm_measurements
 * Qm.n values defined in shared.h
*/
void calc_latest_rpm(Shared_Data* shared_ptr){
     21e:	ec 5e       	subi	r30, 0xEC	; 236
     220:	fd 4f       	sbci	r31, 0xFD	; 253
     222:	2f e7       	ldi	r18, 0x7F	; 127
     224:	30 e0       	ldi	r19, 0x00	; 0
    if(temp < 0 || temp > 250 ){
        return;
    }

    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
     226:	21 50       	subi	r18, 0x01	; 1
     228:	31 09       	sbc	r19, r1
     22a:	b2 91       	ld	r27, -Z
     22c:	a2 91       	ld	r26, -Z
     22e:	92 91       	ld	r25, -Z
     230:	82 91       	ld	r24, -Z
     232:	84 83       	std	Z+4, r24	; 0x04
     234:	95 83       	std	Z+5, r25	; 0x05
     236:	a6 83       	std	Z+6, r26	; 0x06
     238:	b7 83       	std	Z+7, r27	; 0x07

    if(temp < 0 || temp > 250 ){
        return;
    }

    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
     23a:	2f 3f       	cpi	r18, 0xFF	; 255
     23c:	8f ef       	ldi	r24, 0xFF	; 255
     23e:	38 07       	cpc	r19, r24
     240:	91 f7       	brne	.-28     	; 0x226 <calc_latest_rpm+0x140>
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
    }
    shared_ptr->rpm_measurements[0] = rpm;
     242:	f4 01       	movw	r30, r8
     244:	70 8f       	std	Z+24, r23	; 0x18
     246:	61 8f       	std	Z+25, r22	; 0x19
     248:	52 8f       	std	Z+26, r21	; 0x1a
     24a:	43 8f       	std	Z+27, r20	; 0x1b
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
	shared_ptr->rpm_curr = (unsigned long)rpm >> N;	// Used for debugging
	insert_rpm(shared_ptr, rpm);
	
}
     24c:	28 96       	adiw	r28, 0x08	; 8
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	de bf       	out	0x3e, r29	; 62
     254:	0f be       	out	0x3f, r0	; 63
     256:	cd bf       	out	0x3d, r28	; 61
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	1f 91       	pop	r17
     25e:	0f 91       	pop	r16
     260:	ff 90       	pop	r15
     262:	ef 90       	pop	r14
     264:	df 90       	pop	r13
     266:	cf 90       	pop	r12
     268:	bf 90       	pop	r11
     26a:	af 90       	pop	r10
     26c:	9f 90       	pop	r9
     26e:	8f 90       	pop	r8
     270:	7f 90       	pop	r7
     272:	6f 90       	pop	r6
     274:	5f 90       	pop	r5
     276:	4f 90       	pop	r4
     278:	08 95       	ret

0000027a <calc_avg_rpm>:

/*
 * Calculates the filtered running average rpm. Stores result in shared_ptr->rpm_avg
 * Number of elements counted depends on speed_set
*/
void calc_avg_rpm(Shared_Data* shared_ptr){
     27a:	2f 92       	push	r2
     27c:	3f 92       	push	r3
     27e:	4f 92       	push	r4
     280:	5f 92       	push	r5
     282:	6f 92       	push	r6
     284:	7f 92       	push	r7
     286:	8f 92       	push	r8
     288:	9f 92       	push	r9
     28a:	af 92       	push	r10
     28c:	bf 92       	push	r11
     28e:	cf 92       	push	r12
     290:	df 92       	push	r13
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	00 d0       	rcall	.+0      	; 0x2a0 <calc_avg_rpm+0x26>
     2a0:	00 d0       	rcall	.+0      	; 0x2a2 <calc_avg_rpm+0x28>
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <calc_avg_rpm+0x2a>
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
     2a8:	9a 83       	std	Y+2, r25	; 0x02
     2aa:	89 83       	std	Y+1, r24	; 0x01
	unsigned long long temp = 0;
	int i;
	int size;
	int size_shift;
	
	if(shared_ptr->speed_set <=20){
     2ac:	fc 01       	movw	r30, r24
     2ae:	80 81       	ld	r24, Z
     2b0:	91 81       	ldd	r25, Z+1	; 0x01
     2b2:	45 97       	sbiw	r24, 0x15	; 21
     2b4:	3c f1       	brlt	.+78     	; 0x304 <calc_avg_rpm+0x8a>
		size = SIZE_64;
		size_shift = DIVISION_64;
	}
	else if(shared_ptr->speed_set <= 100){
		size = SIZE_64;
		size_shift = DIVISION_64;
     2b6:	e6 e0       	ldi	r30, 0x06	; 6
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	fc 83       	std	Y+4, r31	; 0x04
     2bc:	eb 83       	std	Y+3, r30	; 0x03
	else if(shared_ptr->speed_set <=50){
		size = SIZE_64;
		size_shift = DIVISION_64;
	}
	else if(shared_ptr->speed_set <= 100){
		size = SIZE_64;
     2be:	e0 e4       	ldi	r30, 0x40	; 64
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	fe 83       	std	Y+6, r31	; 0x06
     2c4:	ed 83       	std	Y+5, r30	; 0x05
     2c6:	26 c0       	rjmp	.+76     	; 0x314 <calc_avg_rpm+0x9a>
		size = SIZE_64;
		size_shift = DIVISION_64;
	}
	
	for(i = 0; i < size; i++){
		temp = temp + shared_ptr->rpm_measurements[i];
     2c8:	cd 90       	ld	r12, X+
     2ca:	dd 90       	ld	r13, X+
     2cc:	ed 90       	ld	r14, X+
     2ce:	fd 90       	ld	r15, X+
     2d0:	16 01       	movw	r2, r12
     2d2:	27 01       	movw	r4, r14
     2d4:	ac 2c       	mov	r10, r12
     2d6:	b3 2c       	mov	r11, r3
     2d8:	c4 2c       	mov	r12, r4
     2da:	d5 2c       	mov	r13, r5
     2dc:	e1 2c       	mov	r14, r1
     2de:	f1 2c       	mov	r15, r1
     2e0:	00 e0       	ldi	r16, 0x00	; 0
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	48 d6       	rcall	.+3216   	; 0xf76 <__adddi3>
	else if(shared_ptr->speed_set > 100){
		size = SIZE_64;
		size_shift = DIVISION_64;
	}
	
	for(i = 0; i < size; i++){
     2e6:	31 96       	adiw	r30, 0x01	; 1
     2e8:	0d 81       	ldd	r16, Y+5	; 0x05
     2ea:	1e 81       	ldd	r17, Y+6	; 0x06
     2ec:	e0 17       	cp	r30, r16
     2ee:	f1 07       	cpc	r31, r17
     2f0:	5c f3       	brlt	.-42     	; 0x2c8 <calc_avg_rpm+0x4e>
		temp = temp + shared_ptr->rpm_measurements[i];
	}
	
	// Divide by size
	temp = temp >> size_shift;
     2f2:	0b 81       	ldd	r16, Y+3	; 0x03
     2f4:	31 d6       	rcall	.+3170   	; 0xf58 <__lshrdi3>
	
	shared_ptr->rpm_avg = temp;
     2f6:	e9 81       	ldd	r30, Y+1	; 0x01
     2f8:	fa 81       	ldd	r31, Y+2	; 0x02
     2fa:	24 8b       	std	Z+20, r18	; 0x14
     2fc:	35 8b       	std	Z+21, r19	; 0x15
     2fe:	46 8b       	std	Z+22, r20	; 0x16
     300:	57 8b       	std	Z+23, r21	; 0x17
     302:	16 c0       	rjmp	.+44     	; 0x330 <calc_avg_rpm+0xb6>
	int size;
	int size_shift;
	
	if(shared_ptr->speed_set <=20){
		size = SIZE_16;
		size_shift = DIVISION_16;
     304:	e4 e0       	ldi	r30, 0x04	; 4
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	fc 83       	std	Y+4, r31	; 0x04
     30a:	eb 83       	std	Y+3, r30	; 0x03
	int i;
	int size;
	int size_shift;
	
	if(shared_ptr->speed_set <=20){
		size = SIZE_16;
     30c:	e0 e1       	ldi	r30, 0x10	; 16
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	fe 83       	std	Y+6, r31	; 0x06
     312:	ed 83       	std	Y+5, r30	; 0x05

/*
 * Calculates the filtered running average rpm. Stores result in shared_ptr->rpm_avg
 * Number of elements counted depends on speed_set
*/
void calc_avg_rpm(Shared_Data* shared_ptr){
     314:	a9 81       	ldd	r26, Y+1	; 0x01
     316:	ba 81       	ldd	r27, Y+2	; 0x02
     318:	58 96       	adiw	r26, 0x18	; 24
	else if(shared_ptr->speed_set > 100){
		size = SIZE_64;
		size_shift = DIVISION_64;
	}
	
	for(i = 0; i < size; i++){
     31a:	e0 e0       	ldi	r30, 0x00	; 0
     31c:	f0 e0       	ldi	r31, 0x00	; 0
/*
 * Calculates the filtered running average rpm. Stores result in shared_ptr->rpm_avg
 * Number of elements counted depends on speed_set
*/
void calc_avg_rpm(Shared_Data* shared_ptr){
	unsigned long long temp = 0;
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	40 e0       	ldi	r20, 0x00	; 0
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	cc cf       	rjmp	.-104    	; 0x2c8 <calc_avg_rpm+0x4e>
	
	// Divide by size
	temp = temp >> size_shift;
	
	shared_ptr->rpm_avg = temp;
}
     330:	26 96       	adiw	r28, 0x06	; 6
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	f8 94       	cli
     336:	de bf       	out	0x3e, r29	; 62
     338:	0f be       	out	0x3f, r0	; 63
     33a:	cd bf       	out	0x3d, r28	; 61
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	1f 91       	pop	r17
     342:	0f 91       	pop	r16
     344:	ff 90       	pop	r15
     346:	ef 90       	pop	r14
     348:	df 90       	pop	r13
     34a:	cf 90       	pop	r12
     34c:	bf 90       	pop	r11
     34e:	af 90       	pop	r10
     350:	9f 90       	pop	r9
     352:	8f 90       	pop	r8
     354:	7f 90       	pop	r7
     356:	6f 90       	pop	r6
     358:	5f 90       	pop	r5
     35a:	4f 90       	pop	r4
     35c:	3f 90       	pop	r3
     35e:	2f 90       	pop	r2
     360:	08 95       	ret

00000362 <control>:

/*
 * PI controller for the electrical motor, implemented using fixed point arithmetics.
 * Kp and Ki values is used to tune the controller, depending on different rpm.
*/
void control(Shared_Data* shared_ptr){
     362:	2f 92       	push	r2
     364:	3f 92       	push	r3
     366:	4f 92       	push	r4
     368:	5f 92       	push	r5
     36a:	6f 92       	push	r6
     36c:	7f 92       	push	r7
     36e:	8f 92       	push	r8
     370:	9f 92       	push	r9
     372:	af 92       	push	r10
     374:	bf 92       	push	r11
     376:	cf 92       	push	r12
     378:	df 92       	push	r13
     37a:	ef 92       	push	r14
     37c:	ff 92       	push	r15
     37e:	0f 93       	push	r16
     380:	1f 93       	push	r17
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
     38a:	27 97       	sbiw	r28, 0x07	; 7
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	f8 94       	cli
     390:	de bf       	out	0x3e, r29	; 62
     392:	0f be       	out	0x3f, r0	; 63
     394:	cd bf       	out	0x3d, r28	; 61
     396:	fc 01       	movw	r30, r24
 * Stores the value in shared_ptr->fine_tuning
*/
static void update_fine_tuning(Shared_Data* shared_ptr){
	short fine_tuning;
	
	fine_tuning = ADCL;	
     398:	20 91 78 00 	lds	r18, 0x0078
	fine_tuning |= (ADCH << 8);	// value: 0-1024
     39c:	30 91 79 00 	lds	r19, 0x0079
     3a0:	93 2f       	mov	r25, r19
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	82 2b       	or	r24, r18
	TIFR1 |= (1 << TOV0);	// clear timer1 overflow flag
     3a6:	b0 9a       	sbi	0x16, 0	; 22
	
	fine_tuning = (fine_tuning << 1);   // value: 0 - 2048
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
	fine_tuning = fine_tuning - 1024;   // value: -1028 - 1028
     3ac:	94 50       	subi	r25, 0x04	; 4
	fine_tuning = fine_tuning/100;		// value: -10 - 10
     3ae:	64 e6       	ldi	r22, 0x64	; 100
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	ee d4       	rcall	.+2524   	; 0xd90 <__divmodhi4>
     3b4:	2b 01       	movw	r4, r22
	
	shared_ptr->fine_tuning = fine_tuning;
     3b6:	77 83       	std	Z+7, r23	; 0x07
     3b8:	66 83       	std	Z+6, r22	; 0x06
	long Kp;
	long Ki;
	
	update_fine_tuning(shared_ptr);
	
	long e = ((long)shared_ptr->speed_set << N) - (long)shared_ptr->rpm_avg;
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	ac 01       	movw	r20, r24
     3c0:	66 27       	eor	r22, r22
     3c2:	57 fd       	sbrc	r21, 7
     3c4:	60 95       	com	r22
     3c6:	76 2f       	mov	r23, r22
     3c8:	44 0f       	add	r20, r20
     3ca:	55 1f       	adc	r21, r21
     3cc:	66 1f       	adc	r22, r22
     3ce:	77 1f       	adc	r23, r23
     3d0:	44 0f       	add	r20, r20
     3d2:	55 1f       	adc	r21, r21
     3d4:	66 1f       	adc	r22, r22
     3d6:	77 1f       	adc	r23, r23
     3d8:	44 0f       	add	r20, r20
     3da:	55 1f       	adc	r21, r21
     3dc:	66 1f       	adc	r22, r22
     3de:	77 1f       	adc	r23, r23
     3e0:	44 0f       	add	r20, r20
     3e2:	55 1f       	adc	r21, r21
     3e4:	66 1f       	adc	r22, r22
     3e6:	77 1f       	adc	r23, r23
     3e8:	04 89       	ldd	r16, Z+20	; 0x14
     3ea:	15 89       	ldd	r17, Z+21	; 0x15
     3ec:	26 89       	ldd	r18, Z+22	; 0x16
     3ee:	37 89       	ldd	r19, Z+23	; 0x17
     3f0:	40 1b       	sub	r20, r16
     3f2:	51 0b       	sbc	r21, r17
     3f4:	62 0b       	sbc	r22, r18
     3f6:	73 0b       	sbc	r23, r19
	e = e + ((long)shared_ptr->fine_tuning << N);
     3f8:	66 24       	eor	r6, r6
     3fa:	57 fc       	sbrc	r5, 7
     3fc:	60 94       	com	r6
     3fe:	76 2c       	mov	r7, r6
     400:	44 0c       	add	r4, r4
     402:	55 1c       	adc	r5, r5
     404:	66 1c       	adc	r6, r6
     406:	77 1c       	adc	r7, r7
     408:	44 0c       	add	r4, r4
     40a:	55 1c       	adc	r5, r5
     40c:	66 1c       	adc	r6, r6
     40e:	77 1c       	adc	r7, r7
     410:	44 0c       	add	r4, r4
     412:	55 1c       	adc	r5, r5
     414:	66 1c       	adc	r6, r6
     416:	77 1c       	adc	r7, r7
     418:	44 0c       	add	r4, r4
     41a:	55 1c       	adc	r5, r5
     41c:	66 1c       	adc	r6, r6
     41e:	77 1c       	adc	r7, r7
     420:	44 0e       	add	r4, r20
     422:	55 1e       	adc	r5, r21
     424:	66 1e       	adc	r6, r22
     426:	77 1e       	adc	r7, r23
	shared_ptr->error = (short)e;	// For debugging
     428:	55 82       	std	Z+5, r5	; 0x05
     42a:	44 82       	std	Z+4, r4	; 0x04
	
	e = e << (N_CTRL-N);
     42c:	44 0c       	add	r4, r4
     42e:	55 1c       	adc	r5, r5
     430:	66 1c       	adc	r6, r6
     432:	77 1c       	adc	r7, r7
     434:	44 0c       	add	r4, r4
     436:	55 1c       	adc	r5, r5
     438:	66 1c       	adc	r6, r6
     43a:	77 1c       	adc	r7, r7
     43c:	44 0c       	add	r4, r4
     43e:	55 1c       	adc	r5, r5
     440:	66 1c       	adc	r6, r6
     442:	77 1c       	adc	r7, r7
	
	if(shared_ptr->speed_set >= 100){
     444:	84 36       	cpi	r24, 0x64	; 100
     446:	91 05       	cpc	r25, r1
     448:	54 f4       	brge	.+20     	; 0x45e <control+0xfc>
		Kp = 100;
		Ki = 500;
	}
	else if(shared_ptr->speed_set >= 80){
     44a:	80 35       	cpi	r24, 0x50	; 80
     44c:	91 05       	cpc	r25, r1
     44e:	64 f4       	brge	.+24     	; 0x468 <control+0x106>
		Kp = 100;
		Ki = 550;
	}
	else if(shared_ptr->speed_set >= 10){
     450:	0a 97       	sbiw	r24, 0x0a	; 10
     452:	7c f0       	brlt	.+30     	; 0x472 <control+0x110>
		Kp = 100;
		Ki = 1000;
     454:	28 ee       	ldi	r18, 0xE8	; 232
     456:	33 e0       	ldi	r19, 0x03	; 3
     458:	40 e0       	ldi	r20, 0x00	; 0
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	0e c0       	rjmp	.+28     	; 0x47a <control+0x118>
	
	e = e << (N_CTRL-N);
	
	if(shared_ptr->speed_set >= 100){
		Kp = 100;
		Ki = 500;
     45e:	24 ef       	ldi	r18, 0xF4	; 244
     460:	31 e0       	ldi	r19, 0x01	; 1
     462:	40 e0       	ldi	r20, 0x00	; 0
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	09 c0       	rjmp	.+18     	; 0x47a <control+0x118>
	}
	else if(shared_ptr->speed_set >= 80){
		Kp = 100;
		Ki = 550;
     468:	26 e2       	ldi	r18, 0x26	; 38
     46a:	32 e0       	ldi	r19, 0x02	; 2
     46c:	40 e0       	ldi	r20, 0x00	; 0
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	04 c0       	rjmp	.+8      	; 0x47a <control+0x118>
		Kp = 100;
		Ki = 1000;
	}
	else{
		Kp = 100;
		Ki = 550;
     472:	26 e2       	ldi	r18, 0x26	; 38
     474:	32 e0       	ldi	r19, 0x02	; 2
     476:	40 e0       	ldi	r20, 0x00	; 0
     478:	50 e0       	ldi	r21, 0x00	; 0
	}
	
	long integral = Ki*e;
     47a:	c3 01       	movw	r24, r6
     47c:	b2 01       	movw	r22, r4
     47e:	79 d4       	rcall	.+2290   	; 0xd72 <__mulsi3>
	integral = integral >> N_CTRL;
     480:	4b 01       	movw	r8, r22
     482:	5c 01       	movw	r10, r24
     484:	68 94       	set
     486:	16 f8       	bld	r1, 6
     488:	b5 94       	asr	r11
     48a:	a7 94       	ror	r10
     48c:	97 94       	ror	r9
     48e:	87 94       	ror	r8
     490:	16 94       	lsr	r1
     492:	d1 f7       	brne	.-12     	; 0x488 <control+0x126>
	shared_ptr->integral = shared_ptr->integral + integral;
     494:	6b 01       	movw	r12, r22
     496:	7c 01       	movw	r14, r24
     498:	ff 0c       	add	r15, r15
     49a:	cc 08       	sbc	r12, r12
     49c:	dc 2c       	mov	r13, r12
     49e:	76 01       	movw	r14, r12
     4a0:	28 2d       	mov	r18, r8
     4a2:	39 2d       	mov	r19, r9
     4a4:	4a 2d       	mov	r20, r10
     4a6:	5b 2d       	mov	r21, r11
     4a8:	6c 2d       	mov	r22, r12
     4aa:	7c 2d       	mov	r23, r12
     4ac:	8c 2d       	mov	r24, r12
     4ae:	9c 2d       	mov	r25, r12
     4b0:	a0 84       	ldd	r10, Z+8	; 0x08
     4b2:	b1 84       	ldd	r11, Z+9	; 0x09
     4b4:	c2 84       	ldd	r12, Z+10	; 0x0a
     4b6:	d3 84       	ldd	r13, Z+11	; 0x0b
     4b8:	e4 84       	ldd	r14, Z+12	; 0x0c
     4ba:	f5 84       	ldd	r15, Z+13	; 0x0d
     4bc:	06 85       	ldd	r16, Z+14	; 0x0e
     4be:	17 85       	ldd	r17, Z+15	; 0x0f
     4c0:	5a d5       	rcall	.+2740   	; 0xf76 <__adddi3>
     4c2:	22 2e       	mov	r2, r18
     4c4:	33 2e       	mov	r3, r19
     4c6:	84 2e       	mov	r8, r20
     4c8:	95 2e       	mov	r9, r21
     4ca:	a6 2f       	mov	r26, r22
     4cc:	b7 2f       	mov	r27, r23
     4ce:	8e 83       	std	Y+6, r24	; 0x06
     4d0:	9f 83       	std	Y+7, r25	; 0x07
     4d2:	20 87       	std	Z+8, r18	; 0x08
     4d4:	31 87       	std	Z+9, r19	; 0x09
     4d6:	42 87       	std	Z+10, r20	; 0x0a
     4d8:	53 87       	std	Z+11, r21	; 0x0b
     4da:	64 87       	std	Z+12, r22	; 0x0c
     4dc:	75 87       	std	Z+13, r23	; 0x0d
     4de:	86 87       	std	Z+14, r24	; 0x0e
     4e0:	97 87       	std	Z+15, r25	; 0x0f
	
	long long pwm = (long long)e * Kp + shared_ptr->integral;
     4e2:	73 01       	movw	r14, r6
     4e4:	62 01       	movw	r12, r4
     4e6:	ff 0c       	add	r15, r15
     4e8:	cc 08       	sbc	r12, r12
     4ea:	dc 2c       	mov	r13, r12
     4ec:	76 01       	movw	r14, r12
     4ee:	24 2d       	mov	r18, r4
     4f0:	35 2d       	mov	r19, r5
     4f2:	46 2d       	mov	r20, r6
     4f4:	57 2d       	mov	r21, r7
     4f6:	6c 2d       	mov	r22, r12
     4f8:	7c 2d       	mov	r23, r12
     4fa:	8c 2d       	mov	r24, r12
     4fc:	9c 2d       	mov	r25, r12
     4fe:	02 e0       	ldi	r16, 0x02	; 2
     500:	0d d5       	rcall	.+2586   	; 0xf1c <__ashldi3>
     502:	29 83       	std	Y+1, r18	; 0x01
     504:	3a 83       	std	Y+2, r19	; 0x02
     506:	4b 83       	std	Y+3, r20	; 0x03
     508:	5c 83       	std	Y+4, r21	; 0x04
     50a:	46 2e       	mov	r4, r22
     50c:	57 2e       	mov	r5, r23
     50e:	68 2e       	mov	r6, r24
     510:	79 2e       	mov	r7, r25
     512:	75 2d       	mov	r23, r5
     514:	86 2d       	mov	r24, r6
     516:	97 2d       	mov	r25, r7
     518:	01 d5       	rcall	.+2562   	; 0xf1c <__ashldi3>
     51a:	a2 2e       	mov	r10, r18
     51c:	b3 2e       	mov	r11, r19
     51e:	c4 2e       	mov	r12, r20
     520:	d5 2e       	mov	r13, r21
     522:	e6 2e       	mov	r14, r22
     524:	f7 2e       	mov	r15, r23
     526:	08 2f       	mov	r16, r24
     528:	19 2f       	mov	r17, r25
     52a:	29 81       	ldd	r18, Y+1	; 0x01
     52c:	3a 81       	ldd	r19, Y+2	; 0x02
     52e:	4b 81       	ldd	r20, Y+3	; 0x03
     530:	5c 81       	ldd	r21, Y+4	; 0x04
     532:	64 2d       	mov	r22, r4
     534:	75 2d       	mov	r23, r5
     536:	86 2d       	mov	r24, r6
     538:	97 2d       	mov	r25, r7
     53a:	1d d5       	rcall	.+2618   	; 0xf76 <__adddi3>
     53c:	29 83       	std	Y+1, r18	; 0x01
     53e:	43 2e       	mov	r4, r19
     540:	54 2e       	mov	r5, r20
     542:	65 2e       	mov	r6, r21
     544:	76 2e       	mov	r7, r22
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	45 2d       	mov	r20, r5
     54e:	56 2d       	mov	r21, r6
     550:	67 2d       	mov	r22, r7
     552:	02 e0       	ldi	r16, 0x02	; 2
     554:	e3 d4       	rcall	.+2502   	; 0xf1c <__ashldi3>
     556:	a2 2e       	mov	r10, r18
     558:	b3 2e       	mov	r11, r19
     55a:	c4 2e       	mov	r12, r20
     55c:	d5 2e       	mov	r13, r21
     55e:	e6 2e       	mov	r14, r22
     560:	f7 2e       	mov	r15, r23
     562:	08 2f       	mov	r16, r24
     564:	19 2f       	mov	r17, r25
     566:	29 81       	ldd	r18, Y+1	; 0x01
     568:	34 2d       	mov	r19, r4
     56a:	45 2d       	mov	r20, r5
     56c:	56 2d       	mov	r21, r6
     56e:	67 2d       	mov	r22, r7
     570:	7a 81       	ldd	r23, Y+2	; 0x02
     572:	8b 81       	ldd	r24, Y+3	; 0x03
     574:	9c 81       	ldd	r25, Y+4	; 0x04
     576:	ff d4       	rcall	.+2558   	; 0xf76 <__adddi3>
     578:	a2 2e       	mov	r10, r18
     57a:	b3 2e       	mov	r11, r19
     57c:	c4 2e       	mov	r12, r20
     57e:	d5 2e       	mov	r13, r21
     580:	e6 2e       	mov	r14, r22
     582:	f7 2e       	mov	r15, r23
     584:	08 2f       	mov	r16, r24
     586:	19 2f       	mov	r17, r25
     588:	22 2d       	mov	r18, r2
     58a:	33 2d       	mov	r19, r3
     58c:	48 2d       	mov	r20, r8
     58e:	59 2d       	mov	r21, r9
     590:	6a 2f       	mov	r22, r26
     592:	7b 2f       	mov	r23, r27
     594:	8e 81       	ldd	r24, Y+6	; 0x06
     596:	9f 81       	ldd	r25, Y+7	; 0x07
     598:	ee d4       	rcall	.+2524   	; 0xf76 <__adddi3>
	pwm = pwm >> N_CTRL;
     59a:	07 e0       	ldi	r16, 0x07	; 7
     59c:	ce d4       	rcall	.+2460   	; 0xf3a <__ashrdi3>
	
	pwm = pwm >> N_CTRL;	// Convert to regular number
     59e:	cd d4       	rcall	.+2458   	; 0xf3a <__ashrdi3>
     5a0:	b2 2e       	mov	r11, r18
     5a2:	a3 2f       	mov	r26, r19
     5a4:	c4 2e       	mov	r12, r20
     5a6:	d5 2e       	mov	r13, r21
     5a8:	e6 2e       	mov	r14, r22
     5aa:	f7 2e       	mov	r15, r23
     5ac:	08 2f       	mov	r16, r24
     5ae:	19 2f       	mov	r17, r25
     5b0:	2f 3f       	cpi	r18, 0xFF	; 255
     5b2:	31 05       	cpc	r19, r1
     5b4:	41 05       	cpc	r20, r1
     5b6:	51 05       	cpc	r21, r1
     5b8:	61 05       	cpc	r22, r1
     5ba:	71 05       	cpc	r23, r1
     5bc:	81 05       	cpc	r24, r1
     5be:	91 05       	cpc	r25, r1
     5c0:	51 f0       	breq	.+20     	; 0x5d6 <__stack+0xd7>
     5c2:	4c f0       	brlt	.+18     	; 0x5d6 <__stack+0xd7>
     5c4:	bb 24       	eor	r11, r11
     5c6:	ba 94       	dec	r11
     5c8:	a0 e0       	ldi	r26, 0x00	; 0
     5ca:	c1 2c       	mov	r12, r1
     5cc:	d1 2c       	mov	r13, r1
     5ce:	e1 2c       	mov	r14, r1
     5d0:	f1 2c       	mov	r15, r1
     5d2:	00 e0       	ldi	r16, 0x00	; 0
     5d4:	10 e0       	ldi	r17, 0x00	; 0
     5d6:	bb 2d       	mov	r27, r11
     5d8:	aa 2e       	mov	r10, r26
     5da:	2b 2d       	mov	r18, r11
     5dc:	3a 2f       	mov	r19, r26
     5de:	4c 2d       	mov	r20, r12
     5e0:	5d 2d       	mov	r21, r13
     5e2:	6e 2d       	mov	r22, r14
     5e4:	7f 2d       	mov	r23, r15
     5e6:	80 2f       	mov	r24, r16
     5e8:	91 2f       	mov	r25, r17
     5ea:	a0 e0       	ldi	r26, 0x00	; 0
     5ec:	cd d4       	rcall	.+2458   	; 0xf88 <__cmpdi2_s8>
     5ee:	14 f4       	brge	.+4      	; 0x5f4 <__stack+0xf5>
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	a1 2c       	mov	r10, r1
	}
	else if(pwm > 255){
		pwm = 255;
	}
	
	shared_ptr->pwm = (short)pwm;
     5f4:	b2 83       	std	Z+2, r27	; 0x02
     5f6:	a3 82       	std	Z+3, r10	; 0x03
	OCR0A = pwm;
     5f8:	b7 bd       	out	0x27, r27	; 39
	OCR0B = pwm;
     5fa:	b8 bd       	out	0x28, r27	; 40
	
}
     5fc:	27 96       	adiw	r28, 0x07	; 7
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	ff 90       	pop	r15
     612:	ef 90       	pop	r14
     614:	df 90       	pop	r13
     616:	cf 90       	pop	r12
     618:	bf 90       	pop	r11
     61a:	af 90       	pop	r10
     61c:	9f 90       	pop	r9
     61e:	8f 90       	pop	r8
     620:	7f 90       	pop	r7
     622:	6f 90       	pop	r6
     624:	5f 90       	pop	r5
     626:	4f 90       	pop	r4
     628:	3f 90       	pop	r3
     62a:	2f 90       	pop	r2
     62c:	08 95       	ret

0000062e <__vector_4>:
/*
 * Interrupt Service Routine for the encoder mounted on the motor.
 * Calculates the difference in clk-value between current and previous interrupt.
 * Global bool newMeasurement flags that a new measurement have been recieved.
*/
ISR(PCINT1_vect){
     62e:	1f 92       	push	r1
     630:	0f 92       	push	r0
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	0f 92       	push	r0
     636:	11 24       	eor	r1, r1
     638:	2f 93       	push	r18
     63a:	3f 93       	push	r19
     63c:	4f 93       	push	r20
     63e:	5f 93       	push	r21
     640:	8f 93       	push	r24
     642:	9f 93       	push	r25
	cli();
     644:	f8 94       	cli
	
	clk_curr = TCNT1;
     646:	80 91 84 00 	lds	r24, 0x0084
     64a:	90 91 85 00 	lds	r25, 0x0085
     64e:	90 93 29 01 	sts	0x0129, r25
     652:	80 93 28 01 	sts	0x0128, r24
extern unsigned short clk_prev;
extern unsigned short clk_elapsed;

static void calc_clk_elapsed(){
	
	if(clk_curr < clk_prev){
     656:	20 91 20 01 	lds	r18, 0x0120
     65a:	30 91 21 01 	lds	r19, 0x0121
     65e:	82 17       	cp	r24, r18
     660:	93 07       	cpc	r25, r19
     662:	48 f4       	brcc	.+18     	; 0x676 <__vector_4+0x48>
		unsigned short temp = 0xFFFF;
		temp = temp - clk_prev;
     664:	20 95       	com	r18
     666:	30 95       	com	r19
		temp = temp + clk_curr;
     668:	28 0f       	add	r18, r24
     66a:	39 1f       	adc	r19, r25
		clk_elapsed = temp;
     66c:	30 93 2c 01 	sts	0x012C, r19
     670:	20 93 2b 01 	sts	0x012B, r18
     674:	07 c0       	rjmp	.+14     	; 0x684 <__vector_4+0x56>
	}
	else{
		clk_elapsed = clk_curr - clk_prev;
     676:	ac 01       	movw	r20, r24
     678:	42 1b       	sub	r20, r18
     67a:	53 0b       	sbc	r21, r19
     67c:	50 93 2c 01 	sts	0x012C, r21
     680:	40 93 2b 01 	sts	0x012B, r20
		
	}
	clk_prev = clk_curr;
     684:	90 93 21 01 	sts	0x0121, r25
     688:	80 93 20 01 	sts	0x0120, r24
ISR(PCINT1_vect){
	cli();
	
	clk_curr = TCNT1;
	calc_clk_elapsed();
	newMeasurement = true;
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	80 93 2a 01 	sts	0x012A, r24
	
	sei();
     692:	78 94       	sei
     694:	9f 91       	pop	r25
     696:	8f 91       	pop	r24
     698:	5f 91       	pop	r21
     69a:	4f 91       	pop	r20
     69c:	3f 91       	pop	r19
     69e:	2f 91       	pop	r18
     6a0:	0f 90       	pop	r0
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	0f 90       	pop	r0
     6a6:	1f 90       	pop	r1
     6a8:	18 95       	reti

000006aa <USART_transmit>:
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with "%"
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	00 d0       	rcall	.+0      	; 0x6b0 <USART_transmit+0x6>
     6b0:	00 d0       	rcall	.+0      	; 0x6b2 <USART_transmit+0x8>
     6b2:	00 d0       	rcall	.+0      	; 0x6b4 <USART_transmit+0xa>
     6b4:	cd b7       	in	r28, 0x3d	; 61
     6b6:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
	char buf[6];
	
	strcpy(buf,"%%%%%");
     6b8:	26 e0       	ldi	r18, 0x06	; 6
     6ba:	e0 e0       	ldi	r30, 0x00	; 0
     6bc:	f1 e0       	ldi	r31, 0x01	; 1
     6be:	de 01       	movw	r26, r28
     6c0:	11 96       	adiw	r26, 0x01	; 1
     6c2:	01 90       	ld	r0, Z+
     6c4:	0d 92       	st	X+, r0
     6c6:	2a 95       	dec	r18
     6c8:	e1 f7       	brne	.-8      	; 0x6c2 <USART_transmit+0x18>
	strncpy(buf, data, 5);
     6ca:	45 e0       	ldi	r20, 0x05	; 5
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	bc 01       	movw	r22, r24
     6d0:	ce 01       	movw	r24, r28
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	96 d4       	rcall	.+2348   	; 0x1002 <strncpy>
     6d6:	be 01       	movw	r22, r28
     6d8:	6f 5f       	subi	r22, 0xFF	; 255
     6da:	7f 4f       	sbci	r23, 0xFF	; 255
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with "%"
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
     6dc:	9e 01       	movw	r18, r28
     6de:	2a 5f       	subi	r18, 0xFA	; 250
     6e0:	3f 4f       	sbci	r19, 0xFF	; 255
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
     6e2:	e0 ec       	ldi	r30, 0xC0	; 192
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = buf[i];
     6e6:	86 ec       	ldi	r24, 0xC6	; 198
     6e8:	90 e0       	ldi	r25, 0x00	; 0
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
     6ea:	40 81       	ld	r20, Z
     6ec:	45 ff       	sbrs	r20, 5
     6ee:	fd cf       	rjmp	.-6      	; 0x6ea <USART_transmit+0x40>
		UDR0 = buf[i];
     6f0:	db 01       	movw	r26, r22
     6f2:	4d 91       	ld	r20, X+
     6f4:	bd 01       	movw	r22, r26
     6f6:	dc 01       	movw	r26, r24
     6f8:	4c 93       	st	X, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6fa:	a1 ee       	ldi	r26, 0xE1	; 225
     6fc:	b4 e0       	ldi	r27, 0x04	; 4
     6fe:	11 97       	sbiw	r26, 0x01	; 1
     700:	f1 f7       	brne	.-4      	; 0x6fe <USART_transmit+0x54>
     702:	00 c0       	rjmp	.+0      	; 0x704 <USART_transmit+0x5a>
     704:	00 00       	nop
	char buf[6];
	
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
     706:	62 17       	cp	r22, r18
     708:	73 07       	cpc	r23, r19
     70a:	79 f7       	brne	.-34     	; 0x6ea <USART_transmit+0x40>
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = buf[i];
		_delay_ms(5);
	}
}
     70c:	26 96       	adiw	r28, 0x06	; 6
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <__vector_18>:
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
     71e:	1f 92       	push	r1
     720:	0f 92       	push	r0
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	0f 92       	push	r0
     726:	11 24       	eor	r1, r1
     728:	2f 93       	push	r18
     72a:	8f 93       	push	r24
     72c:	9f 93       	push	r25
     72e:	af 93       	push	r26
     730:	bf 93       	push	r27
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	ef 93       	push	r30
     738:	ff 93       	push	r31
	cli();
     73a:	f8 94       	cli
	PORTC &= ~(1 << PC2);
     73c:	42 98       	cbi	0x08, 2	; 8
	PORTC |= (1 << PC1);
     73e:	41 9a       	sbi	0x08, 1	; 8
     740:	a2 e2       	ldi	r26, 0x22	; 34
     742:	b1 e0       	ldi	r27, 0x01	; 1
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
     744:	87 e2       	ldi	r24, 0x27	; 39
     746:	91 e0       	ldi	r25, 0x01	; 1
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
     748:	e0 ec       	ldi	r30, 0xC0	; 192
     74a:	f0 e0       	ldi	r31, 0x00	; 0
		recieved_bytes[i] = UDR0;
     74c:	c6 ec       	ldi	r28, 0xC6	; 198
     74e:	d0 e0       	ldi	r29, 0x00	; 0
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
     750:	20 81       	ld	r18, Z
     752:	22 23       	and	r18, r18
     754:	ec f7       	brge	.-6      	; 0x750 <__vector_18+0x32>
		recieved_bytes[i] = UDR0;
     756:	28 81       	ld	r18, Y
     758:	2d 93       	st	X+, r18
*/
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
     75a:	a8 17       	cp	r26, r24
     75c:	b9 07       	cpc	r27, r25
     75e:	c1 f7       	brne	.-16     	; 0x750 <__vector_18+0x32>
		while( !(UCSR0A & (1 << RXC0)) );
		recieved_bytes[i] = UDR0;
	}
	PORTC &= ~(1 << PC1);
     760:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (1 << PC2);
     762:	42 9a       	sbi	0x08, 2	; 8
	newCommand = true;
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	80 93 27 01 	sts	0x0127, r24
	sei();
     76a:	78 94       	sei
}
     76c:	ff 91       	pop	r31
     76e:	ef 91       	pop	r30
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	bf 91       	pop	r27
     776:	af 91       	pop	r26
     778:	9f 91       	pop	r25
     77a:	8f 91       	pop	r24
     77c:	2f 91       	pop	r18
     77e:	0f 90       	pop	r0
     780:	0f be       	out	0x3f, r0	; 63
     782:	0f 90       	pop	r0
     784:	1f 90       	pop	r1
     786:	18 95       	reti

00000788 <setup_registers>:
 *	PC1, PD5-PD6
 *	See details in datasheet pg. 99-100
*/
static void setup_DDR(){

	DDRB |= 0x00;
     788:	84 b1       	in	r24, 0x04	; 4
     78a:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC2) | (1 << PC1) | (1 << PC0);
     78c:	87 b1       	in	r24, 0x07	; 7
     78e:	87 60       	ori	r24, 0x07	; 7
     790:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PD6) | (1 << PD5) | (1 << PD1);
     792:	8a b1       	in	r24, 0x0a	; 10
     794:	82 66       	ori	r24, 0x62	; 98
     796:	8a b9       	out	0x0a, r24	; 10
 *	PWM-mode: fast PWM, inverted, no prescaling.
 *	See details in datasheet pg. 113-117
*/
static void setup_PWM(){

	TCCR0A = (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0) | (1 << WGM01) | (1 << WGM00);
     798:	83 ef       	ldi	r24, 0xF3	; 243
     79a:	84 bd       	out	0x24, r24	; 36
	TCCR0B =  (0 << CS02) | (0 << CS01) | (1 << CS00);
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	85 bd       	out	0x25, r24	; 37
 * 	Baud rate according to #define in shared.h
 * 	See details in datasheet pg. 201-205
*/
static void setup_USART(){

	DDRD |= (1 << PD1);
     7a0:	51 9a       	sbi	0x0a, 1	; 10
	unsigned int ubrr = (((F_CPU / (BAUD * 16UL))) - 1 );

	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
     7a2:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
     7a6:	89 e1       	ldi	r24, 0x19	; 25
     7a8:	80 93 c4 00 	sts	0x00C4, r24

	// Enable reciever for interrupt and transmitter
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0);
     7ac:	88 e9       	ldi	r24, 0x98	; 152
     7ae:	80 93 c1 00 	sts	0x00C1, r24

	// Set frame format: 8 data, 2 stop, 0 parity
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     7b2:	86 e0       	ldi	r24, 0x06	; 6
     7b4:	80 93 c2 00 	sts	0x00C2, r24
 * 	See details in datasheet pg. 81-82
*/
static void setup_interrupts(){

	// Enables possibility of interrupts on pins 14-8
	PCICR = (1 << PCIE1);
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	80 93 68 00 	sts	0x0068, r24
	// Enables interrupts on pin PC4-PC5
	PCMSK1 = (1 << PCINT13) | (1 << PCINT12);
     7be:	80 e3       	ldi	r24, 0x30	; 48
     7c0:	80 93 6c 00 	sts	0x006C, r24
/*	
 *	Sets up clk/8 prescaling on 16-bit timer OC1
 *	See details in datasheet pg. 141-147
*/	
static void setup_speed_clock(){
	TCCR1B |= (1 << CS11);
     7c4:	e1 e8       	ldi	r30, 0x81	; 129
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	82 60       	ori	r24, 0x02	; 2
     7cc:	80 83       	st	Z, r24
 *		TIFR1 |= (1 << TOV0);
 * Disabled digital input on pin PC3 for less power usage
 * See details in datasheet pg. 268-272
 */
static void setup_ADC(){
	ADMUX |= (1 << REFS0) | (1 << MUX1) | (1 << MUX0);
     7ce:	ec e7       	ldi	r30, 0x7C	; 124
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
     7d4:	83 64       	ori	r24, 0x43	; 67
     7d6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADATE);
     7d8:	ea e7       	ldi	r30, 0x7A	; 122
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 81       	ld	r24, Z
     7de:	80 6a       	ori	r24, 0xA0	; 160
     7e0:	80 83       	st	Z, r24
	ADCSRB |= (1 << ADTS2) | (1 << ADTS1);
     7e2:	eb e7       	ldi	r30, 0x7B	; 123
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	80 81       	ld	r24, Z
     7e8:	86 60       	ori	r24, 0x06	; 6
     7ea:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC3D);
     7ec:	ee e7       	ldi	r30, 0x7E	; 126
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	80 81       	ld	r24, Z
     7f2:	88 60       	ori	r24, 0x08	; 8
     7f4:	80 83       	st	Z, r24
     7f6:	08 95       	ret

000007f8 <main>:
char recieved_bytes[5];
unsigned short clk_curr;
unsigned short clk_prev;
unsigned short clk_elapsed;

int main(void){
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
     800:	cc 51       	subi	r28, 0x1C	; 28
     802:	d2 40       	sbci	r29, 0x02	; 2
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	de bf       	out	0x3e, r29	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	cd bf       	out	0x3d, r28	; 61
	Shared_Data shared_data;
	Shared_Data* shared_ptr = &shared_data;
	init_shared_data(shared_ptr);
     80e:	ce 01       	movw	r24, r28
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	36 dc       	rcall	.-1940   	; 0x80 <init_shared_data>
	
	newCommand = false;
     814:	10 92 27 01 	sts	0x0127, r1
	newMeasurement = false;
     818:	10 92 2a 01 	sts	0x012A, r1
	clk_curr = 0;
     81c:	10 92 29 01 	sts	0x0129, r1
     820:	10 92 28 01 	sts	0x0128, r1
	clk_prev = 0;
     824:	10 92 21 01 	sts	0x0121, r1
     828:	10 92 20 01 	sts	0x0120, r1
	clk_elapsed = 0;
     82c:	10 92 2c 01 	sts	0x012C, r1
     830:	10 92 2b 01 	sts	0x012B, r1
	shared_ptr->speed_set = 110;
     834:	8e e6       	ldi	r24, 0x6E	; 110
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	9a 83       	std	Y+2, r25	; 0x02
     83a:	89 83       	std	Y+1, r24	; 0x01
	
	setup_registers();
     83c:	a5 df       	rcall	.-182    	; 0x788 <setup_registers>
	sei();
     83e:	78 94       	sei
	
	while(1){
		
		if(newCommand){
			switch(*recieved_bytes){
     840:	02 e2       	ldi	r16, 0x22	; 34
     842:	11 e0       	ldi	r17, 0x01	; 1
	setup_registers();
	sei();
	
	while(1){
		
		if(newCommand){
     844:	80 91 27 01 	lds	r24, 0x0127
     848:	88 23       	and	r24, r24
     84a:	b1 f1       	breq	.+108    	; 0x8b8 <main+0xc0>
			switch(*recieved_bytes){
     84c:	f8 01       	movw	r30, r16
     84e:	80 81       	ld	r24, Z
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	fc 01       	movw	r30, r24
     854:	f0 97       	sbiw	r30, 0x30	; 48
     856:	ea 30       	cpi	r30, 0x0A	; 10
     858:	f1 05       	cpc	r31, r1
     85a:	58 f5       	brcc	.+86     	; 0x8b2 <main+0xba>
     85c:	e6 5e       	subi	r30, 0xE6	; 230
     85e:	ff 4f       	sbci	r31, 0xFF	; 255
     860:	09 94       	ijmp
				case '0':
					transmit_0(shared_ptr);
     862:	ce 01       	movw	r24, r28
     864:	01 96       	adiw	r24, 0x01	; 1
     866:	38 d0       	rcall	.+112    	; 0x8d8 <transmit_0>
					break;
     868:	25 c0       	rjmp	.+74     	; 0x8b4 <main+0xbc>
				case '1':
					transmit_1(shared_ptr);
     86a:	ce 01       	movw	r24, r28
     86c:	01 96       	adiw	r24, 0x01	; 1
     86e:	69 d0       	rcall	.+210    	; 0x942 <transmit_1>
					break;
     870:	21 c0       	rjmp	.+66     	; 0x8b4 <main+0xbc>
				case '2':
					transmit_2(shared_ptr);
     872:	ce 01       	movw	r24, r28
     874:	01 96       	adiw	r24, 0x01	; 1
     876:	a6 d0       	rcall	.+332    	; 0x9c4 <transmit_2>
					break;
     878:	1d c0       	rjmp	.+58     	; 0x8b4 <main+0xbc>
				case '3':
					transmit_3(shared_ptr);
     87a:	ce 01       	movw	r24, r28
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	d3 d0       	rcall	.+422    	; 0xa26 <transmit_3>
					break;
     880:	19 c0       	rjmp	.+50     	; 0x8b4 <main+0xbc>
				case '4':
					transmit_4(shared_ptr);
     882:	ce 01       	movw	r24, r28
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	fc d0       	rcall	.+504    	; 0xa80 <transmit_4>
					break;
     888:	15 c0       	rjmp	.+42     	; 0x8b4 <main+0xbc>
				case '5':
					transmit_5(shared_ptr);
     88a:	ce 01       	movw	r24, r28
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	2d d1       	rcall	.+602    	; 0xaea <transmit_5>
					break;
     890:	11 c0       	rjmp	.+34     	; 0x8b4 <main+0xbc>
				case '6':
					transmit_6(shared_ptr);
     892:	ce 01       	movw	r24, r28
     894:	01 96       	adiw	r24, 0x01	; 1
     896:	5f d1       	rcall	.+702    	; 0xb56 <transmit_6>
					break;
     898:	0d c0       	rjmp	.+26     	; 0x8b4 <main+0xbc>
				case '7':
					transmit_7(shared_ptr);
     89a:	ce 01       	movw	r24, r28
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	96 d1       	rcall	.+812    	; 0xbcc <transmit_7>
					break;
     8a0:	09 c0       	rjmp	.+18     	; 0x8b4 <main+0xbc>
				case '8':
					transmit_8(shared_ptr);
     8a2:	ce 01       	movw	r24, r28
     8a4:	01 96       	adiw	r24, 0x01	; 1
     8a6:	cf d1       	rcall	.+926    	; 0xc46 <transmit_8>
					break;
     8a8:	05 c0       	rjmp	.+10     	; 0x8b4 <main+0xbc>
				case '9':
					transmit_9(shared_ptr);
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	0c d2       	rcall	.+1048   	; 0xcc8 <transmit_9>
					break;
     8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <main+0xbc>
				default:
					transmit_empty();
     8b2:	43 d2       	rcall	.+1158   	; 0xd3a <transmit_empty>
			}
			newCommand = false;
     8b4:	10 92 27 01 	sts	0x0127, r1
		}
		if(newMeasurement){
     8b8:	80 91 2a 01 	lds	r24, 0x012A
     8bc:	88 23       	and	r24, r24
     8be:	11 f2       	breq	.-124    	; 0x844 <main+0x4c>
			calc_latest_rpm(shared_ptr);
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	10 dc       	rcall	.-2016   	; 0xe6 <calc_latest_rpm>
			calc_avg_rpm(shared_ptr);
     8c6:	ce 01       	movw	r24, r28
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	d7 dc       	rcall	.-1618   	; 0x27a <calc_avg_rpm>
			control(shared_ptr);
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	48 dd       	rcall	.-1392   	; 0x362 <control>
			newMeasurement = false;
     8d2:	10 92 2a 01 	sts	0x012A, r1
     8d6:	b6 cf       	rjmp	.-148    	; 0x844 <main+0x4c>

000008d8 <transmit_0>:
extern bool newMeasurement;
extern unsigned short clk_curr;
extern char recieved_bytes[5];
extern unsigned short clk_elapsed;

void transmit_0(Shared_Data* shared_ptr){
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	00 d0       	rcall	.+0      	; 0x8e2 <transmit_0+0xa>
     8e2:	00 d0       	rcall	.+0      	; 0x8e4 <transmit_0+0xc>
     8e4:	00 d0       	rcall	.+0      	; 0x8e6 <transmit_0+0xe>
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     8ea:	25 e0       	ldi	r18, 0x05	; 5
     8ec:	e6 e0       	ldi	r30, 0x06	; 6
     8ee:	f1 e0       	ldi	r31, 0x01	; 1
     8f0:	8e 01       	movw	r16, r28
     8f2:	0f 5f       	subi	r16, 0xFF	; 255
     8f4:	1f 4f       	sbci	r17, 0xFF	; 255
     8f6:	d8 01       	movw	r26, r16
     8f8:	01 90       	ld	r0, Z+
     8fa:	0d 92       	st	X+, r0
     8fc:	2a 95       	dec	r18
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <transmit_0+0x20>
	snprintf(temp, 6, "%hd", shared_ptr->fine_tuning);
     900:	fc 01       	movw	r30, r24
     902:	27 81       	ldd	r18, Z+7	; 0x07
     904:	2f 93       	push	r18
     906:	86 81       	ldd	r24, Z+6	; 0x06
     908:	8f 93       	push	r24
     90a:	8c e0       	ldi	r24, 0x0C	; 12
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	9f 93       	push	r25
     910:	8f 93       	push	r24
     912:	1f 92       	push	r1
     914:	86 e0       	ldi	r24, 0x06	; 6
     916:	8f 93       	push	r24
     918:	1f 93       	push	r17
     91a:	0f 93       	push	r16
     91c:	89 d3       	rcall	.+1810   	; 0x1030 <snprintf>
	USART_transmit(temp);
     91e:	c8 01       	movw	r24, r16
     920:	c4 de       	rcall	.-632    	; 0x6aa <USART_transmit>
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
}
     92c:	26 96       	adiw	r28, 0x06	; 6
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	08 95       	ret

00000942 <transmit_1>:

void transmit_1(Shared_Data* shared_ptr){
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	00 d0       	rcall	.+0      	; 0x94c <transmit_1+0xa>
     94c:	00 d0       	rcall	.+0      	; 0x94e <transmit_1+0xc>
     94e:	00 d0       	rcall	.+0      	; 0x950 <transmit_1+0xe>
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     954:	25 e0       	ldi	r18, 0x05	; 5
     956:	e6 e0       	ldi	r30, 0x06	; 6
     958:	f1 e0       	ldi	r31, 0x01	; 1
     95a:	8e 01       	movw	r16, r28
     95c:	0f 5f       	subi	r16, 0xFF	; 255
     95e:	1f 4f       	sbci	r17, 0xFF	; 255
     960:	d8 01       	movw	r26, r16
     962:	01 90       	ld	r0, Z+
     964:	0d 92       	st	X+, r0
     966:	2a 95       	dec	r18
     968:	e1 f7       	brne	.-8      	; 0x962 <transmit_1+0x20>
	snprintf(temp, 6, "%lld", shared_ptr->integral);
     96a:	fc 01       	movw	r30, r24
     96c:	27 85       	ldd	r18, Z+15	; 0x0f
     96e:	2f 93       	push	r18
     970:	26 85       	ldd	r18, Z+14	; 0x0e
     972:	2f 93       	push	r18
     974:	25 85       	ldd	r18, Z+13	; 0x0d
     976:	2f 93       	push	r18
     978:	24 85       	ldd	r18, Z+12	; 0x0c
     97a:	2f 93       	push	r18
     97c:	23 85       	ldd	r18, Z+11	; 0x0b
     97e:	2f 93       	push	r18
     980:	22 85       	ldd	r18, Z+10	; 0x0a
     982:	2f 93       	push	r18
     984:	21 85       	ldd	r18, Z+9	; 0x09
     986:	2f 93       	push	r18
     988:	80 85       	ldd	r24, Z+8	; 0x08
     98a:	8f 93       	push	r24
     98c:	80 e1       	ldi	r24, 0x10	; 16
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	9f 93       	push	r25
     992:	8f 93       	push	r24
     994:	1f 92       	push	r1
     996:	86 e0       	ldi	r24, 0x06	; 6
     998:	8f 93       	push	r24
     99a:	1f 93       	push	r17
     99c:	0f 93       	push	r16
     99e:	48 d3       	rcall	.+1680   	; 0x1030 <snprintf>
	USART_transmit(temp);
     9a0:	c8 01       	movw	r24, r16
     9a2:	83 de       	rcall	.-762    	; 0x6aa <USART_transmit>
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	de bf       	out	0x3e, r29	; 62
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	cd bf       	out	0x3d, r28	; 61
}
     9ae:	26 96       	adiw	r28, 0x06	; 6
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	08 95       	ret

000009c4 <transmit_2>:

/* Sets a new set value for the speed. Range: 0-120. Transmits an empty message. */
void transmit_2(Shared_Data* shared_ptr){
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	2a 97       	sbiw	r28, 0x0a	; 10
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	8c 01       	movw	r16, r24
	char temp[6];
	char sub_str[4];
	int res;
	strncpy(temp, "     ", 5);
     9de:	85 e0       	ldi	r24, 0x05	; 5
     9e0:	e6 e0       	ldi	r30, 0x06	; 6
     9e2:	f1 e0       	ldi	r31, 0x01	; 1
     9e4:	de 01       	movw	r26, r28
     9e6:	11 96       	adiw	r26, 0x01	; 1
     9e8:	01 90       	ld	r0, Z+
     9ea:	0d 92       	st	X+, r0
     9ec:	8a 95       	dec	r24
     9ee:	e1 f7       	brne	.-8      	; 0x9e8 <transmit_2+0x24>
	strncpy(sub_str, recieved_bytes + 1, 3);
     9f0:	43 e0       	ldi	r20, 0x03	; 3
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	63 e2       	ldi	r22, 0x23	; 35
     9f6:	71 e0       	ldi	r23, 0x01	; 1
     9f8:	ce 01       	movw	r24, r28
     9fa:	07 96       	adiw	r24, 0x07	; 7
     9fc:	02 d3       	rcall	.+1540   	; 0x1002 <strncpy>
		
	res = atoi(sub_str);
     9fe:	ce 01       	movw	r24, r28
     a00:	07 96       	adiw	r24, 0x07	; 7
     a02:	e2 d2       	rcall	.+1476   	; 0xfc8 <atoi>
	shared_ptr->speed_set = res;
     a04:	f8 01       	movw	r30, r16
     a06:	91 83       	std	Z+1, r25	; 0x01
     a08:	80 83       	st	Z, r24
	USART_transmit(temp);
     a0a:	ce 01       	movw	r24, r28
     a0c:	01 96       	adiw	r24, 0x01	; 1
     a0e:	4d de       	rcall	.-870    	; 0x6aa <USART_transmit>

}
     a10:	2a 96       	adiw	r28, 0x0a	; 10
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	de bf       	out	0x3e, r29	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	cd bf       	out	0x3d, r28	; 61
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	08 95       	ret

00000a26 <transmit_3>:

/* Transmits the set speed. */
void transmit_3(Shared_Data* shared_ptr){
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	00 d0       	rcall	.+0      	; 0xa30 <transmit_3+0xa>
     a30:	00 d0       	rcall	.+0      	; 0xa32 <transmit_3+0xc>
     a32:	00 d0       	rcall	.+0      	; 0xa34 <transmit_3+0xe>
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	
	snprintf(temp, 6, "%hd",  shared_ptr->speed_set);
     a38:	fc 01       	movw	r30, r24
     a3a:	21 81       	ldd	r18, Z+1	; 0x01
     a3c:	2f 93       	push	r18
     a3e:	80 81       	ld	r24, Z
     a40:	8f 93       	push	r24
     a42:	8c e0       	ldi	r24, 0x0C	; 12
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	9f 93       	push	r25
     a48:	8f 93       	push	r24
     a4a:	1f 92       	push	r1
     a4c:	86 e0       	ldi	r24, 0x06	; 6
     a4e:	8f 93       	push	r24
     a50:	8e 01       	movw	r16, r28
     a52:	0f 5f       	subi	r16, 0xFF	; 255
     a54:	1f 4f       	sbci	r17, 0xFF	; 255
     a56:	1f 93       	push	r17
     a58:	0f 93       	push	r16
     a5a:	ea d2       	rcall	.+1492   	; 0x1030 <snprintf>
	USART_transmit(temp);
     a5c:	c8 01       	movw	r24, r16
     a5e:	25 de       	rcall	.-950    	; 0x6aa <USART_transmit>
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	f8 94       	cli
     a64:	de bf       	out	0x3e, r29	; 62
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	cd bf       	out	0x3d, r28	; 61
}
     a6a:	26 96       	adiw	r28, 0x06	; 6
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	cd bf       	out	0x3d, r28	; 61
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	08 95       	ret

00000a80 <transmit_4>:


void transmit_4(Shared_Data* shared_ptr){
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	00 d0       	rcall	.+0      	; 0xa8a <transmit_4+0xa>
     a8a:	00 d0       	rcall	.+0      	; 0xa8c <transmit_4+0xc>
     a8c:	00 d0       	rcall	.+0      	; 0xa8e <transmit_4+0xe>
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     a92:	25 e0       	ldi	r18, 0x05	; 5
     a94:	e6 e0       	ldi	r30, 0x06	; 6
     a96:	f1 e0       	ldi	r31, 0x01	; 1
     a98:	8e 01       	movw	r16, r28
     a9a:	0f 5f       	subi	r16, 0xFF	; 255
     a9c:	1f 4f       	sbci	r17, 0xFF	; 255
     a9e:	d8 01       	movw	r26, r16
     aa0:	01 90       	ld	r0, Z+
     aa2:	0d 92       	st	X+, r0
     aa4:	2a 95       	dec	r18
     aa6:	e1 f7       	brne	.-8      	; 0xaa0 <transmit_4+0x20>
	
	snprintf(temp, 6, "%d", shared_ptr->pwm);
     aa8:	fc 01       	movw	r30, r24
     aaa:	23 81       	ldd	r18, Z+3	; 0x03
     aac:	2f 93       	push	r18
     aae:	82 81       	ldd	r24, Z+2	; 0x02
     ab0:	8f 93       	push	r24
     ab2:	85 e1       	ldi	r24, 0x15	; 21
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	9f 93       	push	r25
     ab8:	8f 93       	push	r24
     aba:	1f 92       	push	r1
     abc:	86 e0       	ldi	r24, 0x06	; 6
     abe:	8f 93       	push	r24
     ac0:	1f 93       	push	r17
     ac2:	0f 93       	push	r16
     ac4:	b5 d2       	rcall	.+1386   	; 0x1030 <snprintf>
	USART_transmit(temp);
     ac6:	c8 01       	movw	r24, r16
     ac8:	f0 dd       	rcall	.-1056   	; 0x6aa <USART_transmit>
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	cd bf       	out	0x3d, r28	; 61
}
     ad4:	26 96       	adiw	r28, 0x06	; 6
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	f8 94       	cli
     ada:	de bf       	out	0x3e, r29	; 62
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	cd bf       	out	0x3d, r28	; 61
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	08 95       	ret

00000aea <transmit_5>:

void transmit_5(Shared_Data* shared_ptr){
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <transmit_5+0xa>
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <transmit_5+0xc>
     af6:	00 d0       	rcall	.+0      	; 0xaf8 <transmit_5+0xe>
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     afc:	85 e0       	ldi	r24, 0x05	; 5
     afe:	e6 e0       	ldi	r30, 0x06	; 6
     b00:	f1 e0       	ldi	r31, 0x01	; 1
     b02:	8e 01       	movw	r16, r28
     b04:	0f 5f       	subi	r16, 0xFF	; 255
     b06:	1f 4f       	sbci	r17, 0xFF	; 255
     b08:	d8 01       	movw	r26, r16
     b0a:	01 90       	ld	r0, Z+
     b0c:	0d 92       	st	X+, r0
     b0e:	8a 95       	dec	r24
     b10:	e1 f7       	brne	.-8      	; 0xb0a <transmit_5+0x20>

	snprintf(temp, 6, "%hu", clk_elapsed);
     b12:	80 91 2c 01 	lds	r24, 0x012C
     b16:	8f 93       	push	r24
     b18:	80 91 2b 01 	lds	r24, 0x012B
     b1c:	8f 93       	push	r24
     b1e:	88 e1       	ldi	r24, 0x18	; 24
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	9f 93       	push	r25
     b24:	8f 93       	push	r24
     b26:	1f 92       	push	r1
     b28:	86 e0       	ldi	r24, 0x06	; 6
     b2a:	8f 93       	push	r24
     b2c:	1f 93       	push	r17
     b2e:	0f 93       	push	r16
     b30:	7f d2       	rcall	.+1278   	; 0x1030 <snprintf>
	USART_transmit(temp);
     b32:	c8 01       	movw	r24, r16
     b34:	ba dd       	rcall	.-1164   	; 0x6aa <USART_transmit>
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	cd bf       	out	0x3d, r28	; 61
}
     b40:	26 96       	adiw	r28, 0x06	; 6
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	08 95       	ret

00000b56 <transmit_6>:

void transmit_6(Shared_Data* shared_ptr){
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <transmit_6+0xa>
     b60:	00 d0       	rcall	.+0      	; 0xb62 <transmit_6+0xc>
     b62:	00 d0       	rcall	.+0      	; 0xb64 <transmit_6+0xe>
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     b68:	25 e0       	ldi	r18, 0x05	; 5
     b6a:	e6 e0       	ldi	r30, 0x06	; 6
     b6c:	f1 e0       	ldi	r31, 0x01	; 1
     b6e:	8e 01       	movw	r16, r28
     b70:	0f 5f       	subi	r16, 0xFF	; 255
     b72:	1f 4f       	sbci	r17, 0xFF	; 255
     b74:	d8 01       	movw	r26, r16
     b76:	01 90       	ld	r0, Z+
     b78:	0d 92       	st	X+, r0
     b7a:	2a 95       	dec	r18
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <transmit_6+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->delta_time);
     b7e:	fc 01       	movw	r30, r24
     b80:	e8 5e       	subi	r30, 0xE8	; 232
     b82:	fd 4f       	sbci	r31, 0xFD	; 253
     b84:	83 81       	ldd	r24, Z+3	; 0x03
     b86:	8f 93       	push	r24
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	8f 93       	push	r24
     b8c:	81 81       	ldd	r24, Z+1	; 0x01
     b8e:	8f 93       	push	r24
     b90:	80 81       	ld	r24, Z
     b92:	8f 93       	push	r24
     b94:	8c e1       	ldi	r24, 0x1C	; 28
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	9f 93       	push	r25
     b9a:	8f 93       	push	r24
     b9c:	1f 92       	push	r1
     b9e:	86 e0       	ldi	r24, 0x06	; 6
     ba0:	8f 93       	push	r24
     ba2:	1f 93       	push	r17
     ba4:	0f 93       	push	r16
     ba6:	44 d2       	rcall	.+1160   	; 0x1030 <snprintf>
	USART_transmit(temp);
     ba8:	c8 01       	movw	r24, r16
     baa:	7f dd       	rcall	.-1282   	; 0x6aa <USART_transmit>
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
}
     bb6:	26 96       	adiw	r28, 0x06	; 6
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	1f 91       	pop	r17
     bc8:	0f 91       	pop	r16
     bca:	08 95       	ret

00000bcc <transmit_7>:

void transmit_7(Shared_Data* shared_ptr){
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <transmit_7+0xa>
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <transmit_7+0xc>
     bd8:	00 d0       	rcall	.+0      	; 0xbda <transmit_7+0xe>
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     bde:	25 e0       	ldi	r18, 0x05	; 5
     be0:	e6 e0       	ldi	r30, 0x06	; 6
     be2:	f1 e0       	ldi	r31, 0x01	; 1
     be4:	8e 01       	movw	r16, r28
     be6:	0f 5f       	subi	r16, 0xFF	; 255
     be8:	1f 4f       	sbci	r17, 0xFF	; 255
     bea:	d8 01       	movw	r26, r16
     bec:	01 90       	ld	r0, Z+
     bee:	0d 92       	st	X+, r0
     bf0:	2a 95       	dec	r18
     bf2:	e1 f7       	brne	.-8      	; 0xbec <transmit_7+0x20>
	snprintf(temp, 6, "%hd", (shared_ptr->error >> N));
     bf4:	fc 01       	movw	r30, r24
     bf6:	84 81       	ldd	r24, Z+4	; 0x04
     bf8:	95 81       	ldd	r25, Z+5	; 0x05
     bfa:	95 95       	asr	r25
     bfc:	87 95       	ror	r24
     bfe:	95 95       	asr	r25
     c00:	87 95       	ror	r24
     c02:	95 95       	asr	r25
     c04:	87 95       	ror	r24
     c06:	95 95       	asr	r25
     c08:	87 95       	ror	r24
     c0a:	9f 93       	push	r25
     c0c:	8f 93       	push	r24
     c0e:	8c e0       	ldi	r24, 0x0C	; 12
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	9f 93       	push	r25
     c14:	8f 93       	push	r24
     c16:	1f 92       	push	r1
     c18:	86 e0       	ldi	r24, 0x06	; 6
     c1a:	8f 93       	push	r24
     c1c:	1f 93       	push	r17
     c1e:	0f 93       	push	r16
     c20:	07 d2       	rcall	.+1038   	; 0x1030 <snprintf>
	USART_transmit(temp);
     c22:	c8 01       	movw	r24, r16
     c24:	42 dd       	rcall	.-1404   	; 0x6aa <USART_transmit>
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
}
     c30:	26 96       	adiw	r28, 0x06	; 6
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	08 95       	ret

00000c46 <transmit_8>:

void transmit_8(Shared_Data* shared_ptr){
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <transmit_8+0xa>
     c50:	00 d0       	rcall	.+0      	; 0xc52 <transmit_8+0xc>
     c52:	00 d0       	rcall	.+0      	; 0xc54 <transmit_8+0xe>
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     c58:	25 e0       	ldi	r18, 0x05	; 5
     c5a:	e6 e0       	ldi	r30, 0x06	; 6
     c5c:	f1 e0       	ldi	r31, 0x01	; 1
     c5e:	8e 01       	movw	r16, r28
     c60:	0f 5f       	subi	r16, 0xFF	; 255
     c62:	1f 4f       	sbci	r17, 0xFF	; 255
     c64:	d8 01       	movw	r26, r16
     c66:	01 90       	ld	r0, Z+
     c68:	0d 92       	st	X+, r0
     c6a:	2a 95       	dec	r18
     c6c:	e1 f7       	brne	.-8      	; 0xc66 <transmit_8+0x20>
	snprintf(temp, 6, "%lu", (shared_ptr->rpm_avg >> N));
     c6e:	fc 01       	movw	r30, r24
     c70:	44 89       	ldd	r20, Z+20	; 0x14
     c72:	55 89       	ldd	r21, Z+21	; 0x15
     c74:	66 89       	ldd	r22, Z+22	; 0x16
     c76:	77 89       	ldd	r23, Z+23	; 0x17
     c78:	68 94       	set
     c7a:	13 f8       	bld	r1, 3
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	16 94       	lsr	r1
     c86:	d1 f7       	brne	.-12     	; 0xc7c <transmit_8+0x36>
     c88:	7f 93       	push	r23
     c8a:	6f 93       	push	r22
     c8c:	5f 93       	push	r21
     c8e:	4f 93       	push	r20
     c90:	8c e1       	ldi	r24, 0x1C	; 28
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	9f 93       	push	r25
     c96:	8f 93       	push	r24
     c98:	1f 92       	push	r1
     c9a:	86 e0       	ldi	r24, 0x06	; 6
     c9c:	8f 93       	push	r24
     c9e:	1f 93       	push	r17
     ca0:	0f 93       	push	r16
     ca2:	c6 d1       	rcall	.+908    	; 0x1030 <snprintf>
	USART_transmit(temp);
     ca4:	c8 01       	movw	r24, r16
     ca6:	01 dd       	rcall	.-1534   	; 0x6aa <USART_transmit>
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
}
     cb2:	26 96       	adiw	r28, 0x06	; 6
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	08 95       	ret

00000cc8 <transmit_9>:

void transmit_9(Shared_Data* shared_ptr){
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <transmit_9+0xa>
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <transmit_9+0xc>
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <transmit_9+0xe>
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     cda:	25 e0       	ldi	r18, 0x05	; 5
     cdc:	e6 e0       	ldi	r30, 0x06	; 6
     cde:	f1 e0       	ldi	r31, 0x01	; 1
     ce0:	8e 01       	movw	r16, r28
     ce2:	0f 5f       	subi	r16, 0xFF	; 255
     ce4:	1f 4f       	sbci	r17, 0xFF	; 255
     ce6:	d8 01       	movw	r26, r16
     ce8:	01 90       	ld	r0, Z+
     cea:	0d 92       	st	X+, r0
     cec:	2a 95       	dec	r18
     cee:	e1 f7       	brne	.-8      	; 0xce8 <transmit_9+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->rpm_curr);
     cf0:	fc 01       	movw	r30, r24
     cf2:	23 89       	ldd	r18, Z+19	; 0x13
     cf4:	2f 93       	push	r18
     cf6:	22 89       	ldd	r18, Z+18	; 0x12
     cf8:	2f 93       	push	r18
     cfa:	21 89       	ldd	r18, Z+17	; 0x11
     cfc:	2f 93       	push	r18
     cfe:	80 89       	ldd	r24, Z+16	; 0x10
     d00:	8f 93       	push	r24
     d02:	8c e1       	ldi	r24, 0x1C	; 28
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	9f 93       	push	r25
     d08:	8f 93       	push	r24
     d0a:	1f 92       	push	r1
     d0c:	86 e0       	ldi	r24, 0x06	; 6
     d0e:	8f 93       	push	r24
     d10:	1f 93       	push	r17
     d12:	0f 93       	push	r16
     d14:	8d d1       	rcall	.+794    	; 0x1030 <snprintf>
	USART_transmit(temp);
     d16:	c8 01       	movw	r24, r16
     d18:	c8 dc       	rcall	.-1648   	; 0x6aa <USART_transmit>
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
}
     d24:	26 96       	adiw	r28, 0x06	; 6
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	08 95       	ret

00000d3a <transmit_empty>:

void transmit_empty(){
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <transmit_empty+0x6>
     d40:	00 d0       	rcall	.+0      	; 0xd42 <transmit_empty+0x8>
     d42:	00 d0       	rcall	.+0      	; 0xd44 <transmit_empty+0xa>
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     d48:	85 e0       	ldi	r24, 0x05	; 5
     d4a:	e6 e0       	ldi	r30, 0x06	; 6
     d4c:	f1 e0       	ldi	r31, 0x01	; 1
     d4e:	de 01       	movw	r26, r28
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	01 90       	ld	r0, Z+
     d54:	0d 92       	st	X+, r0
     d56:	8a 95       	dec	r24
     d58:	e1 f7       	brne	.-8      	; 0xd52 <transmit_empty+0x18>
	USART_transmit(temp);
     d5a:	ce 01       	movw	r24, r28
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	a5 dc       	rcall	.-1718   	; 0x6aa <USART_transmit>
}
     d60:	26 96       	adiw	r28, 0x06	; 6
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <__mulsi3>:
     d72:	db 01       	movw	r26, r22
     d74:	8f 93       	push	r24
     d76:	9f 93       	push	r25
     d78:	2a d0       	rcall	.+84     	; 0xdce <__muluhisi3>
     d7a:	bf 91       	pop	r27
     d7c:	af 91       	pop	r26
     d7e:	a2 9f       	mul	r26, r18
     d80:	80 0d       	add	r24, r0
     d82:	91 1d       	adc	r25, r1
     d84:	a3 9f       	mul	r26, r19
     d86:	90 0d       	add	r25, r0
     d88:	b2 9f       	mul	r27, r18
     d8a:	90 0d       	add	r25, r0
     d8c:	11 24       	eor	r1, r1
     d8e:	08 95       	ret

00000d90 <__divmodhi4>:
     d90:	97 fb       	bst	r25, 7
     d92:	07 2e       	mov	r0, r23
     d94:	16 f4       	brtc	.+4      	; 0xd9a <__divmodhi4+0xa>
     d96:	00 94       	com	r0
     d98:	06 d0       	rcall	.+12     	; 0xda6 <__divmodhi4_neg1>
     d9a:	77 fd       	sbrc	r23, 7
     d9c:	08 d0       	rcall	.+16     	; 0xdae <__divmodhi4_neg2>
     d9e:	00 d1       	rcall	.+512    	; 0xfa0 <__udivmodhi4>
     da0:	07 fc       	sbrc	r0, 7
     da2:	05 d0       	rcall	.+10     	; 0xdae <__divmodhi4_neg2>
     da4:	3e f4       	brtc	.+14     	; 0xdb4 <__divmodhi4_exit>

00000da6 <__divmodhi4_neg1>:
     da6:	90 95       	com	r25
     da8:	81 95       	neg	r24
     daa:	9f 4f       	sbci	r25, 0xFF	; 255
     dac:	08 95       	ret

00000dae <__divmodhi4_neg2>:
     dae:	70 95       	com	r23
     db0:	61 95       	neg	r22
     db2:	7f 4f       	sbci	r23, 0xFF	; 255

00000db4 <__divmodhi4_exit>:
     db4:	08 95       	ret

00000db6 <__umulhisi3>:
     db6:	a2 9f       	mul	r26, r18
     db8:	b0 01       	movw	r22, r0
     dba:	b3 9f       	mul	r27, r19
     dbc:	c0 01       	movw	r24, r0
     dbe:	a3 9f       	mul	r26, r19
     dc0:	01 d0       	rcall	.+2      	; 0xdc4 <__umulhisi3+0xe>
     dc2:	b2 9f       	mul	r27, r18
     dc4:	70 0d       	add	r23, r0
     dc6:	81 1d       	adc	r24, r1
     dc8:	11 24       	eor	r1, r1
     dca:	91 1d       	adc	r25, r1
     dcc:	08 95       	ret

00000dce <__muluhisi3>:
     dce:	f3 df       	rcall	.-26     	; 0xdb6 <__umulhisi3>
     dd0:	a5 9f       	mul	r26, r21
     dd2:	90 0d       	add	r25, r0
     dd4:	b4 9f       	mul	r27, r20
     dd6:	90 0d       	add	r25, r0
     dd8:	a4 9f       	mul	r26, r20
     dda:	80 0d       	add	r24, r0
     ddc:	91 1d       	adc	r25, r1
     dde:	11 24       	eor	r1, r1
     de0:	08 95       	ret

00000de2 <__umoddi3>:
     de2:	68 94       	set
     de4:	01 c0       	rjmp	.+2      	; 0xde8 <__udivdi3_umoddi3>

00000de6 <__udivdi3>:
     de6:	e8 94       	clt

00000de8 <__udivdi3_umoddi3>:
     de8:	8f 92       	push	r8
     dea:	9f 92       	push	r9
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	56 d0       	rcall	.+172    	; 0xe9e <__udivmod64>
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	9f 90       	pop	r9
     df8:	8f 90       	pop	r8
     dfa:	08 95       	ret

00000dfc <__muldi3>:
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	1f 93       	push	r17
     e02:	0f 93       	push	r16
     e04:	9a 9d       	mul	r25, r10
     e06:	f0 2d       	mov	r31, r0
     e08:	21 9f       	mul	r18, r17
     e0a:	f0 0d       	add	r31, r0
     e0c:	8b 9d       	mul	r24, r11
     e0e:	f0 0d       	add	r31, r0
     e10:	8a 9d       	mul	r24, r10
     e12:	e0 2d       	mov	r30, r0
     e14:	f1 0d       	add	r31, r1
     e16:	03 9f       	mul	r16, r19
     e18:	f0 0d       	add	r31, r0
     e1a:	02 9f       	mul	r16, r18
     e1c:	e0 0d       	add	r30, r0
     e1e:	f1 1d       	adc	r31, r1
     e20:	4e 9d       	mul	r20, r14
     e22:	e0 0d       	add	r30, r0
     e24:	f1 1d       	adc	r31, r1
     e26:	5e 9d       	mul	r21, r14
     e28:	f0 0d       	add	r31, r0
     e2a:	4f 9d       	mul	r20, r15
     e2c:	f0 0d       	add	r31, r0
     e2e:	7f 93       	push	r23
     e30:	6f 93       	push	r22
     e32:	bf 92       	push	r11
     e34:	af 92       	push	r10
     e36:	5f 93       	push	r21
     e38:	4f 93       	push	r20
     e3a:	d5 01       	movw	r26, r10
     e3c:	bc df       	rcall	.-136    	; 0xdb6 <__umulhisi3>
     e3e:	8b 01       	movw	r16, r22
     e40:	ac 01       	movw	r20, r24
     e42:	d7 01       	movw	r26, r14
     e44:	b8 df       	rcall	.-144    	; 0xdb6 <__umulhisi3>
     e46:	eb 01       	movw	r28, r22
     e48:	e8 0f       	add	r30, r24
     e4a:	f9 1f       	adc	r31, r25
     e4c:	d6 01       	movw	r26, r12
     e4e:	1f d0       	rcall	.+62     	; 0xe8e <__muldi3_6>
     e50:	2f 91       	pop	r18
     e52:	3f 91       	pop	r19
     e54:	d6 01       	movw	r26, r12
     e56:	af df       	rcall	.-162    	; 0xdb6 <__umulhisi3>
     e58:	c6 0f       	add	r28, r22
     e5a:	d7 1f       	adc	r29, r23
     e5c:	e8 1f       	adc	r30, r24
     e5e:	f9 1f       	adc	r31, r25
     e60:	af 91       	pop	r26
     e62:	bf 91       	pop	r27
     e64:	14 d0       	rcall	.+40     	; 0xe8e <__muldi3_6>
     e66:	2f 91       	pop	r18
     e68:	3f 91       	pop	r19
     e6a:	a5 df       	rcall	.-182    	; 0xdb6 <__umulhisi3>
     e6c:	c6 0f       	add	r28, r22
     e6e:	d7 1f       	adc	r29, r23
     e70:	e8 1f       	adc	r30, r24
     e72:	f9 1f       	adc	r31, r25
     e74:	d6 01       	movw	r26, r12
     e76:	9f df       	rcall	.-194    	; 0xdb6 <__umulhisi3>
     e78:	e6 0f       	add	r30, r22
     e7a:	f7 1f       	adc	r31, r23
     e7c:	98 01       	movw	r18, r16
     e7e:	be 01       	movw	r22, r28
     e80:	cf 01       	movw	r24, r30
     e82:	11 24       	eor	r1, r1
     e84:	0f 91       	pop	r16
     e86:	1f 91       	pop	r17
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <__muldi3_6>:
     e8e:	93 df       	rcall	.-218    	; 0xdb6 <__umulhisi3>
     e90:	46 0f       	add	r20, r22
     e92:	57 1f       	adc	r21, r23
     e94:	c8 1f       	adc	r28, r24
     e96:	d9 1f       	adc	r29, r25
     e98:	08 f4       	brcc	.+2      	; 0xe9c <__muldi3_6+0xe>
     e9a:	31 96       	adiw	r30, 0x01	; 1
     e9c:	08 95       	ret

00000e9e <__udivmod64>:
     e9e:	88 24       	eor	r8, r8
     ea0:	99 24       	eor	r9, r9
     ea2:	f4 01       	movw	r30, r8
     ea4:	e4 01       	movw	r28, r8
     ea6:	b0 e4       	ldi	r27, 0x40	; 64
     ea8:	1b 2e       	mov	r1, r27
     eaa:	d4 01       	movw	r26, r8
     eac:	9d 15       	cp	r25, r13
     eae:	8e 04       	cpc	r8, r14
     eb0:	9f 04       	cpc	r9, r15
     eb2:	e0 07       	cpc	r30, r16
     eb4:	f1 07       	cpc	r31, r17
     eb6:	38 f4       	brcc	.+14     	; 0xec6 <__udivmod64+0x28>
     eb8:	fc 01       	movw	r30, r24
     eba:	4b 01       	movw	r8, r22
     ebc:	ca 01       	movw	r24, r20
     ebe:	b9 01       	movw	r22, r18
     ec0:	ad 01       	movw	r20, r26
     ec2:	9e 01       	movw	r18, r28
     ec4:	16 94       	lsr	r1
     ec6:	22 0f       	add	r18, r18
     ec8:	33 1f       	adc	r19, r19
     eca:	44 1f       	adc	r20, r20
     ecc:	55 1f       	adc	r21, r21
     ece:	66 1f       	adc	r22, r22
     ed0:	77 1f       	adc	r23, r23
     ed2:	88 1f       	adc	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	88 1c       	adc	r8, r8
     ed8:	99 1c       	adc	r9, r9
     eda:	ee 1f       	adc	r30, r30
     edc:	ff 1f       	adc	r31, r31
     ede:	cc 1f       	adc	r28, r28
     ee0:	dd 1f       	adc	r29, r29
     ee2:	aa 1f       	adc	r26, r26
     ee4:	bb 1f       	adc	r27, r27
     ee6:	8a 14       	cp	r8, r10
     ee8:	9b 04       	cpc	r9, r11
     eea:	ec 05       	cpc	r30, r12
     eec:	fd 05       	cpc	r31, r13
     eee:	ce 05       	cpc	r28, r14
     ef0:	df 05       	cpc	r29, r15
     ef2:	a0 07       	cpc	r26, r16
     ef4:	b1 07       	cpc	r27, r17
     ef6:	48 f0       	brcs	.+18     	; 0xf0a <__udivmod64+0x6c>
     ef8:	8a 18       	sub	r8, r10
     efa:	9b 08       	sbc	r9, r11
     efc:	ec 09       	sbc	r30, r12
     efe:	fd 09       	sbc	r31, r13
     f00:	ce 09       	sbc	r28, r14
     f02:	df 09       	sbc	r29, r15
     f04:	a0 0b       	sbc	r26, r16
     f06:	b1 0b       	sbc	r27, r17
     f08:	21 60       	ori	r18, 0x01	; 1
     f0a:	1a 94       	dec	r1
     f0c:	e1 f6       	brne	.-72     	; 0xec6 <__udivmod64+0x28>
     f0e:	2e f4       	brtc	.+10     	; 0xf1a <__udivmod64+0x7c>
     f10:	94 01       	movw	r18, r8
     f12:	af 01       	movw	r20, r30
     f14:	be 01       	movw	r22, r28
     f16:	cd 01       	movw	r24, r26
     f18:	00 0c       	add	r0, r0
     f1a:	08 95       	ret

00000f1c <__ashldi3>:
     f1c:	0f 93       	push	r16
     f1e:	0f 73       	andi	r16, 0x3F	; 63
     f20:	51 f0       	breq	.+20     	; 0xf36 <__ashldi3+0x1a>
     f22:	22 0f       	add	r18, r18
     f24:	33 1f       	adc	r19, r19
     f26:	44 1f       	adc	r20, r20
     f28:	55 1f       	adc	r21, r21
     f2a:	66 1f       	adc	r22, r22
     f2c:	77 1f       	adc	r23, r23
     f2e:	88 1f       	adc	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 95       	dec	r16
     f34:	b1 f7       	brne	.-20     	; 0xf22 <__ashldi3+0x6>
     f36:	0f 91       	pop	r16
     f38:	08 95       	ret

00000f3a <__ashrdi3>:
     f3a:	0f 93       	push	r16
     f3c:	0f 73       	andi	r16, 0x3F	; 63
     f3e:	51 f0       	breq	.+20     	; 0xf54 <__ashrdi3+0x1a>
     f40:	95 95       	asr	r25
     f42:	87 95       	ror	r24
     f44:	77 95       	ror	r23
     f46:	67 95       	ror	r22
     f48:	57 95       	ror	r21
     f4a:	47 95       	ror	r20
     f4c:	37 95       	ror	r19
     f4e:	27 95       	ror	r18
     f50:	0a 95       	dec	r16
     f52:	b1 f7       	brne	.-20     	; 0xf40 <__ashrdi3+0x6>
     f54:	0f 91       	pop	r16
     f56:	08 95       	ret

00000f58 <__lshrdi3>:
     f58:	0f 93       	push	r16
     f5a:	0f 73       	andi	r16, 0x3F	; 63
     f5c:	51 f0       	breq	.+20     	; 0xf72 <__lshrdi3+0x1a>
     f5e:	96 95       	lsr	r25
     f60:	87 95       	ror	r24
     f62:	77 95       	ror	r23
     f64:	67 95       	ror	r22
     f66:	57 95       	ror	r21
     f68:	47 95       	ror	r20
     f6a:	37 95       	ror	r19
     f6c:	27 95       	ror	r18
     f6e:	0a 95       	dec	r16
     f70:	b1 f7       	brne	.-20     	; 0xf5e <__lshrdi3+0x6>
     f72:	0f 91       	pop	r16
     f74:	08 95       	ret

00000f76 <__adddi3>:
     f76:	2a 0d       	add	r18, r10
     f78:	3b 1d       	adc	r19, r11
     f7a:	4c 1d       	adc	r20, r12
     f7c:	5d 1d       	adc	r21, r13
     f7e:	6e 1d       	adc	r22, r14
     f80:	7f 1d       	adc	r23, r15
     f82:	80 1f       	adc	r24, r16
     f84:	91 1f       	adc	r25, r17
     f86:	08 95       	ret

00000f88 <__cmpdi2_s8>:
     f88:	00 24       	eor	r0, r0
     f8a:	a7 fd       	sbrc	r26, 7
     f8c:	00 94       	com	r0
     f8e:	2a 17       	cp	r18, r26
     f90:	30 05       	cpc	r19, r0
     f92:	40 05       	cpc	r20, r0
     f94:	50 05       	cpc	r21, r0
     f96:	60 05       	cpc	r22, r0
     f98:	70 05       	cpc	r23, r0
     f9a:	80 05       	cpc	r24, r0
     f9c:	90 05       	cpc	r25, r0
     f9e:	08 95       	ret

00000fa0 <__udivmodhi4>:
     fa0:	aa 1b       	sub	r26, r26
     fa2:	bb 1b       	sub	r27, r27
     fa4:	51 e1       	ldi	r21, 0x11	; 17
     fa6:	07 c0       	rjmp	.+14     	; 0xfb6 <__udivmodhi4_ep>

00000fa8 <__udivmodhi4_loop>:
     fa8:	aa 1f       	adc	r26, r26
     faa:	bb 1f       	adc	r27, r27
     fac:	a6 17       	cp	r26, r22
     fae:	b7 07       	cpc	r27, r23
     fb0:	10 f0       	brcs	.+4      	; 0xfb6 <__udivmodhi4_ep>
     fb2:	a6 1b       	sub	r26, r22
     fb4:	b7 0b       	sbc	r27, r23

00000fb6 <__udivmodhi4_ep>:
     fb6:	88 1f       	adc	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	5a 95       	dec	r21
     fbc:	a9 f7       	brne	.-22     	; 0xfa8 <__udivmodhi4_loop>
     fbe:	80 95       	com	r24
     fc0:	90 95       	com	r25
     fc2:	bc 01       	movw	r22, r24
     fc4:	cd 01       	movw	r24, r26
     fc6:	08 95       	ret

00000fc8 <atoi>:
     fc8:	fc 01       	movw	r30, r24
     fca:	88 27       	eor	r24, r24
     fcc:	99 27       	eor	r25, r25
     fce:	e8 94       	clt
     fd0:	21 91       	ld	r18, Z+
     fd2:	20 32       	cpi	r18, 0x20	; 32
     fd4:	e9 f3       	breq	.-6      	; 0xfd0 <atoi+0x8>
     fd6:	29 30       	cpi	r18, 0x09	; 9
     fd8:	10 f0       	brcs	.+4      	; 0xfde <atoi+0x16>
     fda:	2e 30       	cpi	r18, 0x0E	; 14
     fdc:	c8 f3       	brcs	.-14     	; 0xfd0 <atoi+0x8>
     fde:	2b 32       	cpi	r18, 0x2B	; 43
     fe0:	39 f0       	breq	.+14     	; 0xff0 <atoi+0x28>
     fe2:	2d 32       	cpi	r18, 0x2D	; 45
     fe4:	31 f4       	brne	.+12     	; 0xff2 <atoi+0x2a>
     fe6:	68 94       	set
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <atoi+0x28>
     fea:	1a d0       	rcall	.+52     	; 0x1020 <__mulhi_const_10>
     fec:	82 0f       	add	r24, r18
     fee:	91 1d       	adc	r25, r1
     ff0:	21 91       	ld	r18, Z+
     ff2:	20 53       	subi	r18, 0x30	; 48
     ff4:	2a 30       	cpi	r18, 0x0A	; 10
     ff6:	c8 f3       	brcs	.-14     	; 0xfea <atoi+0x22>
     ff8:	1e f4       	brtc	.+6      	; 0x1000 <atoi+0x38>
     ffa:	90 95       	com	r25
     ffc:	81 95       	neg	r24
     ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    1000:	08 95       	ret

00001002 <strncpy>:
    1002:	fb 01       	movw	r30, r22
    1004:	dc 01       	movw	r26, r24
    1006:	41 50       	subi	r20, 0x01	; 1
    1008:	50 40       	sbci	r21, 0x00	; 0
    100a:	48 f0       	brcs	.+18     	; 0x101e <strncpy+0x1c>
    100c:	01 90       	ld	r0, Z+
    100e:	0d 92       	st	X+, r0
    1010:	00 20       	and	r0, r0
    1012:	c9 f7       	brne	.-14     	; 0x1006 <strncpy+0x4>
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <strncpy+0x16>
    1016:	1d 92       	st	X+, r1
    1018:	41 50       	subi	r20, 0x01	; 1
    101a:	50 40       	sbci	r21, 0x00	; 0
    101c:	e0 f7       	brcc	.-8      	; 0x1016 <strncpy+0x14>
    101e:	08 95       	ret

00001020 <__mulhi_const_10>:
    1020:	7a e0       	ldi	r23, 0x0A	; 10
    1022:	97 9f       	mul	r25, r23
    1024:	90 2d       	mov	r25, r0
    1026:	87 9f       	mul	r24, r23
    1028:	80 2d       	mov	r24, r0
    102a:	91 0d       	add	r25, r1
    102c:	11 24       	eor	r1, r1
    102e:	08 95       	ret

00001030 <snprintf>:
    1030:	ae e0       	ldi	r26, 0x0E	; 14
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	ed e1       	ldi	r30, 0x1D	; 29
    1036:	f8 e0       	ldi	r31, 0x08	; 8
    1038:	a3 c2       	rjmp	.+1350   	; 0x1580 <__prologue_saves__+0x1c>
    103a:	0d 89       	ldd	r16, Y+21	; 0x15
    103c:	1e 89       	ldd	r17, Y+22	; 0x16
    103e:	8f 89       	ldd	r24, Y+23	; 0x17
    1040:	98 8d       	ldd	r25, Y+24	; 0x18
    1042:	26 e0       	ldi	r18, 0x06	; 6
    1044:	2c 83       	std	Y+4, r18	; 0x04
    1046:	1a 83       	std	Y+2, r17	; 0x02
    1048:	09 83       	std	Y+1, r16	; 0x01
    104a:	97 ff       	sbrs	r25, 7
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <snprintf+0x22>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e8       	ldi	r25, 0x80	; 128
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	9e 83       	std	Y+6, r25	; 0x06
    1056:	8d 83       	std	Y+5, r24	; 0x05
    1058:	ce 01       	movw	r24, r28
    105a:	4b 96       	adiw	r24, 0x1b	; 27
    105c:	ac 01       	movw	r20, r24
    105e:	69 8d       	ldd	r22, Y+25	; 0x19
    1060:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1062:	ce 01       	movw	r24, r28
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	11 d0       	rcall	.+34     	; 0x108a <vfprintf>
    1068:	4d 81       	ldd	r20, Y+5	; 0x05
    106a:	5e 81       	ldd	r21, Y+6	; 0x06
    106c:	57 fd       	sbrc	r21, 7
    106e:	0a c0       	rjmp	.+20     	; 0x1084 <snprintf+0x54>
    1070:	2f 81       	ldd	r18, Y+7	; 0x07
    1072:	38 85       	ldd	r19, Y+8	; 0x08
    1074:	42 17       	cp	r20, r18
    1076:	53 07       	cpc	r21, r19
    1078:	0c f4       	brge	.+2      	; 0x107c <snprintf+0x4c>
    107a:	9a 01       	movw	r18, r20
    107c:	f8 01       	movw	r30, r16
    107e:	e2 0f       	add	r30, r18
    1080:	f3 1f       	adc	r31, r19
    1082:	10 82       	st	Z, r1
    1084:	2e 96       	adiw	r28, 0x0e	; 14
    1086:	e4 e0       	ldi	r30, 0x04	; 4
    1088:	97 c2       	rjmp	.+1326   	; 0x15b8 <__epilogue_restores__+0x1c>

0000108a <vfprintf>:
    108a:	ac e0       	ldi	r26, 0x0C	; 12
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	ea e4       	ldi	r30, 0x4A	; 74
    1090:	f8 e0       	ldi	r31, 0x08	; 8
    1092:	68 c2       	rjmp	.+1232   	; 0x1564 <__prologue_saves__>
    1094:	7c 01       	movw	r14, r24
    1096:	6b 01       	movw	r12, r22
    1098:	8a 01       	movw	r16, r20
    109a:	fc 01       	movw	r30, r24
    109c:	17 82       	std	Z+7, r1	; 0x07
    109e:	16 82       	std	Z+6, r1	; 0x06
    10a0:	83 81       	ldd	r24, Z+3	; 0x03
    10a2:	81 ff       	sbrs	r24, 1
    10a4:	b9 c1       	rjmp	.+882    	; 0x1418 <vfprintf+0x38e>
    10a6:	88 24       	eor	r8, r8
    10a8:	83 94       	inc	r8
    10aa:	91 2c       	mov	r9, r1
    10ac:	8c 0e       	add	r8, r28
    10ae:	9d 1e       	adc	r9, r29
    10b0:	f7 01       	movw	r30, r14
    10b2:	93 81       	ldd	r25, Z+3	; 0x03
    10b4:	f6 01       	movw	r30, r12
    10b6:	93 fd       	sbrc	r25, 3
    10b8:	85 91       	lpm	r24, Z+
    10ba:	93 ff       	sbrs	r25, 3
    10bc:	81 91       	ld	r24, Z+
    10be:	6f 01       	movw	r12, r30
    10c0:	88 23       	and	r24, r24
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <vfprintf+0x3c>
    10c4:	a5 c1       	rjmp	.+842    	; 0x1410 <vfprintf+0x386>
    10c6:	85 32       	cpi	r24, 0x25	; 37
    10c8:	39 f4       	brne	.+14     	; 0x10d8 <vfprintf+0x4e>
    10ca:	93 fd       	sbrc	r25, 3
    10cc:	85 91       	lpm	r24, Z+
    10ce:	93 ff       	sbrs	r25, 3
    10d0:	81 91       	ld	r24, Z+
    10d2:	6f 01       	movw	r12, r30
    10d4:	85 32       	cpi	r24, 0x25	; 37
    10d6:	21 f4       	brne	.+8      	; 0x10e0 <vfprintf+0x56>
    10d8:	b7 01       	movw	r22, r14
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	b9 d1       	rcall	.+882    	; 0x1450 <fputc>
    10de:	e8 cf       	rjmp	.-48     	; 0x10b0 <vfprintf+0x26>
    10e0:	51 2c       	mov	r5, r1
    10e2:	31 2c       	mov	r3, r1
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	20 32       	cpi	r18, 0x20	; 32
    10e8:	a8 f4       	brcc	.+42     	; 0x1114 <vfprintf+0x8a>
    10ea:	8b 32       	cpi	r24, 0x2B	; 43
    10ec:	61 f0       	breq	.+24     	; 0x1106 <vfprintf+0x7c>
    10ee:	28 f4       	brcc	.+10     	; 0x10fa <vfprintf+0x70>
    10f0:	80 32       	cpi	r24, 0x20	; 32
    10f2:	51 f0       	breq	.+20     	; 0x1108 <vfprintf+0x7e>
    10f4:	83 32       	cpi	r24, 0x23	; 35
    10f6:	71 f4       	brne	.+28     	; 0x1114 <vfprintf+0x8a>
    10f8:	0b c0       	rjmp	.+22     	; 0x1110 <vfprintf+0x86>
    10fa:	8d 32       	cpi	r24, 0x2D	; 45
    10fc:	39 f0       	breq	.+14     	; 0x110c <vfprintf+0x82>
    10fe:	80 33       	cpi	r24, 0x30	; 48
    1100:	49 f4       	brne	.+18     	; 0x1114 <vfprintf+0x8a>
    1102:	21 60       	ori	r18, 0x01	; 1
    1104:	28 c0       	rjmp	.+80     	; 0x1156 <vfprintf+0xcc>
    1106:	22 60       	ori	r18, 0x02	; 2
    1108:	24 60       	ori	r18, 0x04	; 4
    110a:	25 c0       	rjmp	.+74     	; 0x1156 <vfprintf+0xcc>
    110c:	28 60       	ori	r18, 0x08	; 8
    110e:	23 c0       	rjmp	.+70     	; 0x1156 <vfprintf+0xcc>
    1110:	20 61       	ori	r18, 0x10	; 16
    1112:	21 c0       	rjmp	.+66     	; 0x1156 <vfprintf+0xcc>
    1114:	27 fd       	sbrc	r18, 7
    1116:	27 c0       	rjmp	.+78     	; 0x1166 <vfprintf+0xdc>
    1118:	38 2f       	mov	r19, r24
    111a:	30 53       	subi	r19, 0x30	; 48
    111c:	3a 30       	cpi	r19, 0x0A	; 10
    111e:	78 f4       	brcc	.+30     	; 0x113e <vfprintf+0xb4>
    1120:	26 ff       	sbrs	r18, 6
    1122:	06 c0       	rjmp	.+12     	; 0x1130 <vfprintf+0xa6>
    1124:	fa e0       	ldi	r31, 0x0A	; 10
    1126:	5f 9e       	mul	r5, r31
    1128:	30 0d       	add	r19, r0
    112a:	11 24       	eor	r1, r1
    112c:	53 2e       	mov	r5, r19
    112e:	13 c0       	rjmp	.+38     	; 0x1156 <vfprintf+0xcc>
    1130:	8a e0       	ldi	r24, 0x0A	; 10
    1132:	38 9e       	mul	r3, r24
    1134:	30 0d       	add	r19, r0
    1136:	11 24       	eor	r1, r1
    1138:	33 2e       	mov	r3, r19
    113a:	20 62       	ori	r18, 0x20	; 32
    113c:	0c c0       	rjmp	.+24     	; 0x1156 <vfprintf+0xcc>
    113e:	8e 32       	cpi	r24, 0x2E	; 46
    1140:	21 f4       	brne	.+8      	; 0x114a <vfprintf+0xc0>
    1142:	26 fd       	sbrc	r18, 6
    1144:	65 c1       	rjmp	.+714    	; 0x1410 <vfprintf+0x386>
    1146:	20 64       	ori	r18, 0x40	; 64
    1148:	06 c0       	rjmp	.+12     	; 0x1156 <vfprintf+0xcc>
    114a:	8c 36       	cpi	r24, 0x6C	; 108
    114c:	11 f4       	brne	.+4      	; 0x1152 <vfprintf+0xc8>
    114e:	20 68       	ori	r18, 0x80	; 128
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <vfprintf+0xcc>
    1152:	88 36       	cpi	r24, 0x68	; 104
    1154:	41 f4       	brne	.+16     	; 0x1166 <vfprintf+0xdc>
    1156:	f6 01       	movw	r30, r12
    1158:	93 fd       	sbrc	r25, 3
    115a:	85 91       	lpm	r24, Z+
    115c:	93 ff       	sbrs	r25, 3
    115e:	81 91       	ld	r24, Z+
    1160:	6f 01       	movw	r12, r30
    1162:	81 11       	cpse	r24, r1
    1164:	c0 cf       	rjmp	.-128    	; 0x10e6 <vfprintf+0x5c>
    1166:	98 2f       	mov	r25, r24
    1168:	95 54       	subi	r25, 0x45	; 69
    116a:	93 30       	cpi	r25, 0x03	; 3
    116c:	18 f0       	brcs	.+6      	; 0x1174 <vfprintf+0xea>
    116e:	90 52       	subi	r25, 0x20	; 32
    1170:	93 30       	cpi	r25, 0x03	; 3
    1172:	28 f4       	brcc	.+10     	; 0x117e <vfprintf+0xf4>
    1174:	0c 5f       	subi	r16, 0xFC	; 252
    1176:	1f 4f       	sbci	r17, 0xFF	; 255
    1178:	ff e3       	ldi	r31, 0x3F	; 63
    117a:	f9 83       	std	Y+1, r31	; 0x01
    117c:	0d c0       	rjmp	.+26     	; 0x1198 <vfprintf+0x10e>
    117e:	83 36       	cpi	r24, 0x63	; 99
    1180:	31 f0       	breq	.+12     	; 0x118e <vfprintf+0x104>
    1182:	83 37       	cpi	r24, 0x73	; 115
    1184:	71 f0       	breq	.+28     	; 0x11a2 <vfprintf+0x118>
    1186:	83 35       	cpi	r24, 0x53	; 83
    1188:	09 f0       	breq	.+2      	; 0x118c <vfprintf+0x102>
    118a:	5a c0       	rjmp	.+180    	; 0x1240 <vfprintf+0x1b6>
    118c:	22 c0       	rjmp	.+68     	; 0x11d2 <vfprintf+0x148>
    118e:	f8 01       	movw	r30, r16
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e 5f       	subi	r16, 0xFE	; 254
    1196:	1f 4f       	sbci	r17, 0xFF	; 255
    1198:	44 24       	eor	r4, r4
    119a:	43 94       	inc	r4
    119c:	51 2c       	mov	r5, r1
    119e:	54 01       	movw	r10, r8
    11a0:	14 c0       	rjmp	.+40     	; 0x11ca <vfprintf+0x140>
    11a2:	38 01       	movw	r6, r16
    11a4:	f2 e0       	ldi	r31, 0x02	; 2
    11a6:	6f 0e       	add	r6, r31
    11a8:	71 1c       	adc	r7, r1
    11aa:	f8 01       	movw	r30, r16
    11ac:	a0 80       	ld	r10, Z
    11ae:	b1 80       	ldd	r11, Z+1	; 0x01
    11b0:	26 ff       	sbrs	r18, 6
    11b2:	03 c0       	rjmp	.+6      	; 0x11ba <vfprintf+0x130>
    11b4:	65 2d       	mov	r22, r5
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <vfprintf+0x134>
    11ba:	6f ef       	ldi	r22, 0xFF	; 255
    11bc:	7f ef       	ldi	r23, 0xFF	; 255
    11be:	c5 01       	movw	r24, r10
    11c0:	2c 87       	std	Y+12, r18	; 0x0c
    11c2:	3b d1       	rcall	.+630    	; 0x143a <strnlen>
    11c4:	2c 01       	movw	r4, r24
    11c6:	83 01       	movw	r16, r6
    11c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    11ca:	6f e7       	ldi	r22, 0x7F	; 127
    11cc:	26 2e       	mov	r2, r22
    11ce:	22 22       	and	r2, r18
    11d0:	17 c0       	rjmp	.+46     	; 0x1200 <vfprintf+0x176>
    11d2:	38 01       	movw	r6, r16
    11d4:	f2 e0       	ldi	r31, 0x02	; 2
    11d6:	6f 0e       	add	r6, r31
    11d8:	71 1c       	adc	r7, r1
    11da:	f8 01       	movw	r30, r16
    11dc:	a0 80       	ld	r10, Z
    11de:	b1 80       	ldd	r11, Z+1	; 0x01
    11e0:	26 ff       	sbrs	r18, 6
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <vfprintf+0x160>
    11e4:	65 2d       	mov	r22, r5
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <vfprintf+0x164>
    11ea:	6f ef       	ldi	r22, 0xFF	; 255
    11ec:	7f ef       	ldi	r23, 0xFF	; 255
    11ee:	c5 01       	movw	r24, r10
    11f0:	2c 87       	std	Y+12, r18	; 0x0c
    11f2:	18 d1       	rcall	.+560    	; 0x1424 <strnlen_P>
    11f4:	2c 01       	movw	r4, r24
    11f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    11f8:	50 e8       	ldi	r21, 0x80	; 128
    11fa:	25 2e       	mov	r2, r21
    11fc:	22 2a       	or	r2, r18
    11fe:	83 01       	movw	r16, r6
    1200:	23 fc       	sbrc	r2, 3
    1202:	1a c0       	rjmp	.+52     	; 0x1238 <vfprintf+0x1ae>
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <vfprintf+0x186>
    1206:	b7 01       	movw	r22, r14
    1208:	80 e2       	ldi	r24, 0x20	; 32
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	21 d1       	rcall	.+578    	; 0x1450 <fputc>
    120e:	3a 94       	dec	r3
    1210:	83 2d       	mov	r24, r3
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	48 16       	cp	r4, r24
    1216:	59 06       	cpc	r5, r25
    1218:	b0 f3       	brcs	.-20     	; 0x1206 <vfprintf+0x17c>
    121a:	0e c0       	rjmp	.+28     	; 0x1238 <vfprintf+0x1ae>
    121c:	f5 01       	movw	r30, r10
    121e:	27 fc       	sbrc	r2, 7
    1220:	85 91       	lpm	r24, Z+
    1222:	27 fe       	sbrs	r2, 7
    1224:	81 91       	ld	r24, Z+
    1226:	5f 01       	movw	r10, r30
    1228:	b7 01       	movw	r22, r14
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	11 d1       	rcall	.+546    	; 0x1450 <fputc>
    122e:	31 10       	cpse	r3, r1
    1230:	3a 94       	dec	r3
    1232:	f1 e0       	ldi	r31, 0x01	; 1
    1234:	4f 1a       	sub	r4, r31
    1236:	51 08       	sbc	r5, r1
    1238:	41 14       	cp	r4, r1
    123a:	51 04       	cpc	r5, r1
    123c:	79 f7       	brne	.-34     	; 0x121c <vfprintf+0x192>
    123e:	e5 c0       	rjmp	.+458    	; 0x140a <vfprintf+0x380>
    1240:	84 36       	cpi	r24, 0x64	; 100
    1242:	11 f0       	breq	.+4      	; 0x1248 <vfprintf+0x1be>
    1244:	89 36       	cpi	r24, 0x69	; 105
    1246:	39 f5       	brne	.+78     	; 0x1296 <vfprintf+0x20c>
    1248:	f8 01       	movw	r30, r16
    124a:	27 ff       	sbrs	r18, 7
    124c:	07 c0       	rjmp	.+14     	; 0x125c <vfprintf+0x1d2>
    124e:	60 81       	ld	r22, Z
    1250:	71 81       	ldd	r23, Z+1	; 0x01
    1252:	82 81       	ldd	r24, Z+2	; 0x02
    1254:	93 81       	ldd	r25, Z+3	; 0x03
    1256:	0c 5f       	subi	r16, 0xFC	; 252
    1258:	1f 4f       	sbci	r17, 0xFF	; 255
    125a:	08 c0       	rjmp	.+16     	; 0x126c <vfprintf+0x1e2>
    125c:	60 81       	ld	r22, Z
    125e:	71 81       	ldd	r23, Z+1	; 0x01
    1260:	88 27       	eor	r24, r24
    1262:	77 fd       	sbrc	r23, 7
    1264:	80 95       	com	r24
    1266:	98 2f       	mov	r25, r24
    1268:	0e 5f       	subi	r16, 0xFE	; 254
    126a:	1f 4f       	sbci	r17, 0xFF	; 255
    126c:	4f e6       	ldi	r20, 0x6F	; 111
    126e:	b4 2e       	mov	r11, r20
    1270:	b2 22       	and	r11, r18
    1272:	97 ff       	sbrs	r25, 7
    1274:	09 c0       	rjmp	.+18     	; 0x1288 <vfprintf+0x1fe>
    1276:	90 95       	com	r25
    1278:	80 95       	com	r24
    127a:	70 95       	com	r23
    127c:	61 95       	neg	r22
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	8f 4f       	sbci	r24, 0xFF	; 255
    1282:	9f 4f       	sbci	r25, 0xFF	; 255
    1284:	f0 e8       	ldi	r31, 0x80	; 128
    1286:	bf 2a       	or	r11, r31
    1288:	2a e0       	ldi	r18, 0x0A	; 10
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	a4 01       	movw	r20, r8
    128e:	0c d1       	rcall	.+536    	; 0x14a8 <__ultoa_invert>
    1290:	a8 2e       	mov	r10, r24
    1292:	a8 18       	sub	r10, r8
    1294:	42 c0       	rjmp	.+132    	; 0x131a <vfprintf+0x290>
    1296:	85 37       	cpi	r24, 0x75	; 117
    1298:	31 f4       	brne	.+12     	; 0x12a6 <vfprintf+0x21c>
    129a:	3f ee       	ldi	r19, 0xEF	; 239
    129c:	b3 2e       	mov	r11, r19
    129e:	b2 22       	and	r11, r18
    12a0:	2a e0       	ldi	r18, 0x0A	; 10
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	24 c0       	rjmp	.+72     	; 0x12ee <vfprintf+0x264>
    12a6:	99 ef       	ldi	r25, 0xF9	; 249
    12a8:	b9 2e       	mov	r11, r25
    12aa:	b2 22       	and	r11, r18
    12ac:	8f 36       	cpi	r24, 0x6F	; 111
    12ae:	b9 f0       	breq	.+46     	; 0x12de <vfprintf+0x254>
    12b0:	20 f4       	brcc	.+8      	; 0x12ba <vfprintf+0x230>
    12b2:	88 35       	cpi	r24, 0x58	; 88
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <vfprintf+0x22e>
    12b6:	ac c0       	rjmp	.+344    	; 0x1410 <vfprintf+0x386>
    12b8:	0d c0       	rjmp	.+26     	; 0x12d4 <vfprintf+0x24a>
    12ba:	80 37       	cpi	r24, 0x70	; 112
    12bc:	21 f0       	breq	.+8      	; 0x12c6 <vfprintf+0x23c>
    12be:	88 37       	cpi	r24, 0x78	; 120
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <vfprintf+0x23a>
    12c2:	a6 c0       	rjmp	.+332    	; 0x1410 <vfprintf+0x386>
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <vfprintf+0x240>
    12c6:	20 e1       	ldi	r18, 0x10	; 16
    12c8:	b2 2a       	or	r11, r18
    12ca:	b4 fe       	sbrs	r11, 4
    12cc:	0b c0       	rjmp	.+22     	; 0x12e4 <vfprintf+0x25a>
    12ce:	84 e0       	ldi	r24, 0x04	; 4
    12d0:	b8 2a       	or	r11, r24
    12d2:	08 c0       	rjmp	.+16     	; 0x12e4 <vfprintf+0x25a>
    12d4:	24 ff       	sbrs	r18, 4
    12d6:	09 c0       	rjmp	.+18     	; 0x12ea <vfprintf+0x260>
    12d8:	e6 e0       	ldi	r30, 0x06	; 6
    12da:	be 2a       	or	r11, r30
    12dc:	06 c0       	rjmp	.+12     	; 0x12ea <vfprintf+0x260>
    12de:	28 e0       	ldi	r18, 0x08	; 8
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	05 c0       	rjmp	.+10     	; 0x12ee <vfprintf+0x264>
    12e4:	20 e1       	ldi	r18, 0x10	; 16
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <vfprintf+0x264>
    12ea:	20 e1       	ldi	r18, 0x10	; 16
    12ec:	32 e0       	ldi	r19, 0x02	; 2
    12ee:	f8 01       	movw	r30, r16
    12f0:	b7 fe       	sbrs	r11, 7
    12f2:	07 c0       	rjmp	.+14     	; 0x1302 <vfprintf+0x278>
    12f4:	60 81       	ld	r22, Z
    12f6:	71 81       	ldd	r23, Z+1	; 0x01
    12f8:	82 81       	ldd	r24, Z+2	; 0x02
    12fa:	93 81       	ldd	r25, Z+3	; 0x03
    12fc:	0c 5f       	subi	r16, 0xFC	; 252
    12fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1300:	06 c0       	rjmp	.+12     	; 0x130e <vfprintf+0x284>
    1302:	60 81       	ld	r22, Z
    1304:	71 81       	ldd	r23, Z+1	; 0x01
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0e 5f       	subi	r16, 0xFE	; 254
    130c:	1f 4f       	sbci	r17, 0xFF	; 255
    130e:	a4 01       	movw	r20, r8
    1310:	cb d0       	rcall	.+406    	; 0x14a8 <__ultoa_invert>
    1312:	a8 2e       	mov	r10, r24
    1314:	a8 18       	sub	r10, r8
    1316:	ff e7       	ldi	r31, 0x7F	; 127
    1318:	bf 22       	and	r11, r31
    131a:	b6 fe       	sbrs	r11, 6
    131c:	0b c0       	rjmp	.+22     	; 0x1334 <vfprintf+0x2aa>
    131e:	2b 2d       	mov	r18, r11
    1320:	2e 7f       	andi	r18, 0xFE	; 254
    1322:	a5 14       	cp	r10, r5
    1324:	50 f4       	brcc	.+20     	; 0x133a <vfprintf+0x2b0>
    1326:	b4 fe       	sbrs	r11, 4
    1328:	0a c0       	rjmp	.+20     	; 0x133e <vfprintf+0x2b4>
    132a:	b2 fc       	sbrc	r11, 2
    132c:	08 c0       	rjmp	.+16     	; 0x133e <vfprintf+0x2b4>
    132e:	2b 2d       	mov	r18, r11
    1330:	2e 7e       	andi	r18, 0xEE	; 238
    1332:	05 c0       	rjmp	.+10     	; 0x133e <vfprintf+0x2b4>
    1334:	7a 2c       	mov	r7, r10
    1336:	2b 2d       	mov	r18, r11
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <vfprintf+0x2b6>
    133a:	7a 2c       	mov	r7, r10
    133c:	01 c0       	rjmp	.+2      	; 0x1340 <vfprintf+0x2b6>
    133e:	75 2c       	mov	r7, r5
    1340:	24 ff       	sbrs	r18, 4
    1342:	0d c0       	rjmp	.+26     	; 0x135e <vfprintf+0x2d4>
    1344:	fe 01       	movw	r30, r28
    1346:	ea 0d       	add	r30, r10
    1348:	f1 1d       	adc	r31, r1
    134a:	80 81       	ld	r24, Z
    134c:	80 33       	cpi	r24, 0x30	; 48
    134e:	11 f4       	brne	.+4      	; 0x1354 <vfprintf+0x2ca>
    1350:	29 7e       	andi	r18, 0xE9	; 233
    1352:	09 c0       	rjmp	.+18     	; 0x1366 <vfprintf+0x2dc>
    1354:	22 ff       	sbrs	r18, 2
    1356:	06 c0       	rjmp	.+12     	; 0x1364 <vfprintf+0x2da>
    1358:	73 94       	inc	r7
    135a:	73 94       	inc	r7
    135c:	04 c0       	rjmp	.+8      	; 0x1366 <vfprintf+0x2dc>
    135e:	82 2f       	mov	r24, r18
    1360:	86 78       	andi	r24, 0x86	; 134
    1362:	09 f0       	breq	.+2      	; 0x1366 <vfprintf+0x2dc>
    1364:	73 94       	inc	r7
    1366:	23 fd       	sbrc	r18, 3
    1368:	13 c0       	rjmp	.+38     	; 0x1390 <vfprintf+0x306>
    136a:	20 ff       	sbrs	r18, 0
    136c:	0e c0       	rjmp	.+28     	; 0x138a <vfprintf+0x300>
    136e:	5a 2c       	mov	r5, r10
    1370:	73 14       	cp	r7, r3
    1372:	58 f4       	brcc	.+22     	; 0x138a <vfprintf+0x300>
    1374:	53 0c       	add	r5, r3
    1376:	57 18       	sub	r5, r7
    1378:	73 2c       	mov	r7, r3
    137a:	07 c0       	rjmp	.+14     	; 0x138a <vfprintf+0x300>
    137c:	b7 01       	movw	r22, r14
    137e:	80 e2       	ldi	r24, 0x20	; 32
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	2c 87       	std	Y+12, r18	; 0x0c
    1384:	65 d0       	rcall	.+202    	; 0x1450 <fputc>
    1386:	73 94       	inc	r7
    1388:	2c 85       	ldd	r18, Y+12	; 0x0c
    138a:	73 14       	cp	r7, r3
    138c:	b8 f3       	brcs	.-18     	; 0x137c <vfprintf+0x2f2>
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <vfprintf+0x30e>
    1390:	73 14       	cp	r7, r3
    1392:	10 f4       	brcc	.+4      	; 0x1398 <vfprintf+0x30e>
    1394:	37 18       	sub	r3, r7
    1396:	01 c0       	rjmp	.+2      	; 0x139a <vfprintf+0x310>
    1398:	31 2c       	mov	r3, r1
    139a:	24 ff       	sbrs	r18, 4
    139c:	11 c0       	rjmp	.+34     	; 0x13c0 <vfprintf+0x336>
    139e:	b7 01       	movw	r22, r14
    13a0:	80 e3       	ldi	r24, 0x30	; 48
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	2c 87       	std	Y+12, r18	; 0x0c
    13a6:	54 d0       	rcall	.+168    	; 0x1450 <fputc>
    13a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    13aa:	22 ff       	sbrs	r18, 2
    13ac:	1c c0       	rjmp	.+56     	; 0x13e6 <vfprintf+0x35c>
    13ae:	21 ff       	sbrs	r18, 1
    13b0:	03 c0       	rjmp	.+6      	; 0x13b8 <vfprintf+0x32e>
    13b2:	88 e5       	ldi	r24, 0x58	; 88
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <vfprintf+0x332>
    13b8:	88 e7       	ldi	r24, 0x78	; 120
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	b7 01       	movw	r22, r14
    13be:	0c c0       	rjmp	.+24     	; 0x13d8 <vfprintf+0x34e>
    13c0:	82 2f       	mov	r24, r18
    13c2:	86 78       	andi	r24, 0x86	; 134
    13c4:	81 f0       	breq	.+32     	; 0x13e6 <vfprintf+0x35c>
    13c6:	21 fd       	sbrc	r18, 1
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <vfprintf+0x344>
    13ca:	80 e2       	ldi	r24, 0x20	; 32
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <vfprintf+0x346>
    13ce:	8b e2       	ldi	r24, 0x2B	; 43
    13d0:	27 fd       	sbrc	r18, 7
    13d2:	8d e2       	ldi	r24, 0x2D	; 45
    13d4:	b7 01       	movw	r22, r14
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	3b d0       	rcall	.+118    	; 0x1450 <fputc>
    13da:	05 c0       	rjmp	.+10     	; 0x13e6 <vfprintf+0x35c>
    13dc:	b7 01       	movw	r22, r14
    13de:	80 e3       	ldi	r24, 0x30	; 48
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	36 d0       	rcall	.+108    	; 0x1450 <fputc>
    13e4:	5a 94       	dec	r5
    13e6:	a5 14       	cp	r10, r5
    13e8:	c8 f3       	brcs	.-14     	; 0x13dc <vfprintf+0x352>
    13ea:	aa 94       	dec	r10
    13ec:	f4 01       	movw	r30, r8
    13ee:	ea 0d       	add	r30, r10
    13f0:	f1 1d       	adc	r31, r1
    13f2:	b7 01       	movw	r22, r14
    13f4:	80 81       	ld	r24, Z
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	2b d0       	rcall	.+86     	; 0x1450 <fputc>
    13fa:	a1 10       	cpse	r10, r1
    13fc:	f6 cf       	rjmp	.-20     	; 0x13ea <vfprintf+0x360>
    13fe:	05 c0       	rjmp	.+10     	; 0x140a <vfprintf+0x380>
    1400:	b7 01       	movw	r22, r14
    1402:	80 e2       	ldi	r24, 0x20	; 32
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	24 d0       	rcall	.+72     	; 0x1450 <fputc>
    1408:	3a 94       	dec	r3
    140a:	31 10       	cpse	r3, r1
    140c:	f9 cf       	rjmp	.-14     	; 0x1400 <vfprintf+0x376>
    140e:	50 ce       	rjmp	.-864    	; 0x10b0 <vfprintf+0x26>
    1410:	f7 01       	movw	r30, r14
    1412:	26 81       	ldd	r18, Z+6	; 0x06
    1414:	37 81       	ldd	r19, Z+7	; 0x07
    1416:	02 c0       	rjmp	.+4      	; 0x141c <vfprintf+0x392>
    1418:	2f ef       	ldi	r18, 0xFF	; 255
    141a:	3f ef       	ldi	r19, 0xFF	; 255
    141c:	c9 01       	movw	r24, r18
    141e:	2c 96       	adiw	r28, 0x0c	; 12
    1420:	e2 e1       	ldi	r30, 0x12	; 18
    1422:	bc c0       	rjmp	.+376    	; 0x159c <__epilogue_restores__>

00001424 <strnlen_P>:
    1424:	fc 01       	movw	r30, r24
    1426:	05 90       	lpm	r0, Z+
    1428:	61 50       	subi	r22, 0x01	; 1
    142a:	70 40       	sbci	r23, 0x00	; 0
    142c:	01 10       	cpse	r0, r1
    142e:	d8 f7       	brcc	.-10     	; 0x1426 <strnlen_P+0x2>
    1430:	80 95       	com	r24
    1432:	90 95       	com	r25
    1434:	8e 0f       	add	r24, r30
    1436:	9f 1f       	adc	r25, r31
    1438:	08 95       	ret

0000143a <strnlen>:
    143a:	fc 01       	movw	r30, r24
    143c:	61 50       	subi	r22, 0x01	; 1
    143e:	70 40       	sbci	r23, 0x00	; 0
    1440:	01 90       	ld	r0, Z+
    1442:	01 10       	cpse	r0, r1
    1444:	d8 f7       	brcc	.-10     	; 0x143c <strnlen+0x2>
    1446:	80 95       	com	r24
    1448:	90 95       	com	r25
    144a:	8e 0f       	add	r24, r30
    144c:	9f 1f       	adc	r25, r31
    144e:	08 95       	ret

00001450 <fputc>:
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	8c 01       	movw	r16, r24
    145a:	eb 01       	movw	r28, r22
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	81 fd       	sbrc	r24, 1
    1460:	03 c0       	rjmp	.+6      	; 0x1468 <fputc+0x18>
    1462:	0f ef       	ldi	r16, 0xFF	; 255
    1464:	1f ef       	ldi	r17, 0xFF	; 255
    1466:	1a c0       	rjmp	.+52     	; 0x149c <fputc+0x4c>
    1468:	82 ff       	sbrs	r24, 2
    146a:	0d c0       	rjmp	.+26     	; 0x1486 <fputc+0x36>
    146c:	2e 81       	ldd	r18, Y+6	; 0x06
    146e:	3f 81       	ldd	r19, Y+7	; 0x07
    1470:	8c 81       	ldd	r24, Y+4	; 0x04
    1472:	9d 81       	ldd	r25, Y+5	; 0x05
    1474:	28 17       	cp	r18, r24
    1476:	39 07       	cpc	r19, r25
    1478:	64 f4       	brge	.+24     	; 0x1492 <fputc+0x42>
    147a:	e8 81       	ld	r30, Y
    147c:	f9 81       	ldd	r31, Y+1	; 0x01
    147e:	01 93       	st	Z+, r16
    1480:	f9 83       	std	Y+1, r31	; 0x01
    1482:	e8 83       	st	Y, r30
    1484:	06 c0       	rjmp	.+12     	; 0x1492 <fputc+0x42>
    1486:	e8 85       	ldd	r30, Y+8	; 0x08
    1488:	f9 85       	ldd	r31, Y+9	; 0x09
    148a:	80 2f       	mov	r24, r16
    148c:	09 95       	icall
    148e:	89 2b       	or	r24, r25
    1490:	41 f7       	brne	.-48     	; 0x1462 <fputc+0x12>
    1492:	8e 81       	ldd	r24, Y+6	; 0x06
    1494:	9f 81       	ldd	r25, Y+7	; 0x07
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	9f 83       	std	Y+7, r25	; 0x07
    149a:	8e 83       	std	Y+6, r24	; 0x06
    149c:	c8 01       	movw	r24, r16
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	08 95       	ret

000014a8 <__ultoa_invert>:
    14a8:	fa 01       	movw	r30, r20
    14aa:	aa 27       	eor	r26, r26
    14ac:	28 30       	cpi	r18, 0x08	; 8
    14ae:	51 f1       	breq	.+84     	; 0x1504 <__ultoa_invert+0x5c>
    14b0:	20 31       	cpi	r18, 0x10	; 16
    14b2:	81 f1       	breq	.+96     	; 0x1514 <__ultoa_invert+0x6c>
    14b4:	e8 94       	clt
    14b6:	6f 93       	push	r22
    14b8:	6e 7f       	andi	r22, 0xFE	; 254
    14ba:	6e 5f       	subi	r22, 0xFE	; 254
    14bc:	7f 4f       	sbci	r23, 0xFF	; 255
    14be:	8f 4f       	sbci	r24, 0xFF	; 255
    14c0:	9f 4f       	sbci	r25, 0xFF	; 255
    14c2:	af 4f       	sbci	r26, 0xFF	; 255
    14c4:	b1 e0       	ldi	r27, 0x01	; 1
    14c6:	3e d0       	rcall	.+124    	; 0x1544 <__ultoa_invert+0x9c>
    14c8:	b4 e0       	ldi	r27, 0x04	; 4
    14ca:	3c d0       	rcall	.+120    	; 0x1544 <__ultoa_invert+0x9c>
    14cc:	67 0f       	add	r22, r23
    14ce:	78 1f       	adc	r23, r24
    14d0:	89 1f       	adc	r24, r25
    14d2:	9a 1f       	adc	r25, r26
    14d4:	a1 1d       	adc	r26, r1
    14d6:	68 0f       	add	r22, r24
    14d8:	79 1f       	adc	r23, r25
    14da:	8a 1f       	adc	r24, r26
    14dc:	91 1d       	adc	r25, r1
    14de:	a1 1d       	adc	r26, r1
    14e0:	6a 0f       	add	r22, r26
    14e2:	71 1d       	adc	r23, r1
    14e4:	81 1d       	adc	r24, r1
    14e6:	91 1d       	adc	r25, r1
    14e8:	a1 1d       	adc	r26, r1
    14ea:	20 d0       	rcall	.+64     	; 0x152c <__ultoa_invert+0x84>
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <__ultoa_invert+0x48>
    14ee:	68 94       	set
    14f0:	3f 91       	pop	r19
    14f2:	2a e0       	ldi	r18, 0x0A	; 10
    14f4:	26 9f       	mul	r18, r22
    14f6:	11 24       	eor	r1, r1
    14f8:	30 19       	sub	r19, r0
    14fa:	30 5d       	subi	r19, 0xD0	; 208
    14fc:	31 93       	st	Z+, r19
    14fe:	de f6       	brtc	.-74     	; 0x14b6 <__ultoa_invert+0xe>
    1500:	cf 01       	movw	r24, r30
    1502:	08 95       	ret
    1504:	46 2f       	mov	r20, r22
    1506:	47 70       	andi	r20, 0x07	; 7
    1508:	40 5d       	subi	r20, 0xD0	; 208
    150a:	41 93       	st	Z+, r20
    150c:	b3 e0       	ldi	r27, 0x03	; 3
    150e:	0f d0       	rcall	.+30     	; 0x152e <__ultoa_invert+0x86>
    1510:	c9 f7       	brne	.-14     	; 0x1504 <__ultoa_invert+0x5c>
    1512:	f6 cf       	rjmp	.-20     	; 0x1500 <__ultoa_invert+0x58>
    1514:	46 2f       	mov	r20, r22
    1516:	4f 70       	andi	r20, 0x0F	; 15
    1518:	40 5d       	subi	r20, 0xD0	; 208
    151a:	4a 33       	cpi	r20, 0x3A	; 58
    151c:	18 f0       	brcs	.+6      	; 0x1524 <__ultoa_invert+0x7c>
    151e:	49 5d       	subi	r20, 0xD9	; 217
    1520:	31 fd       	sbrc	r19, 1
    1522:	40 52       	subi	r20, 0x20	; 32
    1524:	41 93       	st	Z+, r20
    1526:	02 d0       	rcall	.+4      	; 0x152c <__ultoa_invert+0x84>
    1528:	a9 f7       	brne	.-22     	; 0x1514 <__ultoa_invert+0x6c>
    152a:	ea cf       	rjmp	.-44     	; 0x1500 <__ultoa_invert+0x58>
    152c:	b4 e0       	ldi	r27, 0x04	; 4
    152e:	a6 95       	lsr	r26
    1530:	97 95       	ror	r25
    1532:	87 95       	ror	r24
    1534:	77 95       	ror	r23
    1536:	67 95       	ror	r22
    1538:	ba 95       	dec	r27
    153a:	c9 f7       	brne	.-14     	; 0x152e <__ultoa_invert+0x86>
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	61 05       	cpc	r22, r1
    1540:	71 05       	cpc	r23, r1
    1542:	08 95       	ret
    1544:	9b 01       	movw	r18, r22
    1546:	ac 01       	movw	r20, r24
    1548:	0a 2e       	mov	r0, r26
    154a:	06 94       	lsr	r0
    154c:	57 95       	ror	r21
    154e:	47 95       	ror	r20
    1550:	37 95       	ror	r19
    1552:	27 95       	ror	r18
    1554:	ba 95       	dec	r27
    1556:	c9 f7       	brne	.-14     	; 0x154a <__ultoa_invert+0xa2>
    1558:	62 0f       	add	r22, r18
    155a:	73 1f       	adc	r23, r19
    155c:	84 1f       	adc	r24, r20
    155e:	95 1f       	adc	r25, r21
    1560:	a0 1d       	adc	r26, r0
    1562:	08 95       	ret

00001564 <__prologue_saves__>:
    1564:	2f 92       	push	r2
    1566:	3f 92       	push	r3
    1568:	4f 92       	push	r4
    156a:	5f 92       	push	r5
    156c:	6f 92       	push	r6
    156e:	7f 92       	push	r7
    1570:	8f 92       	push	r8
    1572:	9f 92       	push	r9
    1574:	af 92       	push	r10
    1576:	bf 92       	push	r11
    1578:	cf 92       	push	r12
    157a:	df 92       	push	r13
    157c:	ef 92       	push	r14
    157e:	ff 92       	push	r15
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	ca 1b       	sub	r28, r26
    158e:	db 0b       	sbc	r29, r27
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	09 94       	ijmp

0000159c <__epilogue_restores__>:
    159c:	2a 88       	ldd	r2, Y+18	; 0x12
    159e:	39 88       	ldd	r3, Y+17	; 0x11
    15a0:	48 88       	ldd	r4, Y+16	; 0x10
    15a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    15a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    15a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    15a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    15aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    15ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    15ae:	b9 84       	ldd	r11, Y+9	; 0x09
    15b0:	c8 84       	ldd	r12, Y+8	; 0x08
    15b2:	df 80       	ldd	r13, Y+7	; 0x07
    15b4:	ee 80       	ldd	r14, Y+6	; 0x06
    15b6:	fd 80       	ldd	r15, Y+5	; 0x05
    15b8:	0c 81       	ldd	r16, Y+4	; 0x04
    15ba:	1b 81       	ldd	r17, Y+3	; 0x03
    15bc:	aa 81       	ldd	r26, Y+2	; 0x02
    15be:	b9 81       	ldd	r27, Y+1	; 0x01
    15c0:	ce 0f       	add	r28, r30
    15c2:	d1 1d       	adc	r29, r1
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	ed 01       	movw	r28, r26
    15d0:	08 95       	ret

000015d2 <_exit>:
    15d2:	f8 94       	cli

000015d4 <__stop_program>:
    15d4:	ff cf       	rjmp	.-2      	; 0x15d4 <__stop_program>
