
Servo-Motor-Speed-Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000d98  00000e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a7  00800106  00800106  00000e32  2**0
                  ALLOC
  3 .stab         00000d50  00000000  00000000  00000e34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000273  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001df7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000188  00000000  00000000  00001e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000189e  00000000  00000000  00001fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b5f  00000000  00000000  0000384c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d43  00000000  00000000  000043ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000408  00000000  00000000  000050f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000062b  00000000  00000000  000054f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000fc4  00000000  00000000  00005b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f8  00000000  00000000  00006ae7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	23 c0       	rjmp	.+70     	; 0x48 <__ctors_end>
   2:	3d c0       	rjmp	.+122    	; 0x7e <__bad_interrupt>
   4:	3c c0       	rjmp	.+120    	; 0x7e <__bad_interrupt>
   6:	3b c0       	rjmp	.+118    	; 0x7e <__bad_interrupt>
   8:	b2 c0       	rjmp	.+356    	; 0x16e <__vector_4>
   a:	39 c0       	rjmp	.+114    	; 0x7e <__bad_interrupt>
   c:	38 c0       	rjmp	.+112    	; 0x7e <__bad_interrupt>
   e:	37 c0       	rjmp	.+110    	; 0x7e <__bad_interrupt>
  10:	36 c0       	rjmp	.+108    	; 0x7e <__bad_interrupt>
  12:	35 c0       	rjmp	.+106    	; 0x7e <__bad_interrupt>
  14:	34 c0       	rjmp	.+104    	; 0x7e <__bad_interrupt>
  16:	33 c0       	rjmp	.+102    	; 0x7e <__bad_interrupt>
  18:	32 c0       	rjmp	.+100    	; 0x7e <__bad_interrupt>
  1a:	31 c0       	rjmp	.+98     	; 0x7e <__bad_interrupt>
  1c:	30 c0       	rjmp	.+96     	; 0x7e <__bad_interrupt>
  1e:	2f c0       	rjmp	.+94     	; 0x7e <__bad_interrupt>
  20:	2e c0       	rjmp	.+92     	; 0x7e <__bad_interrupt>
  22:	2d c0       	rjmp	.+90     	; 0x7e <__bad_interrupt>
  24:	15 c1       	rjmp	.+554    	; 0x250 <__vector_18>
  26:	2b c0       	rjmp	.+86     	; 0x7e <__bad_interrupt>
  28:	2a c0       	rjmp	.+84     	; 0x7e <__bad_interrupt>
  2a:	29 c0       	rjmp	.+82     	; 0x7e <__bad_interrupt>
  2c:	28 c0       	rjmp	.+80     	; 0x7e <__bad_interrupt>
  2e:	27 c0       	rjmp	.+78     	; 0x7e <__bad_interrupt>
  30:	26 c0       	rjmp	.+76     	; 0x7e <__bad_interrupt>
  32:	25 c0       	rjmp	.+74     	; 0x7e <__bad_interrupt>
  34:	a9 c1       	rjmp	.+850    	; 0x388 <main+0x86>
  36:	aa c1       	rjmp	.+852    	; 0x38c <main+0x8a>
  38:	ab c1       	rjmp	.+854    	; 0x390 <main+0x8e>
  3a:	ae c1       	rjmp	.+860    	; 0x398 <main+0x96>
  3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <main+0x9e>
  3e:	b2 c1       	rjmp	.+868    	; 0x3a4 <main+0xa2>
  40:	b3 c1       	rjmp	.+870    	; 0x3a8 <main+0xa6>
  42:	b4 c1       	rjmp	.+872    	; 0x3ac <main+0xaa>
  44:	b5 c1       	rjmp	.+874    	; 0x3b0 <main+0xae>
  46:	b6 c1       	rjmp	.+876    	; 0x3b4 <main+0xb2>

00000048 <__ctors_end>:
  48:	11 24       	eor	r1, r1
  4a:	1f be       	out	0x3f, r1	; 63
  4c:	cf ef       	ldi	r28, 0xFF	; 255
  4e:	d4 e0       	ldi	r29, 0x04	; 4
  50:	de bf       	out	0x3e, r29	; 62
  52:	cd bf       	out	0x3d, r28	; 61

00000054 <__do_copy_data>:
  54:	11 e0       	ldi	r17, 0x01	; 1
  56:	a0 e0       	ldi	r26, 0x00	; 0
  58:	b1 e0       	ldi	r27, 0x01	; 1
  5a:	e8 e9       	ldi	r30, 0x98	; 152
  5c:	fd e0       	ldi	r31, 0x0D	; 13
  5e:	02 c0       	rjmp	.+4      	; 0x64 <__do_copy_data+0x10>
  60:	05 90       	lpm	r0, Z+
  62:	0d 92       	st	X+, r0
  64:	a6 30       	cpi	r26, 0x06	; 6
  66:	b1 07       	cpc	r27, r17
  68:	d9 f7       	brne	.-10     	; 0x60 <__do_copy_data+0xc>

0000006a <__do_clear_bss>:
  6a:	21 e0       	ldi	r18, 0x01	; 1
  6c:	a6 e0       	ldi	r26, 0x06	; 6
  6e:	b1 e0       	ldi	r27, 0x01	; 1
  70:	01 c0       	rjmp	.+2      	; 0x74 <.do_clear_bss_start>

00000072 <.do_clear_bss_loop>:
  72:	1d 92       	st	X+, r1

00000074 <.do_clear_bss_start>:
  74:	ad 3a       	cpi	r26, 0xAD	; 173
  76:	b2 07       	cpc	r27, r18
  78:	e1 f7       	brne	.-8      	; 0x72 <.do_clear_bss_loop>
  7a:	43 d1       	rcall	.+646    	; 0x302 <main>
  7c:	8b c6       	rjmp	.+3350   	; 0xd94 <_exit>

0000007e <__bad_interrupt>:
  7e:	c0 cf       	rjmp	.-128    	; 0x0 <__vectors>

00000080 <calc_latest_rpm>:
	
	// convert back from Qm.n to normal int
	temp = temp >> N;
	rpm_avg = temp;
	
}
  80:	af 92       	push	r10
  82:	bf 92       	push	r11
  84:	cf 92       	push	r12
}

/*	Calculates the speed for a single encoder-interrupt, using fixed point arithmetics.
 *	Qm.n values defined in shared.h
*/
void calc_latest_rpm(){
  86:	df 92       	push	r13
  88:	ef 92       	push	r14
  8a:	ff 92       	push	r15
  8c:	0f 93       	push	r16
  8e:	1f 93       	push	r17
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
	// scales based on prescaling
	uint16_t prescale = 8;

	uint32_t temp;

	temp = (uint32_t)delta_clk * prescale;
  94:	80 91 a1 01 	lds	r24, 0x01A1
  98:	90 91 a2 01 	lds	r25, 0x01A2
  9c:	9c 01       	movw	r18, r24
  9e:	22 0f       	add	r18, r18
  a0:	33 1f       	adc	r19, r19
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	22 0f       	add	r18, r18
  a8:	33 1f       	adc	r19, r19
	uint64_t numerator;
	uint64_t denominator;
	uint64_t rpm;
	
	delta_time = calc_delta_time();
	test_var2 = delta_time;
  aa:	30 93 a6 01 	sts	0x01A6, r19
  ae:	20 93 a5 01 	sts	0x01A5, r18
	
	delta_time = delta_time << N;
  b2:	98 2f       	mov	r25, r24
  b4:	88 27       	eor	r24, r24
  b6:	90 93 a4 01 	sts	0x01A4, r25
  ba:	80 93 a3 01 	sts	0x01A3, r24
	S_TO_MIN = S_TO_MIN << N;

	numerator = (uint64_t)MS_TO_S * S_TO_MIN;
	numerator = numerator >> N;

	denominator = (uint64_t)delta_rev_inverse * delta_time;
  be:	a1 2c       	mov	r10, r1
  c0:	0f 2e       	mov	r0, r31
  c2:	fc e0       	ldi	r31, 0x0C	; 12
  c4:	bf 2e       	mov	r11, r31
  c6:	f0 2d       	mov	r31, r0
  c8:	c1 2c       	mov	r12, r1
  ca:	d1 2c       	mov	r13, r1
  cc:	e1 2c       	mov	r14, r1
  ce:	f1 2c       	mov	r15, r1
  d0:	00 e0       	ldi	r16, 0x00	; 0
  d2:	10 e0       	ldi	r17, 0x00	; 0
  d4:	28 2f       	mov	r18, r24
  d6:	39 2f       	mov	r19, r25
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	ad d2       	rcall	.+1370   	; 0x640 <__muldi3>
	denominator = denominator >> N;
  e6:	05 e0       	ldi	r16, 0x05	; 5
  e8:	3b d3       	rcall	.+1654   	; 0x760 <__lshrdi3>
  ea:	d2 2f       	mov	r29, r18
  ec:	c3 2f       	mov	r28, r19
  ee:	c4 2e       	mov	r12, r20
  f0:	d5 2e       	mov	r13, r21
  f2:	e6 2e       	mov	r14, r22
  f4:	f7 2e       	mov	r15, r23
  f6:	e8 2f       	mov	r30, r24
  f8:	19 2f       	mov	r17, r25

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1); // For correct rounding
  fa:	01 e0       	ldi	r16, 0x01	; 1
  fc:	31 d3       	rcall	.+1634   	; 0x760 <__lshrdi3>
  fe:	44 5e       	subi	r20, 0xE4	; 228
 100:	5d 4f       	sbci	r21, 0xFD	; 253
 102:	6f 4f       	sbci	r22, 0xFF	; 255
 104:	7f 4f       	sbci	r23, 0xFF	; 255
 106:	8f 4f       	sbci	r24, 0xFF	; 255
 108:	9f 4f       	sbci	r25, 0xFF	; 255
	rpm = rpm / denominator;
 10a:	ad 2e       	mov	r10, r29
 10c:	bc 2e       	mov	r11, r28
 10e:	0e 2f       	mov	r16, r30
 110:	8c d2       	rcall	.+1304   	; 0x62a <__udivdi3>
	
	curr_rpm = (uint32_t)rpm >> N;
 112:	82 2f       	mov	r24, r18
 114:	93 2f       	mov	r25, r19
 116:	32 2f       	mov	r19, r18
 118:	29 2f       	mov	r18, r25
 11a:	96 95       	lsr	r25
 11c:	87 95       	ror	r24
 11e:	92 95       	swap	r25
 120:	82 95       	swap	r24
 122:	8f 70       	andi	r24, 0x0F	; 15
 124:	89 27       	eor	r24, r25
 126:	9f 70       	andi	r25, 0x0F	; 15
 128:	89 27       	eor	r24, r25
 12a:	90 93 aa 01 	sts	0x01AA, r25
 12e:	80 93 a9 01 	sts	0x01A9, r24
 132:	e3 e9       	ldi	r30, 0x93	; 147
 134:	f1 e0       	ldi	r31, 0x01	; 1
}

/*	Calculates the speed for a single encoder-interrupt, using fixed point arithmetics.
 *	Qm.n values defined in shared.h
*/
void calc_latest_rpm(){
 136:	43 e1       	ldi	r20, 0x13	; 19
 138:	51 e0       	ldi	r21, 0x01	; 1
    if(temp < 0 || temp > 130){
        return;
    }
*/
    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
        rpm_measurements[i] = rpm_measurements[i-1];
 13a:	92 91       	ld	r25, -Z
 13c:	82 91       	ld	r24, -Z
 13e:	93 83       	std	Z+3, r25	; 0x03
 140:	82 83       	std	Z+2, r24	; 0x02

    if(temp < 0 || temp > 130){
        return;
    }
*/
    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
 142:	e4 17       	cp	r30, r20
 144:	f5 07       	cpc	r31, r21
 146:	c9 f7       	brne	.-14     	; 0x13a <calc_latest_rpm+0xba>
        rpm_measurements[i] = rpm_measurements[i-1];
    }
    rpm_measurements[0] = rpm;
 148:	30 93 15 01 	sts	0x0115, r19
 14c:	20 93 16 01 	sts	0x0116, r18
	rpm = rpm / denominator;
	
	curr_rpm = (uint32_t)rpm >> N;
	insert_rpm(rpm);
	
	test_var1 = denominator;
 150:	d0 93 9d 01 	sts	0x019D, r29
 154:	c0 93 9e 01 	sts	0x019E, r28
	
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	ff 90       	pop	r15
 162:	ef 90       	pop	r14
 164:	df 90       	pop	r13
 166:	cf 90       	pop	r12
 168:	bf 90       	pop	r11
 16a:	af 90       	pop	r10
 16c:	08 95       	ret

0000016e <__vector_4>:
	}
	clk_prev = clk_curr;
}

/* ISR for PCINT14-8 */
ISR(PCINT1_vect){
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
	cli();
 17c:	f8 94       	cli
	
	clk_curr = TCNT1;
 17e:	80 91 84 00 	lds	r24, 0x0084
 182:	90 91 85 00 	lds	r25, 0x0085
 186:	90 93 9c 01 	sts	0x019C, r25
 18a:	80 93 9b 01 	sts	0x019B, r24
	newMeasurement = true;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	80 93 06 01 	sts	0x0106, r24
	
	sei();
 194:	78 94       	sei
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <USART_transmit>:
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with " "
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	00 d0       	rcall	.+0      	; 0x1ae <USART_transmit+0xa>
 1ae:	00 d0       	rcall	.+0      	; 0x1b0 <USART_transmit+0xc>
 1b0:	00 d0       	rcall	.+0      	; 0x1b2 <USART_transmit+0xe>
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
	int j = 0;
	char buf[6];
	int data_len = strlen(data);
 1b6:	e8 2f       	mov	r30, r24
 1b8:	f9 2f       	mov	r31, r25
 1ba:	df 01       	movw	r26, r30
 1bc:	0d 90       	ld	r0, X+
 1be:	00 20       	and	r0, r0
 1c0:	e9 f7       	brne	.-6      	; 0x1bc <USART_transmit+0x18>
 1c2:	11 97       	sbiw	r26, 0x01	; 1
 1c4:	8d 01       	movw	r16, r26
 1c6:	0e 1b       	sub	r16, r30
 1c8:	1f 0b       	sbc	r17, r31

	strncpy(buf, data, data_len);
 1ca:	a8 01       	movw	r20, r16
 1cc:	68 2f       	mov	r22, r24
 1ce:	79 2f       	mov	r23, r25
 1d0:	ce 01       	movw	r24, r28
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	e0 d2       	rcall	.+1472   	; 0x796 <strncpy>

	// Pads data with trailing " "
	while( (data_len + i) <= 5){
 1d6:	06 30       	cpi	r16, 0x06	; 6
 1d8:	11 05       	cpc	r17, r1
 1da:	24 f5       	brge	.+72     	; 0x224 <USART_transmit+0x80>
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with " "
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
 1dc:	c8 01       	movw	r24, r16
 1de:	01 96       	adiw	r24, 0x01	; 1
	strncpy(buf, data, data_len);

	// Pads data with trailing " "
	while( (data_len + i) <= 5){
		int pos = (data_len + i);
		strcpy(buf + pos, " ");
 1e0:	20 e2       	ldi	r18, 0x20	; 32
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	e1 e0       	ldi	r30, 0x01	; 1
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	ec 0f       	add	r30, r28
 1ea:	fd 1f       	adc	r31, r29
 1ec:	e0 0f       	add	r30, r16
 1ee:	f1 1f       	adc	r31, r17
 1f0:	31 83       	std	Z+1, r19	; 0x01
 1f2:	20 83       	st	Z, r18
	int data_len = strlen(data);

	strncpy(buf, data, data_len);

	// Pads data with trailing " "
	while( (data_len + i) <= 5){
 1f4:	8c 01       	movw	r16, r24
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	87 30       	cpi	r24, 0x07	; 7
 1fa:	91 05       	cpc	r25, r1
 1fc:	99 f7       	brne	.-26     	; 0x1e4 <USART_transmit+0x40>
 1fe:	12 c0       	rjmp	.+36     	; 0x224 <USART_transmit+0x80>
		i++;
	}

	for(j = 0; j < 5; j++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
 200:	40 81       	ld	r20, Z
 202:	45 ff       	sbrs	r20, 5
 204:	fd cf       	rjmp	.-6      	; 0x200 <USART_transmit+0x5c>
		UDR0 = buf[j];
 206:	db 01       	movw	r26, r22
 208:	4d 91       	ld	r20, X+
 20a:	bd 01       	movw	r22, r26
 20c:	dc 01       	movw	r26, r24
 20e:	4c 93       	st	X, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 210:	a1 ee       	ldi	r26, 0xE1	; 225
 212:	b4 e0       	ldi	r27, 0x04	; 4
 214:	11 97       	sbiw	r26, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <USART_transmit+0x70>
 218:	00 c0       	rjmp	.+0      	; 0x21a <USART_transmit+0x76>
 21a:	00 00       	nop
		int pos = (data_len + i);
		strcpy(buf + pos, " ");
		i++;
	}

	for(j = 0; j < 5; j++){
 21c:	62 17       	cp	r22, r18
 21e:	73 07       	cpc	r23, r19
 220:	79 f7       	brne	.-34     	; 0x200 <USART_transmit+0x5c>
 222:	0b c0       	rjmp	.+22     	; 0x23a <USART_transmit+0x96>
 224:	be 01       	movw	r22, r28
 226:	6f 5f       	subi	r22, 0xFF	; 255
 228:	7f 4f       	sbci	r23, 0xFF	; 255
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with " "
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
 22a:	9e 01       	movw	r18, r28
 22c:	2a 5f       	subi	r18, 0xFA	; 250
 22e:	3f 4f       	sbci	r19, 0xFF	; 255
		i++;
	}

	for(j = 0; j < 5; j++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
 230:	e0 ec       	ldi	r30, 0xC0	; 192
 232:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = buf[j];
 234:	86 ec       	ldi	r24, 0xC6	; 198
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	e3 cf       	rjmp	.-58     	; 0x200 <USART_transmit+0x5c>
		_delay_ms(5);
	}
}
 23a:	26 96       	adiw	r28, 0x06	; 6
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	08 95       	ret

00000250 <__vector_18>:
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	2f 93       	push	r18
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
	cli();
 26c:	f8 94       	cli
	PORTC &= ~(1 << PC2);
 26e:	42 98       	cbi	0x08, 2	; 8
	PORTC |= (1 << PC1);
 270:	41 9a       	sbi	0x08, 1	; 8
 272:	a5 e9       	ldi	r26, 0x95	; 149
 274:	b1 e0       	ldi	r27, 0x01	; 1
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
 276:	8a e9       	ldi	r24, 0x9A	; 154
 278:	91 e0       	ldi	r25, 0x01	; 1
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
 27a:	e0 ec       	ldi	r30, 0xC0	; 192
 27c:	f0 e0       	ldi	r31, 0x00	; 0
		recieved_bytes[i] = UDR0;
 27e:	c6 ec       	ldi	r28, 0xC6	; 198
 280:	d0 e0       	ldi	r29, 0x00	; 0
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
 282:	20 81       	ld	r18, Z
 284:	22 23       	and	r18, r18
 286:	ec f7       	brge	.-6      	; 0x282 <__vector_18+0x32>
		recieved_bytes[i] = UDR0;
 288:	28 81       	ld	r18, Y
 28a:	2d 93       	st	X+, r18
*/
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
 28c:	a8 17       	cp	r26, r24
 28e:	b9 07       	cpc	r27, r25
 290:	c1 f7       	brne	.-16     	; 0x282 <__vector_18+0x32>
		while( !(UCSR0A & (1 << RXC0)) );
		recieved_bytes[i] = UDR0;
	}
	PORTC &= ~(1 << PC1);
 292:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (1 << PC2);
 294:	42 9a       	sbi	0x08, 2	; 8
	newCommand = true;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 9a 01 	sts	0x019A, r24
	sei();
 29c:	78 94       	sei
}
 29e:	ff 91       	pop	r31
 2a0:	ef 91       	pop	r30
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	2f 91       	pop	r18
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <setup_registers>:
 *	PC1, PD5-PD6
 *	See details in datasheet pg. 99-100
*/
static void setup_DDR(){

	DDRB |= 0x00;
 2ba:	84 b1       	in	r24, 0x04	; 4
 2bc:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC2) | (1 << PC1) | (1 << PC0);
 2be:	87 b1       	in	r24, 0x07	; 7
 2c0:	87 60       	ori	r24, 0x07	; 7
 2c2:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PD6) | (1 << PD5) | (1 << PD1);
 2c4:	8a b1       	in	r24, 0x0a	; 10
 2c6:	82 66       	ori	r24, 0x62	; 98
 2c8:	8a b9       	out	0x0a, r24	; 10
 *	PWM-mode: fast PWM, inverted, no prescaling.
 *	See details in datasheet pg. 113-117
*/
static void setup_PWM(){

	TCCR0A = (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0) | (1 << WGM01) | (1 << WGM00);
 2ca:	83 ef       	ldi	r24, 0xF3	; 243
 2cc:	84 bd       	out	0x24, r24	; 36
	TCCR0B =  (0 << CS02) | (0 << CS01) | (1 << CS00);
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	85 bd       	out	0x25, r24	; 37
 * 	Baud rate according to #define in shared.h
 * 	See details in datasheet pg. 201-205
*/
static void setup_USART(){

	DDRD |= (1 << PD1);
 2d2:	51 9a       	sbi	0x0a, 1	; 10
	unsigned int ubrr = (((F_CPU / (BAUD * 16UL))) - 1 );

	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 2d4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
 2d8:	89 e1       	ldi	r24, 0x19	; 25
 2da:	80 93 c4 00 	sts	0x00C4, r24

	// Enable reciever for interrupt and transmitter
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0);
 2de:	88 e9       	ldi	r24, 0x98	; 152
 2e0:	80 93 c1 00 	sts	0x00C1, r24

	// Set frame format: 8 data, 2 stop, 0 parity
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 2e4:	86 e0       	ldi	r24, 0x06	; 6
 2e6:	80 93 c2 00 	sts	0x00C2, r24
 * 	See details in datasheet pg. 81-82
*/
static void setup_interrupts(){

	// Enables possibility of interrupts on pins 14-8
	PCICR = (1 << PCIE1);
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	80 93 68 00 	sts	0x0068, r24
	// Enables interrupts on pin PC4-PC5
	PCMSK1 = (1 << PCINT13) | (1 << PCINT12);
 2f0:	80 e3       	ldi	r24, 0x30	; 48
 2f2:	80 93 6c 00 	sts	0x006C, r24
/*	
 *	Sets up clk/8 prescaling on 16-bit timer OC1
 *	See details in datasheet pg. 141-147
*/	
static void setup_speed_clock(){
	TCCR1B |= (1 << CS11);
 2f6:	e1 e8       	ldi	r30, 0x81	; 129
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	82 60       	ori	r24, 0x02	; 2
 2fe:	80 83       	st	Z, r24
 300:	08 95       	ret

00000302 <main>:
#include "transmit.h"




int main(void){
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	00 d0       	rcall	.+0      	; 0x308 <main+0x6>
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
	AB = 0;
 30c:	10 92 a0 01 	sts	0x01A0, r1
 310:	10 92 9f 01 	sts	0x019F, r1
	pwm = 50;
 314:	82 e3       	ldi	r24, 0x32	; 50
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	90 93 a8 01 	sts	0x01A8, r25
 31c:	80 93 a7 01 	sts	0x01A7, r24
	int speed_set = 50;
 320:	9a 83       	std	Y+2, r25	; 0x02
 322:	89 83       	std	Y+1, r24	; 0x01
	speed_actual = 0;
 324:	10 92 0c 01 	sts	0x010C, r1
 328:	10 92 0b 01 	sts	0x010B, r1
	newCommand = false;
 32c:	10 92 9a 01 	sts	0x019A, r1
	newMeasurement = false;
	pos_last_rpm = 0;
 330:	10 92 ac 01 	sts	0x01AC, r1
 334:	10 92 ab 01 	sts	0x01AB, r1
	rpm_avg = 0;
 338:	10 92 0a 01 	sts	0x010A, r1
 33c:	10 92 09 01 	sts	0x0109, r1
	clk_curr = 0;
 340:	10 92 9c 01 	sts	0x019C, r1
 344:	10 92 9b 01 	sts	0x019B, r1
	clk_prev = 0;
 348:	10 92 08 01 	sts	0x0108, r1
 34c:	10 92 07 01 	sts	0x0107, r1
	
	int* speed_set_pnt;
	speed_set_pnt = &speed_set;

	newMeasurement = true;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	80 93 06 01 	sts	0x0106, r24
	clk_elapsed = 10000;
 356:	80 e1       	ldi	r24, 0x10	; 16
 358:	97 e2       	ldi	r25, 0x27	; 39
 35a:	90 93 a2 01 	sts	0x01A2, r25
 35e:	80 93 a1 01 	sts	0x01A1, r24

	setup_registers();
 362:	ab df       	rcall	.-170    	; 0x2ba <setup_registers>
	sei();
 364:	78 94       	sei
		if(newCommand){
			//memset(buf,' ', 6*sizeof(char));
			//memset(sub_str,'%', 4*sizeof(char));
			//val = 0;
			
			switch(*recieved_bytes){
 366:	05 e9       	ldi	r16, 0x95	; 149
 368:	11 e0       	ldi	r17, 0x01	; 1
		//char sub_str[4];
		//char temp[30];
		//char *endptr;
		//int val;
		
		if(newCommand){
 36a:	80 91 9a 01 	lds	r24, 0x019A
 36e:	88 23       	and	r24, r24
 370:	21 f1       	breq	.+72     	; 0x3ba <main+0xb8>
			//memset(buf,' ', 6*sizeof(char));
			//memset(sub_str,'%', 4*sizeof(char));
			//val = 0;
			
			switch(*recieved_bytes){
 372:	f8 01       	movw	r30, r16
 374:	80 81       	ld	r24, Z
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	fc 01       	movw	r30, r24
 37a:	f0 97       	sbiw	r30, 0x30	; 48
 37c:	ea 30       	cpi	r30, 0x0A	; 10
 37e:	f1 05       	cpc	r31, r1
 380:	d0 f4       	brcc	.+52     	; 0x3b6 <main+0xb4>
 382:	e6 5e       	subi	r30, 0xE6	; 230
 384:	ff 4f       	sbci	r31, 0xFF	; 255
 386:	09 94       	ijmp
				case '0':
					transmit_0();
 388:	20 d0       	rcall	.+64     	; 0x3ca <transmit_0>
					break;
 38a:	15 c0       	rjmp	.+42     	; 0x3b6 <main+0xb4>
				case '1':
					transmit_1();
 38c:	1f d0       	rcall	.+62     	; 0x3cc <transmit_1>
					break;
 38e:	13 c0       	rjmp	.+38     	; 0x3b6 <main+0xb4>
				case '2':
					transmit_2(speed_set_pnt);
 390:	ce 01       	movw	r24, r28
 392:	01 96       	adiw	r24, 0x01	; 1
 394:	1c d0       	rcall	.+56     	; 0x3ce <transmit_2>
					break;
 396:	0f c0       	rjmp	.+30     	; 0x3b6 <main+0xb4>
				case '3':
					transmit_3(speed_set_pnt);
 398:	ce 01       	movw	r24, r28
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	2b d0       	rcall	.+86     	; 0x3f4 <transmit_3>
					break;
 39e:	0b c0       	rjmp	.+22     	; 0x3b6 <main+0xb4>
				case '4':
					transmit_4();
 3a0:	54 d0       	rcall	.+168    	; 0x44a <transmit_4>
					break;
 3a2:	09 c0       	rjmp	.+18     	; 0x3b6 <main+0xb4>
				case '5':
					transmit_5();
 3a4:	77 d0       	rcall	.+238    	; 0x494 <transmit_5>
					break;
 3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <main+0xb4>
				case '6':
					transmit_6();
 3a8:	a3 d0       	rcall	.+326    	; 0x4f0 <transmit_6>
					break;
 3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <main+0xb4>
				case '7':
					transmit_7();
 3ac:	c6 d0       	rcall	.+396    	; 0x53a <transmit_7>
					break;
 3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <main+0xb4>
				case '8':
					transmit_8();
 3b0:	e9 d0       	rcall	.+466    	; 0x584 <transmit_8>
					break;
 3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <main+0xb4>
				case '9':
					transmit_9();
 3b4:	13 d1       	rcall	.+550    	; 0x5dc <transmit_9>
			}
			
			//USART_transmit(buf);
			//memset(buf,' ', 6*sizeof(char));
			//memset(temp,' ', 30*sizeof(char));
			newCommand = false;
 3b6:	10 92 9a 01 	sts	0x019A, r1
		}
	
		if(newMeasurement){
 3ba:	80 91 06 01 	lds	r24, 0x0106
 3be:	88 23       	and	r24, r24
 3c0:	a1 f2       	breq	.-88     	; 0x36a <main+0x68>
			//calc_time_elapsed();
			calc_latest_rpm();
 3c2:	5e de       	rcall	.-836    	; 0x80 <calc_latest_rpm>
			//calc_avg_rpm();
			newMeasurement = false;
 3c4:	10 92 06 01 	sts	0x0106, r1
 3c8:	d0 cf       	rjmp	.-96     	; 0x36a <main+0x68>

000003ca <transmit_0>:
#include "serial.h"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

void transmit_0(){
 3ca:	08 95       	ret

000003cc <transmit_1>:
	
}

void transmit_1(){
 3cc:	08 95       	ret

000003ce <transmit_2>:

}

void transmit_2(int* speed_set_pnt){
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	00 d0       	rcall	.+0      	; 0x3d4 <transmit_2+0x6>
 3d4:	00 d0       	rcall	.+0      	; 0x3d6 <transmit_2+0x8>
 3d6:	00 d0       	rcall	.+0      	; 0x3d8 <transmit_2+0xa>
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
	//l = strtol(sub_str, &endptr, 10);
	//speed_set = val;
	speed_set_pnt = &val;
	//sprintf(buf, sub_str);
	//memset(buf,' ', 6*sizeof(char));
	USART_transmit(temp);
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	e1 de       	rcall	.-574    	; 0x1a4 <USART_transmit>
	//OCR0B = speed_set;
	//OCR0A = speed_set;
}
 3e2:	26 96       	adiw	r28, 0x06	; 6
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	f8 94       	cli
 3e8:	de bf       	out	0x3e, r29	; 62
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	cd bf       	out	0x3d, r28	; 61
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <transmit_3>:

void transmit_3(int* speed_set_pnt){
 3f4:	0f 93       	push	r16
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	00 d0       	rcall	.+0      	; 0x3fe <transmit_3+0xa>
 3fe:	00 d0       	rcall	.+0      	; 0x400 <transmit_3+0xc>
 400:	00 d0       	rcall	.+0      	; 0x402 <transmit_3+0xe>
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	
	sprintf(temp, "%d",  *speed_set_pnt);
 406:	fc 01       	movw	r30, r24
 408:	21 81       	ldd	r18, Z+1	; 0x01
 40a:	2f 93       	push	r18
 40c:	80 81       	ld	r24, Z
 40e:	8f 93       	push	r24
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	9f 93       	push	r25
 416:	8f 93       	push	r24
 418:	8e 01       	movw	r16, r28
 41a:	0f 5f       	subi	r16, 0xFF	; 255
 41c:	1f 4f       	sbci	r17, 0xFF	; 255
 41e:	1f 93       	push	r17
 420:	0f 93       	push	r16
 422:	f5 d1       	rcall	.+1002   	; 0x80e <sprintf>
	USART_transmit(temp);
 424:	c8 01       	movw	r24, r16
 426:	be de       	rcall	.-644    	; 0x1a4 <USART_transmit>
 428:	0f 90       	pop	r0
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
}
 434:	26 96       	adiw	r28, 0x06	; 6
 436:	0f b6       	in	r0, 0x3f	; 63
 438:	f8 94       	cli
 43a:	de bf       	out	0x3e, r29	; 62
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	cd bf       	out	0x3d, r28	; 61
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	08 95       	ret

0000044a <transmit_4>:


void transmit_4(){
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	00 d0       	rcall	.+0      	; 0x450 <transmit_4+0x6>
 450:	00 d0       	rcall	.+0      	; 0x452 <transmit_4+0x8>
 452:	00 d0       	rcall	.+0      	; 0x454 <transmit_4+0xa>
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	sprintf(temp, "%d", speed_actual);
 458:	80 91 0c 01 	lds	r24, 0x010C
 45c:	8f 93       	push	r24
 45e:	80 91 0b 01 	lds	r24, 0x010B
 462:	8f 93       	push	r24
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	9f 93       	push	r25
 46a:	8f 93       	push	r24
 46c:	ce 01       	movw	r24, r28
 46e:	01 96       	adiw	r24, 0x01	; 1
 470:	9f 93       	push	r25
 472:	8f 93       	push	r24
 474:	cc d1       	rcall	.+920    	; 0x80e <sprintf>
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
 480:	0f 90       	pop	r0
}
 482:	26 96       	adiw	r28, 0x06	; 6
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	f8 94       	cli
 488:	de bf       	out	0x3e, r29	; 62
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	cd bf       	out	0x3d, r28	; 61
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <transmit_5>:

void transmit_5(){
 494:	0f 93       	push	r16
 496:	1f 93       	push	r17
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	00 d0       	rcall	.+0      	; 0x49e <transmit_5+0xa>
 49e:	00 d0       	rcall	.+0      	; 0x4a0 <transmit_5+0xc>
 4a0:	00 d0       	rcall	.+0      	; 0x4a2 <transmit_5+0xe>
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	snprintf(temp, 6, "%" PRIu16, clk_elapsed);
 4a6:	80 91 a2 01 	lds	r24, 0x01A2
 4aa:	8f 93       	push	r24
 4ac:	80 91 a1 01 	lds	r24, 0x01A1
 4b0:	8f 93       	push	r24
 4b2:	83 e0       	ldi	r24, 0x03	; 3
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	9f 93       	push	r25
 4b8:	8f 93       	push	r24
 4ba:	1f 92       	push	r1
 4bc:	86 e0       	ldi	r24, 0x06	; 6
 4be:	8f 93       	push	r24
 4c0:	8e 01       	movw	r16, r28
 4c2:	0f 5f       	subi	r16, 0xFF	; 255
 4c4:	1f 4f       	sbci	r17, 0xFF	; 255
 4c6:	1f 93       	push	r17
 4c8:	0f 93       	push	r16
 4ca:	74 d1       	rcall	.+744    	; 0x7b4 <snprintf>
	USART_transmit(temp);
 4cc:	c8 01       	movw	r24, r16
 4ce:	6a de       	rcall	.-812    	; 0x1a4 <USART_transmit>
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	f8 94       	cli
 4d4:	de bf       	out	0x3e, r29	; 62
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	cd bf       	out	0x3d, r28	; 61
}
 4da:	26 96       	adiw	r28, 0x06	; 6
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	f8 94       	cli
 4e0:	de bf       	out	0x3e, r29	; 62
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	cd bf       	out	0x3d, r28	; 61
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	1f 91       	pop	r17
 4ec:	0f 91       	pop	r16
 4ee:	08 95       	ret

000004f0 <transmit_6>:

void transmit_6(){
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	00 d0       	rcall	.+0      	; 0x4f6 <transmit_6+0x6>
 4f6:	00 d0       	rcall	.+0      	; 0x4f8 <transmit_6+0x8>
 4f8:	00 d0       	rcall	.+0      	; 0x4fa <transmit_6+0xa>
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	sprintf(temp, "%" PRIu32, rpm_avg);
 4fe:	80 91 0a 01 	lds	r24, 0x010A
 502:	8f 93       	push	r24
 504:	80 91 09 01 	lds	r24, 0x0109
 508:	8f 93       	push	r24
 50a:	83 e0       	ldi	r24, 0x03	; 3
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	9f 93       	push	r25
 510:	8f 93       	push	r24
 512:	ce 01       	movw	r24, r28
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	9f 93       	push	r25
 518:	8f 93       	push	r24
 51a:	79 d1       	rcall	.+754    	; 0x80e <sprintf>
 51c:	0f 90       	pop	r0
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
}
 528:	26 96       	adiw	r28, 0x06	; 6
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	f8 94       	cli
 52e:	de bf       	out	0x3e, r29	; 62
 530:	0f be       	out	0x3f, r0	; 63
 532:	cd bf       	out	0x3d, r28	; 61
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	08 95       	ret

0000053a <transmit_7>:

void transmit_7(){
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
 53e:	00 d0       	rcall	.+0      	; 0x540 <transmit_7+0x6>
 540:	00 d0       	rcall	.+0      	; 0x542 <transmit_7+0x8>
 542:	00 d0       	rcall	.+0      	; 0x544 <transmit_7+0xa>
 544:	cd b7       	in	r28, 0x3d	; 61
 546:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	sprintf(temp, "%u", test_var1);
 548:	80 91 9e 01 	lds	r24, 0x019E
 54c:	8f 93       	push	r24
 54e:	80 91 9d 01 	lds	r24, 0x019D
 552:	8f 93       	push	r24
 554:	83 e0       	ldi	r24, 0x03	; 3
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	9f 93       	push	r25
 55a:	8f 93       	push	r24
 55c:	ce 01       	movw	r24, r28
 55e:	01 96       	adiw	r24, 0x01	; 1
 560:	9f 93       	push	r25
 562:	8f 93       	push	r24
 564:	54 d1       	rcall	.+680    	; 0x80e <sprintf>
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
}
 572:	26 96       	adiw	r28, 0x06	; 6
 574:	0f b6       	in	r0, 0x3f	; 63
 576:	f8 94       	cli
 578:	de bf       	out	0x3e, r29	; 62
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	cd bf       	out	0x3d, r28	; 61
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	08 95       	ret

00000584 <transmit_8>:

void transmit_8(){
 584:	0f 93       	push	r16
 586:	1f 93       	push	r17
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	00 d0       	rcall	.+0      	; 0x58e <transmit_8+0xa>
 58e:	00 d0       	rcall	.+0      	; 0x590 <transmit_8+0xc>
 590:	00 d0       	rcall	.+0      	; 0x592 <transmit_8+0xe>
 592:	cd b7       	in	r28, 0x3d	; 61
 594:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	uint16_t test = 60000;
	
	snprintf(temp, 6, "%" PRIu16, test);
 596:	8a ee       	ldi	r24, 0xEA	; 234
 598:	8f 93       	push	r24
 59a:	80 e6       	ldi	r24, 0x60	; 96
 59c:	8f 93       	push	r24
 59e:	83 e0       	ldi	r24, 0x03	; 3
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	9f 93       	push	r25
 5a4:	8f 93       	push	r24
 5a6:	1f 92       	push	r1
 5a8:	86 e0       	ldi	r24, 0x06	; 6
 5aa:	8f 93       	push	r24
 5ac:	8e 01       	movw	r16, r28
 5ae:	0f 5f       	subi	r16, 0xFF	; 255
 5b0:	1f 4f       	sbci	r17, 0xFF	; 255
 5b2:	1f 93       	push	r17
 5b4:	0f 93       	push	r16
 5b6:	fe d0       	rcall	.+508    	; 0x7b4 <snprintf>
	
	USART_transmit(temp);
 5b8:	c8 01       	movw	r24, r16
 5ba:	f4 dd       	rcall	.-1048   	; 0x1a4 <USART_transmit>
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	f8 94       	cli
 5c0:	de bf       	out	0x3e, r29	; 62
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	cd bf       	out	0x3d, r28	; 61
}
 5c6:	26 96       	adiw	r28, 0x06	; 6
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	f8 94       	cli
 5cc:	de bf       	out	0x3e, r29	; 62
 5ce:	0f be       	out	0x3f, r0	; 63
 5d0:	cd bf       	out	0x3d, r28	; 61
 5d2:	df 91       	pop	r29
 5d4:	cf 91       	pop	r28
 5d6:	1f 91       	pop	r17
 5d8:	0f 91       	pop	r16
 5da:	08 95       	ret

000005dc <transmit_9>:

void transmit_9(){
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	00 d0       	rcall	.+0      	; 0x5e2 <transmit_9+0x6>
 5e2:	00 d0       	rcall	.+0      	; 0x5e4 <transmit_9+0x8>
 5e4:	00 d0       	rcall	.+0      	; 0x5e6 <transmit_9+0xa>
 5e6:	cd b7       	in	r28, 0x3d	; 61
 5e8:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	sprintf(temp, "%" PRIu32, curr_rpm);
 5ea:	80 91 aa 01 	lds	r24, 0x01AA
 5ee:	8f 93       	push	r24
 5f0:	80 91 a9 01 	lds	r24, 0x01A9
 5f4:	8f 93       	push	r24
 5f6:	83 e0       	ldi	r24, 0x03	; 3
 5f8:	91 e0       	ldi	r25, 0x01	; 1
 5fa:	9f 93       	push	r25
 5fc:	8f 93       	push	r24
 5fe:	ce 01       	movw	r24, r28
 600:	01 96       	adiw	r24, 0x01	; 1
 602:	9f 93       	push	r25
 604:	8f 93       	push	r24
 606:	03 d1       	rcall	.+518    	; 0x80e <sprintf>
 608:	0f 90       	pop	r0
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	0f 90       	pop	r0
 610:	0f 90       	pop	r0
 612:	0f 90       	pop	r0
	//strncpy(buf, temp, 5);
}
 614:	26 96       	adiw	r28, 0x06	; 6
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	f8 94       	cli
 61a:	de bf       	out	0x3e, r29	; 62
 61c:	0f be       	out	0x3f, r0	; 63
 61e:	cd bf       	out	0x3d, r28	; 61
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <__umoddi3>:
 626:	68 94       	set
 628:	01 c0       	rjmp	.+2      	; 0x62c <__udivdi3_umoddi3>

0000062a <__udivdi3>:
 62a:	e8 94       	clt

0000062c <__udivdi3_umoddi3>:
 62c:	8f 92       	push	r8
 62e:	9f 92       	push	r9
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	56 d0       	rcall	.+172    	; 0x6e2 <__udivmod64>
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	9f 90       	pop	r9
 63c:	8f 90       	pop	r8
 63e:	08 95       	ret

00000640 <__muldi3>:
 640:	df 93       	push	r29
 642:	cf 93       	push	r28
 644:	1f 93       	push	r17
 646:	0f 93       	push	r16
 648:	9a 9d       	mul	r25, r10
 64a:	f0 2d       	mov	r31, r0
 64c:	21 9f       	mul	r18, r17
 64e:	f0 0d       	add	r31, r0
 650:	8b 9d       	mul	r24, r11
 652:	f0 0d       	add	r31, r0
 654:	8a 9d       	mul	r24, r10
 656:	e0 2d       	mov	r30, r0
 658:	f1 0d       	add	r31, r1
 65a:	03 9f       	mul	r16, r19
 65c:	f0 0d       	add	r31, r0
 65e:	02 9f       	mul	r16, r18
 660:	e0 0d       	add	r30, r0
 662:	f1 1d       	adc	r31, r1
 664:	4e 9d       	mul	r20, r14
 666:	e0 0d       	add	r30, r0
 668:	f1 1d       	adc	r31, r1
 66a:	5e 9d       	mul	r21, r14
 66c:	f0 0d       	add	r31, r0
 66e:	4f 9d       	mul	r20, r15
 670:	f0 0d       	add	r31, r0
 672:	7f 93       	push	r23
 674:	6f 93       	push	r22
 676:	bf 92       	push	r11
 678:	af 92       	push	r10
 67a:	5f 93       	push	r21
 67c:	4f 93       	push	r20
 67e:	d5 01       	movw	r26, r10
 680:	7e d0       	rcall	.+252    	; 0x77e <__umulhisi3>
 682:	8b 01       	movw	r16, r22
 684:	ac 01       	movw	r20, r24
 686:	d7 01       	movw	r26, r14
 688:	7a d0       	rcall	.+244    	; 0x77e <__umulhisi3>
 68a:	eb 01       	movw	r28, r22
 68c:	e8 0f       	add	r30, r24
 68e:	f9 1f       	adc	r31, r25
 690:	d6 01       	movw	r26, r12
 692:	1f d0       	rcall	.+62     	; 0x6d2 <__muldi3_6>
 694:	2f 91       	pop	r18
 696:	3f 91       	pop	r19
 698:	d6 01       	movw	r26, r12
 69a:	71 d0       	rcall	.+226    	; 0x77e <__umulhisi3>
 69c:	c6 0f       	add	r28, r22
 69e:	d7 1f       	adc	r29, r23
 6a0:	e8 1f       	adc	r30, r24
 6a2:	f9 1f       	adc	r31, r25
 6a4:	af 91       	pop	r26
 6a6:	bf 91       	pop	r27
 6a8:	14 d0       	rcall	.+40     	; 0x6d2 <__muldi3_6>
 6aa:	2f 91       	pop	r18
 6ac:	3f 91       	pop	r19
 6ae:	67 d0       	rcall	.+206    	; 0x77e <__umulhisi3>
 6b0:	c6 0f       	add	r28, r22
 6b2:	d7 1f       	adc	r29, r23
 6b4:	e8 1f       	adc	r30, r24
 6b6:	f9 1f       	adc	r31, r25
 6b8:	d6 01       	movw	r26, r12
 6ba:	61 d0       	rcall	.+194    	; 0x77e <__umulhisi3>
 6bc:	e6 0f       	add	r30, r22
 6be:	f7 1f       	adc	r31, r23
 6c0:	98 01       	movw	r18, r16
 6c2:	be 01       	movw	r22, r28
 6c4:	cf 01       	movw	r24, r30
 6c6:	11 24       	eor	r1, r1
 6c8:	0f 91       	pop	r16
 6ca:	1f 91       	pop	r17
 6cc:	cf 91       	pop	r28
 6ce:	df 91       	pop	r29
 6d0:	08 95       	ret

000006d2 <__muldi3_6>:
 6d2:	55 d0       	rcall	.+170    	; 0x77e <__umulhisi3>
 6d4:	46 0f       	add	r20, r22
 6d6:	57 1f       	adc	r21, r23
 6d8:	c8 1f       	adc	r28, r24
 6da:	d9 1f       	adc	r29, r25
 6dc:	08 f4       	brcc	.+2      	; 0x6e0 <__muldi3_6+0xe>
 6de:	31 96       	adiw	r30, 0x01	; 1
 6e0:	08 95       	ret

000006e2 <__udivmod64>:
 6e2:	88 24       	eor	r8, r8
 6e4:	99 24       	eor	r9, r9
 6e6:	f4 01       	movw	r30, r8
 6e8:	e4 01       	movw	r28, r8
 6ea:	b0 e4       	ldi	r27, 0x40	; 64
 6ec:	1b 2e       	mov	r1, r27
 6ee:	d4 01       	movw	r26, r8
 6f0:	9d 15       	cp	r25, r13
 6f2:	8e 04       	cpc	r8, r14
 6f4:	9f 04       	cpc	r9, r15
 6f6:	e0 07       	cpc	r30, r16
 6f8:	f1 07       	cpc	r31, r17
 6fa:	38 f4       	brcc	.+14     	; 0x70a <__udivmod64+0x28>
 6fc:	fc 01       	movw	r30, r24
 6fe:	4b 01       	movw	r8, r22
 700:	ca 01       	movw	r24, r20
 702:	b9 01       	movw	r22, r18
 704:	ad 01       	movw	r20, r26
 706:	9e 01       	movw	r18, r28
 708:	16 94       	lsr	r1
 70a:	22 0f       	add	r18, r18
 70c:	33 1f       	adc	r19, r19
 70e:	44 1f       	adc	r20, r20
 710:	55 1f       	adc	r21, r21
 712:	66 1f       	adc	r22, r22
 714:	77 1f       	adc	r23, r23
 716:	88 1f       	adc	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	88 1c       	adc	r8, r8
 71c:	99 1c       	adc	r9, r9
 71e:	ee 1f       	adc	r30, r30
 720:	ff 1f       	adc	r31, r31
 722:	cc 1f       	adc	r28, r28
 724:	dd 1f       	adc	r29, r29
 726:	aa 1f       	adc	r26, r26
 728:	bb 1f       	adc	r27, r27
 72a:	8a 14       	cp	r8, r10
 72c:	9b 04       	cpc	r9, r11
 72e:	ec 05       	cpc	r30, r12
 730:	fd 05       	cpc	r31, r13
 732:	ce 05       	cpc	r28, r14
 734:	df 05       	cpc	r29, r15
 736:	a0 07       	cpc	r26, r16
 738:	b1 07       	cpc	r27, r17
 73a:	48 f0       	brcs	.+18     	; 0x74e <__udivmod64+0x6c>
 73c:	8a 18       	sub	r8, r10
 73e:	9b 08       	sbc	r9, r11
 740:	ec 09       	sbc	r30, r12
 742:	fd 09       	sbc	r31, r13
 744:	ce 09       	sbc	r28, r14
 746:	df 09       	sbc	r29, r15
 748:	a0 0b       	sbc	r26, r16
 74a:	b1 0b       	sbc	r27, r17
 74c:	21 60       	ori	r18, 0x01	; 1
 74e:	1a 94       	dec	r1
 750:	e1 f6       	brne	.-72     	; 0x70a <__udivmod64+0x28>
 752:	2e f4       	brtc	.+10     	; 0x75e <__udivmod64+0x7c>
 754:	94 01       	movw	r18, r8
 756:	af 01       	movw	r20, r30
 758:	be 01       	movw	r22, r28
 75a:	cd 01       	movw	r24, r26
 75c:	00 0c       	add	r0, r0
 75e:	08 95       	ret

00000760 <__lshrdi3>:
 760:	0f 93       	push	r16
 762:	0f 73       	andi	r16, 0x3F	; 63
 764:	51 f0       	breq	.+20     	; 0x77a <__lshrdi3+0x1a>
 766:	96 95       	lsr	r25
 768:	87 95       	ror	r24
 76a:	77 95       	ror	r23
 76c:	67 95       	ror	r22
 76e:	57 95       	ror	r21
 770:	47 95       	ror	r20
 772:	37 95       	ror	r19
 774:	27 95       	ror	r18
 776:	0a 95       	dec	r16
 778:	b1 f7       	brne	.-20     	; 0x766 <__lshrdi3+0x6>
 77a:	0f 91       	pop	r16
 77c:	08 95       	ret

0000077e <__umulhisi3>:
 77e:	a2 9f       	mul	r26, r18
 780:	b0 01       	movw	r22, r0
 782:	b3 9f       	mul	r27, r19
 784:	c0 01       	movw	r24, r0
 786:	a3 9f       	mul	r26, r19
 788:	01 d0       	rcall	.+2      	; 0x78c <__umulhisi3+0xe>
 78a:	b2 9f       	mul	r27, r18
 78c:	70 0d       	add	r23, r0
 78e:	81 1d       	adc	r24, r1
 790:	11 24       	eor	r1, r1
 792:	91 1d       	adc	r25, r1
 794:	08 95       	ret

00000796 <strncpy>:
 796:	fb 01       	movw	r30, r22
 798:	dc 01       	movw	r26, r24
 79a:	41 50       	subi	r20, 0x01	; 1
 79c:	50 40       	sbci	r21, 0x00	; 0
 79e:	48 f0       	brcs	.+18     	; 0x7b2 <strncpy+0x1c>
 7a0:	01 90       	ld	r0, Z+
 7a2:	0d 92       	st	X+, r0
 7a4:	00 20       	and	r0, r0
 7a6:	c9 f7       	brne	.-14     	; 0x79a <strncpy+0x4>
 7a8:	01 c0       	rjmp	.+2      	; 0x7ac <strncpy+0x16>
 7aa:	1d 92       	st	X+, r1
 7ac:	41 50       	subi	r20, 0x01	; 1
 7ae:	50 40       	sbci	r21, 0x00	; 0
 7b0:	e0 f7       	brcc	.-8      	; 0x7aa <strncpy+0x14>
 7b2:	08 95       	ret

000007b4 <snprintf>:
 7b4:	ae e0       	ldi	r26, 0x0E	; 14
 7b6:	b0 e0       	ldi	r27, 0x00	; 0
 7b8:	ef ed       	ldi	r30, 0xDF	; 223
 7ba:	f3 e0       	ldi	r31, 0x03	; 3
 7bc:	c2 c2       	rjmp	.+1412   	; 0xd42 <__prologue_saves__+0x1c>
 7be:	0d 89       	ldd	r16, Y+21	; 0x15
 7c0:	1e 89       	ldd	r17, Y+22	; 0x16
 7c2:	8f 89       	ldd	r24, Y+23	; 0x17
 7c4:	98 8d       	ldd	r25, Y+24	; 0x18
 7c6:	26 e0       	ldi	r18, 0x06	; 6
 7c8:	2c 83       	std	Y+4, r18	; 0x04
 7ca:	1a 83       	std	Y+2, r17	; 0x02
 7cc:	09 83       	std	Y+1, r16	; 0x01
 7ce:	97 ff       	sbrs	r25, 7
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <snprintf+0x22>
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	90 e8       	ldi	r25, 0x80	; 128
 7d6:	01 97       	sbiw	r24, 0x01	; 1
 7d8:	9e 83       	std	Y+6, r25	; 0x06
 7da:	8d 83       	std	Y+5, r24	; 0x05
 7dc:	ce 01       	movw	r24, r28
 7de:	4b 96       	adiw	r24, 0x1b	; 27
 7e0:	ac 01       	movw	r20, r24
 7e2:	69 8d       	ldd	r22, Y+25	; 0x19
 7e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
 7e6:	ce 01       	movw	r24, r28
 7e8:	01 96       	adiw	r24, 0x01	; 1
 7ea:	30 d0       	rcall	.+96     	; 0x84c <vfprintf>
 7ec:	4d 81       	ldd	r20, Y+5	; 0x05
 7ee:	5e 81       	ldd	r21, Y+6	; 0x06
 7f0:	57 fd       	sbrc	r21, 7
 7f2:	0a c0       	rjmp	.+20     	; 0x808 <snprintf+0x54>
 7f4:	2f 81       	ldd	r18, Y+7	; 0x07
 7f6:	38 85       	ldd	r19, Y+8	; 0x08
 7f8:	42 17       	cp	r20, r18
 7fa:	53 07       	cpc	r21, r19
 7fc:	0c f4       	brge	.+2      	; 0x800 <snprintf+0x4c>
 7fe:	9a 01       	movw	r18, r20
 800:	f8 01       	movw	r30, r16
 802:	e2 0f       	add	r30, r18
 804:	f3 1f       	adc	r31, r19
 806:	10 82       	st	Z, r1
 808:	2e 96       	adiw	r28, 0x0e	; 14
 80a:	e4 e0       	ldi	r30, 0x04	; 4
 80c:	b6 c2       	rjmp	.+1388   	; 0xd7a <__epilogue_restores__+0x1c>

0000080e <sprintf>:
 80e:	ae e0       	ldi	r26, 0x0E	; 14
 810:	b0 e0       	ldi	r27, 0x00	; 0
 812:	ec e0       	ldi	r30, 0x0C	; 12
 814:	f4 e0       	ldi	r31, 0x04	; 4
 816:	95 c2       	rjmp	.+1322   	; 0xd42 <__prologue_saves__+0x1c>
 818:	0d 89       	ldd	r16, Y+21	; 0x15
 81a:	1e 89       	ldd	r17, Y+22	; 0x16
 81c:	86 e0       	ldi	r24, 0x06	; 6
 81e:	8c 83       	std	Y+4, r24	; 0x04
 820:	1a 83       	std	Y+2, r17	; 0x02
 822:	09 83       	std	Y+1, r16	; 0x01
 824:	8f ef       	ldi	r24, 0xFF	; 255
 826:	9f e7       	ldi	r25, 0x7F	; 127
 828:	9e 83       	std	Y+6, r25	; 0x06
 82a:	8d 83       	std	Y+5, r24	; 0x05
 82c:	ce 01       	movw	r24, r28
 82e:	49 96       	adiw	r24, 0x19	; 25
 830:	ac 01       	movw	r20, r24
 832:	6f 89       	ldd	r22, Y+23	; 0x17
 834:	78 8d       	ldd	r23, Y+24	; 0x18
 836:	ce 01       	movw	r24, r28
 838:	01 96       	adiw	r24, 0x01	; 1
 83a:	08 d0       	rcall	.+16     	; 0x84c <vfprintf>
 83c:	ef 81       	ldd	r30, Y+7	; 0x07
 83e:	f8 85       	ldd	r31, Y+8	; 0x08
 840:	e0 0f       	add	r30, r16
 842:	f1 1f       	adc	r31, r17
 844:	10 82       	st	Z, r1
 846:	2e 96       	adiw	r28, 0x0e	; 14
 848:	e4 e0       	ldi	r30, 0x04	; 4
 84a:	97 c2       	rjmp	.+1326   	; 0xd7a <__epilogue_restores__+0x1c>

0000084c <vfprintf>:
 84c:	ac e0       	ldi	r26, 0x0C	; 12
 84e:	b0 e0       	ldi	r27, 0x00	; 0
 850:	eb e2       	ldi	r30, 0x2B	; 43
 852:	f4 e0       	ldi	r31, 0x04	; 4
 854:	68 c2       	rjmp	.+1232   	; 0xd26 <__prologue_saves__>
 856:	7c 01       	movw	r14, r24
 858:	6b 01       	movw	r12, r22
 85a:	8a 01       	movw	r16, r20
 85c:	fc 01       	movw	r30, r24
 85e:	17 82       	std	Z+7, r1	; 0x07
 860:	16 82       	std	Z+6, r1	; 0x06
 862:	83 81       	ldd	r24, Z+3	; 0x03
 864:	81 ff       	sbrs	r24, 1
 866:	b9 c1       	rjmp	.+882    	; 0xbda <vfprintf+0x38e>
 868:	88 24       	eor	r8, r8
 86a:	83 94       	inc	r8
 86c:	91 2c       	mov	r9, r1
 86e:	8c 0e       	add	r8, r28
 870:	9d 1e       	adc	r9, r29
 872:	f7 01       	movw	r30, r14
 874:	93 81       	ldd	r25, Z+3	; 0x03
 876:	f6 01       	movw	r30, r12
 878:	93 fd       	sbrc	r25, 3
 87a:	85 91       	lpm	r24, Z+
 87c:	93 ff       	sbrs	r25, 3
 87e:	81 91       	ld	r24, Z+
 880:	6f 01       	movw	r12, r30
 882:	88 23       	and	r24, r24
 884:	09 f4       	brne	.+2      	; 0x888 <vfprintf+0x3c>
 886:	a5 c1       	rjmp	.+842    	; 0xbd2 <vfprintf+0x386>
 888:	85 32       	cpi	r24, 0x25	; 37
 88a:	39 f4       	brne	.+14     	; 0x89a <vfprintf+0x4e>
 88c:	93 fd       	sbrc	r25, 3
 88e:	85 91       	lpm	r24, Z+
 890:	93 ff       	sbrs	r25, 3
 892:	81 91       	ld	r24, Z+
 894:	6f 01       	movw	r12, r30
 896:	85 32       	cpi	r24, 0x25	; 37
 898:	21 f4       	brne	.+8      	; 0x8a2 <vfprintf+0x56>
 89a:	b7 01       	movw	r22, r14
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	b9 d1       	rcall	.+882    	; 0xc12 <fputc>
 8a0:	e8 cf       	rjmp	.-48     	; 0x872 <vfprintf+0x26>
 8a2:	51 2c       	mov	r5, r1
 8a4:	31 2c       	mov	r3, r1
 8a6:	20 e0       	ldi	r18, 0x00	; 0
 8a8:	20 32       	cpi	r18, 0x20	; 32
 8aa:	a8 f4       	brcc	.+42     	; 0x8d6 <vfprintf+0x8a>
 8ac:	8b 32       	cpi	r24, 0x2B	; 43
 8ae:	61 f0       	breq	.+24     	; 0x8c8 <vfprintf+0x7c>
 8b0:	28 f4       	brcc	.+10     	; 0x8bc <vfprintf+0x70>
 8b2:	80 32       	cpi	r24, 0x20	; 32
 8b4:	51 f0       	breq	.+20     	; 0x8ca <vfprintf+0x7e>
 8b6:	83 32       	cpi	r24, 0x23	; 35
 8b8:	71 f4       	brne	.+28     	; 0x8d6 <vfprintf+0x8a>
 8ba:	0b c0       	rjmp	.+22     	; 0x8d2 <vfprintf+0x86>
 8bc:	8d 32       	cpi	r24, 0x2D	; 45
 8be:	39 f0       	breq	.+14     	; 0x8ce <vfprintf+0x82>
 8c0:	80 33       	cpi	r24, 0x30	; 48
 8c2:	49 f4       	brne	.+18     	; 0x8d6 <vfprintf+0x8a>
 8c4:	21 60       	ori	r18, 0x01	; 1
 8c6:	28 c0       	rjmp	.+80     	; 0x918 <vfprintf+0xcc>
 8c8:	22 60       	ori	r18, 0x02	; 2
 8ca:	24 60       	ori	r18, 0x04	; 4
 8cc:	25 c0       	rjmp	.+74     	; 0x918 <vfprintf+0xcc>
 8ce:	28 60       	ori	r18, 0x08	; 8
 8d0:	23 c0       	rjmp	.+70     	; 0x918 <vfprintf+0xcc>
 8d2:	20 61       	ori	r18, 0x10	; 16
 8d4:	21 c0       	rjmp	.+66     	; 0x918 <vfprintf+0xcc>
 8d6:	27 fd       	sbrc	r18, 7
 8d8:	27 c0       	rjmp	.+78     	; 0x928 <vfprintf+0xdc>
 8da:	38 2f       	mov	r19, r24
 8dc:	30 53       	subi	r19, 0x30	; 48
 8de:	3a 30       	cpi	r19, 0x0A	; 10
 8e0:	78 f4       	brcc	.+30     	; 0x900 <vfprintf+0xb4>
 8e2:	26 ff       	sbrs	r18, 6
 8e4:	06 c0       	rjmp	.+12     	; 0x8f2 <vfprintf+0xa6>
 8e6:	fa e0       	ldi	r31, 0x0A	; 10
 8e8:	5f 9e       	mul	r5, r31
 8ea:	30 0d       	add	r19, r0
 8ec:	11 24       	eor	r1, r1
 8ee:	53 2e       	mov	r5, r19
 8f0:	13 c0       	rjmp	.+38     	; 0x918 <vfprintf+0xcc>
 8f2:	8a e0       	ldi	r24, 0x0A	; 10
 8f4:	38 9e       	mul	r3, r24
 8f6:	30 0d       	add	r19, r0
 8f8:	11 24       	eor	r1, r1
 8fa:	33 2e       	mov	r3, r19
 8fc:	20 62       	ori	r18, 0x20	; 32
 8fe:	0c c0       	rjmp	.+24     	; 0x918 <vfprintf+0xcc>
 900:	8e 32       	cpi	r24, 0x2E	; 46
 902:	21 f4       	brne	.+8      	; 0x90c <vfprintf+0xc0>
 904:	26 fd       	sbrc	r18, 6
 906:	65 c1       	rjmp	.+714    	; 0xbd2 <vfprintf+0x386>
 908:	20 64       	ori	r18, 0x40	; 64
 90a:	06 c0       	rjmp	.+12     	; 0x918 <vfprintf+0xcc>
 90c:	8c 36       	cpi	r24, 0x6C	; 108
 90e:	11 f4       	brne	.+4      	; 0x914 <vfprintf+0xc8>
 910:	20 68       	ori	r18, 0x80	; 128
 912:	02 c0       	rjmp	.+4      	; 0x918 <vfprintf+0xcc>
 914:	88 36       	cpi	r24, 0x68	; 104
 916:	41 f4       	brne	.+16     	; 0x928 <vfprintf+0xdc>
 918:	f6 01       	movw	r30, r12
 91a:	93 fd       	sbrc	r25, 3
 91c:	85 91       	lpm	r24, Z+
 91e:	93 ff       	sbrs	r25, 3
 920:	81 91       	ld	r24, Z+
 922:	6f 01       	movw	r12, r30
 924:	81 11       	cpse	r24, r1
 926:	c0 cf       	rjmp	.-128    	; 0x8a8 <vfprintf+0x5c>
 928:	98 2f       	mov	r25, r24
 92a:	95 54       	subi	r25, 0x45	; 69
 92c:	93 30       	cpi	r25, 0x03	; 3
 92e:	18 f0       	brcs	.+6      	; 0x936 <vfprintf+0xea>
 930:	90 52       	subi	r25, 0x20	; 32
 932:	93 30       	cpi	r25, 0x03	; 3
 934:	28 f4       	brcc	.+10     	; 0x940 <vfprintf+0xf4>
 936:	0c 5f       	subi	r16, 0xFC	; 252
 938:	1f 4f       	sbci	r17, 0xFF	; 255
 93a:	ff e3       	ldi	r31, 0x3F	; 63
 93c:	f9 83       	std	Y+1, r31	; 0x01
 93e:	0d c0       	rjmp	.+26     	; 0x95a <vfprintf+0x10e>
 940:	83 36       	cpi	r24, 0x63	; 99
 942:	31 f0       	breq	.+12     	; 0x950 <vfprintf+0x104>
 944:	83 37       	cpi	r24, 0x73	; 115
 946:	71 f0       	breq	.+28     	; 0x964 <vfprintf+0x118>
 948:	83 35       	cpi	r24, 0x53	; 83
 94a:	09 f0       	breq	.+2      	; 0x94e <vfprintf+0x102>
 94c:	5a c0       	rjmp	.+180    	; 0xa02 <vfprintf+0x1b6>
 94e:	22 c0       	rjmp	.+68     	; 0x994 <vfprintf+0x148>
 950:	f8 01       	movw	r30, r16
 952:	80 81       	ld	r24, Z
 954:	89 83       	std	Y+1, r24	; 0x01
 956:	0e 5f       	subi	r16, 0xFE	; 254
 958:	1f 4f       	sbci	r17, 0xFF	; 255
 95a:	44 24       	eor	r4, r4
 95c:	43 94       	inc	r4
 95e:	51 2c       	mov	r5, r1
 960:	54 01       	movw	r10, r8
 962:	14 c0       	rjmp	.+40     	; 0x98c <vfprintf+0x140>
 964:	38 01       	movw	r6, r16
 966:	f2 e0       	ldi	r31, 0x02	; 2
 968:	6f 0e       	add	r6, r31
 96a:	71 1c       	adc	r7, r1
 96c:	f8 01       	movw	r30, r16
 96e:	a0 80       	ld	r10, Z
 970:	b1 80       	ldd	r11, Z+1	; 0x01
 972:	26 ff       	sbrs	r18, 6
 974:	03 c0       	rjmp	.+6      	; 0x97c <vfprintf+0x130>
 976:	65 2d       	mov	r22, r5
 978:	70 e0       	ldi	r23, 0x00	; 0
 97a:	02 c0       	rjmp	.+4      	; 0x980 <vfprintf+0x134>
 97c:	6f ef       	ldi	r22, 0xFF	; 255
 97e:	7f ef       	ldi	r23, 0xFF	; 255
 980:	c5 01       	movw	r24, r10
 982:	2c 87       	std	Y+12, r18	; 0x0c
 984:	3b d1       	rcall	.+630    	; 0xbfc <strnlen>
 986:	2c 01       	movw	r4, r24
 988:	83 01       	movw	r16, r6
 98a:	2c 85       	ldd	r18, Y+12	; 0x0c
 98c:	6f e7       	ldi	r22, 0x7F	; 127
 98e:	26 2e       	mov	r2, r22
 990:	22 22       	and	r2, r18
 992:	17 c0       	rjmp	.+46     	; 0x9c2 <vfprintf+0x176>
 994:	38 01       	movw	r6, r16
 996:	f2 e0       	ldi	r31, 0x02	; 2
 998:	6f 0e       	add	r6, r31
 99a:	71 1c       	adc	r7, r1
 99c:	f8 01       	movw	r30, r16
 99e:	a0 80       	ld	r10, Z
 9a0:	b1 80       	ldd	r11, Z+1	; 0x01
 9a2:	26 ff       	sbrs	r18, 6
 9a4:	03 c0       	rjmp	.+6      	; 0x9ac <vfprintf+0x160>
 9a6:	65 2d       	mov	r22, r5
 9a8:	70 e0       	ldi	r23, 0x00	; 0
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <vfprintf+0x164>
 9ac:	6f ef       	ldi	r22, 0xFF	; 255
 9ae:	7f ef       	ldi	r23, 0xFF	; 255
 9b0:	c5 01       	movw	r24, r10
 9b2:	2c 87       	std	Y+12, r18	; 0x0c
 9b4:	18 d1       	rcall	.+560    	; 0xbe6 <strnlen_P>
 9b6:	2c 01       	movw	r4, r24
 9b8:	2c 85       	ldd	r18, Y+12	; 0x0c
 9ba:	50 e8       	ldi	r21, 0x80	; 128
 9bc:	25 2e       	mov	r2, r21
 9be:	22 2a       	or	r2, r18
 9c0:	83 01       	movw	r16, r6
 9c2:	23 fc       	sbrc	r2, 3
 9c4:	1a c0       	rjmp	.+52     	; 0x9fa <vfprintf+0x1ae>
 9c6:	05 c0       	rjmp	.+10     	; 0x9d2 <vfprintf+0x186>
 9c8:	b7 01       	movw	r22, r14
 9ca:	80 e2       	ldi	r24, 0x20	; 32
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	21 d1       	rcall	.+578    	; 0xc12 <fputc>
 9d0:	3a 94       	dec	r3
 9d2:	83 2d       	mov	r24, r3
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	48 16       	cp	r4, r24
 9d8:	59 06       	cpc	r5, r25
 9da:	b0 f3       	brcs	.-20     	; 0x9c8 <vfprintf+0x17c>
 9dc:	0e c0       	rjmp	.+28     	; 0x9fa <vfprintf+0x1ae>
 9de:	f5 01       	movw	r30, r10
 9e0:	27 fc       	sbrc	r2, 7
 9e2:	85 91       	lpm	r24, Z+
 9e4:	27 fe       	sbrs	r2, 7
 9e6:	81 91       	ld	r24, Z+
 9e8:	5f 01       	movw	r10, r30
 9ea:	b7 01       	movw	r22, r14
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	11 d1       	rcall	.+546    	; 0xc12 <fputc>
 9f0:	31 10       	cpse	r3, r1
 9f2:	3a 94       	dec	r3
 9f4:	f1 e0       	ldi	r31, 0x01	; 1
 9f6:	4f 1a       	sub	r4, r31
 9f8:	51 08       	sbc	r5, r1
 9fa:	41 14       	cp	r4, r1
 9fc:	51 04       	cpc	r5, r1
 9fe:	79 f7       	brne	.-34     	; 0x9de <vfprintf+0x192>
 a00:	e5 c0       	rjmp	.+458    	; 0xbcc <vfprintf+0x380>
 a02:	84 36       	cpi	r24, 0x64	; 100
 a04:	11 f0       	breq	.+4      	; 0xa0a <vfprintf+0x1be>
 a06:	89 36       	cpi	r24, 0x69	; 105
 a08:	39 f5       	brne	.+78     	; 0xa58 <vfprintf+0x20c>
 a0a:	f8 01       	movw	r30, r16
 a0c:	27 ff       	sbrs	r18, 7
 a0e:	07 c0       	rjmp	.+14     	; 0xa1e <vfprintf+0x1d2>
 a10:	60 81       	ld	r22, Z
 a12:	71 81       	ldd	r23, Z+1	; 0x01
 a14:	82 81       	ldd	r24, Z+2	; 0x02
 a16:	93 81       	ldd	r25, Z+3	; 0x03
 a18:	0c 5f       	subi	r16, 0xFC	; 252
 a1a:	1f 4f       	sbci	r17, 0xFF	; 255
 a1c:	08 c0       	rjmp	.+16     	; 0xa2e <vfprintf+0x1e2>
 a1e:	60 81       	ld	r22, Z
 a20:	71 81       	ldd	r23, Z+1	; 0x01
 a22:	88 27       	eor	r24, r24
 a24:	77 fd       	sbrc	r23, 7
 a26:	80 95       	com	r24
 a28:	98 2f       	mov	r25, r24
 a2a:	0e 5f       	subi	r16, 0xFE	; 254
 a2c:	1f 4f       	sbci	r17, 0xFF	; 255
 a2e:	4f e6       	ldi	r20, 0x6F	; 111
 a30:	b4 2e       	mov	r11, r20
 a32:	b2 22       	and	r11, r18
 a34:	97 ff       	sbrs	r25, 7
 a36:	09 c0       	rjmp	.+18     	; 0xa4a <vfprintf+0x1fe>
 a38:	90 95       	com	r25
 a3a:	80 95       	com	r24
 a3c:	70 95       	com	r23
 a3e:	61 95       	neg	r22
 a40:	7f 4f       	sbci	r23, 0xFF	; 255
 a42:	8f 4f       	sbci	r24, 0xFF	; 255
 a44:	9f 4f       	sbci	r25, 0xFF	; 255
 a46:	f0 e8       	ldi	r31, 0x80	; 128
 a48:	bf 2a       	or	r11, r31
 a4a:	2a e0       	ldi	r18, 0x0A	; 10
 a4c:	30 e0       	ldi	r19, 0x00	; 0
 a4e:	a4 01       	movw	r20, r8
 a50:	0c d1       	rcall	.+536    	; 0xc6a <__ultoa_invert>
 a52:	a8 2e       	mov	r10, r24
 a54:	a8 18       	sub	r10, r8
 a56:	42 c0       	rjmp	.+132    	; 0xadc <vfprintf+0x290>
 a58:	85 37       	cpi	r24, 0x75	; 117
 a5a:	31 f4       	brne	.+12     	; 0xa68 <vfprintf+0x21c>
 a5c:	3f ee       	ldi	r19, 0xEF	; 239
 a5e:	b3 2e       	mov	r11, r19
 a60:	b2 22       	and	r11, r18
 a62:	2a e0       	ldi	r18, 0x0A	; 10
 a64:	30 e0       	ldi	r19, 0x00	; 0
 a66:	24 c0       	rjmp	.+72     	; 0xab0 <vfprintf+0x264>
 a68:	99 ef       	ldi	r25, 0xF9	; 249
 a6a:	b9 2e       	mov	r11, r25
 a6c:	b2 22       	and	r11, r18
 a6e:	8f 36       	cpi	r24, 0x6F	; 111
 a70:	b9 f0       	breq	.+46     	; 0xaa0 <vfprintf+0x254>
 a72:	20 f4       	brcc	.+8      	; 0xa7c <vfprintf+0x230>
 a74:	88 35       	cpi	r24, 0x58	; 88
 a76:	09 f0       	breq	.+2      	; 0xa7a <vfprintf+0x22e>
 a78:	ac c0       	rjmp	.+344    	; 0xbd2 <vfprintf+0x386>
 a7a:	0d c0       	rjmp	.+26     	; 0xa96 <vfprintf+0x24a>
 a7c:	80 37       	cpi	r24, 0x70	; 112
 a7e:	21 f0       	breq	.+8      	; 0xa88 <vfprintf+0x23c>
 a80:	88 37       	cpi	r24, 0x78	; 120
 a82:	09 f0       	breq	.+2      	; 0xa86 <vfprintf+0x23a>
 a84:	a6 c0       	rjmp	.+332    	; 0xbd2 <vfprintf+0x386>
 a86:	02 c0       	rjmp	.+4      	; 0xa8c <vfprintf+0x240>
 a88:	20 e1       	ldi	r18, 0x10	; 16
 a8a:	b2 2a       	or	r11, r18
 a8c:	b4 fe       	sbrs	r11, 4
 a8e:	0b c0       	rjmp	.+22     	; 0xaa6 <vfprintf+0x25a>
 a90:	84 e0       	ldi	r24, 0x04	; 4
 a92:	b8 2a       	or	r11, r24
 a94:	08 c0       	rjmp	.+16     	; 0xaa6 <vfprintf+0x25a>
 a96:	24 ff       	sbrs	r18, 4
 a98:	09 c0       	rjmp	.+18     	; 0xaac <vfprintf+0x260>
 a9a:	e6 e0       	ldi	r30, 0x06	; 6
 a9c:	be 2a       	or	r11, r30
 a9e:	06 c0       	rjmp	.+12     	; 0xaac <vfprintf+0x260>
 aa0:	28 e0       	ldi	r18, 0x08	; 8
 aa2:	30 e0       	ldi	r19, 0x00	; 0
 aa4:	05 c0       	rjmp	.+10     	; 0xab0 <vfprintf+0x264>
 aa6:	20 e1       	ldi	r18, 0x10	; 16
 aa8:	30 e0       	ldi	r19, 0x00	; 0
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <vfprintf+0x264>
 aac:	20 e1       	ldi	r18, 0x10	; 16
 aae:	32 e0       	ldi	r19, 0x02	; 2
 ab0:	f8 01       	movw	r30, r16
 ab2:	b7 fe       	sbrs	r11, 7
 ab4:	07 c0       	rjmp	.+14     	; 0xac4 <vfprintf+0x278>
 ab6:	60 81       	ld	r22, Z
 ab8:	71 81       	ldd	r23, Z+1	; 0x01
 aba:	82 81       	ldd	r24, Z+2	; 0x02
 abc:	93 81       	ldd	r25, Z+3	; 0x03
 abe:	0c 5f       	subi	r16, 0xFC	; 252
 ac0:	1f 4f       	sbci	r17, 0xFF	; 255
 ac2:	06 c0       	rjmp	.+12     	; 0xad0 <vfprintf+0x284>
 ac4:	60 81       	ld	r22, Z
 ac6:	71 81       	ldd	r23, Z+1	; 0x01
 ac8:	80 e0       	ldi	r24, 0x00	; 0
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	0e 5f       	subi	r16, 0xFE	; 254
 ace:	1f 4f       	sbci	r17, 0xFF	; 255
 ad0:	a4 01       	movw	r20, r8
 ad2:	cb d0       	rcall	.+406    	; 0xc6a <__ultoa_invert>
 ad4:	a8 2e       	mov	r10, r24
 ad6:	a8 18       	sub	r10, r8
 ad8:	ff e7       	ldi	r31, 0x7F	; 127
 ada:	bf 22       	and	r11, r31
 adc:	b6 fe       	sbrs	r11, 6
 ade:	0b c0       	rjmp	.+22     	; 0xaf6 <vfprintf+0x2aa>
 ae0:	2b 2d       	mov	r18, r11
 ae2:	2e 7f       	andi	r18, 0xFE	; 254
 ae4:	a5 14       	cp	r10, r5
 ae6:	50 f4       	brcc	.+20     	; 0xafc <vfprintf+0x2b0>
 ae8:	b4 fe       	sbrs	r11, 4
 aea:	0a c0       	rjmp	.+20     	; 0xb00 <vfprintf+0x2b4>
 aec:	b2 fc       	sbrc	r11, 2
 aee:	08 c0       	rjmp	.+16     	; 0xb00 <vfprintf+0x2b4>
 af0:	2b 2d       	mov	r18, r11
 af2:	2e 7e       	andi	r18, 0xEE	; 238
 af4:	05 c0       	rjmp	.+10     	; 0xb00 <vfprintf+0x2b4>
 af6:	7a 2c       	mov	r7, r10
 af8:	2b 2d       	mov	r18, r11
 afa:	03 c0       	rjmp	.+6      	; 0xb02 <vfprintf+0x2b6>
 afc:	7a 2c       	mov	r7, r10
 afe:	01 c0       	rjmp	.+2      	; 0xb02 <vfprintf+0x2b6>
 b00:	75 2c       	mov	r7, r5
 b02:	24 ff       	sbrs	r18, 4
 b04:	0d c0       	rjmp	.+26     	; 0xb20 <vfprintf+0x2d4>
 b06:	fe 01       	movw	r30, r28
 b08:	ea 0d       	add	r30, r10
 b0a:	f1 1d       	adc	r31, r1
 b0c:	80 81       	ld	r24, Z
 b0e:	80 33       	cpi	r24, 0x30	; 48
 b10:	11 f4       	brne	.+4      	; 0xb16 <vfprintf+0x2ca>
 b12:	29 7e       	andi	r18, 0xE9	; 233
 b14:	09 c0       	rjmp	.+18     	; 0xb28 <vfprintf+0x2dc>
 b16:	22 ff       	sbrs	r18, 2
 b18:	06 c0       	rjmp	.+12     	; 0xb26 <vfprintf+0x2da>
 b1a:	73 94       	inc	r7
 b1c:	73 94       	inc	r7
 b1e:	04 c0       	rjmp	.+8      	; 0xb28 <vfprintf+0x2dc>
 b20:	82 2f       	mov	r24, r18
 b22:	86 78       	andi	r24, 0x86	; 134
 b24:	09 f0       	breq	.+2      	; 0xb28 <vfprintf+0x2dc>
 b26:	73 94       	inc	r7
 b28:	23 fd       	sbrc	r18, 3
 b2a:	13 c0       	rjmp	.+38     	; 0xb52 <vfprintf+0x306>
 b2c:	20 ff       	sbrs	r18, 0
 b2e:	0e c0       	rjmp	.+28     	; 0xb4c <vfprintf+0x300>
 b30:	5a 2c       	mov	r5, r10
 b32:	73 14       	cp	r7, r3
 b34:	58 f4       	brcc	.+22     	; 0xb4c <vfprintf+0x300>
 b36:	53 0c       	add	r5, r3
 b38:	57 18       	sub	r5, r7
 b3a:	73 2c       	mov	r7, r3
 b3c:	07 c0       	rjmp	.+14     	; 0xb4c <vfprintf+0x300>
 b3e:	b7 01       	movw	r22, r14
 b40:	80 e2       	ldi	r24, 0x20	; 32
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	2c 87       	std	Y+12, r18	; 0x0c
 b46:	65 d0       	rcall	.+202    	; 0xc12 <fputc>
 b48:	73 94       	inc	r7
 b4a:	2c 85       	ldd	r18, Y+12	; 0x0c
 b4c:	73 14       	cp	r7, r3
 b4e:	b8 f3       	brcs	.-18     	; 0xb3e <vfprintf+0x2f2>
 b50:	04 c0       	rjmp	.+8      	; 0xb5a <vfprintf+0x30e>
 b52:	73 14       	cp	r7, r3
 b54:	10 f4       	brcc	.+4      	; 0xb5a <vfprintf+0x30e>
 b56:	37 18       	sub	r3, r7
 b58:	01 c0       	rjmp	.+2      	; 0xb5c <vfprintf+0x310>
 b5a:	31 2c       	mov	r3, r1
 b5c:	24 ff       	sbrs	r18, 4
 b5e:	11 c0       	rjmp	.+34     	; 0xb82 <vfprintf+0x336>
 b60:	b7 01       	movw	r22, r14
 b62:	80 e3       	ldi	r24, 0x30	; 48
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	2c 87       	std	Y+12, r18	; 0x0c
 b68:	54 d0       	rcall	.+168    	; 0xc12 <fputc>
 b6a:	2c 85       	ldd	r18, Y+12	; 0x0c
 b6c:	22 ff       	sbrs	r18, 2
 b6e:	1c c0       	rjmp	.+56     	; 0xba8 <vfprintf+0x35c>
 b70:	21 ff       	sbrs	r18, 1
 b72:	03 c0       	rjmp	.+6      	; 0xb7a <vfprintf+0x32e>
 b74:	88 e5       	ldi	r24, 0x58	; 88
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	02 c0       	rjmp	.+4      	; 0xb7e <vfprintf+0x332>
 b7a:	88 e7       	ldi	r24, 0x78	; 120
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	b7 01       	movw	r22, r14
 b80:	0c c0       	rjmp	.+24     	; 0xb9a <vfprintf+0x34e>
 b82:	82 2f       	mov	r24, r18
 b84:	86 78       	andi	r24, 0x86	; 134
 b86:	81 f0       	breq	.+32     	; 0xba8 <vfprintf+0x35c>
 b88:	21 fd       	sbrc	r18, 1
 b8a:	02 c0       	rjmp	.+4      	; 0xb90 <vfprintf+0x344>
 b8c:	80 e2       	ldi	r24, 0x20	; 32
 b8e:	01 c0       	rjmp	.+2      	; 0xb92 <vfprintf+0x346>
 b90:	8b e2       	ldi	r24, 0x2B	; 43
 b92:	27 fd       	sbrc	r18, 7
 b94:	8d e2       	ldi	r24, 0x2D	; 45
 b96:	b7 01       	movw	r22, r14
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	3b d0       	rcall	.+118    	; 0xc12 <fputc>
 b9c:	05 c0       	rjmp	.+10     	; 0xba8 <vfprintf+0x35c>
 b9e:	b7 01       	movw	r22, r14
 ba0:	80 e3       	ldi	r24, 0x30	; 48
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	36 d0       	rcall	.+108    	; 0xc12 <fputc>
 ba6:	5a 94       	dec	r5
 ba8:	a5 14       	cp	r10, r5
 baa:	c8 f3       	brcs	.-14     	; 0xb9e <vfprintf+0x352>
 bac:	aa 94       	dec	r10
 bae:	f4 01       	movw	r30, r8
 bb0:	ea 0d       	add	r30, r10
 bb2:	f1 1d       	adc	r31, r1
 bb4:	b7 01       	movw	r22, r14
 bb6:	80 81       	ld	r24, Z
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	2b d0       	rcall	.+86     	; 0xc12 <fputc>
 bbc:	a1 10       	cpse	r10, r1
 bbe:	f6 cf       	rjmp	.-20     	; 0xbac <vfprintf+0x360>
 bc0:	05 c0       	rjmp	.+10     	; 0xbcc <vfprintf+0x380>
 bc2:	b7 01       	movw	r22, r14
 bc4:	80 e2       	ldi	r24, 0x20	; 32
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	24 d0       	rcall	.+72     	; 0xc12 <fputc>
 bca:	3a 94       	dec	r3
 bcc:	31 10       	cpse	r3, r1
 bce:	f9 cf       	rjmp	.-14     	; 0xbc2 <vfprintf+0x376>
 bd0:	50 ce       	rjmp	.-864    	; 0x872 <vfprintf+0x26>
 bd2:	f7 01       	movw	r30, r14
 bd4:	26 81       	ldd	r18, Z+6	; 0x06
 bd6:	37 81       	ldd	r19, Z+7	; 0x07
 bd8:	02 c0       	rjmp	.+4      	; 0xbde <vfprintf+0x392>
 bda:	2f ef       	ldi	r18, 0xFF	; 255
 bdc:	3f ef       	ldi	r19, 0xFF	; 255
 bde:	c9 01       	movw	r24, r18
 be0:	2c 96       	adiw	r28, 0x0c	; 12
 be2:	e2 e1       	ldi	r30, 0x12	; 18
 be4:	bc c0       	rjmp	.+376    	; 0xd5e <__epilogue_restores__>

00000be6 <strnlen_P>:
 be6:	fc 01       	movw	r30, r24
 be8:	05 90       	lpm	r0, Z+
 bea:	61 50       	subi	r22, 0x01	; 1
 bec:	70 40       	sbci	r23, 0x00	; 0
 bee:	01 10       	cpse	r0, r1
 bf0:	d8 f7       	brcc	.-10     	; 0xbe8 <strnlen_P+0x2>
 bf2:	80 95       	com	r24
 bf4:	90 95       	com	r25
 bf6:	8e 0f       	add	r24, r30
 bf8:	9f 1f       	adc	r25, r31
 bfa:	08 95       	ret

00000bfc <strnlen>:
 bfc:	fc 01       	movw	r30, r24
 bfe:	61 50       	subi	r22, 0x01	; 1
 c00:	70 40       	sbci	r23, 0x00	; 0
 c02:	01 90       	ld	r0, Z+
 c04:	01 10       	cpse	r0, r1
 c06:	d8 f7       	brcc	.-10     	; 0xbfe <strnlen+0x2>
 c08:	80 95       	com	r24
 c0a:	90 95       	com	r25
 c0c:	8e 0f       	add	r24, r30
 c0e:	9f 1f       	adc	r25, r31
 c10:	08 95       	ret

00000c12 <fputc>:
 c12:	0f 93       	push	r16
 c14:	1f 93       	push	r17
 c16:	cf 93       	push	r28
 c18:	df 93       	push	r29
 c1a:	8c 01       	movw	r16, r24
 c1c:	eb 01       	movw	r28, r22
 c1e:	8b 81       	ldd	r24, Y+3	; 0x03
 c20:	81 fd       	sbrc	r24, 1
 c22:	03 c0       	rjmp	.+6      	; 0xc2a <fputc+0x18>
 c24:	0f ef       	ldi	r16, 0xFF	; 255
 c26:	1f ef       	ldi	r17, 0xFF	; 255
 c28:	1a c0       	rjmp	.+52     	; 0xc5e <fputc+0x4c>
 c2a:	82 ff       	sbrs	r24, 2
 c2c:	0d c0       	rjmp	.+26     	; 0xc48 <fputc+0x36>
 c2e:	2e 81       	ldd	r18, Y+6	; 0x06
 c30:	3f 81       	ldd	r19, Y+7	; 0x07
 c32:	8c 81       	ldd	r24, Y+4	; 0x04
 c34:	9d 81       	ldd	r25, Y+5	; 0x05
 c36:	28 17       	cp	r18, r24
 c38:	39 07       	cpc	r19, r25
 c3a:	64 f4       	brge	.+24     	; 0xc54 <fputc+0x42>
 c3c:	e8 81       	ld	r30, Y
 c3e:	f9 81       	ldd	r31, Y+1	; 0x01
 c40:	01 93       	st	Z+, r16
 c42:	f9 83       	std	Y+1, r31	; 0x01
 c44:	e8 83       	st	Y, r30
 c46:	06 c0       	rjmp	.+12     	; 0xc54 <fputc+0x42>
 c48:	e8 85       	ldd	r30, Y+8	; 0x08
 c4a:	f9 85       	ldd	r31, Y+9	; 0x09
 c4c:	80 2f       	mov	r24, r16
 c4e:	09 95       	icall
 c50:	89 2b       	or	r24, r25
 c52:	41 f7       	brne	.-48     	; 0xc24 <fputc+0x12>
 c54:	8e 81       	ldd	r24, Y+6	; 0x06
 c56:	9f 81       	ldd	r25, Y+7	; 0x07
 c58:	01 96       	adiw	r24, 0x01	; 1
 c5a:	9f 83       	std	Y+7, r25	; 0x07
 c5c:	8e 83       	std	Y+6, r24	; 0x06
 c5e:	c8 01       	movw	r24, r16
 c60:	df 91       	pop	r29
 c62:	cf 91       	pop	r28
 c64:	1f 91       	pop	r17
 c66:	0f 91       	pop	r16
 c68:	08 95       	ret

00000c6a <__ultoa_invert>:
 c6a:	fa 01       	movw	r30, r20
 c6c:	aa 27       	eor	r26, r26
 c6e:	28 30       	cpi	r18, 0x08	; 8
 c70:	51 f1       	breq	.+84     	; 0xcc6 <__ultoa_invert+0x5c>
 c72:	20 31       	cpi	r18, 0x10	; 16
 c74:	81 f1       	breq	.+96     	; 0xcd6 <__ultoa_invert+0x6c>
 c76:	e8 94       	clt
 c78:	6f 93       	push	r22
 c7a:	6e 7f       	andi	r22, 0xFE	; 254
 c7c:	6e 5f       	subi	r22, 0xFE	; 254
 c7e:	7f 4f       	sbci	r23, 0xFF	; 255
 c80:	8f 4f       	sbci	r24, 0xFF	; 255
 c82:	9f 4f       	sbci	r25, 0xFF	; 255
 c84:	af 4f       	sbci	r26, 0xFF	; 255
 c86:	b1 e0       	ldi	r27, 0x01	; 1
 c88:	3e d0       	rcall	.+124    	; 0xd06 <__ultoa_invert+0x9c>
 c8a:	b4 e0       	ldi	r27, 0x04	; 4
 c8c:	3c d0       	rcall	.+120    	; 0xd06 <__ultoa_invert+0x9c>
 c8e:	67 0f       	add	r22, r23
 c90:	78 1f       	adc	r23, r24
 c92:	89 1f       	adc	r24, r25
 c94:	9a 1f       	adc	r25, r26
 c96:	a1 1d       	adc	r26, r1
 c98:	68 0f       	add	r22, r24
 c9a:	79 1f       	adc	r23, r25
 c9c:	8a 1f       	adc	r24, r26
 c9e:	91 1d       	adc	r25, r1
 ca0:	a1 1d       	adc	r26, r1
 ca2:	6a 0f       	add	r22, r26
 ca4:	71 1d       	adc	r23, r1
 ca6:	81 1d       	adc	r24, r1
 ca8:	91 1d       	adc	r25, r1
 caa:	a1 1d       	adc	r26, r1
 cac:	20 d0       	rcall	.+64     	; 0xcee <__ultoa_invert+0x84>
 cae:	09 f4       	brne	.+2      	; 0xcb2 <__ultoa_invert+0x48>
 cb0:	68 94       	set
 cb2:	3f 91       	pop	r19
 cb4:	2a e0       	ldi	r18, 0x0A	; 10
 cb6:	26 9f       	mul	r18, r22
 cb8:	11 24       	eor	r1, r1
 cba:	30 19       	sub	r19, r0
 cbc:	30 5d       	subi	r19, 0xD0	; 208
 cbe:	31 93       	st	Z+, r19
 cc0:	de f6       	brtc	.-74     	; 0xc78 <__ultoa_invert+0xe>
 cc2:	cf 01       	movw	r24, r30
 cc4:	08 95       	ret
 cc6:	46 2f       	mov	r20, r22
 cc8:	47 70       	andi	r20, 0x07	; 7
 cca:	40 5d       	subi	r20, 0xD0	; 208
 ccc:	41 93       	st	Z+, r20
 cce:	b3 e0       	ldi	r27, 0x03	; 3
 cd0:	0f d0       	rcall	.+30     	; 0xcf0 <__ultoa_invert+0x86>
 cd2:	c9 f7       	brne	.-14     	; 0xcc6 <__ultoa_invert+0x5c>
 cd4:	f6 cf       	rjmp	.-20     	; 0xcc2 <__ultoa_invert+0x58>
 cd6:	46 2f       	mov	r20, r22
 cd8:	4f 70       	andi	r20, 0x0F	; 15
 cda:	40 5d       	subi	r20, 0xD0	; 208
 cdc:	4a 33       	cpi	r20, 0x3A	; 58
 cde:	18 f0       	brcs	.+6      	; 0xce6 <__ultoa_invert+0x7c>
 ce0:	49 5d       	subi	r20, 0xD9	; 217
 ce2:	31 fd       	sbrc	r19, 1
 ce4:	40 52       	subi	r20, 0x20	; 32
 ce6:	41 93       	st	Z+, r20
 ce8:	02 d0       	rcall	.+4      	; 0xcee <__ultoa_invert+0x84>
 cea:	a9 f7       	brne	.-22     	; 0xcd6 <__ultoa_invert+0x6c>
 cec:	ea cf       	rjmp	.-44     	; 0xcc2 <__ultoa_invert+0x58>
 cee:	b4 e0       	ldi	r27, 0x04	; 4
 cf0:	a6 95       	lsr	r26
 cf2:	97 95       	ror	r25
 cf4:	87 95       	ror	r24
 cf6:	77 95       	ror	r23
 cf8:	67 95       	ror	r22
 cfa:	ba 95       	dec	r27
 cfc:	c9 f7       	brne	.-14     	; 0xcf0 <__ultoa_invert+0x86>
 cfe:	00 97       	sbiw	r24, 0x00	; 0
 d00:	61 05       	cpc	r22, r1
 d02:	71 05       	cpc	r23, r1
 d04:	08 95       	ret
 d06:	9b 01       	movw	r18, r22
 d08:	ac 01       	movw	r20, r24
 d0a:	0a 2e       	mov	r0, r26
 d0c:	06 94       	lsr	r0
 d0e:	57 95       	ror	r21
 d10:	47 95       	ror	r20
 d12:	37 95       	ror	r19
 d14:	27 95       	ror	r18
 d16:	ba 95       	dec	r27
 d18:	c9 f7       	brne	.-14     	; 0xd0c <__ultoa_invert+0xa2>
 d1a:	62 0f       	add	r22, r18
 d1c:	73 1f       	adc	r23, r19
 d1e:	84 1f       	adc	r24, r20
 d20:	95 1f       	adc	r25, r21
 d22:	a0 1d       	adc	r26, r0
 d24:	08 95       	ret

00000d26 <__prologue_saves__>:
 d26:	2f 92       	push	r2
 d28:	3f 92       	push	r3
 d2a:	4f 92       	push	r4
 d2c:	5f 92       	push	r5
 d2e:	6f 92       	push	r6
 d30:	7f 92       	push	r7
 d32:	8f 92       	push	r8
 d34:	9f 92       	push	r9
 d36:	af 92       	push	r10
 d38:	bf 92       	push	r11
 d3a:	cf 92       	push	r12
 d3c:	df 92       	push	r13
 d3e:	ef 92       	push	r14
 d40:	ff 92       	push	r15
 d42:	0f 93       	push	r16
 d44:	1f 93       	push	r17
 d46:	cf 93       	push	r28
 d48:	df 93       	push	r29
 d4a:	cd b7       	in	r28, 0x3d	; 61
 d4c:	de b7       	in	r29, 0x3e	; 62
 d4e:	ca 1b       	sub	r28, r26
 d50:	db 0b       	sbc	r29, r27
 d52:	0f b6       	in	r0, 0x3f	; 63
 d54:	f8 94       	cli
 d56:	de bf       	out	0x3e, r29	; 62
 d58:	0f be       	out	0x3f, r0	; 63
 d5a:	cd bf       	out	0x3d, r28	; 61
 d5c:	09 94       	ijmp

00000d5e <__epilogue_restores__>:
 d5e:	2a 88       	ldd	r2, Y+18	; 0x12
 d60:	39 88       	ldd	r3, Y+17	; 0x11
 d62:	48 88       	ldd	r4, Y+16	; 0x10
 d64:	5f 84       	ldd	r5, Y+15	; 0x0f
 d66:	6e 84       	ldd	r6, Y+14	; 0x0e
 d68:	7d 84       	ldd	r7, Y+13	; 0x0d
 d6a:	8c 84       	ldd	r8, Y+12	; 0x0c
 d6c:	9b 84       	ldd	r9, Y+11	; 0x0b
 d6e:	aa 84       	ldd	r10, Y+10	; 0x0a
 d70:	b9 84       	ldd	r11, Y+9	; 0x09
 d72:	c8 84       	ldd	r12, Y+8	; 0x08
 d74:	df 80       	ldd	r13, Y+7	; 0x07
 d76:	ee 80       	ldd	r14, Y+6	; 0x06
 d78:	fd 80       	ldd	r15, Y+5	; 0x05
 d7a:	0c 81       	ldd	r16, Y+4	; 0x04
 d7c:	1b 81       	ldd	r17, Y+3	; 0x03
 d7e:	aa 81       	ldd	r26, Y+2	; 0x02
 d80:	b9 81       	ldd	r27, Y+1	; 0x01
 d82:	ce 0f       	add	r28, r30
 d84:	d1 1d       	adc	r29, r1
 d86:	0f b6       	in	r0, 0x3f	; 63
 d88:	f8 94       	cli
 d8a:	de bf       	out	0x3e, r29	; 62
 d8c:	0f be       	out	0x3f, r0	; 63
 d8e:	cd bf       	out	0x3d, r28	; 61
 d90:	ed 01       	movw	r28, r26
 d92:	08 95       	ret

00000d94 <_exit>:
 d94:	f8 94       	cli

00000d96 <__stop_program>:
 d96:	ff cf       	rjmp	.-2      	; 0xd96 <__stop_program>
