
Servo-Motor-Speed-Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001522  000015b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001522  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800120  00800120  000015d6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015d6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00001632  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001433  00000000  00000000  00001762  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c5  00000000  00000000  00002b95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ea  00000000  00000000  0000325a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000047c  00000000  00000000  00003844  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048f  00000000  00000000  00003cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000118f  00000000  00000000  0000414f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000052de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	23 c0       	rjmp	.+70     	; 0x48 <__ctors_end>
       2:	3d c0       	rjmp	.+122    	; 0x7e <__bad_interrupt>
       4:	3c c0       	rjmp	.+120    	; 0x7e <__bad_interrupt>
       6:	3b c0       	rjmp	.+118    	; 0x7e <__bad_interrupt>
       8:	04 c3       	rjmp	.+1544   	; 0x612 <__vector_4>
       a:	39 c0       	rjmp	.+114    	; 0x7e <__bad_interrupt>
       c:	38 c0       	rjmp	.+112    	; 0x7e <__bad_interrupt>
       e:	37 c0       	rjmp	.+110    	; 0x7e <__bad_interrupt>
      10:	36 c0       	rjmp	.+108    	; 0x7e <__bad_interrupt>
      12:	35 c0       	rjmp	.+106    	; 0x7e <__bad_interrupt>
      14:	34 c0       	rjmp	.+104    	; 0x7e <__bad_interrupt>
      16:	33 c0       	rjmp	.+102    	; 0x7e <__bad_interrupt>
      18:	32 c0       	rjmp	.+100    	; 0x7e <__bad_interrupt>
      1a:	31 c0       	rjmp	.+98     	; 0x7e <__bad_interrupt>
      1c:	30 c0       	rjmp	.+96     	; 0x7e <__bad_interrupt>
      1e:	2f c0       	rjmp	.+94     	; 0x7e <__bad_interrupt>
      20:	2e c0       	rjmp	.+92     	; 0x7e <__bad_interrupt>
      22:	2d c0       	rjmp	.+90     	; 0x7e <__bad_interrupt>
      24:	6e c3       	rjmp	.+1756   	; 0x702 <__vector_18>
      26:	2b c0       	rjmp	.+86     	; 0x7e <__bad_interrupt>
      28:	2a c0       	rjmp	.+84     	; 0x7e <__bad_interrupt>
      2a:	29 c0       	rjmp	.+82     	; 0x7e <__bad_interrupt>
      2c:	28 c0       	rjmp	.+80     	; 0x7e <__bad_interrupt>
      2e:	27 c0       	rjmp	.+78     	; 0x7e <__bad_interrupt>
      30:	26 c0       	rjmp	.+76     	; 0x7e <__bad_interrupt>
      32:	25 c0       	rjmp	.+74     	; 0x7e <__bad_interrupt>
      34:	08 c4       	rjmp	.+2064   	; 0x846 <main+0x6a>
      36:	0b c4       	rjmp	.+2070   	; 0x84e <main+0x72>
      38:	0e c4       	rjmp	.+2076   	; 0x856 <main+0x7a>
      3a:	11 c4       	rjmp	.+2082   	; 0x85e <main+0x82>
      3c:	14 c4       	rjmp	.+2088   	; 0x866 <main+0x8a>
      3e:	17 c4       	rjmp	.+2094   	; 0x86e <main+0x92>
      40:	1a c4       	rjmp	.+2100   	; 0x876 <main+0x9a>
      42:	1d c4       	rjmp	.+2106   	; 0x87e <main+0xa2>
      44:	20 c4       	rjmp	.+2112   	; 0x886 <main+0xaa>
      46:	23 c4       	rjmp	.+2118   	; 0x88e <main+0xb2>

00000048 <__ctors_end>:
      48:	11 24       	eor	r1, r1
      4a:	1f be       	out	0x3f, r1	; 63
      4c:	cf ef       	ldi	r28, 0xFF	; 255
      4e:	d4 e0       	ldi	r29, 0x04	; 4
      50:	de bf       	out	0x3e, r29	; 62
      52:	cd bf       	out	0x3d, r28	; 61

00000054 <__do_copy_data>:
      54:	11 e0       	ldi	r17, 0x01	; 1
      56:	a0 e0       	ldi	r26, 0x00	; 0
      58:	b1 e0       	ldi	r27, 0x01	; 1
      5a:	e2 e2       	ldi	r30, 0x22	; 34
      5c:	f5 e1       	ldi	r31, 0x15	; 21
      5e:	02 c0       	rjmp	.+4      	; 0x64 <__do_copy_data+0x10>
      60:	05 90       	lpm	r0, Z+
      62:	0d 92       	st	X+, r0
      64:	a0 32       	cpi	r26, 0x20	; 32
      66:	b1 07       	cpc	r27, r17
      68:	d9 f7       	brne	.-10     	; 0x60 <__do_copy_data+0xc>

0000006a <__do_clear_bss>:
      6a:	21 e0       	ldi	r18, 0x01	; 1
      6c:	a0 e2       	ldi	r26, 0x20	; 32
      6e:	b1 e0       	ldi	r27, 0x01	; 1
      70:	01 c0       	rjmp	.+2      	; 0x74 <.do_clear_bss_start>

00000072 <.do_clear_bss_loop>:
      72:	1d 92       	st	X+, r1

00000074 <.do_clear_bss_start>:
      74:	ad 32       	cpi	r26, 0x2D	; 45
      76:	b2 07       	cpc	r27, r18
      78:	e1 f7       	brne	.-8      	; 0x72 <.do_clear_bss_loop>
      7a:	b0 d3       	rcall	.+1888   	; 0x7dc <main>
      7c:	50 ca       	rjmp	.-2912   	; 0xfffff51e <__eeprom_end+0xff7ef51e>

0000007e <__bad_interrupt>:
      7e:	c0 cf       	rjmp	.-128    	; 0x0 <__vectors>

00000080 <init_shared_data>:
	long long integral;
	short error;
	short fine_tuning;
} Shared_Data;

void init_shared_data(Shared_Data* shared_ptr){
      80:	fc 01       	movw	r30, r24
	shared_ptr->speed_set = 0;
      82:	11 82       	std	Z+1, r1	; 0x01
      84:	10 82       	st	Z, r1
	shared_ptr->speed_actual = 0;
      86:	13 82       	std	Z+3, r1	; 0x03
      88:	12 82       	std	Z+2, r1	; 0x02
	shared_ptr->curr_rpm = 0;
      8a:	14 82       	std	Z+4, r1	; 0x04
      8c:	15 82       	std	Z+5, r1	; 0x05
      8e:	16 82       	std	Z+6, r1	; 0x06
      90:	17 82       	std	Z+7, r1	; 0x07
	shared_ptr->rpm_avg = 0;
      92:	10 86       	std	Z+8, r1	; 0x08
      94:	11 86       	std	Z+9, r1	; 0x09
      96:	12 86       	std	Z+10, r1	; 0x0a
      98:	13 86       	std	Z+11, r1	; 0x0b
	shared_ptr->delta_time = 0;
      9a:	dc 01       	movw	r26, r24
      9c:	a4 57       	subi	r26, 0x74	; 116
      9e:	bf 4f       	sbci	r27, 0xFF	; 255
      a0:	1d 92       	st	X+, r1
      a2:	1d 92       	st	X+, r1
      a4:	1d 92       	st	X+, r1
      a6:	1c 92       	st	X, r1
      a8:	13 97       	sbiw	r26, 0x03	; 3
	shared_ptr->integral = 0;
      aa:	14 96       	adiw	r26, 0x04	; 4
      ac:	1c 92       	st	X, r1
      ae:	11 96       	adiw	r26, 0x01	; 1
      b0:	1c 92       	st	X, r1
      b2:	11 97       	sbiw	r26, 0x01	; 1
      b4:	12 96       	adiw	r26, 0x02	; 2
      b6:	1c 92       	st	X, r1
      b8:	12 97       	sbiw	r26, 0x02	; 2
      ba:	13 96       	adiw	r26, 0x03	; 3
      bc:	1c 92       	st	X, r1
      be:	13 97       	sbiw	r26, 0x03	; 3
      c0:	14 96       	adiw	r26, 0x04	; 4
      c2:	1c 92       	st	X, r1
      c4:	14 97       	sbiw	r26, 0x04	; 4
      c6:	15 96       	adiw	r26, 0x05	; 5
      c8:	1c 92       	st	X, r1
      ca:	15 97       	sbiw	r26, 0x05	; 5
      cc:	16 96       	adiw	r26, 0x06	; 6
      ce:	1c 92       	st	X, r1
      d0:	16 97       	sbiw	r26, 0x06	; 6
      d2:	17 96       	adiw	r26, 0x07	; 7
      d4:	1c 92       	st	X, r1
      d6:	17 97       	sbiw	r26, 0x07	; 7
	shared_ptr->error = 0;
      d8:	18 96       	adiw	r26, 0x08	; 8
      da:	1d 92       	st	X+, r1
      dc:	1c 92       	st	X, r1
	shared_ptr->fine_tuning = 0;
      de:	e6 56       	subi	r30, 0x66	; 102
      e0:	ff 4f       	sbci	r31, 0xFF	; 255
      e2:	11 82       	std	Z+1, r1	; 0x01
      e4:	10 82       	st	Z, r1
      e6:	08 95       	ret

000000e8 <calc_latest_rpm>:
}

/*	Calculates the speed between two encoder-interrupts, using fixed point arithmetics.
 *	Qm.n values defined in shared.h
*/
void calc_latest_rpm(Shared_Data* shared_ptr){
      e8:	2f 92       	push	r2
      ea:	3f 92       	push	r3
      ec:	4f 92       	push	r4
      ee:	5f 92       	push	r5
      f0:	6f 92       	push	r6
      f2:	7f 92       	push	r7
      f4:	8f 92       	push	r8
      f6:	9f 92       	push	r9
      f8:	af 92       	push	r10
      fa:	bf 92       	push	r11
      fc:	cf 92       	push	r12
      fe:	df 92       	push	r13
     100:	ef 92       	push	r14
     102:	ff 92       	push	r15
     104:	0f 93       	push	r16
     106:	1f 93       	push	r17
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
     110:	2c 97       	sbiw	r28, 0x0c	; 12
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	f8 94       	cli
     116:	de bf       	out	0x3e, r29	; 62
     118:	0f be       	out	0x3f, r0	; 63
     11a:	cd bf       	out	0x3d, r28	; 61
     11c:	9a 87       	std	Y+10, r25	; 0x0a
     11e:	89 87       	std	Y+9, r24	; 0x09
		TCCR1B = (1 << CS11);
	}
}
/*	Converts the difference in clk increments to microseconds */
static unsigned long calc_delta_time(Shared_Data* shared_ptr){
	unsigned short delta_clk = clk_elapsed;
     120:	a0 91 2b 01 	lds	r26, 0x012B
     124:	b0 91 2c 01 	lds	r27, 0x012C

	// scales based on prescaling
	unsigned short prescale;
	
	if(shared_ptr->speed_set <= 20){
     128:	fc 01       	movw	r30, r24
     12a:	80 81       	ld	r24, Z
     12c:	91 81       	ldd	r25, Z+1	; 0x01
     12e:	45 97       	sbiw	r24, 0x15	; 21
     130:	4c f4       	brge	.+18     	; 0x144 <calc_latest_rpm+0x5c>
	if (ps == 1){
		TCCR1B &= ~ 0xff;
		TCCR1B = (1 << CS10);
	}
	else if(ps == 8){
		TCCR1B &= ~ 0xff;
     132:	e1 e8       	ldi	r30, 0x81	; 129
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	10 82       	st	Z, r1
		TCCR1B = (1 << CS11);
     13a:	82 e0       	ldi	r24, 0x02	; 2
     13c:	80 83       	st	Z, r24

	// scales based on prescaling
	unsigned short prescale;
	
	if(shared_ptr->speed_set <= 20){
		prescale = 8;
     13e:	28 e0       	ldi	r18, 0x08	; 8
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	08 c0       	rjmp	.+16     	; 0x154 <calc_latest_rpm+0x6c>
	clk_prev = clk_curr;
}

static void set_prescale(int ps){
	if (ps == 1){
		TCCR1B &= ~ 0xff;
     144:	e1 e8       	ldi	r30, 0x81	; 129
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	10 82       	st	Z, r1
		TCCR1B = (1 << CS10);
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	80 83       	st	Z, r24
	if(shared_ptr->speed_set <= 20){
		prescale = 8;
		set_prescale(8);
	}
	else{
		prescale = 1;
     150:	21 e0       	ldi	r18, 0x01	; 1
     152:	30 e0       	ldi	r19, 0x00	; 0
		set_prescale(1);
	}

	unsigned long temp;

	temp = (unsigned long)delta_clk * prescale;
     154:	18 d6       	rcall	.+3120   	; 0xd86 <__umulhisi3>
	unsigned long long denominator;
	unsigned long long rpm;
	
	delta_time = calc_delta_time(shared_ptr);
	
	delta_time = delta_time << N;
     156:	dc 01       	movw	r26, r24
     158:	cb 01       	movw	r24, r22
     15a:	88 0f       	add	r24, r24
     15c:	99 1f       	adc	r25, r25
     15e:	aa 1f       	adc	r26, r26
     160:	bb 1f       	adc	r27, r27
     162:	88 0f       	add	r24, r24
     164:	99 1f       	adc	r25, r25
     166:	aa 1f       	adc	r26, r26
     168:	bb 1f       	adc	r27, r27
     16a:	9c 01       	movw	r18, r24
     16c:	ad 01       	movw	r20, r26
     16e:	22 0f       	add	r18, r18
     170:	33 1f       	adc	r19, r19
     172:	44 1f       	adc	r20, r20
     174:	55 1f       	adc	r21, r21
     176:	22 0f       	add	r18, r18
     178:	33 1f       	adc	r19, r19
     17a:	44 1f       	adc	r20, r20
     17c:	55 1f       	adc	r21, r21
     17e:	29 83       	std	Y+1, r18	; 0x01
     180:	3a 83       	std	Y+2, r19	; 0x02
     182:	4b 83       	std	Y+3, r20	; 0x03
     184:	5c 83       	std	Y+4, r21	; 0x04
	S_TO_MIN = S_TO_MIN << N;

	numerator = (unsigned long long)MS_TO_S * S_TO_MIN;
	numerator = numerator >> N;

	denominator = (unsigned long long)delta_rev_inverse * delta_time;
     186:	19 01       	movw	r2, r18
     188:	2a 01       	movw	r4, r20
     18a:	33 2d       	mov	r19, r3
     18c:	44 2d       	mov	r20, r4
     18e:	55 2d       	mov	r21, r5
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	02 e0       	ldi	r16, 0x02	; 2
     19a:	57 d6       	rcall	.+3246   	; 0xe4a <__ashldi3>
     19c:	a2 2c       	mov	r10, r2
     19e:	b3 2c       	mov	r11, r3
     1a0:	c4 2c       	mov	r12, r4
     1a2:	d5 2c       	mov	r13, r5
     1a4:	e1 2c       	mov	r14, r1
     1a6:	f1 2c       	mov	r15, r1
     1a8:	00 e0       	ldi	r16, 0x00	; 0
     1aa:	10 e0       	ldi	r17, 0x00	; 0
     1ac:	8e d6       	rcall	.+3356   	; 0xeca <__subdi3>
     1ae:	02 e0       	ldi	r16, 0x02	; 2
     1b0:	4c d6       	rcall	.+3224   	; 0xe4a <__ashldi3>
     1b2:	00 e0       	ldi	r16, 0x00	; 0
     1b4:	8a d6       	rcall	.+3348   	; 0xeca <__subdi3>
     1b6:	a2 2e       	mov	r10, r18
     1b8:	b3 2e       	mov	r11, r19
     1ba:	c4 2e       	mov	r12, r20
     1bc:	d5 2e       	mov	r13, r21
     1be:	e6 2e       	mov	r14, r22
     1c0:	f7 2e       	mov	r15, r23
     1c2:	e8 2f       	mov	r30, r24
     1c4:	19 2f       	mov	r17, r25
     1c6:	03 e0       	ldi	r16, 0x03	; 3
     1c8:	40 d6       	rcall	.+3200   	; 0xe4a <__ashldi3>
     1ca:	0e 2f       	mov	r16, r30
     1cc:	7e d6       	rcall	.+3324   	; 0xeca <__subdi3>
     1ce:	02 e0       	ldi	r16, 0x02	; 2
     1d0:	3c d6       	rcall	.+3192   	; 0xe4a <__ashldi3>
     1d2:	a2 2c       	mov	r10, r2
     1d4:	b3 2c       	mov	r11, r3
     1d6:	c4 2c       	mov	r12, r4
     1d8:	d5 2c       	mov	r13, r5
     1da:	e1 2c       	mov	r14, r1
     1dc:	f1 2c       	mov	r15, r1
     1de:	00 e0       	ldi	r16, 0x00	; 0
     1e0:	10 e0       	ldi	r17, 0x00	; 0
     1e2:	73 d6       	rcall	.+3302   	; 0xeca <__subdi3>
     1e4:	e2 2f       	mov	r30, r18
     1e6:	f3 2f       	mov	r31, r19
     1e8:	b4 2f       	mov	r27, r20
     1ea:	a5 2f       	mov	r26, r21
     1ec:	6b 87       	std	Y+11, r22	; 0x0b
     1ee:	7c 87       	std	Y+12, r23	; 0x0c
     1f0:	8f 83       	std	Y+7, r24	; 0x07
     1f2:	98 87       	std	Y+8, r25	; 0x08
     1f4:	02 e0       	ldi	r16, 0x02	; 2
     1f6:	29 d6       	rcall	.+3154   	; 0xe4a <__ashldi3>
     1f8:	a2 2e       	mov	r10, r18
     1fa:	b3 2e       	mov	r11, r19
     1fc:	c4 2e       	mov	r12, r20
     1fe:	d5 2e       	mov	r13, r21
     200:	e6 2e       	mov	r14, r22
     202:	f7 2e       	mov	r15, r23
     204:	08 2f       	mov	r16, r24
     206:	19 2f       	mov	r17, r25
     208:	2e 2f       	mov	r18, r30
     20a:	3f 2f       	mov	r19, r31
     20c:	4b 2f       	mov	r20, r27
     20e:	5a 2f       	mov	r21, r26
     210:	6b 85       	ldd	r22, Y+11	; 0x0b
     212:	7c 85       	ldd	r23, Y+12	; 0x0c
     214:	8f 81       	ldd	r24, Y+7	; 0x07
     216:	98 85       	ldd	r25, Y+8	; 0x08
     218:	4f d6       	rcall	.+3230   	; 0xeb8 <__adddi3>
     21a:	a2 2c       	mov	r10, r2
     21c:	b3 2c       	mov	r11, r3
     21e:	c4 2c       	mov	r12, r4
     220:	d5 2c       	mov	r13, r5
     222:	e1 2c       	mov	r14, r1
     224:	f1 2c       	mov	r15, r1
     226:	00 e0       	ldi	r16, 0x00	; 0
     228:	10 e0       	ldi	r17, 0x00	; 0
     22a:	46 d6       	rcall	.+3212   	; 0xeb8 <__adddi3>
	denominator = denominator >> N;
     22c:	04 e0       	ldi	r16, 0x04	; 4
     22e:	28 d6       	rcall	.+3152   	; 0xe80 <__lshrdi3>
     230:	a2 2e       	mov	r10, r18
     232:	b3 2e       	mov	r11, r19
     234:	c4 2e       	mov	r12, r20
     236:	d5 2e       	mov	r13, r21
     238:	e6 2e       	mov	r14, r22
     23a:	f7 2e       	mov	r15, r23
     23c:	a8 2f       	mov	r26, r24
     23e:	19 2f       	mov	r17, r25

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1);
     240:	01 e0       	ldi	r16, 0x01	; 1
     242:	1e d6       	rcall	.+3132   	; 0xe80 <__lshrdi3>
     244:	49 57       	subi	r20, 0x79	; 121
     246:	5c 46       	sbci	r21, 0x6C	; 108
     248:	6c 4f       	sbci	r22, 0xFC	; 252
     24a:	7f 4f       	sbci	r23, 0xFF	; 255
     24c:	8f 4f       	sbci	r24, 0xFF	; 255
     24e:	9f 4f       	sbci	r25, 0xFF	; 255
	rpm = rpm / denominator;
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
     250:	89 84       	ldd	r8, Y+9	; 0x09
     252:	9a 84       	ldd	r9, Y+10	; 0x0a
     254:	b0 e9       	ldi	r27, 0x90	; 144
     256:	8b 0e       	add	r8, r27
     258:	91 1c       	adc	r9, r1
     25a:	49 80       	ldd	r4, Y+1	; 0x01
     25c:	5a 80       	ldd	r5, Y+2	; 0x02
     25e:	6b 80       	ldd	r6, Y+3	; 0x03
     260:	7c 80       	ldd	r7, Y+4	; 0x04
     262:	68 94       	set
     264:	13 f8       	bld	r1, 3
     266:	76 94       	lsr	r7
     268:	67 94       	ror	r6
     26a:	57 94       	ror	r5
     26c:	47 94       	ror	r4
     26e:	16 94       	lsr	r1
     270:	d1 f7       	brne	.-12     	; 0x266 <calc_latest_rpm+0x17e>
     272:	f4 01       	movw	r30, r8
     274:	40 82       	st	Z, r4
     276:	51 82       	std	Z+1, r5	; 0x01
     278:	62 82       	std	Z+2, r6	; 0x02
     27a:	73 82       	std	Z+3, r7	; 0x03
	denominator = (unsigned long long)delta_rev_inverse * delta_time;
	denominator = denominator >> N;

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1);
	rpm = rpm / denominator;
     27c:	0a 2f       	mov	r16, r26
     27e:	9b d5       	rcall	.+2870   	; 0xdb6 <__udivdi3>
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
	shared_ptr->curr_rpm = (unsigned long)rpm >> N;	// Used for debugging
     280:	82 2f       	mov	r24, r18
     282:	93 2f       	mov	r25, r19
     284:	a4 2f       	mov	r26, r20
     286:	b5 2f       	mov	r27, r21
     288:	72 2f       	mov	r23, r18
     28a:	63 2f       	mov	r22, r19
     28c:	54 2f       	mov	r21, r20
     28e:	4b 2f       	mov	r20, r27
     290:	68 94       	set
     292:	13 f8       	bld	r1, 3
     294:	b6 95       	lsr	r27
     296:	a7 95       	ror	r26
     298:	97 95       	ror	r25
     29a:	87 95       	ror	r24
     29c:	16 94       	lsr	r1
     29e:	d1 f7       	brne	.-12     	; 0x294 <calc_latest_rpm+0x1ac>
     2a0:	e9 85       	ldd	r30, Y+9	; 0x09
     2a2:	fa 85       	ldd	r31, Y+10	; 0x0a
     2a4:	80 87       	std	Z+8, r24	; 0x08
     2a6:	91 87       	std	Z+9, r25	; 0x09
     2a8:	a2 87       	std	Z+10, r26	; 0x0a
     2aa:	b3 87       	std	Z+11, r27	; 0x0b
    int i;
    unsigned long temp;

    temp = rpm >> N;

    if(temp < 0 || temp > 200){
     2ac:	89 3c       	cpi	r24, 0xC9	; 201
     2ae:	91 05       	cpc	r25, r1
     2b0:	a1 05       	cpc	r26, r1
     2b2:	b1 05       	cpc	r27, r1
     2b4:	08 f5       	brcc	.+66     	; 0x2f8 <calc_latest_rpm+0x210>
     2b6:	e4 57       	subi	r30, 0x74	; 116
     2b8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ba:	20 e2       	ldi	r18, 0x20	; 32
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	09 85       	ldd	r16, Y+9	; 0x09
     2c0:	1a 85       	ldd	r17, Y+10	; 0x0a
        return;
    }

    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
     2c2:	b2 91       	ld	r27, -Z
     2c4:	a2 91       	ld	r26, -Z
     2c6:	92 91       	ld	r25, -Z
     2c8:	82 91       	ld	r24, -Z
     2ca:	84 83       	std	Z+4, r24	; 0x04
     2cc:	95 83       	std	Z+5, r25	; 0x05
     2ce:	a6 83       	std	Z+6, r26	; 0x06
     2d0:	b7 83       	std	Z+7, r27	; 0x07
     2d2:	21 50       	subi	r18, 0x01	; 1
     2d4:	31 09       	sbc	r19, r1

    if(temp < 0 || temp > 200){
        return;
    }

    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
     2d6:	21 15       	cp	r18, r1
     2d8:	31 05       	cpc	r19, r1
     2da:	99 f7       	brne	.-26     	; 0x2c2 <calc_latest_rpm+0x1da>
     2dc:	1a 87       	std	Y+10, r17	; 0x0a
     2de:	09 87       	std	Y+9, r16	; 0x09
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
    }
    shared_ptr->rpm_measurements[0] = rpm;
     2e0:	d8 01       	movw	r26, r16
     2e2:	50 96       	adiw	r26, 0x10	; 16
     2e4:	7c 93       	st	X, r23
     2e6:	50 97       	sbiw	r26, 0x10	; 16
     2e8:	51 96       	adiw	r26, 0x11	; 17
     2ea:	6c 93       	st	X, r22
     2ec:	51 97       	sbiw	r26, 0x11	; 17
     2ee:	52 96       	adiw	r26, 0x12	; 18
     2f0:	5c 93       	st	X, r21
     2f2:	52 97       	sbiw	r26, 0x12	; 18
     2f4:	53 96       	adiw	r26, 0x13	; 19
     2f6:	4c 93       	st	X, r20
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
	shared_ptr->curr_rpm = (unsigned long)rpm >> N;	// Used for debugging
	insert_rpm(shared_ptr, rpm);
	
}
     2f8:	2c 96       	adiw	r28, 0x0c	; 12
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	0f be       	out	0x3f, r0	; 63
     302:	cd bf       	out	0x3d, r28	; 61
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	ff 90       	pop	r15
     30e:	ef 90       	pop	r14
     310:	df 90       	pop	r13
     312:	cf 90       	pop	r12
     314:	bf 90       	pop	r11
     316:	af 90       	pop	r10
     318:	9f 90       	pop	r9
     31a:	8f 90       	pop	r8
     31c:	7f 90       	pop	r7
     31e:	6f 90       	pop	r6
     320:	5f 90       	pop	r5
     322:	4f 90       	pop	r4
     324:	3f 90       	pop	r3
     326:	2f 90       	pop	r2
     328:	08 95       	ret

0000032a <calc_avg_rpm>:


void calc_avg_rpm(Shared_Data* shared_ptr){
     32a:	2f 92       	push	r2
     32c:	3f 92       	push	r3
     32e:	4f 92       	push	r4
     330:	5f 92       	push	r5
     332:	6f 92       	push	r6
     334:	7f 92       	push	r7
     336:	8f 92       	push	r8
     338:	9f 92       	push	r9
     33a:	af 92       	push	r10
     33c:	bf 92       	push	r11
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	ec 01       	movw	r28, r24
     350:	dc 01       	movw	r26, r24
     352:	50 96       	adiw	r26, 0x10	; 16
     354:	e0 e2       	ldi	r30, 0x20	; 32
     356:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned long long temp = 0;
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	40 e0       	ldi	r20, 0x00	; 0
     35e:	50 e0       	ldi	r21, 0x00	; 0
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
	int i;
	
	for(i = 0; i < MEASUREMENTS_SIZE; i++){
		temp = temp + shared_ptr->rpm_measurements[i];
     368:	cd 90       	ld	r12, X+
     36a:	dd 90       	ld	r13, X+
     36c:	ed 90       	ld	r14, X+
     36e:	fd 90       	ld	r15, X+
     370:	16 01       	movw	r2, r12
     372:	27 01       	movw	r4, r14
     374:	ac 2c       	mov	r10, r12
     376:	b3 2c       	mov	r11, r3
     378:	c4 2c       	mov	r12, r4
     37a:	d5 2c       	mov	r13, r5
     37c:	e1 2c       	mov	r14, r1
     37e:	f1 2c       	mov	r15, r1
     380:	00 e0       	ldi	r16, 0x00	; 0
     382:	10 e0       	ldi	r17, 0x00	; 0
     384:	99 d5       	rcall	.+2866   	; 0xeb8 <__adddi3>
     386:	31 97       	sbiw	r30, 0x01	; 1

void calc_avg_rpm(Shared_Data* shared_ptr){
	unsigned long long temp = 0;
	int i;
	
	for(i = 0; i < MEASUREMENTS_SIZE; i++){
     388:	30 97       	sbiw	r30, 0x00	; 0
     38a:	71 f7       	brne	.-36     	; 0x368 <calc_avg_rpm+0x3e>
		temp = temp + shared_ptr->rpm_measurements[i];
	}
	
	// Divide by MEASUREMENTS_SIZE (32)
	temp = temp >> 5;
     38c:	05 e0       	ldi	r16, 0x05	; 5
     38e:	78 d5       	rcall	.+2800   	; 0xe80 <__lshrdi3>
	
	// convert back from Qm.n to normal int
	temp = temp >> N;
     390:	04 e0       	ldi	r16, 0x04	; 4
     392:	76 d5       	rcall	.+2796   	; 0xe80 <__lshrdi3>
	shared_ptr->rpm_avg = temp;
     394:	2c 87       	std	Y+12, r18	; 0x0c
     396:	3d 87       	std	Y+13, r19	; 0x0d
     398:	4e 87       	std	Y+14, r20	; 0x0e
     39a:	5f 87       	std	Y+15, r21	; 0x0f
	
}
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	ff 90       	pop	r15
     3a6:	ef 90       	pop	r14
     3a8:	df 90       	pop	r13
     3aa:	cf 90       	pop	r12
     3ac:	bf 90       	pop	r11
     3ae:	af 90       	pop	r10
     3b0:	9f 90       	pop	r9
     3b2:	8f 90       	pop	r8
     3b4:	7f 90       	pop	r7
     3b6:	6f 90       	pop	r6
     3b8:	5f 90       	pop	r5
     3ba:	4f 90       	pop	r4
     3bc:	3f 90       	pop	r3
     3be:	2f 90       	pop	r2
     3c0:	08 95       	ret

000003c2 <control>:


void control(Shared_Data* shared_ptr){
     3c2:	2f 92       	push	r2
     3c4:	3f 92       	push	r3
     3c6:	4f 92       	push	r4
     3c8:	5f 92       	push	r5
     3ca:	6f 92       	push	r6
     3cc:	7f 92       	push	r7
     3ce:	8f 92       	push	r8
     3d0:	9f 92       	push	r9
     3d2:	af 92       	push	r10
     3d4:	bf 92       	push	r11
     3d6:	cf 92       	push	r12
     3d8:	df 92       	push	r13
     3da:	ef 92       	push	r14
     3dc:	ff 92       	push	r15
     3de:	0f 93       	push	r16
     3e0:	1f 93       	push	r17
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	fc 01       	movw	r30, r24
}

static void update_fine_tuning(Shared_Data* shared_ptr){
	short fine_tuning;
	
	fine_tuning = ADCL;	// value: 0-1024
     3e8:	80 91 78 00 	lds	r24, 0x0078
	fine_tuning |= (ADCH << 8);
     3ec:	20 91 79 00 	lds	r18, 0x0079
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	92 2b       	or	r25, r18
	TIFR1 |= (1 << TOV0);	// clear timer1 overflow flag
     3f4:	b0 9a       	sbi	0x16, 0	; 22
	fine_tuning = (fine_tuning << 1);   // value: 0 - 2048
     3f6:	88 0f       	add	r24, r24
     3f8:	99 1f       	adc	r25, r25
	fine_tuning = fine_tuning - 1024;   // value: -1028 - 1028
     3fa:	94 50       	subi	r25, 0x04	; 4
	fine_tuning = fine_tuning/100;		// value: -10 - 10
     3fc:	64 e6       	ldi	r22, 0x64	; 100
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	af d4       	rcall	.+2398   	; 0xd60 <__divmodhi4>
     402:	2b 01       	movw	r4, r22
	shared_ptr->fine_tuning = fine_tuning;	// for debuggning
     404:	df 01       	movw	r26, r30
     406:	a2 56       	subi	r26, 0x62	; 98
     408:	bf 4f       	sbci	r27, 0xFF	; 255
     40a:	11 96       	adiw	r26, 0x01	; 1
     40c:	7c 93       	st	X, r23
     40e:	6e 93       	st	-X, r22
void control(Shared_Data* shared_ptr){
	long Kp = 2;
	long Ki;
	update_fine_tuning(shared_ptr);
	
	long e = (long)shared_ptr->speed_set - (long)shared_ptr->rpm_avg; //+ (long)shared_ptr->fine_tuning;
     410:	80 81       	ld	r24, Z
     412:	91 81       	ldd	r25, Z+1	; 0x01
     414:	ac 01       	movw	r20, r24
     416:	66 27       	eor	r22, r22
     418:	57 fd       	sbrc	r21, 7
     41a:	60 95       	com	r22
     41c:	76 2f       	mov	r23, r22
     41e:	c4 84       	ldd	r12, Z+12	; 0x0c
     420:	d5 84       	ldd	r13, Z+13	; 0x0d
     422:	e6 84       	ldd	r14, Z+14	; 0x0e
     424:	f7 84       	ldd	r15, Z+15	; 0x0f
     426:	4c 19       	sub	r20, r12
     428:	5d 09       	sbc	r21, r13
     42a:	6e 09       	sbc	r22, r14
     42c:	7f 09       	sbc	r23, r15
	e = e + (long)shared_ptr->fine_tuning;
     42e:	66 24       	eor	r6, r6
     430:	57 fc       	sbrc	r5, 7
     432:	60 94       	com	r6
     434:	76 2c       	mov	r7, r6
     436:	44 0e       	add	r4, r20
     438:	55 1e       	adc	r5, r21
     43a:	66 1e       	adc	r6, r22
     43c:	77 1e       	adc	r7, r23
	shared_ptr->error = (short)e;	// For debugging
     43e:	12 97       	sbiw	r26, 0x02	; 2
     440:	4d 92       	st	X+, r4
     442:	5c 92       	st	X, r5
	
	e = e << N_CTRL;
     444:	44 0c       	add	r4, r4
     446:	55 1c       	adc	r5, r5
     448:	66 1c       	adc	r6, r6
     44a:	77 1c       	adc	r7, r7
     44c:	44 0c       	add	r4, r4
     44e:	55 1c       	adc	r5, r5
     450:	66 1c       	adc	r6, r6
     452:	77 1c       	adc	r7, r7
     454:	44 0c       	add	r4, r4
     456:	55 1c       	adc	r5, r5
     458:	66 1c       	adc	r6, r6
     45a:	77 1c       	adc	r7, r7
     45c:	44 0c       	add	r4, r4
     45e:	55 1c       	adc	r5, r5
     460:	66 1c       	adc	r6, r6
     462:	77 1c       	adc	r7, r7
     464:	44 0c       	add	r4, r4
     466:	55 1c       	adc	r5, r5
     468:	66 1c       	adc	r6, r6
     46a:	77 1c       	adc	r7, r7
     46c:	44 0c       	add	r4, r4
     46e:	55 1c       	adc	r5, r5
     470:	66 1c       	adc	r6, r6
     472:	77 1c       	adc	r7, r7
     474:	44 0c       	add	r4, r4
     476:	55 1c       	adc	r5, r5
     478:	66 1c       	adc	r6, r6
     47a:	77 1c       	adc	r7, r7
	Kp = Kp << N_CTRL;
	
	if(shared_ptr->speed_set >= 80){
     47c:	80 35       	cpi	r24, 0x50	; 80
     47e:	91 05       	cpc	r25, r1
     480:	3c f4       	brge	.+14     	; 0x490 <control+0xce>
		Ki = 170;
	}

	else if(shared_ptr->speed_set >= 40){
     482:	88 97       	sbiw	r24, 0x28	; 40
     484:	54 f0       	brlt	.+20     	; 0x49a <control+0xd8>
		Ki = 120;
     486:	28 e7       	ldi	r18, 0x78	; 120
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	09 c0       	rjmp	.+18     	; 0x4a2 <control+0xe0>
	
	e = e << N_CTRL;
	Kp = Kp << N_CTRL;
	
	if(shared_ptr->speed_set >= 80){
		Ki = 170;
     490:	2a ea       	ldi	r18, 0xAA	; 170
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	04 c0       	rjmp	.+8      	; 0x4a2 <control+0xe0>

	else if(shared_ptr->speed_set >= 40){
		Ki = 120;
	}
	else{
		Ki = 60;
     49a:	2c e3       	ldi	r18, 0x3C	; 60
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	40 e0       	ldi	r20, 0x00	; 0
     4a0:	50 e0       	ldi	r21, 0x00	; 0
	}
	
	long integral = Ki*e;
     4a2:	c3 01       	movw	r24, r6
     4a4:	b2 01       	movw	r22, r4
     4a6:	4d d4       	rcall	.+2202   	; 0xd42 <__mulsi3>
	integral = integral >> N_CTRL;
     4a8:	4b 01       	movw	r8, r22
     4aa:	5c 01       	movw	r10, r24
     4ac:	68 94       	set
     4ae:	16 f8       	bld	r1, 6
     4b0:	b5 94       	asr	r11
     4b2:	a7 94       	ror	r10
     4b4:	97 94       	ror	r9
     4b6:	87 94       	ror	r8
     4b8:	16 94       	lsr	r1
     4ba:	d1 f7       	brne	.-12     	; 0x4b0 <control+0xee>
	shared_ptr->integral = shared_ptr->integral + integral;
     4bc:	6b 01       	movw	r12, r22
     4be:	7c 01       	movw	r14, r24
     4c0:	ff 0c       	add	r15, r15
     4c2:	cc 08       	sbc	r12, r12
     4c4:	dc 2c       	mov	r13, r12
     4c6:	76 01       	movw	r14, r12
     4c8:	28 2d       	mov	r18, r8
     4ca:	39 2d       	mov	r19, r9
     4cc:	4a 2d       	mov	r20, r10
     4ce:	5b 2d       	mov	r21, r11
     4d0:	6c 2d       	mov	r22, r12
     4d2:	7c 2d       	mov	r23, r12
     4d4:	8c 2d       	mov	r24, r12
     4d6:	9c 2d       	mov	r25, r12
     4d8:	df 01       	movw	r26, r30
     4da:	ac 56       	subi	r26, 0x6C	; 108
     4dc:	bf 4f       	sbci	r27, 0xFF	; 255
     4de:	ac 90       	ld	r10, X
     4e0:	11 96       	adiw	r26, 0x01	; 1
     4e2:	bc 90       	ld	r11, X
     4e4:	11 97       	sbiw	r26, 0x01	; 1
     4e6:	12 96       	adiw	r26, 0x02	; 2
     4e8:	cc 90       	ld	r12, X
     4ea:	12 97       	sbiw	r26, 0x02	; 2
     4ec:	13 96       	adiw	r26, 0x03	; 3
     4ee:	dc 90       	ld	r13, X
     4f0:	13 97       	sbiw	r26, 0x03	; 3
     4f2:	14 96       	adiw	r26, 0x04	; 4
     4f4:	ec 90       	ld	r14, X
     4f6:	14 97       	sbiw	r26, 0x04	; 4
     4f8:	15 96       	adiw	r26, 0x05	; 5
     4fa:	fc 90       	ld	r15, X
     4fc:	15 97       	sbiw	r26, 0x05	; 5
     4fe:	16 96       	adiw	r26, 0x06	; 6
     500:	0c 91       	ld	r16, X
     502:	16 97       	sbiw	r26, 0x06	; 6
     504:	17 96       	adiw	r26, 0x07	; 7
     506:	1c 91       	ld	r17, X
     508:	17 97       	sbiw	r26, 0x07	; 7
     50a:	d6 d4       	rcall	.+2476   	; 0xeb8 <__adddi3>
     50c:	a2 2e       	mov	r10, r18
     50e:	b3 2e       	mov	r11, r19
     510:	24 2e       	mov	r2, r20
     512:	35 2e       	mov	r3, r21
     514:	d6 2f       	mov	r29, r22
     516:	87 2e       	mov	r8, r23
     518:	98 2e       	mov	r9, r24
     51a:	c9 2f       	mov	r28, r25
     51c:	2c 93       	st	X, r18
     51e:	11 96       	adiw	r26, 0x01	; 1
     520:	3c 93       	st	X, r19
     522:	11 97       	sbiw	r26, 0x01	; 1
     524:	12 96       	adiw	r26, 0x02	; 2
     526:	4c 93       	st	X, r20
     528:	12 97       	sbiw	r26, 0x02	; 2
     52a:	13 96       	adiw	r26, 0x03	; 3
     52c:	5c 93       	st	X, r21
     52e:	13 97       	sbiw	r26, 0x03	; 3
     530:	14 96       	adiw	r26, 0x04	; 4
     532:	6c 93       	st	X, r22
     534:	14 97       	sbiw	r26, 0x04	; 4
     536:	15 96       	adiw	r26, 0x05	; 5
     538:	7c 93       	st	X, r23
     53a:	15 97       	sbiw	r26, 0x05	; 5
     53c:	16 96       	adiw	r26, 0x06	; 6
     53e:	8c 93       	st	X, r24
     540:	16 97       	sbiw	r26, 0x06	; 6
     542:	17 96       	adiw	r26, 0x07	; 7
     544:	9c 93       	st	X, r25
	
	long long pwm = (long long)e * Kp + shared_ptr->integral;
     546:	73 01       	movw	r14, r6
     548:	62 01       	movw	r12, r4
     54a:	ff 0c       	add	r15, r15
     54c:	cc 08       	sbc	r12, r12
     54e:	dc 2c       	mov	r13, r12
     550:	76 01       	movw	r14, r12
     552:	24 2d       	mov	r18, r4
     554:	35 2d       	mov	r19, r5
     556:	46 2d       	mov	r20, r6
     558:	57 2d       	mov	r21, r7
     55a:	6c 2d       	mov	r22, r12
     55c:	7c 2d       	mov	r23, r12
     55e:	8c 2d       	mov	r24, r12
     560:	9c 2d       	mov	r25, r12
     562:	08 e0       	ldi	r16, 0x08	; 8
     564:	72 d4       	rcall	.+2276   	; 0xe4a <__ashldi3>
     566:	b2 2f       	mov	r27, r18
     568:	a3 2f       	mov	r26, r19
     56a:	c4 2e       	mov	r12, r20
     56c:	d5 2e       	mov	r13, r21
     56e:	e6 2e       	mov	r14, r22
     570:	f7 2e       	mov	r15, r23
     572:	08 2f       	mov	r16, r24
     574:	19 2f       	mov	r17, r25
     576:	2a 2d       	mov	r18, r10
     578:	3b 2d       	mov	r19, r11
     57a:	42 2d       	mov	r20, r2
     57c:	53 2d       	mov	r21, r3
     57e:	6d 2f       	mov	r22, r29
     580:	78 2d       	mov	r23, r8
     582:	89 2d       	mov	r24, r9
     584:	9c 2f       	mov	r25, r28
     586:	ab 2e       	mov	r10, r27
     588:	ba 2e       	mov	r11, r26
     58a:	96 d4       	rcall	.+2348   	; 0xeb8 <__adddi3>
	pwm = pwm >> N_CTRL;
     58c:	07 e0       	ldi	r16, 0x07	; 7
     58e:	76 d4       	rcall	.+2284   	; 0xe7c <__ashrdi3>
	
	
	
	pwm = pwm >> N_CTRL;	// Convert to regular number
     590:	75 d4       	rcall	.+2282   	; 0xe7c <__ashrdi3>
     592:	c2 2f       	mov	r28, r18
     594:	a3 2f       	mov	r26, r19
     596:	a4 2e       	mov	r10, r20
     598:	b5 2e       	mov	r11, r21
     59a:	c6 2e       	mov	r12, r22
     59c:	d7 2e       	mov	r13, r23
     59e:	e8 2e       	mov	r14, r24
     5a0:	f9 2e       	mov	r15, r25
     5a2:	2f 3f       	cpi	r18, 0xFF	; 255
     5a4:	31 05       	cpc	r19, r1
     5a6:	41 05       	cpc	r20, r1
     5a8:	51 05       	cpc	r21, r1
     5aa:	61 05       	cpc	r22, r1
     5ac:	71 05       	cpc	r23, r1
     5ae:	81 05       	cpc	r24, r1
     5b0:	91 05       	cpc	r25, r1
     5b2:	49 f0       	breq	.+18     	; 0x5c6 <__stack+0xc7>
     5b4:	44 f0       	brlt	.+16     	; 0x5c6 <__stack+0xc7>
     5b6:	cf ef       	ldi	r28, 0xFF	; 255
     5b8:	a0 e0       	ldi	r26, 0x00	; 0
     5ba:	a1 2c       	mov	r10, r1
     5bc:	b1 2c       	mov	r11, r1
     5be:	c1 2c       	mov	r12, r1
     5c0:	d1 2c       	mov	r13, r1
     5c2:	e1 2c       	mov	r14, r1
     5c4:	f1 2c       	mov	r15, r1
     5c6:	bc 2f       	mov	r27, r28
     5c8:	da 2f       	mov	r29, r26
     5ca:	2c 2f       	mov	r18, r28
     5cc:	3a 2f       	mov	r19, r26
     5ce:	4a 2d       	mov	r20, r10
     5d0:	5b 2d       	mov	r21, r11
     5d2:	6c 2d       	mov	r22, r12
     5d4:	7d 2d       	mov	r23, r13
     5d6:	8e 2d       	mov	r24, r14
     5d8:	9f 2d       	mov	r25, r15
     5da:	a0 e0       	ldi	r26, 0x00	; 0
     5dc:	7f d4       	rcall	.+2302   	; 0xedc <__cmpdi2_s8>
     5de:	14 f4       	brge	.+4      	; 0x5e4 <__stack+0xe5>
     5e0:	b0 e0       	ldi	r27, 0x00	; 0
     5e2:	d0 e0       	ldi	r29, 0x00	; 0
		pwm = 0;		
	}
	else if(pwm > 255){
		pwm = 255;
	}
	shared_ptr->speed_actual = (int)pwm;
     5e4:	b2 83       	std	Z+2, r27	; 0x02
     5e6:	d3 83       	std	Z+3, r29	; 0x03
	OCR0A = pwm;
     5e8:	b7 bd       	out	0x27, r27	; 39
	OCR0B = pwm;
     5ea:	b8 bd       	out	0x28, r27	; 40
	
}
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	ff 90       	pop	r15
     5f6:	ef 90       	pop	r14
     5f8:	df 90       	pop	r13
     5fa:	cf 90       	pop	r12
     5fc:	bf 90       	pop	r11
     5fe:	af 90       	pop	r10
     600:	9f 90       	pop	r9
     602:	8f 90       	pop	r8
     604:	7f 90       	pop	r7
     606:	6f 90       	pop	r6
     608:	5f 90       	pop	r5
     60a:	4f 90       	pop	r4
     60c:	3f 90       	pop	r3
     60e:	2f 90       	pop	r2
     610:	08 95       	ret

00000612 <__vector_4>:

ISR(PCINT1_vect){
     612:	1f 92       	push	r1
     614:	0f 92       	push	r0
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	0f 92       	push	r0
     61a:	11 24       	eor	r1, r1
     61c:	2f 93       	push	r18
     61e:	3f 93       	push	r19
     620:	4f 93       	push	r20
     622:	5f 93       	push	r21
     624:	8f 93       	push	r24
     626:	9f 93       	push	r25
	cli();
     628:	f8 94       	cli
	
	clk_curr = TCNT1;
     62a:	80 91 84 00 	lds	r24, 0x0084
     62e:	90 91 85 00 	lds	r25, 0x0085
     632:	90 93 29 01 	sts	0x0129, r25
     636:	80 93 28 01 	sts	0x0128, r24
extern unsigned short clk_prev;
extern unsigned short clk_elapsed;

static void calc_clk_elapsed(){
	
	if(clk_curr < clk_prev){
     63a:	20 91 20 01 	lds	r18, 0x0120
     63e:	30 91 21 01 	lds	r19, 0x0121
     642:	82 17       	cp	r24, r18
     644:	93 07       	cpc	r25, r19
     646:	48 f4       	brcc	.+18     	; 0x65a <__vector_4+0x48>
		unsigned short temp = 0xFFFF;
		temp = temp - clk_prev;
     648:	20 95       	com	r18
     64a:	30 95       	com	r19
		temp = temp + clk_curr;
     64c:	28 0f       	add	r18, r24
     64e:	39 1f       	adc	r19, r25
		clk_elapsed = temp;
     650:	30 93 2c 01 	sts	0x012C, r19
     654:	20 93 2b 01 	sts	0x012B, r18
     658:	07 c0       	rjmp	.+14     	; 0x668 <__vector_4+0x56>
	}
	else{
		clk_elapsed = clk_curr - clk_prev;
     65a:	ac 01       	movw	r20, r24
     65c:	42 1b       	sub	r20, r18
     65e:	53 0b       	sbc	r21, r19
     660:	50 93 2c 01 	sts	0x012C, r21
     664:	40 93 2b 01 	sts	0x012B, r20
		
	}
	clk_prev = clk_curr;
     668:	90 93 21 01 	sts	0x0121, r25
     66c:	80 93 20 01 	sts	0x0120, r24
ISR(PCINT1_vect){
	cli();
	
	clk_curr = TCNT1;
	calc_clk_elapsed();
	newMeasurement = true;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	80 93 2a 01 	sts	0x012A, r24
	
	sei();
     676:	78 94       	sei
     678:	9f 91       	pop	r25
     67a:	8f 91       	pop	r24
     67c:	5f 91       	pop	r21
     67e:	4f 91       	pop	r20
     680:	3f 91       	pop	r19
     682:	2f 91       	pop	r18
     684:	0f 90       	pop	r0
     686:	0f be       	out	0x3f, r0	; 63
     688:	0f 90       	pop	r0
     68a:	1f 90       	pop	r1
     68c:	18 95       	reti

0000068e <USART_transmit>:
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with " "
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	00 d0       	rcall	.+0      	; 0x694 <USART_transmit+0x6>
     694:	00 d0       	rcall	.+0      	; 0x696 <USART_transmit+0x8>
     696:	00 d0       	rcall	.+0      	; 0x698 <USART_transmit+0xa>
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
	char buf[6];
	
	strcpy(buf,"%%%%%");
     69c:	26 e0       	ldi	r18, 0x06	; 6
     69e:	e0 e0       	ldi	r30, 0x00	; 0
     6a0:	f1 e0       	ldi	r31, 0x01	; 1
     6a2:	de 01       	movw	r26, r28
     6a4:	11 96       	adiw	r26, 0x01	; 1
     6a6:	01 90       	ld	r0, Z+
     6a8:	0d 92       	st	X+, r0
     6aa:	2a 95       	dec	r18
     6ac:	e1 f7       	brne	.-8      	; 0x6a6 <USART_transmit+0x18>
	strncpy(buf, data, 5);
     6ae:	45 e0       	ldi	r20, 0x05	; 5
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	bc 01       	movw	r22, r24
     6b4:	ce 01       	movw	r24, r28
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	4e d4       	rcall	.+2204   	; 0xf56 <strncpy>
     6ba:	be 01       	movw	r22, r28
     6bc:	6f 5f       	subi	r22, 0xFF	; 255
     6be:	7f 4f       	sbci	r23, 0xFF	; 255
     6c0:	9e 01       	movw	r18, r28
     6c2:	2a 5f       	subi	r18, 0xFA	; 250
     6c4:	3f 4f       	sbci	r19, 0xFF	; 255

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
     6c6:	e0 ec       	ldi	r30, 0xC0	; 192
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = buf[i];
     6ca:	86 ec       	ldi	r24, 0xC6	; 198
     6cc:	90 e0       	ldi	r25, 0x00	; 0
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
     6ce:	40 81       	ld	r20, Z
     6d0:	45 ff       	sbrs	r20, 5
     6d2:	fd cf       	rjmp	.-6      	; 0x6ce <USART_transmit+0x40>
		UDR0 = buf[i];
     6d4:	db 01       	movw	r26, r22
     6d6:	4d 91       	ld	r20, X+
     6d8:	bd 01       	movw	r22, r26
     6da:	dc 01       	movw	r26, r24
     6dc:	4c 93       	st	X, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6de:	a1 ee       	ldi	r26, 0xE1	; 225
     6e0:	b4 e0       	ldi	r27, 0x04	; 4
     6e2:	11 97       	sbiw	r26, 0x01	; 1
     6e4:	f1 f7       	brne	.-4      	; 0x6e2 <USART_transmit+0x54>
     6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <USART_transmit+0x5a>
     6e8:	00 00       	nop
	char buf[6];
	
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
     6ea:	62 17       	cp	r22, r18
     6ec:	73 07       	cpc	r23, r19
     6ee:	79 f7       	brne	.-34     	; 0x6ce <USART_transmit+0x40>
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = buf[i];
		_delay_ms(5);
	}
}
     6f0:	26 96       	adiw	r28, 0x06	; 6
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	cd bf       	out	0x3d, r28	; 61
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <__vector_18>:
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
     702:	1f 92       	push	r1
     704:	0f 92       	push	r0
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	0f 92       	push	r0
     70a:	11 24       	eor	r1, r1
     70c:	2f 93       	push	r18
     70e:	8f 93       	push	r24
     710:	9f 93       	push	r25
     712:	af 93       	push	r26
     714:	bf 93       	push	r27
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	ef 93       	push	r30
     71c:	ff 93       	push	r31
	cli();
     71e:	f8 94       	cli
	PORTC &= ~(1 << PC2);
     720:	42 98       	cbi	0x08, 2	; 8
	PORTC |= (1 << PC1);
     722:	41 9a       	sbi	0x08, 1	; 8
     724:	a2 e2       	ldi	r26, 0x22	; 34
     726:	b1 e0       	ldi	r27, 0x01	; 1
     728:	87 e2       	ldi	r24, 0x27	; 39
     72a:	91 e0       	ldi	r25, 0x01	; 1
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
     72c:	e0 ec       	ldi	r30, 0xC0	; 192
     72e:	f0 e0       	ldi	r31, 0x00	; 0
		recieved_bytes[i] = UDR0;
     730:	c6 ec       	ldi	r28, 0xC6	; 198
     732:	d0 e0       	ldi	r29, 0x00	; 0
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
     734:	20 81       	ld	r18, Z
     736:	22 23       	and	r18, r18
     738:	ec f7       	brge	.-6      	; 0x734 <__vector_18+0x32>
		recieved_bytes[i] = UDR0;
     73a:	28 81       	ld	r18, Y
     73c:	2d 93       	st	X+, r18
*/
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
     73e:	a8 17       	cp	r26, r24
     740:	b9 07       	cpc	r27, r25
     742:	c1 f7       	brne	.-16     	; 0x734 <__vector_18+0x32>
		while( !(UCSR0A & (1 << RXC0)) );
		recieved_bytes[i] = UDR0;
	}
	PORTC &= ~(1 << PC1);
     744:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (1 << PC2);
     746:	42 9a       	sbi	0x08, 2	; 8
	newCommand = true;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	80 93 27 01 	sts	0x0127, r24
	sei();
     74e:	78 94       	sei
}
     750:	ff 91       	pop	r31
     752:	ef 91       	pop	r30
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	bf 91       	pop	r27
     75a:	af 91       	pop	r26
     75c:	9f 91       	pop	r25
     75e:	8f 91       	pop	r24
     760:	2f 91       	pop	r18
     762:	0f 90       	pop	r0
     764:	0f be       	out	0x3f, r0	; 63
     766:	0f 90       	pop	r0
     768:	1f 90       	pop	r1
     76a:	18 95       	reti

0000076c <setup_registers>:
 *	PC1, PD5-PD6
 *	See details in datasheet pg. 99-100
*/
static void setup_DDR(){

	DDRB |= 0x00;
     76c:	84 b1       	in	r24, 0x04	; 4
     76e:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC2) | (1 << PC1) | (1 << PC0);
     770:	87 b1       	in	r24, 0x07	; 7
     772:	87 60       	ori	r24, 0x07	; 7
     774:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PD6) | (1 << PD5) | (1 << PD1);
     776:	8a b1       	in	r24, 0x0a	; 10
     778:	82 66       	ori	r24, 0x62	; 98
     77a:	8a b9       	out	0x0a, r24	; 10
 *	PWM-mode: fast PWM, inverted, no prescaling.
 *	See details in datasheet pg. 113-117
*/
static void setup_PWM(){

	TCCR0A = (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0) | (1 << WGM01) | (1 << WGM00);
     77c:	83 ef       	ldi	r24, 0xF3	; 243
     77e:	84 bd       	out	0x24, r24	; 36
	TCCR0B =  (0 << CS02) | (0 << CS01) | (1 << CS00);
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	85 bd       	out	0x25, r24	; 37
 * 	Baud rate according to #define in shared.h
 * 	See details in datasheet pg. 201-205
*/
static void setup_USART(){

	DDRD |= (1 << PD1);
     784:	51 9a       	sbi	0x0a, 1	; 10
	unsigned int ubrr = (((F_CPU / (BAUD * 16UL))) - 1 );

	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
     786:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
     78a:	89 e1       	ldi	r24, 0x19	; 25
     78c:	80 93 c4 00 	sts	0x00C4, r24

	// Enable reciever for interrupt and transmitter
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0);
     790:	88 e9       	ldi	r24, 0x98	; 152
     792:	80 93 c1 00 	sts	0x00C1, r24

	// Set frame format: 8 data, 2 stop, 0 parity
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     796:	86 e0       	ldi	r24, 0x06	; 6
     798:	80 93 c2 00 	sts	0x00C2, r24
 * 	See details in datasheet pg. 81-82
*/
static void setup_interrupts(){

	// Enables possibility of interrupts on pins 14-8
	PCICR = (1 << PCIE1);
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	80 93 68 00 	sts	0x0068, r24
	// Enables interrupts on pin PC4-PC5
	PCMSK1 = (1 << PCINT13) | (1 << PCINT12);
     7a2:	80 e3       	ldi	r24, 0x30	; 48
     7a4:	80 93 6c 00 	sts	0x006C, r24
/*	
 *	Sets up clk/8 prescaling on 16-bit timer OC1
 *	See details in datasheet pg. 141-147
*/	
static void setup_speed_clock(){
	TCCR1B |= (1 << CS11);
     7a8:	e1 e8       	ldi	r30, 0x81	; 129
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	80 81       	ld	r24, Z
     7ae:	82 60       	ori	r24, 0x02	; 2
     7b0:	80 83       	st	Z, r24
}

/* pg. 268-272*/
static void setup_ADC(){
	ADMUX |= (1 << REFS0) | (1 << MUX1) | (1 << MUX0);
     7b2:	ec e7       	ldi	r30, 0x7C	; 124
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
     7b8:	83 64       	ori	r24, 0x43	; 67
     7ba:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADATE);
     7bc:	ea e7       	ldi	r30, 0x7A	; 122
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	80 81       	ld	r24, Z
     7c2:	80 6a       	ori	r24, 0xA0	; 160
     7c4:	80 83       	st	Z, r24
	ADCSRB |= (1 << ADTS2) | (1 << ADTS1);
     7c6:	eb e7       	ldi	r30, 0x7B	; 123
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	80 81       	ld	r24, Z
     7cc:	86 60       	ori	r24, 0x06	; 6
     7ce:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC3D);
     7d0:	ee e7       	ldi	r30, 0x7E	; 126
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	80 81       	ld	r24, Z
     7d6:	88 60       	ori	r24, 0x08	; 8
     7d8:	80 83       	st	Z, r24
     7da:	08 95       	ret

000007dc <main>:
unsigned short clk_curr;
char recieved_bytes[5];
unsigned short clk_prev;
unsigned short clk_elapsed;

int main(void){
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	c0 5a       	subi	r28, 0xA0	; 160
     7e6:	d1 09       	sbc	r29, r1
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	f8 94       	cli
     7ec:	de bf       	out	0x3e, r29	; 62
     7ee:	0f be       	out	0x3f, r0	; 63
     7f0:	cd bf       	out	0x3d, r28	; 61
	Shared_Data shared_data;
	Shared_Data* shared_ptr = &shared_data;
	init_shared_data(shared_ptr);
     7f2:	ce 01       	movw	r24, r28
     7f4:	01 96       	adiw	r24, 0x01	; 1
     7f6:	44 dc       	rcall	.-1912   	; 0x80 <init_shared_data>
	
	newCommand = false;
     7f8:	10 92 27 01 	sts	0x0127, r1
	newMeasurement = false;
     7fc:	10 92 2a 01 	sts	0x012A, r1
	clk_curr = 0;
     800:	10 92 29 01 	sts	0x0129, r1
     804:	10 92 28 01 	sts	0x0128, r1
	clk_prev = 0;
     808:	10 92 21 01 	sts	0x0121, r1
     80c:	10 92 20 01 	sts	0x0120, r1
	clk_elapsed = 0;
     810:	10 92 2c 01 	sts	0x012C, r1
     814:	10 92 2b 01 	sts	0x012B, r1
	//OCR0A = 150;
	//OCR0B = 150;
	shared_ptr->speed_set = 30;
     818:	8e e1       	ldi	r24, 0x1E	; 30
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	9a 83       	std	Y+2, r25	; 0x02
     81e:	89 83       	std	Y+1, r24	; 0x01
	
	setup_registers();
     820:	a5 df       	rcall	.-182    	; 0x76c <setup_registers>
	sei();
     822:	78 94       	sei
			transmit_8(shared_ptr);
			transmit_0(shared_ptr);
			i = 0;
		}*/
		if(newCommand){
			switch(*recieved_bytes){
     824:	02 e2       	ldi	r16, 0x22	; 34
     826:	11 e0       	ldi	r17, 0x01	; 1
		if(i == 10000){
			transmit_8(shared_ptr);
			transmit_0(shared_ptr);
			i = 0;
		}*/
		if(newCommand){
     828:	80 91 27 01 	lds	r24, 0x0127
     82c:	88 23       	and	r24, r24
     82e:	b1 f1       	breq	.+108    	; 0x89c <main+0xc0>
			switch(*recieved_bytes){
     830:	f8 01       	movw	r30, r16
     832:	80 81       	ld	r24, Z
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	fc 01       	movw	r30, r24
     838:	f0 97       	sbiw	r30, 0x30	; 48
     83a:	ea 30       	cpi	r30, 0x0A	; 10
     83c:	f1 05       	cpc	r31, r1
     83e:	58 f5       	brcc	.+86     	; 0x896 <main+0xba>
     840:	e6 5e       	subi	r30, 0xE6	; 230
     842:	ff 4f       	sbci	r31, 0xFF	; 255
     844:	09 94       	ijmp
				case '0':
					transmit_0(shared_ptr);
     846:	ce 01       	movw	r24, r28
     848:	01 96       	adiw	r24, 0x01	; 1
     84a:	38 d0       	rcall	.+112    	; 0x8bc <transmit_0>
					break;
     84c:	25 c0       	rjmp	.+74     	; 0x898 <main+0xbc>
				case '1':
					transmit_1(shared_ptr);
     84e:	ce 01       	movw	r24, r28
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	6b d0       	rcall	.+214    	; 0x92a <transmit_1>
					break;
     854:	21 c0       	rjmp	.+66     	; 0x898 <main+0xbc>
				case '2':
					transmit_2(shared_ptr);
     856:	ce 01       	movw	r24, r28
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	aa d0       	rcall	.+340    	; 0x9b0 <transmit_2>
					break;
     85c:	1d c0       	rjmp	.+58     	; 0x898 <main+0xbc>
				case '3':
					transmit_3(shared_ptr);
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	d7 d0       	rcall	.+430    	; 0xa12 <transmit_3>
					break;
     864:	19 c0       	rjmp	.+50     	; 0x898 <main+0xbc>
				case '4':
					transmit_4(shared_ptr);
     866:	ce 01       	movw	r24, r28
     868:	01 96       	adiw	r24, 0x01	; 1
     86a:	00 d1       	rcall	.+512    	; 0xa6c <transmit_4>
					break;
     86c:	15 c0       	rjmp	.+42     	; 0x898 <main+0xbc>
				case '5':
					transmit_5(shared_ptr);
     86e:	ce 01       	movw	r24, r28
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	31 d1       	rcall	.+610    	; 0xad6 <transmit_5>
					break;
     874:	11 c0       	rjmp	.+34     	; 0x898 <main+0xbc>
				case '6':
					transmit_6(shared_ptr);
     876:	ce 01       	movw	r24, r28
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	63 d1       	rcall	.+710    	; 0xb42 <transmit_6>
					break;
     87c:	0d c0       	rjmp	.+26     	; 0x898 <main+0xbc>
				case '7':
					transmit_7(shared_ptr);
     87e:	ce 01       	movw	r24, r28
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	9a d1       	rcall	.+820    	; 0xbb8 <transmit_7>
					break;
     884:	09 c0       	rjmp	.+18     	; 0x898 <main+0xbc>
				case '8':
					transmit_8(shared_ptr);
     886:	ce 01       	movw	r24, r28
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	cd d1       	rcall	.+922    	; 0xc26 <transmit_8>
					break;
     88c:	05 c0       	rjmp	.+10     	; 0x898 <main+0xbc>
				case '9':
					transmit_9(shared_ptr);
     88e:	ce 01       	movw	r24, r28
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	02 d2       	rcall	.+1028   	; 0xc98 <transmit_9>
					break;
     894:	01 c0       	rjmp	.+2      	; 0x898 <main+0xbc>
				default:
					transmit_empty();
     896:	39 d2       	rcall	.+1138   	; 0xd0a <transmit_empty>
			}
			newCommand = false;
     898:	10 92 27 01 	sts	0x0127, r1
		}
		if(newMeasurement){
     89c:	80 91 2a 01 	lds	r24, 0x012A
     8a0:	88 23       	and	r24, r24
     8a2:	41 f0       	breq	.+16     	; 0x8b4 <main+0xd8>
			calc_latest_rpm(shared_ptr);
     8a4:	ce 01       	movw	r24, r28
     8a6:	01 96       	adiw	r24, 0x01	; 1
     8a8:	1f dc       	rcall	.-1986   	; 0xe8 <calc_latest_rpm>
			calc_avg_rpm(shared_ptr);
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	3d dd       	rcall	.-1414   	; 0x32a <calc_avg_rpm>
			newMeasurement = false;
     8b0:	10 92 2a 01 	sts	0x012A, r1
		}
		control(shared_ptr);
     8b4:	ce 01       	movw	r24, r28
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	84 dd       	rcall	.-1272   	; 0x3c2 <control>
		
	}
     8ba:	b6 cf       	rjmp	.-148    	; 0x828 <main+0x4c>

000008bc <transmit_0>:
extern bool newMeasurement;
extern unsigned short clk_curr;
extern char recieved_bytes[5];
extern unsigned short clk_elapsed;

void transmit_0(Shared_Data* shared_ptr){
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	00 d0       	rcall	.+0      	; 0x8c6 <transmit_0+0xa>
     8c6:	00 d0       	rcall	.+0      	; 0x8c8 <transmit_0+0xc>
     8c8:	00 d0       	rcall	.+0      	; 0x8ca <transmit_0+0xe>
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     8ce:	25 e0       	ldi	r18, 0x05	; 5
     8d0:	e6 e0       	ldi	r30, 0x06	; 6
     8d2:	f1 e0       	ldi	r31, 0x01	; 1
     8d4:	8e 01       	movw	r16, r28
     8d6:	0f 5f       	subi	r16, 0xFF	; 255
     8d8:	1f 4f       	sbci	r17, 0xFF	; 255
     8da:	d8 01       	movw	r26, r16
     8dc:	01 90       	ld	r0, Z+
     8de:	0d 92       	st	X+, r0
     8e0:	2a 95       	dec	r18
     8e2:	e1 f7       	brne	.-8      	; 0x8dc <transmit_0+0x20>
	snprintf(temp, 6, "%hd", shared_ptr->fine_tuning);
     8e4:	fc 01       	movw	r30, r24
     8e6:	e2 56       	subi	r30, 0x62	; 98
     8e8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ea:	81 81       	ldd	r24, Z+1	; 0x01
     8ec:	8f 93       	push	r24
     8ee:	80 81       	ld	r24, Z
     8f0:	8f 93       	push	r24
     8f2:	8c e0       	ldi	r24, 0x0C	; 12
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	9f 93       	push	r25
     8f8:	8f 93       	push	r24
     8fa:	1f 92       	push	r1
     8fc:	86 e0       	ldi	r24, 0x06	; 6
     8fe:	8f 93       	push	r24
     900:	1f 93       	push	r17
     902:	0f 93       	push	r16
     904:	3f d3       	rcall	.+1662   	; 0xf84 <snprintf>
	USART_transmit(temp);
     906:	c8 01       	movw	r24, r16
     908:	c2 de       	rcall	.-636    	; 0x68e <USART_transmit>
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	de bf       	out	0x3e, r29	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	cd bf       	out	0x3d, r28	; 61
}
     914:	26 96       	adiw	r28, 0x06	; 6
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	08 95       	ret

0000092a <transmit_1>:

void transmit_1(Shared_Data* shared_ptr){
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	00 d0       	rcall	.+0      	; 0x934 <transmit_1+0xa>
     934:	00 d0       	rcall	.+0      	; 0x936 <transmit_1+0xc>
     936:	00 d0       	rcall	.+0      	; 0x938 <transmit_1+0xe>
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     93c:	25 e0       	ldi	r18, 0x05	; 5
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	f1 e0       	ldi	r31, 0x01	; 1
     942:	8e 01       	movw	r16, r28
     944:	0f 5f       	subi	r16, 0xFF	; 255
     946:	1f 4f       	sbci	r17, 0xFF	; 255
     948:	d8 01       	movw	r26, r16
     94a:	01 90       	ld	r0, Z+
     94c:	0d 92       	st	X+, r0
     94e:	2a 95       	dec	r18
     950:	e1 f7       	brne	.-8      	; 0x94a <transmit_1+0x20>
	snprintf(temp, 6, "%lld", shared_ptr->integral);
     952:	fc 01       	movw	r30, r24
     954:	ec 56       	subi	r30, 0x6C	; 108
     956:	ff 4f       	sbci	r31, 0xFF	; 255
     958:	87 81       	ldd	r24, Z+7	; 0x07
     95a:	8f 93       	push	r24
     95c:	86 81       	ldd	r24, Z+6	; 0x06
     95e:	8f 93       	push	r24
     960:	85 81       	ldd	r24, Z+5	; 0x05
     962:	8f 93       	push	r24
     964:	84 81       	ldd	r24, Z+4	; 0x04
     966:	8f 93       	push	r24
     968:	83 81       	ldd	r24, Z+3	; 0x03
     96a:	8f 93       	push	r24
     96c:	82 81       	ldd	r24, Z+2	; 0x02
     96e:	8f 93       	push	r24
     970:	81 81       	ldd	r24, Z+1	; 0x01
     972:	8f 93       	push	r24
     974:	80 81       	ld	r24, Z
     976:	8f 93       	push	r24
     978:	80 e1       	ldi	r24, 0x10	; 16
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	9f 93       	push	r25
     97e:	8f 93       	push	r24
     980:	1f 92       	push	r1
     982:	86 e0       	ldi	r24, 0x06	; 6
     984:	8f 93       	push	r24
     986:	1f 93       	push	r17
     988:	0f 93       	push	r16
     98a:	fc d2       	rcall	.+1528   	; 0xf84 <snprintf>
	USART_transmit(temp);
     98c:	c8 01       	movw	r24, r16
     98e:	7f de       	rcall	.-770    	; 0x68e <USART_transmit>
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
}
     99a:	26 96       	adiw	r28, 0x06	; 6
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	08 95       	ret

000009b0 <transmit_2>:

/* Sets a new set value for the speed. Range: 0-120. Transmits an empty message. */
void transmit_2(Shared_Data* shared_ptr){
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
     9bc:	2a 97       	sbiw	r28, 0x0a	; 10
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	8c 01       	movw	r16, r24
	char temp[6];
	char sub_str[4];
	int res;
	strncpy(temp, "     ", 5);
     9ca:	85 e0       	ldi	r24, 0x05	; 5
     9cc:	e6 e0       	ldi	r30, 0x06	; 6
     9ce:	f1 e0       	ldi	r31, 0x01	; 1
     9d0:	de 01       	movw	r26, r28
     9d2:	11 96       	adiw	r26, 0x01	; 1
     9d4:	01 90       	ld	r0, Z+
     9d6:	0d 92       	st	X+, r0
     9d8:	8a 95       	dec	r24
     9da:	e1 f7       	brne	.-8      	; 0x9d4 <transmit_2+0x24>
	strncpy(sub_str, recieved_bytes + 1, 3);
     9dc:	43 e0       	ldi	r20, 0x03	; 3
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	63 e2       	ldi	r22, 0x23	; 35
     9e2:	71 e0       	ldi	r23, 0x01	; 1
     9e4:	ce 01       	movw	r24, r28
     9e6:	07 96       	adiw	r24, 0x07	; 7
     9e8:	b6 d2       	rcall	.+1388   	; 0xf56 <strncpy>
		
	res = atoi(sub_str);
     9ea:	ce 01       	movw	r24, r28
     9ec:	07 96       	adiw	r24, 0x07	; 7
     9ee:	96 d2       	rcall	.+1324   	; 0xf1c <atoi>
	shared_ptr->speed_set = res;
     9f0:	f8 01       	movw	r30, r16
     9f2:	91 83       	std	Z+1, r25	; 0x01
     9f4:	80 83       	st	Z, r24
	USART_transmit(temp);
     9f6:	ce 01       	movw	r24, r28
     9f8:	01 96       	adiw	r24, 0x01	; 1
     9fa:	49 de       	rcall	.-878    	; 0x68e <USART_transmit>

}
     9fc:	2a 96       	adiw	r28, 0x0a	; 10
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	cd bf       	out	0x3d, r28	; 61
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	08 95       	ret

00000a12 <transmit_3>:

/* Transmits the set speed. */
void transmit_3(Shared_Data* shared_ptr){
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	00 d0       	rcall	.+0      	; 0xa1c <transmit_3+0xa>
     a1c:	00 d0       	rcall	.+0      	; 0xa1e <transmit_3+0xc>
     a1e:	00 d0       	rcall	.+0      	; 0xa20 <transmit_3+0xe>
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	
	snprintf(temp, 6, "%hd",  shared_ptr->speed_set);
     a24:	fc 01       	movw	r30, r24
     a26:	21 81       	ldd	r18, Z+1	; 0x01
     a28:	2f 93       	push	r18
     a2a:	80 81       	ld	r24, Z
     a2c:	8f 93       	push	r24
     a2e:	8c e0       	ldi	r24, 0x0C	; 12
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	9f 93       	push	r25
     a34:	8f 93       	push	r24
     a36:	1f 92       	push	r1
     a38:	86 e0       	ldi	r24, 0x06	; 6
     a3a:	8f 93       	push	r24
     a3c:	8e 01       	movw	r16, r28
     a3e:	0f 5f       	subi	r16, 0xFF	; 255
     a40:	1f 4f       	sbci	r17, 0xFF	; 255
     a42:	1f 93       	push	r17
     a44:	0f 93       	push	r16
     a46:	9e d2       	rcall	.+1340   	; 0xf84 <snprintf>
	USART_transmit(temp);
     a48:	c8 01       	movw	r24, r16
     a4a:	21 de       	rcall	.-958    	; 0x68e <USART_transmit>
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
}
     a56:	26 96       	adiw	r28, 0x06	; 6
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	08 95       	ret

00000a6c <transmit_4>:


void transmit_4(Shared_Data* shared_ptr){
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	00 d0       	rcall	.+0      	; 0xa76 <transmit_4+0xa>
     a76:	00 d0       	rcall	.+0      	; 0xa78 <transmit_4+0xc>
     a78:	00 d0       	rcall	.+0      	; 0xa7a <transmit_4+0xe>
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     a7e:	25 e0       	ldi	r18, 0x05	; 5
     a80:	e6 e0       	ldi	r30, 0x06	; 6
     a82:	f1 e0       	ldi	r31, 0x01	; 1
     a84:	8e 01       	movw	r16, r28
     a86:	0f 5f       	subi	r16, 0xFF	; 255
     a88:	1f 4f       	sbci	r17, 0xFF	; 255
     a8a:	d8 01       	movw	r26, r16
     a8c:	01 90       	ld	r0, Z+
     a8e:	0d 92       	st	X+, r0
     a90:	2a 95       	dec	r18
     a92:	e1 f7       	brne	.-8      	; 0xa8c <transmit_4+0x20>
	
	snprintf(temp, 6, "%d", shared_ptr->speed_actual);
     a94:	fc 01       	movw	r30, r24
     a96:	23 81       	ldd	r18, Z+3	; 0x03
     a98:	2f 93       	push	r18
     a9a:	82 81       	ldd	r24, Z+2	; 0x02
     a9c:	8f 93       	push	r24
     a9e:	85 e1       	ldi	r24, 0x15	; 21
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	9f 93       	push	r25
     aa4:	8f 93       	push	r24
     aa6:	1f 92       	push	r1
     aa8:	86 e0       	ldi	r24, 0x06	; 6
     aaa:	8f 93       	push	r24
     aac:	1f 93       	push	r17
     aae:	0f 93       	push	r16
     ab0:	69 d2       	rcall	.+1234   	; 0xf84 <snprintf>
	USART_transmit(temp);
     ab2:	c8 01       	movw	r24, r16
     ab4:	ec dd       	rcall	.-1064   	; 0x68e <USART_transmit>
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
}
     ac0:	26 96       	adiw	r28, 0x06	; 6
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	de bf       	out	0x3e, r29	; 62
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	08 95       	ret

00000ad6 <transmit_5>:

void transmit_5(Shared_Data* shared_ptr){
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	00 d0       	rcall	.+0      	; 0xae0 <transmit_5+0xa>
     ae0:	00 d0       	rcall	.+0      	; 0xae2 <transmit_5+0xc>
     ae2:	00 d0       	rcall	.+0      	; 0xae4 <transmit_5+0xe>
     ae4:	cd b7       	in	r28, 0x3d	; 61
     ae6:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     ae8:	85 e0       	ldi	r24, 0x05	; 5
     aea:	e6 e0       	ldi	r30, 0x06	; 6
     aec:	f1 e0       	ldi	r31, 0x01	; 1
     aee:	8e 01       	movw	r16, r28
     af0:	0f 5f       	subi	r16, 0xFF	; 255
     af2:	1f 4f       	sbci	r17, 0xFF	; 255
     af4:	d8 01       	movw	r26, r16
     af6:	01 90       	ld	r0, Z+
     af8:	0d 92       	st	X+, r0
     afa:	8a 95       	dec	r24
     afc:	e1 f7       	brne	.-8      	; 0xaf6 <transmit_5+0x20>

	snprintf(temp, 6, "%hu", clk_elapsed);
     afe:	80 91 2c 01 	lds	r24, 0x012C
     b02:	8f 93       	push	r24
     b04:	80 91 2b 01 	lds	r24, 0x012B
     b08:	8f 93       	push	r24
     b0a:	88 e1       	ldi	r24, 0x18	; 24
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	9f 93       	push	r25
     b10:	8f 93       	push	r24
     b12:	1f 92       	push	r1
     b14:	86 e0       	ldi	r24, 0x06	; 6
     b16:	8f 93       	push	r24
     b18:	1f 93       	push	r17
     b1a:	0f 93       	push	r16
     b1c:	33 d2       	rcall	.+1126   	; 0xf84 <snprintf>
	USART_transmit(temp);
     b1e:	c8 01       	movw	r24, r16
     b20:	b6 dd       	rcall	.-1172   	; 0x68e <USART_transmit>
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	f8 94       	cli
     b26:	de bf       	out	0x3e, r29	; 62
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	cd bf       	out	0x3d, r28	; 61
}
     b2c:	26 96       	adiw	r28, 0x06	; 6
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	de bf       	out	0x3e, r29	; 62
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	cd bf       	out	0x3d, r28	; 61
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	08 95       	ret

00000b42 <transmit_6>:

void transmit_6(Shared_Data* shared_ptr){
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <transmit_6+0xa>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <transmit_6+0xc>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <transmit_6+0xe>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     b54:	25 e0       	ldi	r18, 0x05	; 5
     b56:	e6 e0       	ldi	r30, 0x06	; 6
     b58:	f1 e0       	ldi	r31, 0x01	; 1
     b5a:	8e 01       	movw	r16, r28
     b5c:	0f 5f       	subi	r16, 0xFF	; 255
     b5e:	1f 4f       	sbci	r17, 0xFF	; 255
     b60:	d8 01       	movw	r26, r16
     b62:	01 90       	ld	r0, Z+
     b64:	0d 92       	st	X+, r0
     b66:	2a 95       	dec	r18
     b68:	e1 f7       	brne	.-8      	; 0xb62 <transmit_6+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->delta_time);
     b6a:	fc 01       	movw	r30, r24
     b6c:	e0 57       	subi	r30, 0x70	; 112
     b6e:	ff 4f       	sbci	r31, 0xFF	; 255
     b70:	83 81       	ldd	r24, Z+3	; 0x03
     b72:	8f 93       	push	r24
     b74:	82 81       	ldd	r24, Z+2	; 0x02
     b76:	8f 93       	push	r24
     b78:	81 81       	ldd	r24, Z+1	; 0x01
     b7a:	8f 93       	push	r24
     b7c:	80 81       	ld	r24, Z
     b7e:	8f 93       	push	r24
     b80:	8c e1       	ldi	r24, 0x1C	; 28
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	9f 93       	push	r25
     b86:	8f 93       	push	r24
     b88:	1f 92       	push	r1
     b8a:	86 e0       	ldi	r24, 0x06	; 6
     b8c:	8f 93       	push	r24
     b8e:	1f 93       	push	r17
     b90:	0f 93       	push	r16
     b92:	f8 d1       	rcall	.+1008   	; 0xf84 <snprintf>
	USART_transmit(temp);
     b94:	c8 01       	movw	r24, r16
     b96:	7b dd       	rcall	.-1290   	; 0x68e <USART_transmit>
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
}
     ba2:	26 96       	adiw	r28, 0x06	; 6
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	f8 94       	cli
     ba8:	de bf       	out	0x3e, r29	; 62
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	cd bf       	out	0x3d, r28	; 61
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	08 95       	ret

00000bb8 <transmit_7>:

void transmit_7(Shared_Data* shared_ptr){
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	00 d0       	rcall	.+0      	; 0xbc2 <transmit_7+0xa>
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <transmit_7+0xc>
     bc4:	00 d0       	rcall	.+0      	; 0xbc6 <transmit_7+0xe>
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     bca:	25 e0       	ldi	r18, 0x05	; 5
     bcc:	e6 e0       	ldi	r30, 0x06	; 6
     bce:	f1 e0       	ldi	r31, 0x01	; 1
     bd0:	8e 01       	movw	r16, r28
     bd2:	0f 5f       	subi	r16, 0xFF	; 255
     bd4:	1f 4f       	sbci	r17, 0xFF	; 255
     bd6:	d8 01       	movw	r26, r16
     bd8:	01 90       	ld	r0, Z+
     bda:	0d 92       	st	X+, r0
     bdc:	2a 95       	dec	r18
     bde:	e1 f7       	brne	.-8      	; 0xbd8 <transmit_7+0x20>
	snprintf(temp, 6, "%hd", shared_ptr->error);
     be0:	fc 01       	movw	r30, r24
     be2:	e4 56       	subi	r30, 0x64	; 100
     be4:	ff 4f       	sbci	r31, 0xFF	; 255
     be6:	81 81       	ldd	r24, Z+1	; 0x01
     be8:	8f 93       	push	r24
     bea:	80 81       	ld	r24, Z
     bec:	8f 93       	push	r24
     bee:	8c e0       	ldi	r24, 0x0C	; 12
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	9f 93       	push	r25
     bf4:	8f 93       	push	r24
     bf6:	1f 92       	push	r1
     bf8:	86 e0       	ldi	r24, 0x06	; 6
     bfa:	8f 93       	push	r24
     bfc:	1f 93       	push	r17
     bfe:	0f 93       	push	r16
     c00:	c1 d1       	rcall	.+898    	; 0xf84 <snprintf>
	USART_transmit(temp);
     c02:	c8 01       	movw	r24, r16
     c04:	44 dd       	rcall	.-1400   	; 0x68e <USART_transmit>
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
}
     c10:	26 96       	adiw	r28, 0x06	; 6
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	08 95       	ret

00000c26 <transmit_8>:

void transmit_8(Shared_Data* shared_ptr){
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <transmit_8+0xa>
     c30:	00 d0       	rcall	.+0      	; 0xc32 <transmit_8+0xc>
     c32:	00 d0       	rcall	.+0      	; 0xc34 <transmit_8+0xe>
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     c38:	25 e0       	ldi	r18, 0x05	; 5
     c3a:	e6 e0       	ldi	r30, 0x06	; 6
     c3c:	f1 e0       	ldi	r31, 0x01	; 1
     c3e:	8e 01       	movw	r16, r28
     c40:	0f 5f       	subi	r16, 0xFF	; 255
     c42:	1f 4f       	sbci	r17, 0xFF	; 255
     c44:	d8 01       	movw	r26, r16
     c46:	01 90       	ld	r0, Z+
     c48:	0d 92       	st	X+, r0
     c4a:	2a 95       	dec	r18
     c4c:	e1 f7       	brne	.-8      	; 0xc46 <transmit_8+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->rpm_avg);
     c4e:	fc 01       	movw	r30, r24
     c50:	27 85       	ldd	r18, Z+15	; 0x0f
     c52:	2f 93       	push	r18
     c54:	26 85       	ldd	r18, Z+14	; 0x0e
     c56:	2f 93       	push	r18
     c58:	25 85       	ldd	r18, Z+13	; 0x0d
     c5a:	2f 93       	push	r18
     c5c:	84 85       	ldd	r24, Z+12	; 0x0c
     c5e:	8f 93       	push	r24
     c60:	8c e1       	ldi	r24, 0x1C	; 28
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	9f 93       	push	r25
     c66:	8f 93       	push	r24
     c68:	1f 92       	push	r1
     c6a:	86 e0       	ldi	r24, 0x06	; 6
     c6c:	8f 93       	push	r24
     c6e:	1f 93       	push	r17
     c70:	0f 93       	push	r16
     c72:	88 d1       	rcall	.+784    	; 0xf84 <snprintf>
	USART_transmit(temp);
     c74:	c8 01       	movw	r24, r16
     c76:	0b dd       	rcall	.-1514   	; 0x68e <USART_transmit>
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	f8 94       	cli
     c7c:	de bf       	out	0x3e, r29	; 62
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	cd bf       	out	0x3d, r28	; 61
}
     c82:	26 96       	adiw	r28, 0x06	; 6
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	08 95       	ret

00000c98 <transmit_9>:

void transmit_9(Shared_Data* shared_ptr){
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <transmit_9+0xa>
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <transmit_9+0xc>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <transmit_9+0xe>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     caa:	25 e0       	ldi	r18, 0x05	; 5
     cac:	e6 e0       	ldi	r30, 0x06	; 6
     cae:	f1 e0       	ldi	r31, 0x01	; 1
     cb0:	8e 01       	movw	r16, r28
     cb2:	0f 5f       	subi	r16, 0xFF	; 255
     cb4:	1f 4f       	sbci	r17, 0xFF	; 255
     cb6:	d8 01       	movw	r26, r16
     cb8:	01 90       	ld	r0, Z+
     cba:	0d 92       	st	X+, r0
     cbc:	2a 95       	dec	r18
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <transmit_9+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->curr_rpm);
     cc0:	fc 01       	movw	r30, r24
     cc2:	23 85       	ldd	r18, Z+11	; 0x0b
     cc4:	2f 93       	push	r18
     cc6:	22 85       	ldd	r18, Z+10	; 0x0a
     cc8:	2f 93       	push	r18
     cca:	21 85       	ldd	r18, Z+9	; 0x09
     ccc:	2f 93       	push	r18
     cce:	80 85       	ldd	r24, Z+8	; 0x08
     cd0:	8f 93       	push	r24
     cd2:	8c e1       	ldi	r24, 0x1C	; 28
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	9f 93       	push	r25
     cd8:	8f 93       	push	r24
     cda:	1f 92       	push	r1
     cdc:	86 e0       	ldi	r24, 0x06	; 6
     cde:	8f 93       	push	r24
     ce0:	1f 93       	push	r17
     ce2:	0f 93       	push	r16
     ce4:	4f d1       	rcall	.+670    	; 0xf84 <snprintf>
	USART_transmit(temp);
     ce6:	c8 01       	movw	r24, r16
     ce8:	d2 dc       	rcall	.-1628   	; 0x68e <USART_transmit>
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61
}
     cf4:	26 96       	adiw	r28, 0x06	; 6
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	08 95       	ret

00000d0a <transmit_empty>:

void transmit_empty(){
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	00 d0       	rcall	.+0      	; 0xd10 <transmit_empty+0x6>
     d10:	00 d0       	rcall	.+0      	; 0xd12 <transmit_empty+0x8>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <transmit_empty+0xa>
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     d18:	85 e0       	ldi	r24, 0x05	; 5
     d1a:	e6 e0       	ldi	r30, 0x06	; 6
     d1c:	f1 e0       	ldi	r31, 0x01	; 1
     d1e:	de 01       	movw	r26, r28
     d20:	11 96       	adiw	r26, 0x01	; 1
     d22:	01 90       	ld	r0, Z+
     d24:	0d 92       	st	X+, r0
     d26:	8a 95       	dec	r24
     d28:	e1 f7       	brne	.-8      	; 0xd22 <transmit_empty+0x18>
	USART_transmit(temp);
     d2a:	ce 01       	movw	r24, r28
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	af dc       	rcall	.-1698   	; 0x68e <USART_transmit>
}
     d30:	26 96       	adiw	r28, 0x06	; 6
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	08 95       	ret

00000d42 <__mulsi3>:
     d42:	db 01       	movw	r26, r22
     d44:	8f 93       	push	r24
     d46:	9f 93       	push	r25
     d48:	2a d0       	rcall	.+84     	; 0xd9e <__muluhisi3>
     d4a:	bf 91       	pop	r27
     d4c:	af 91       	pop	r26
     d4e:	a2 9f       	mul	r26, r18
     d50:	80 0d       	add	r24, r0
     d52:	91 1d       	adc	r25, r1
     d54:	a3 9f       	mul	r26, r19
     d56:	90 0d       	add	r25, r0
     d58:	b2 9f       	mul	r27, r18
     d5a:	90 0d       	add	r25, r0
     d5c:	11 24       	eor	r1, r1
     d5e:	08 95       	ret

00000d60 <__divmodhi4>:
     d60:	97 fb       	bst	r25, 7
     d62:	07 2e       	mov	r0, r23
     d64:	16 f4       	brtc	.+4      	; 0xd6a <__divmodhi4+0xa>
     d66:	00 94       	com	r0
     d68:	06 d0       	rcall	.+12     	; 0xd76 <__divmodhi4_neg1>
     d6a:	77 fd       	sbrc	r23, 7
     d6c:	08 d0       	rcall	.+16     	; 0xd7e <__divmodhi4_neg2>
     d6e:	c2 d0       	rcall	.+388    	; 0xef4 <__udivmodhi4>
     d70:	07 fc       	sbrc	r0, 7
     d72:	05 d0       	rcall	.+10     	; 0xd7e <__divmodhi4_neg2>
     d74:	3e f4       	brtc	.+14     	; 0xd84 <__divmodhi4_exit>

00000d76 <__divmodhi4_neg1>:
     d76:	90 95       	com	r25
     d78:	81 95       	neg	r24
     d7a:	9f 4f       	sbci	r25, 0xFF	; 255
     d7c:	08 95       	ret

00000d7e <__divmodhi4_neg2>:
     d7e:	70 95       	com	r23
     d80:	61 95       	neg	r22
     d82:	7f 4f       	sbci	r23, 0xFF	; 255

00000d84 <__divmodhi4_exit>:
     d84:	08 95       	ret

00000d86 <__umulhisi3>:
     d86:	a2 9f       	mul	r26, r18
     d88:	b0 01       	movw	r22, r0
     d8a:	b3 9f       	mul	r27, r19
     d8c:	c0 01       	movw	r24, r0
     d8e:	a3 9f       	mul	r26, r19
     d90:	01 d0       	rcall	.+2      	; 0xd94 <__umulhisi3+0xe>
     d92:	b2 9f       	mul	r27, r18
     d94:	70 0d       	add	r23, r0
     d96:	81 1d       	adc	r24, r1
     d98:	11 24       	eor	r1, r1
     d9a:	91 1d       	adc	r25, r1
     d9c:	08 95       	ret

00000d9e <__muluhisi3>:
     d9e:	f3 df       	rcall	.-26     	; 0xd86 <__umulhisi3>
     da0:	a5 9f       	mul	r26, r21
     da2:	90 0d       	add	r25, r0
     da4:	b4 9f       	mul	r27, r20
     da6:	90 0d       	add	r25, r0
     da8:	a4 9f       	mul	r26, r20
     daa:	80 0d       	add	r24, r0
     dac:	91 1d       	adc	r25, r1
     dae:	11 24       	eor	r1, r1
     db0:	08 95       	ret

00000db2 <__umoddi3>:
     db2:	68 94       	set
     db4:	01 c0       	rjmp	.+2      	; 0xdb8 <__udivdi3_umoddi3>

00000db6 <__udivdi3>:
     db6:	e8 94       	clt

00000db8 <__udivdi3_umoddi3>:
     db8:	8f 92       	push	r8
     dba:	9f 92       	push	r9
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	05 d0       	rcall	.+10     	; 0xdcc <__udivmod64>
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	9f 90       	pop	r9
     dc8:	8f 90       	pop	r8
     dca:	08 95       	ret

00000dcc <__udivmod64>:
     dcc:	88 24       	eor	r8, r8
     dce:	99 24       	eor	r9, r9
     dd0:	f4 01       	movw	r30, r8
     dd2:	e4 01       	movw	r28, r8
     dd4:	b0 e4       	ldi	r27, 0x40	; 64
     dd6:	1b 2e       	mov	r1, r27
     dd8:	d4 01       	movw	r26, r8
     dda:	9d 15       	cp	r25, r13
     ddc:	8e 04       	cpc	r8, r14
     dde:	9f 04       	cpc	r9, r15
     de0:	e0 07       	cpc	r30, r16
     de2:	f1 07       	cpc	r31, r17
     de4:	38 f4       	brcc	.+14     	; 0xdf4 <__udivmod64+0x28>
     de6:	fc 01       	movw	r30, r24
     de8:	4b 01       	movw	r8, r22
     dea:	ca 01       	movw	r24, r20
     dec:	b9 01       	movw	r22, r18
     dee:	ad 01       	movw	r20, r26
     df0:	9e 01       	movw	r18, r28
     df2:	16 94       	lsr	r1
     df4:	22 0f       	add	r18, r18
     df6:	33 1f       	adc	r19, r19
     df8:	44 1f       	adc	r20, r20
     dfa:	55 1f       	adc	r21, r21
     dfc:	66 1f       	adc	r22, r22
     dfe:	77 1f       	adc	r23, r23
     e00:	88 1f       	adc	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	88 1c       	adc	r8, r8
     e06:	99 1c       	adc	r9, r9
     e08:	ee 1f       	adc	r30, r30
     e0a:	ff 1f       	adc	r31, r31
     e0c:	cc 1f       	adc	r28, r28
     e0e:	dd 1f       	adc	r29, r29
     e10:	aa 1f       	adc	r26, r26
     e12:	bb 1f       	adc	r27, r27
     e14:	8a 14       	cp	r8, r10
     e16:	9b 04       	cpc	r9, r11
     e18:	ec 05       	cpc	r30, r12
     e1a:	fd 05       	cpc	r31, r13
     e1c:	ce 05       	cpc	r28, r14
     e1e:	df 05       	cpc	r29, r15
     e20:	a0 07       	cpc	r26, r16
     e22:	b1 07       	cpc	r27, r17
     e24:	48 f0       	brcs	.+18     	; 0xe38 <__udivmod64+0x6c>
     e26:	8a 18       	sub	r8, r10
     e28:	9b 08       	sbc	r9, r11
     e2a:	ec 09       	sbc	r30, r12
     e2c:	fd 09       	sbc	r31, r13
     e2e:	ce 09       	sbc	r28, r14
     e30:	df 09       	sbc	r29, r15
     e32:	a0 0b       	sbc	r26, r16
     e34:	b1 0b       	sbc	r27, r17
     e36:	21 60       	ori	r18, 0x01	; 1
     e38:	1a 94       	dec	r1
     e3a:	e1 f6       	brne	.-72     	; 0xdf4 <__udivmod64+0x28>
     e3c:	2e f4       	brtc	.+10     	; 0xe48 <__udivmod64+0x7c>
     e3e:	94 01       	movw	r18, r8
     e40:	af 01       	movw	r20, r30
     e42:	be 01       	movw	r22, r28
     e44:	cd 01       	movw	r24, r26
     e46:	00 0c       	add	r0, r0
     e48:	08 95       	ret

00000e4a <__ashldi3>:
     e4a:	0f 93       	push	r16
     e4c:	08 30       	cpi	r16, 0x08	; 8
     e4e:	90 f0       	brcs	.+36     	; 0xe74 <__ashldi3+0x2a>
     e50:	98 2f       	mov	r25, r24
     e52:	87 2f       	mov	r24, r23
     e54:	76 2f       	mov	r23, r22
     e56:	65 2f       	mov	r22, r21
     e58:	54 2f       	mov	r21, r20
     e5a:	43 2f       	mov	r20, r19
     e5c:	32 2f       	mov	r19, r18
     e5e:	22 27       	eor	r18, r18
     e60:	08 50       	subi	r16, 0x08	; 8
     e62:	f4 cf       	rjmp	.-24     	; 0xe4c <__ashldi3+0x2>
     e64:	22 0f       	add	r18, r18
     e66:	33 1f       	adc	r19, r19
     e68:	44 1f       	adc	r20, r20
     e6a:	55 1f       	adc	r21, r21
     e6c:	66 1f       	adc	r22, r22
     e6e:	77 1f       	adc	r23, r23
     e70:	88 1f       	adc	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 95       	dec	r16
     e76:	b2 f7       	brpl	.-20     	; 0xe64 <__ashldi3+0x1a>
     e78:	0f 91       	pop	r16
     e7a:	08 95       	ret

00000e7c <__ashrdi3>:
     e7c:	97 fb       	bst	r25, 7
     e7e:	10 f8       	bld	r1, 0

00000e80 <__lshrdi3>:
     e80:	16 94       	lsr	r1
     e82:	00 08       	sbc	r0, r0
     e84:	0f 93       	push	r16
     e86:	08 30       	cpi	r16, 0x08	; 8
     e88:	98 f0       	brcs	.+38     	; 0xeb0 <__lshrdi3+0x30>
     e8a:	08 50       	subi	r16, 0x08	; 8
     e8c:	23 2f       	mov	r18, r19
     e8e:	34 2f       	mov	r19, r20
     e90:	45 2f       	mov	r20, r21
     e92:	56 2f       	mov	r21, r22
     e94:	67 2f       	mov	r22, r23
     e96:	78 2f       	mov	r23, r24
     e98:	89 2f       	mov	r24, r25
     e9a:	90 2d       	mov	r25, r0
     e9c:	f4 cf       	rjmp	.-24     	; 0xe86 <__lshrdi3+0x6>
     e9e:	05 94       	asr	r0
     ea0:	97 95       	ror	r25
     ea2:	87 95       	ror	r24
     ea4:	77 95       	ror	r23
     ea6:	67 95       	ror	r22
     ea8:	57 95       	ror	r21
     eaa:	47 95       	ror	r20
     eac:	37 95       	ror	r19
     eae:	27 95       	ror	r18
     eb0:	0a 95       	dec	r16
     eb2:	aa f7       	brpl	.-22     	; 0xe9e <__lshrdi3+0x1e>
     eb4:	0f 91       	pop	r16
     eb6:	08 95       	ret

00000eb8 <__adddi3>:
     eb8:	2a 0d       	add	r18, r10
     eba:	3b 1d       	adc	r19, r11
     ebc:	4c 1d       	adc	r20, r12
     ebe:	5d 1d       	adc	r21, r13
     ec0:	6e 1d       	adc	r22, r14
     ec2:	7f 1d       	adc	r23, r15
     ec4:	80 1f       	adc	r24, r16
     ec6:	91 1f       	adc	r25, r17
     ec8:	08 95       	ret

00000eca <__subdi3>:
     eca:	2a 19       	sub	r18, r10
     ecc:	3b 09       	sbc	r19, r11
     ece:	4c 09       	sbc	r20, r12
     ed0:	5d 09       	sbc	r21, r13
     ed2:	6e 09       	sbc	r22, r14
     ed4:	7f 09       	sbc	r23, r15
     ed6:	80 0b       	sbc	r24, r16
     ed8:	91 0b       	sbc	r25, r17
     eda:	08 95       	ret

00000edc <__cmpdi2_s8>:
     edc:	00 24       	eor	r0, r0
     ede:	a7 fd       	sbrc	r26, 7
     ee0:	00 94       	com	r0
     ee2:	2a 17       	cp	r18, r26
     ee4:	30 05       	cpc	r19, r0
     ee6:	40 05       	cpc	r20, r0
     ee8:	50 05       	cpc	r21, r0
     eea:	60 05       	cpc	r22, r0
     eec:	70 05       	cpc	r23, r0
     eee:	80 05       	cpc	r24, r0
     ef0:	90 05       	cpc	r25, r0
     ef2:	08 95       	ret

00000ef4 <__udivmodhi4>:
     ef4:	aa 1b       	sub	r26, r26
     ef6:	bb 1b       	sub	r27, r27
     ef8:	51 e1       	ldi	r21, 0x11	; 17
     efa:	07 c0       	rjmp	.+14     	; 0xf0a <__udivmodhi4_ep>

00000efc <__udivmodhi4_loop>:
     efc:	aa 1f       	adc	r26, r26
     efe:	bb 1f       	adc	r27, r27
     f00:	a6 17       	cp	r26, r22
     f02:	b7 07       	cpc	r27, r23
     f04:	10 f0       	brcs	.+4      	; 0xf0a <__udivmodhi4_ep>
     f06:	a6 1b       	sub	r26, r22
     f08:	b7 0b       	sbc	r27, r23

00000f0a <__udivmodhi4_ep>:
     f0a:	88 1f       	adc	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	5a 95       	dec	r21
     f10:	a9 f7       	brne	.-22     	; 0xefc <__udivmodhi4_loop>
     f12:	80 95       	com	r24
     f14:	90 95       	com	r25
     f16:	bc 01       	movw	r22, r24
     f18:	cd 01       	movw	r24, r26
     f1a:	08 95       	ret

00000f1c <atoi>:
     f1c:	fc 01       	movw	r30, r24
     f1e:	88 27       	eor	r24, r24
     f20:	99 27       	eor	r25, r25
     f22:	e8 94       	clt
     f24:	21 91       	ld	r18, Z+
     f26:	20 32       	cpi	r18, 0x20	; 32
     f28:	e9 f3       	breq	.-6      	; 0xf24 <atoi+0x8>
     f2a:	29 30       	cpi	r18, 0x09	; 9
     f2c:	10 f0       	brcs	.+4      	; 0xf32 <atoi+0x16>
     f2e:	2e 30       	cpi	r18, 0x0E	; 14
     f30:	c8 f3       	brcs	.-14     	; 0xf24 <atoi+0x8>
     f32:	2b 32       	cpi	r18, 0x2B	; 43
     f34:	39 f0       	breq	.+14     	; 0xf44 <atoi+0x28>
     f36:	2d 32       	cpi	r18, 0x2D	; 45
     f38:	31 f4       	brne	.+12     	; 0xf46 <atoi+0x2a>
     f3a:	68 94       	set
     f3c:	03 c0       	rjmp	.+6      	; 0xf44 <atoi+0x28>
     f3e:	1a d0       	rcall	.+52     	; 0xf74 <__mulhi_const_10>
     f40:	82 0f       	add	r24, r18
     f42:	91 1d       	adc	r25, r1
     f44:	21 91       	ld	r18, Z+
     f46:	20 53       	subi	r18, 0x30	; 48
     f48:	2a 30       	cpi	r18, 0x0A	; 10
     f4a:	c8 f3       	brcs	.-14     	; 0xf3e <atoi+0x22>
     f4c:	1e f4       	brtc	.+6      	; 0xf54 <atoi+0x38>
     f4e:	90 95       	com	r25
     f50:	81 95       	neg	r24
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	08 95       	ret

00000f56 <strncpy>:
     f56:	fb 01       	movw	r30, r22
     f58:	dc 01       	movw	r26, r24
     f5a:	41 50       	subi	r20, 0x01	; 1
     f5c:	50 40       	sbci	r21, 0x00	; 0
     f5e:	48 f0       	brcs	.+18     	; 0xf72 <strncpy+0x1c>
     f60:	01 90       	ld	r0, Z+
     f62:	0d 92       	st	X+, r0
     f64:	00 20       	and	r0, r0
     f66:	c9 f7       	brne	.-14     	; 0xf5a <strncpy+0x4>
     f68:	01 c0       	rjmp	.+2      	; 0xf6c <strncpy+0x16>
     f6a:	1d 92       	st	X+, r1
     f6c:	41 50       	subi	r20, 0x01	; 1
     f6e:	50 40       	sbci	r21, 0x00	; 0
     f70:	e0 f7       	brcc	.-8      	; 0xf6a <strncpy+0x14>
     f72:	08 95       	ret

00000f74 <__mulhi_const_10>:
     f74:	7a e0       	ldi	r23, 0x0A	; 10
     f76:	97 9f       	mul	r25, r23
     f78:	90 2d       	mov	r25, r0
     f7a:	87 9f       	mul	r24, r23
     f7c:	80 2d       	mov	r24, r0
     f7e:	91 0d       	add	r25, r1
     f80:	11 24       	eor	r1, r1
     f82:	08 95       	ret

00000f84 <snprintf>:
     f84:	ae e0       	ldi	r26, 0x0E	; 14
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e7 ec       	ldi	r30, 0xC7	; 199
     f8a:	f7 e0       	ldi	r31, 0x07	; 7
     f8c:	9f c2       	rjmp	.+1342   	; 0x14cc <__prologue_saves__+0x1c>
     f8e:	0d 89       	ldd	r16, Y+21	; 0x15
     f90:	1e 89       	ldd	r17, Y+22	; 0x16
     f92:	8f 89       	ldd	r24, Y+23	; 0x17
     f94:	98 8d       	ldd	r25, Y+24	; 0x18
     f96:	26 e0       	ldi	r18, 0x06	; 6
     f98:	2c 83       	std	Y+4, r18	; 0x04
     f9a:	1a 83       	std	Y+2, r17	; 0x02
     f9c:	09 83       	std	Y+1, r16	; 0x01
     f9e:	97 ff       	sbrs	r25, 7
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <snprintf+0x22>
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e8       	ldi	r25, 0x80	; 128
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	9e 83       	std	Y+6, r25	; 0x06
     faa:	8d 83       	std	Y+5, r24	; 0x05
     fac:	ae 01       	movw	r20, r28
     fae:	45 5e       	subi	r20, 0xE5	; 229
     fb0:	5f 4f       	sbci	r21, 0xFF	; 255
     fb2:	69 8d       	ldd	r22, Y+25	; 0x19
     fb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fb6:	ce 01       	movw	r24, r28
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	11 d0       	rcall	.+34     	; 0xfde <vfprintf>
     fbc:	4d 81       	ldd	r20, Y+5	; 0x05
     fbe:	5e 81       	ldd	r21, Y+6	; 0x06
     fc0:	57 fd       	sbrc	r21, 7
     fc2:	0a c0       	rjmp	.+20     	; 0xfd8 <snprintf+0x54>
     fc4:	2f 81       	ldd	r18, Y+7	; 0x07
     fc6:	38 85       	ldd	r19, Y+8	; 0x08
     fc8:	42 17       	cp	r20, r18
     fca:	53 07       	cpc	r21, r19
     fcc:	0c f4       	brge	.+2      	; 0xfd0 <snprintf+0x4c>
     fce:	9a 01       	movw	r18, r20
     fd0:	f8 01       	movw	r30, r16
     fd2:	e2 0f       	add	r30, r18
     fd4:	f3 1f       	adc	r31, r19
     fd6:	10 82       	st	Z, r1
     fd8:	2e 96       	adiw	r28, 0x0e	; 14
     fda:	e4 e0       	ldi	r30, 0x04	; 4
     fdc:	93 c2       	rjmp	.+1318   	; 0x1504 <__epilogue_restores__+0x1c>

00000fde <vfprintf>:
     fde:	ac e0       	ldi	r26, 0x0C	; 12
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e4 ef       	ldi	r30, 0xF4	; 244
     fe4:	f7 e0       	ldi	r31, 0x07	; 7
     fe6:	64 c2       	rjmp	.+1224   	; 0x14b0 <__prologue_saves__>
     fe8:	7c 01       	movw	r14, r24
     fea:	6b 01       	movw	r12, r22
     fec:	8a 01       	movw	r16, r20
     fee:	fc 01       	movw	r30, r24
     ff0:	17 82       	std	Z+7, r1	; 0x07
     ff2:	16 82       	std	Z+6, r1	; 0x06
     ff4:	83 81       	ldd	r24, Z+3	; 0x03
     ff6:	81 ff       	sbrs	r24, 1
     ff8:	b0 c1       	rjmp	.+864    	; 0x135a <vfprintf+0x37c>
     ffa:	ce 01       	movw	r24, r28
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	4c 01       	movw	r8, r24
    1000:	f7 01       	movw	r30, r14
    1002:	93 81       	ldd	r25, Z+3	; 0x03
    1004:	f6 01       	movw	r30, r12
    1006:	93 fd       	sbrc	r25, 3
    1008:	85 91       	lpm	r24, Z+
    100a:	93 ff       	sbrs	r25, 3
    100c:	81 91       	ld	r24, Z+
    100e:	6f 01       	movw	r12, r30
    1010:	88 23       	and	r24, r24
    1012:	09 f4       	brne	.+2      	; 0x1016 <vfprintf+0x38>
    1014:	9e c1       	rjmp	.+828    	; 0x1352 <vfprintf+0x374>
    1016:	85 32       	cpi	r24, 0x25	; 37
    1018:	39 f4       	brne	.+14     	; 0x1028 <vfprintf+0x4a>
    101a:	93 fd       	sbrc	r25, 3
    101c:	85 91       	lpm	r24, Z+
    101e:	93 ff       	sbrs	r25, 3
    1020:	81 91       	ld	r24, Z+
    1022:	6f 01       	movw	r12, r30
    1024:	85 32       	cpi	r24, 0x25	; 37
    1026:	21 f4       	brne	.+8      	; 0x1030 <vfprintf+0x52>
    1028:	b7 01       	movw	r22, r14
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	b1 d1       	rcall	.+866    	; 0x1390 <fputc>
    102e:	e8 cf       	rjmp	.-48     	; 0x1000 <vfprintf+0x22>
    1030:	51 2c       	mov	r5, r1
    1032:	31 2c       	mov	r3, r1
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	20 32       	cpi	r18, 0x20	; 32
    1038:	a0 f4       	brcc	.+40     	; 0x1062 <vfprintf+0x84>
    103a:	8b 32       	cpi	r24, 0x2B	; 43
    103c:	69 f0       	breq	.+26     	; 0x1058 <vfprintf+0x7a>
    103e:	30 f4       	brcc	.+12     	; 0x104c <vfprintf+0x6e>
    1040:	80 32       	cpi	r24, 0x20	; 32
    1042:	59 f0       	breq	.+22     	; 0x105a <vfprintf+0x7c>
    1044:	83 32       	cpi	r24, 0x23	; 35
    1046:	69 f4       	brne	.+26     	; 0x1062 <vfprintf+0x84>
    1048:	20 61       	ori	r18, 0x10	; 16
    104a:	2c c0       	rjmp	.+88     	; 0x10a4 <vfprintf+0xc6>
    104c:	8d 32       	cpi	r24, 0x2D	; 45
    104e:	39 f0       	breq	.+14     	; 0x105e <vfprintf+0x80>
    1050:	80 33       	cpi	r24, 0x30	; 48
    1052:	39 f4       	brne	.+14     	; 0x1062 <vfprintf+0x84>
    1054:	21 60       	ori	r18, 0x01	; 1
    1056:	26 c0       	rjmp	.+76     	; 0x10a4 <vfprintf+0xc6>
    1058:	22 60       	ori	r18, 0x02	; 2
    105a:	24 60       	ori	r18, 0x04	; 4
    105c:	23 c0       	rjmp	.+70     	; 0x10a4 <vfprintf+0xc6>
    105e:	28 60       	ori	r18, 0x08	; 8
    1060:	21 c0       	rjmp	.+66     	; 0x10a4 <vfprintf+0xc6>
    1062:	27 fd       	sbrc	r18, 7
    1064:	27 c0       	rjmp	.+78     	; 0x10b4 <vfprintf+0xd6>
    1066:	30 ed       	ldi	r19, 0xD0	; 208
    1068:	38 0f       	add	r19, r24
    106a:	3a 30       	cpi	r19, 0x0A	; 10
    106c:	78 f4       	brcc	.+30     	; 0x108c <vfprintf+0xae>
    106e:	26 ff       	sbrs	r18, 6
    1070:	06 c0       	rjmp	.+12     	; 0x107e <vfprintf+0xa0>
    1072:	fa e0       	ldi	r31, 0x0A	; 10
    1074:	5f 9e       	mul	r5, r31
    1076:	30 0d       	add	r19, r0
    1078:	11 24       	eor	r1, r1
    107a:	53 2e       	mov	r5, r19
    107c:	13 c0       	rjmp	.+38     	; 0x10a4 <vfprintf+0xc6>
    107e:	8a e0       	ldi	r24, 0x0A	; 10
    1080:	38 9e       	mul	r3, r24
    1082:	30 0d       	add	r19, r0
    1084:	11 24       	eor	r1, r1
    1086:	33 2e       	mov	r3, r19
    1088:	20 62       	ori	r18, 0x20	; 32
    108a:	0c c0       	rjmp	.+24     	; 0x10a4 <vfprintf+0xc6>
    108c:	8e 32       	cpi	r24, 0x2E	; 46
    108e:	21 f4       	brne	.+8      	; 0x1098 <vfprintf+0xba>
    1090:	26 fd       	sbrc	r18, 6
    1092:	5f c1       	rjmp	.+702    	; 0x1352 <vfprintf+0x374>
    1094:	20 64       	ori	r18, 0x40	; 64
    1096:	06 c0       	rjmp	.+12     	; 0x10a4 <vfprintf+0xc6>
    1098:	8c 36       	cpi	r24, 0x6C	; 108
    109a:	11 f4       	brne	.+4      	; 0x10a0 <vfprintf+0xc2>
    109c:	20 68       	ori	r18, 0x80	; 128
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <vfprintf+0xc6>
    10a0:	88 36       	cpi	r24, 0x68	; 104
    10a2:	41 f4       	brne	.+16     	; 0x10b4 <vfprintf+0xd6>
    10a4:	f6 01       	movw	r30, r12
    10a6:	93 fd       	sbrc	r25, 3
    10a8:	85 91       	lpm	r24, Z+
    10aa:	93 ff       	sbrs	r25, 3
    10ac:	81 91       	ld	r24, Z+
    10ae:	6f 01       	movw	r12, r30
    10b0:	81 11       	cpse	r24, r1
    10b2:	c1 cf       	rjmp	.-126    	; 0x1036 <vfprintf+0x58>
    10b4:	98 2f       	mov	r25, r24
    10b6:	9f 7d       	andi	r25, 0xDF	; 223
    10b8:	95 54       	subi	r25, 0x45	; 69
    10ba:	93 30       	cpi	r25, 0x03	; 3
    10bc:	28 f4       	brcc	.+10     	; 0x10c8 <vfprintf+0xea>
    10be:	0c 5f       	subi	r16, 0xFC	; 252
    10c0:	1f 4f       	sbci	r17, 0xFF	; 255
    10c2:	ff e3       	ldi	r31, 0x3F	; 63
    10c4:	f9 83       	std	Y+1, r31	; 0x01
    10c6:	0d c0       	rjmp	.+26     	; 0x10e2 <vfprintf+0x104>
    10c8:	83 36       	cpi	r24, 0x63	; 99
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <vfprintf+0xfa>
    10cc:	83 37       	cpi	r24, 0x73	; 115
    10ce:	71 f0       	breq	.+28     	; 0x10ec <vfprintf+0x10e>
    10d0:	83 35       	cpi	r24, 0x53	; 83
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <vfprintf+0xf8>
    10d4:	57 c0       	rjmp	.+174    	; 0x1184 <vfprintf+0x1a6>
    10d6:	21 c0       	rjmp	.+66     	; 0x111a <vfprintf+0x13c>
    10d8:	f8 01       	movw	r30, r16
    10da:	80 81       	ld	r24, Z
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	0e 5f       	subi	r16, 0xFE	; 254
    10e0:	1f 4f       	sbci	r17, 0xFF	; 255
    10e2:	44 24       	eor	r4, r4
    10e4:	43 94       	inc	r4
    10e6:	51 2c       	mov	r5, r1
    10e8:	54 01       	movw	r10, r8
    10ea:	14 c0       	rjmp	.+40     	; 0x1114 <vfprintf+0x136>
    10ec:	38 01       	movw	r6, r16
    10ee:	f2 e0       	ldi	r31, 0x02	; 2
    10f0:	6f 0e       	add	r6, r31
    10f2:	71 1c       	adc	r7, r1
    10f4:	f8 01       	movw	r30, r16
    10f6:	a0 80       	ld	r10, Z
    10f8:	b1 80       	ldd	r11, Z+1	; 0x01
    10fa:	26 ff       	sbrs	r18, 6
    10fc:	03 c0       	rjmp	.+6      	; 0x1104 <vfprintf+0x126>
    10fe:	65 2d       	mov	r22, r5
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <vfprintf+0x12a>
    1104:	6f ef       	ldi	r22, 0xFF	; 255
    1106:	7f ef       	ldi	r23, 0xFF	; 255
    1108:	c5 01       	movw	r24, r10
    110a:	2c 87       	std	Y+12, r18	; 0x0c
    110c:	36 d1       	rcall	.+620    	; 0x137a <strnlen>
    110e:	2c 01       	movw	r4, r24
    1110:	83 01       	movw	r16, r6
    1112:	2c 85       	ldd	r18, Y+12	; 0x0c
    1114:	2f 77       	andi	r18, 0x7F	; 127
    1116:	22 2e       	mov	r2, r18
    1118:	16 c0       	rjmp	.+44     	; 0x1146 <vfprintf+0x168>
    111a:	38 01       	movw	r6, r16
    111c:	f2 e0       	ldi	r31, 0x02	; 2
    111e:	6f 0e       	add	r6, r31
    1120:	71 1c       	adc	r7, r1
    1122:	f8 01       	movw	r30, r16
    1124:	a0 80       	ld	r10, Z
    1126:	b1 80       	ldd	r11, Z+1	; 0x01
    1128:	26 ff       	sbrs	r18, 6
    112a:	03 c0       	rjmp	.+6      	; 0x1132 <vfprintf+0x154>
    112c:	65 2d       	mov	r22, r5
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <vfprintf+0x158>
    1132:	6f ef       	ldi	r22, 0xFF	; 255
    1134:	7f ef       	ldi	r23, 0xFF	; 255
    1136:	c5 01       	movw	r24, r10
    1138:	2c 87       	std	Y+12, r18	; 0x0c
    113a:	14 d1       	rcall	.+552    	; 0x1364 <strnlen_P>
    113c:	2c 01       	movw	r4, r24
    113e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1140:	20 68       	ori	r18, 0x80	; 128
    1142:	22 2e       	mov	r2, r18
    1144:	83 01       	movw	r16, r6
    1146:	23 fc       	sbrc	r2, 3
    1148:	19 c0       	rjmp	.+50     	; 0x117c <vfprintf+0x19e>
    114a:	83 2d       	mov	r24, r3
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	48 16       	cp	r4, r24
    1150:	59 06       	cpc	r5, r25
    1152:	a0 f4       	brcc	.+40     	; 0x117c <vfprintf+0x19e>
    1154:	b7 01       	movw	r22, r14
    1156:	80 e2       	ldi	r24, 0x20	; 32
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	1a d1       	rcall	.+564    	; 0x1390 <fputc>
    115c:	3a 94       	dec	r3
    115e:	f5 cf       	rjmp	.-22     	; 0x114a <vfprintf+0x16c>
    1160:	f5 01       	movw	r30, r10
    1162:	27 fc       	sbrc	r2, 7
    1164:	85 91       	lpm	r24, Z+
    1166:	27 fe       	sbrs	r2, 7
    1168:	81 91       	ld	r24, Z+
    116a:	5f 01       	movw	r10, r30
    116c:	b7 01       	movw	r22, r14
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0f d1       	rcall	.+542    	; 0x1390 <fputc>
    1172:	31 10       	cpse	r3, r1
    1174:	3a 94       	dec	r3
    1176:	f1 e0       	ldi	r31, 0x01	; 1
    1178:	4f 1a       	sub	r4, r31
    117a:	51 08       	sbc	r5, r1
    117c:	41 14       	cp	r4, r1
    117e:	51 04       	cpc	r5, r1
    1180:	79 f7       	brne	.-34     	; 0x1160 <vfprintf+0x182>
    1182:	de c0       	rjmp	.+444    	; 0x1340 <vfprintf+0x362>
    1184:	84 36       	cpi	r24, 0x64	; 100
    1186:	11 f0       	breq	.+4      	; 0x118c <vfprintf+0x1ae>
    1188:	89 36       	cpi	r24, 0x69	; 105
    118a:	31 f5       	brne	.+76     	; 0x11d8 <vfprintf+0x1fa>
    118c:	f8 01       	movw	r30, r16
    118e:	27 ff       	sbrs	r18, 7
    1190:	07 c0       	rjmp	.+14     	; 0x11a0 <vfprintf+0x1c2>
    1192:	60 81       	ld	r22, Z
    1194:	71 81       	ldd	r23, Z+1	; 0x01
    1196:	82 81       	ldd	r24, Z+2	; 0x02
    1198:	93 81       	ldd	r25, Z+3	; 0x03
    119a:	0c 5f       	subi	r16, 0xFC	; 252
    119c:	1f 4f       	sbci	r17, 0xFF	; 255
    119e:	08 c0       	rjmp	.+16     	; 0x11b0 <vfprintf+0x1d2>
    11a0:	60 81       	ld	r22, Z
    11a2:	71 81       	ldd	r23, Z+1	; 0x01
    11a4:	88 27       	eor	r24, r24
    11a6:	77 fd       	sbrc	r23, 7
    11a8:	80 95       	com	r24
    11aa:	98 2f       	mov	r25, r24
    11ac:	0e 5f       	subi	r16, 0xFE	; 254
    11ae:	1f 4f       	sbci	r17, 0xFF	; 255
    11b0:	2f 76       	andi	r18, 0x6F	; 111
    11b2:	b2 2e       	mov	r11, r18
    11b4:	97 ff       	sbrs	r25, 7
    11b6:	09 c0       	rjmp	.+18     	; 0x11ca <vfprintf+0x1ec>
    11b8:	90 95       	com	r25
    11ba:	80 95       	com	r24
    11bc:	70 95       	com	r23
    11be:	61 95       	neg	r22
    11c0:	7f 4f       	sbci	r23, 0xFF	; 255
    11c2:	8f 4f       	sbci	r24, 0xFF	; 255
    11c4:	9f 4f       	sbci	r25, 0xFF	; 255
    11c6:	20 68       	ori	r18, 0x80	; 128
    11c8:	b2 2e       	mov	r11, r18
    11ca:	2a e0       	ldi	r18, 0x0A	; 10
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	a4 01       	movw	r20, r8
    11d0:	11 d1       	rcall	.+546    	; 0x13f4 <__ultoa_invert>
    11d2:	a8 2e       	mov	r10, r24
    11d4:	a8 18       	sub	r10, r8
    11d6:	43 c0       	rjmp	.+134    	; 0x125e <vfprintf+0x280>
    11d8:	85 37       	cpi	r24, 0x75	; 117
    11da:	29 f4       	brne	.+10     	; 0x11e6 <vfprintf+0x208>
    11dc:	2f 7e       	andi	r18, 0xEF	; 239
    11de:	b2 2e       	mov	r11, r18
    11e0:	2a e0       	ldi	r18, 0x0A	; 10
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	25 c0       	rjmp	.+74     	; 0x1230 <vfprintf+0x252>
    11e6:	f2 2f       	mov	r31, r18
    11e8:	f9 7f       	andi	r31, 0xF9	; 249
    11ea:	bf 2e       	mov	r11, r31
    11ec:	8f 36       	cpi	r24, 0x6F	; 111
    11ee:	c1 f0       	breq	.+48     	; 0x1220 <vfprintf+0x242>
    11f0:	18 f4       	brcc	.+6      	; 0x11f8 <vfprintf+0x21a>
    11f2:	88 35       	cpi	r24, 0x58	; 88
    11f4:	79 f0       	breq	.+30     	; 0x1214 <vfprintf+0x236>
    11f6:	ad c0       	rjmp	.+346    	; 0x1352 <vfprintf+0x374>
    11f8:	80 37       	cpi	r24, 0x70	; 112
    11fa:	19 f0       	breq	.+6      	; 0x1202 <vfprintf+0x224>
    11fc:	88 37       	cpi	r24, 0x78	; 120
    11fe:	21 f0       	breq	.+8      	; 0x1208 <vfprintf+0x22a>
    1200:	a8 c0       	rjmp	.+336    	; 0x1352 <vfprintf+0x374>
    1202:	2f 2f       	mov	r18, r31
    1204:	20 61       	ori	r18, 0x10	; 16
    1206:	b2 2e       	mov	r11, r18
    1208:	b4 fe       	sbrs	r11, 4
    120a:	0d c0       	rjmp	.+26     	; 0x1226 <vfprintf+0x248>
    120c:	8b 2d       	mov	r24, r11
    120e:	84 60       	ori	r24, 0x04	; 4
    1210:	b8 2e       	mov	r11, r24
    1212:	09 c0       	rjmp	.+18     	; 0x1226 <vfprintf+0x248>
    1214:	24 ff       	sbrs	r18, 4
    1216:	0a c0       	rjmp	.+20     	; 0x122c <vfprintf+0x24e>
    1218:	9f 2f       	mov	r25, r31
    121a:	96 60       	ori	r25, 0x06	; 6
    121c:	b9 2e       	mov	r11, r25
    121e:	06 c0       	rjmp	.+12     	; 0x122c <vfprintf+0x24e>
    1220:	28 e0       	ldi	r18, 0x08	; 8
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	05 c0       	rjmp	.+10     	; 0x1230 <vfprintf+0x252>
    1226:	20 e1       	ldi	r18, 0x10	; 16
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <vfprintf+0x252>
    122c:	20 e1       	ldi	r18, 0x10	; 16
    122e:	32 e0       	ldi	r19, 0x02	; 2
    1230:	f8 01       	movw	r30, r16
    1232:	b7 fe       	sbrs	r11, 7
    1234:	07 c0       	rjmp	.+14     	; 0x1244 <vfprintf+0x266>
    1236:	60 81       	ld	r22, Z
    1238:	71 81       	ldd	r23, Z+1	; 0x01
    123a:	82 81       	ldd	r24, Z+2	; 0x02
    123c:	93 81       	ldd	r25, Z+3	; 0x03
    123e:	0c 5f       	subi	r16, 0xFC	; 252
    1240:	1f 4f       	sbci	r17, 0xFF	; 255
    1242:	06 c0       	rjmp	.+12     	; 0x1250 <vfprintf+0x272>
    1244:	60 81       	ld	r22, Z
    1246:	71 81       	ldd	r23, Z+1	; 0x01
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 5f       	subi	r16, 0xFE	; 254
    124e:	1f 4f       	sbci	r17, 0xFF	; 255
    1250:	a4 01       	movw	r20, r8
    1252:	d0 d0       	rcall	.+416    	; 0x13f4 <__ultoa_invert>
    1254:	a8 2e       	mov	r10, r24
    1256:	a8 18       	sub	r10, r8
    1258:	fb 2d       	mov	r31, r11
    125a:	ff 77       	andi	r31, 0x7F	; 127
    125c:	bf 2e       	mov	r11, r31
    125e:	b6 fe       	sbrs	r11, 6
    1260:	0b c0       	rjmp	.+22     	; 0x1278 <vfprintf+0x29a>
    1262:	2b 2d       	mov	r18, r11
    1264:	2e 7f       	andi	r18, 0xFE	; 254
    1266:	a5 14       	cp	r10, r5
    1268:	50 f4       	brcc	.+20     	; 0x127e <vfprintf+0x2a0>
    126a:	b4 fe       	sbrs	r11, 4
    126c:	0a c0       	rjmp	.+20     	; 0x1282 <vfprintf+0x2a4>
    126e:	b2 fc       	sbrc	r11, 2
    1270:	08 c0       	rjmp	.+16     	; 0x1282 <vfprintf+0x2a4>
    1272:	2b 2d       	mov	r18, r11
    1274:	2e 7e       	andi	r18, 0xEE	; 238
    1276:	05 c0       	rjmp	.+10     	; 0x1282 <vfprintf+0x2a4>
    1278:	7a 2c       	mov	r7, r10
    127a:	2b 2d       	mov	r18, r11
    127c:	03 c0       	rjmp	.+6      	; 0x1284 <vfprintf+0x2a6>
    127e:	7a 2c       	mov	r7, r10
    1280:	01 c0       	rjmp	.+2      	; 0x1284 <vfprintf+0x2a6>
    1282:	75 2c       	mov	r7, r5
    1284:	24 ff       	sbrs	r18, 4
    1286:	0d c0       	rjmp	.+26     	; 0x12a2 <vfprintf+0x2c4>
    1288:	fe 01       	movw	r30, r28
    128a:	ea 0d       	add	r30, r10
    128c:	f1 1d       	adc	r31, r1
    128e:	80 81       	ld	r24, Z
    1290:	80 33       	cpi	r24, 0x30	; 48
    1292:	11 f4       	brne	.+4      	; 0x1298 <vfprintf+0x2ba>
    1294:	29 7e       	andi	r18, 0xE9	; 233
    1296:	09 c0       	rjmp	.+18     	; 0x12aa <vfprintf+0x2cc>
    1298:	22 ff       	sbrs	r18, 2
    129a:	06 c0       	rjmp	.+12     	; 0x12a8 <vfprintf+0x2ca>
    129c:	73 94       	inc	r7
    129e:	73 94       	inc	r7
    12a0:	04 c0       	rjmp	.+8      	; 0x12aa <vfprintf+0x2cc>
    12a2:	82 2f       	mov	r24, r18
    12a4:	86 78       	andi	r24, 0x86	; 134
    12a6:	09 f0       	breq	.+2      	; 0x12aa <vfprintf+0x2cc>
    12a8:	73 94       	inc	r7
    12aa:	23 fd       	sbrc	r18, 3
    12ac:	12 c0       	rjmp	.+36     	; 0x12d2 <vfprintf+0x2f4>
    12ae:	20 ff       	sbrs	r18, 0
    12b0:	06 c0       	rjmp	.+12     	; 0x12be <vfprintf+0x2e0>
    12b2:	5a 2c       	mov	r5, r10
    12b4:	73 14       	cp	r7, r3
    12b6:	18 f4       	brcc	.+6      	; 0x12be <vfprintf+0x2e0>
    12b8:	53 0c       	add	r5, r3
    12ba:	57 18       	sub	r5, r7
    12bc:	73 2c       	mov	r7, r3
    12be:	73 14       	cp	r7, r3
    12c0:	60 f4       	brcc	.+24     	; 0x12da <vfprintf+0x2fc>
    12c2:	b7 01       	movw	r22, r14
    12c4:	80 e2       	ldi	r24, 0x20	; 32
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	2c 87       	std	Y+12, r18	; 0x0c
    12ca:	62 d0       	rcall	.+196    	; 0x1390 <fputc>
    12cc:	73 94       	inc	r7
    12ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    12d0:	f6 cf       	rjmp	.-20     	; 0x12be <vfprintf+0x2e0>
    12d2:	73 14       	cp	r7, r3
    12d4:	10 f4       	brcc	.+4      	; 0x12da <vfprintf+0x2fc>
    12d6:	37 18       	sub	r3, r7
    12d8:	01 c0       	rjmp	.+2      	; 0x12dc <vfprintf+0x2fe>
    12da:	31 2c       	mov	r3, r1
    12dc:	24 ff       	sbrs	r18, 4
    12de:	11 c0       	rjmp	.+34     	; 0x1302 <vfprintf+0x324>
    12e0:	b7 01       	movw	r22, r14
    12e2:	80 e3       	ldi	r24, 0x30	; 48
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	2c 87       	std	Y+12, r18	; 0x0c
    12e8:	53 d0       	rcall	.+166    	; 0x1390 <fputc>
    12ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    12ec:	22 ff       	sbrs	r18, 2
    12ee:	16 c0       	rjmp	.+44     	; 0x131c <vfprintf+0x33e>
    12f0:	21 ff       	sbrs	r18, 1
    12f2:	03 c0       	rjmp	.+6      	; 0x12fa <vfprintf+0x31c>
    12f4:	88 e5       	ldi	r24, 0x58	; 88
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <vfprintf+0x320>
    12fa:	88 e7       	ldi	r24, 0x78	; 120
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	b7 01       	movw	r22, r14
    1300:	0c c0       	rjmp	.+24     	; 0x131a <vfprintf+0x33c>
    1302:	82 2f       	mov	r24, r18
    1304:	86 78       	andi	r24, 0x86	; 134
    1306:	51 f0       	breq	.+20     	; 0x131c <vfprintf+0x33e>
    1308:	21 fd       	sbrc	r18, 1
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <vfprintf+0x332>
    130c:	80 e2       	ldi	r24, 0x20	; 32
    130e:	01 c0       	rjmp	.+2      	; 0x1312 <vfprintf+0x334>
    1310:	8b e2       	ldi	r24, 0x2B	; 43
    1312:	27 fd       	sbrc	r18, 7
    1314:	8d e2       	ldi	r24, 0x2D	; 45
    1316:	b7 01       	movw	r22, r14
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	3a d0       	rcall	.+116    	; 0x1390 <fputc>
    131c:	a5 14       	cp	r10, r5
    131e:	30 f4       	brcc	.+12     	; 0x132c <vfprintf+0x34e>
    1320:	b7 01       	movw	r22, r14
    1322:	80 e3       	ldi	r24, 0x30	; 48
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	34 d0       	rcall	.+104    	; 0x1390 <fputc>
    1328:	5a 94       	dec	r5
    132a:	f8 cf       	rjmp	.-16     	; 0x131c <vfprintf+0x33e>
    132c:	aa 94       	dec	r10
    132e:	f4 01       	movw	r30, r8
    1330:	ea 0d       	add	r30, r10
    1332:	f1 1d       	adc	r31, r1
    1334:	80 81       	ld	r24, Z
    1336:	b7 01       	movw	r22, r14
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	2a d0       	rcall	.+84     	; 0x1390 <fputc>
    133c:	a1 10       	cpse	r10, r1
    133e:	f6 cf       	rjmp	.-20     	; 0x132c <vfprintf+0x34e>
    1340:	33 20       	and	r3, r3
    1342:	09 f4       	brne	.+2      	; 0x1346 <vfprintf+0x368>
    1344:	5d ce       	rjmp	.-838    	; 0x1000 <vfprintf+0x22>
    1346:	b7 01       	movw	r22, r14
    1348:	80 e2       	ldi	r24, 0x20	; 32
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	21 d0       	rcall	.+66     	; 0x1390 <fputc>
    134e:	3a 94       	dec	r3
    1350:	f7 cf       	rjmp	.-18     	; 0x1340 <vfprintf+0x362>
    1352:	f7 01       	movw	r30, r14
    1354:	86 81       	ldd	r24, Z+6	; 0x06
    1356:	97 81       	ldd	r25, Z+7	; 0x07
    1358:	02 c0       	rjmp	.+4      	; 0x135e <vfprintf+0x380>
    135a:	8f ef       	ldi	r24, 0xFF	; 255
    135c:	9f ef       	ldi	r25, 0xFF	; 255
    135e:	2c 96       	adiw	r28, 0x0c	; 12
    1360:	e2 e1       	ldi	r30, 0x12	; 18
    1362:	c2 c0       	rjmp	.+388    	; 0x14e8 <__epilogue_restores__>

00001364 <strnlen_P>:
    1364:	fc 01       	movw	r30, r24
    1366:	05 90       	lpm	r0, Z+
    1368:	61 50       	subi	r22, 0x01	; 1
    136a:	70 40       	sbci	r23, 0x00	; 0
    136c:	01 10       	cpse	r0, r1
    136e:	d8 f7       	brcc	.-10     	; 0x1366 <strnlen_P+0x2>
    1370:	80 95       	com	r24
    1372:	90 95       	com	r25
    1374:	8e 0f       	add	r24, r30
    1376:	9f 1f       	adc	r25, r31
    1378:	08 95       	ret

0000137a <strnlen>:
    137a:	fc 01       	movw	r30, r24
    137c:	61 50       	subi	r22, 0x01	; 1
    137e:	70 40       	sbci	r23, 0x00	; 0
    1380:	01 90       	ld	r0, Z+
    1382:	01 10       	cpse	r0, r1
    1384:	d8 f7       	brcc	.-10     	; 0x137c <strnlen+0x2>
    1386:	80 95       	com	r24
    1388:	90 95       	com	r25
    138a:	8e 0f       	add	r24, r30
    138c:	9f 1f       	adc	r25, r31
    138e:	08 95       	ret

00001390 <fputc>:
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	18 2f       	mov	r17, r24
    139a:	09 2f       	mov	r16, r25
    139c:	eb 01       	movw	r28, r22
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	81 fd       	sbrc	r24, 1
    13a2:	03 c0       	rjmp	.+6      	; 0x13aa <fputc+0x1a>
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	9f ef       	ldi	r25, 0xFF	; 255
    13a8:	20 c0       	rjmp	.+64     	; 0x13ea <fputc+0x5a>
    13aa:	82 ff       	sbrs	r24, 2
    13ac:	10 c0       	rjmp	.+32     	; 0x13ce <fputc+0x3e>
    13ae:	4e 81       	ldd	r20, Y+6	; 0x06
    13b0:	5f 81       	ldd	r21, Y+7	; 0x07
    13b2:	2c 81       	ldd	r18, Y+4	; 0x04
    13b4:	3d 81       	ldd	r19, Y+5	; 0x05
    13b6:	42 17       	cp	r20, r18
    13b8:	53 07       	cpc	r21, r19
    13ba:	7c f4       	brge	.+30     	; 0x13da <fputc+0x4a>
    13bc:	e8 81       	ld	r30, Y
    13be:	f9 81       	ldd	r31, Y+1	; 0x01
    13c0:	9f 01       	movw	r18, r30
    13c2:	2f 5f       	subi	r18, 0xFF	; 255
    13c4:	3f 4f       	sbci	r19, 0xFF	; 255
    13c6:	39 83       	std	Y+1, r19	; 0x01
    13c8:	28 83       	st	Y, r18
    13ca:	10 83       	st	Z, r17
    13cc:	06 c0       	rjmp	.+12     	; 0x13da <fputc+0x4a>
    13ce:	e8 85       	ldd	r30, Y+8	; 0x08
    13d0:	f9 85       	ldd	r31, Y+9	; 0x09
    13d2:	81 2f       	mov	r24, r17
    13d4:	09 95       	icall
    13d6:	89 2b       	or	r24, r25
    13d8:	29 f7       	brne	.-54     	; 0x13a4 <fputc+0x14>
    13da:	2e 81       	ldd	r18, Y+6	; 0x06
    13dc:	3f 81       	ldd	r19, Y+7	; 0x07
    13de:	2f 5f       	subi	r18, 0xFF	; 255
    13e0:	3f 4f       	sbci	r19, 0xFF	; 255
    13e2:	3f 83       	std	Y+7, r19	; 0x07
    13e4:	2e 83       	std	Y+6, r18	; 0x06
    13e6:	81 2f       	mov	r24, r17
    13e8:	90 2f       	mov	r25, r16
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	08 95       	ret

000013f4 <__ultoa_invert>:
    13f4:	fa 01       	movw	r30, r20
    13f6:	aa 27       	eor	r26, r26
    13f8:	28 30       	cpi	r18, 0x08	; 8
    13fa:	51 f1       	breq	.+84     	; 0x1450 <__ultoa_invert+0x5c>
    13fc:	20 31       	cpi	r18, 0x10	; 16
    13fe:	81 f1       	breq	.+96     	; 0x1460 <__ultoa_invert+0x6c>
    1400:	e8 94       	clt
    1402:	6f 93       	push	r22
    1404:	6e 7f       	andi	r22, 0xFE	; 254
    1406:	6e 5f       	subi	r22, 0xFE	; 254
    1408:	7f 4f       	sbci	r23, 0xFF	; 255
    140a:	8f 4f       	sbci	r24, 0xFF	; 255
    140c:	9f 4f       	sbci	r25, 0xFF	; 255
    140e:	af 4f       	sbci	r26, 0xFF	; 255
    1410:	b1 e0       	ldi	r27, 0x01	; 1
    1412:	3e d0       	rcall	.+124    	; 0x1490 <__ultoa_invert+0x9c>
    1414:	b4 e0       	ldi	r27, 0x04	; 4
    1416:	3c d0       	rcall	.+120    	; 0x1490 <__ultoa_invert+0x9c>
    1418:	67 0f       	add	r22, r23
    141a:	78 1f       	adc	r23, r24
    141c:	89 1f       	adc	r24, r25
    141e:	9a 1f       	adc	r25, r26
    1420:	a1 1d       	adc	r26, r1
    1422:	68 0f       	add	r22, r24
    1424:	79 1f       	adc	r23, r25
    1426:	8a 1f       	adc	r24, r26
    1428:	91 1d       	adc	r25, r1
    142a:	a1 1d       	adc	r26, r1
    142c:	6a 0f       	add	r22, r26
    142e:	71 1d       	adc	r23, r1
    1430:	81 1d       	adc	r24, r1
    1432:	91 1d       	adc	r25, r1
    1434:	a1 1d       	adc	r26, r1
    1436:	20 d0       	rcall	.+64     	; 0x1478 <__ultoa_invert+0x84>
    1438:	09 f4       	brne	.+2      	; 0x143c <__ultoa_invert+0x48>
    143a:	68 94       	set
    143c:	3f 91       	pop	r19
    143e:	2a e0       	ldi	r18, 0x0A	; 10
    1440:	26 9f       	mul	r18, r22
    1442:	11 24       	eor	r1, r1
    1444:	30 19       	sub	r19, r0
    1446:	30 5d       	subi	r19, 0xD0	; 208
    1448:	31 93       	st	Z+, r19
    144a:	de f6       	brtc	.-74     	; 0x1402 <__ultoa_invert+0xe>
    144c:	cf 01       	movw	r24, r30
    144e:	08 95       	ret
    1450:	46 2f       	mov	r20, r22
    1452:	47 70       	andi	r20, 0x07	; 7
    1454:	40 5d       	subi	r20, 0xD0	; 208
    1456:	41 93       	st	Z+, r20
    1458:	b3 e0       	ldi	r27, 0x03	; 3
    145a:	0f d0       	rcall	.+30     	; 0x147a <__ultoa_invert+0x86>
    145c:	c9 f7       	brne	.-14     	; 0x1450 <__ultoa_invert+0x5c>
    145e:	f6 cf       	rjmp	.-20     	; 0x144c <__ultoa_invert+0x58>
    1460:	46 2f       	mov	r20, r22
    1462:	4f 70       	andi	r20, 0x0F	; 15
    1464:	40 5d       	subi	r20, 0xD0	; 208
    1466:	4a 33       	cpi	r20, 0x3A	; 58
    1468:	18 f0       	brcs	.+6      	; 0x1470 <__ultoa_invert+0x7c>
    146a:	49 5d       	subi	r20, 0xD9	; 217
    146c:	31 fd       	sbrc	r19, 1
    146e:	40 52       	subi	r20, 0x20	; 32
    1470:	41 93       	st	Z+, r20
    1472:	02 d0       	rcall	.+4      	; 0x1478 <__ultoa_invert+0x84>
    1474:	a9 f7       	brne	.-22     	; 0x1460 <__ultoa_invert+0x6c>
    1476:	ea cf       	rjmp	.-44     	; 0x144c <__ultoa_invert+0x58>
    1478:	b4 e0       	ldi	r27, 0x04	; 4
    147a:	a6 95       	lsr	r26
    147c:	97 95       	ror	r25
    147e:	87 95       	ror	r24
    1480:	77 95       	ror	r23
    1482:	67 95       	ror	r22
    1484:	ba 95       	dec	r27
    1486:	c9 f7       	brne	.-14     	; 0x147a <__ultoa_invert+0x86>
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	61 05       	cpc	r22, r1
    148c:	71 05       	cpc	r23, r1
    148e:	08 95       	ret
    1490:	9b 01       	movw	r18, r22
    1492:	ac 01       	movw	r20, r24
    1494:	0a 2e       	mov	r0, r26
    1496:	06 94       	lsr	r0
    1498:	57 95       	ror	r21
    149a:	47 95       	ror	r20
    149c:	37 95       	ror	r19
    149e:	27 95       	ror	r18
    14a0:	ba 95       	dec	r27
    14a2:	c9 f7       	brne	.-14     	; 0x1496 <__ultoa_invert+0xa2>
    14a4:	62 0f       	add	r22, r18
    14a6:	73 1f       	adc	r23, r19
    14a8:	84 1f       	adc	r24, r20
    14aa:	95 1f       	adc	r25, r21
    14ac:	a0 1d       	adc	r26, r0
    14ae:	08 95       	ret

000014b0 <__prologue_saves__>:
    14b0:	2f 92       	push	r2
    14b2:	3f 92       	push	r3
    14b4:	4f 92       	push	r4
    14b6:	5f 92       	push	r5
    14b8:	6f 92       	push	r6
    14ba:	7f 92       	push	r7
    14bc:	8f 92       	push	r8
    14be:	9f 92       	push	r9
    14c0:	af 92       	push	r10
    14c2:	bf 92       	push	r11
    14c4:	cf 92       	push	r12
    14c6:	df 92       	push	r13
    14c8:	ef 92       	push	r14
    14ca:	ff 92       	push	r15
    14cc:	0f 93       	push	r16
    14ce:	1f 93       	push	r17
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	ca 1b       	sub	r28, r26
    14da:	db 0b       	sbc	r29, r27
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	09 94       	ijmp

000014e8 <__epilogue_restores__>:
    14e8:	2a 88       	ldd	r2, Y+18	; 0x12
    14ea:	39 88       	ldd	r3, Y+17	; 0x11
    14ec:	48 88       	ldd	r4, Y+16	; 0x10
    14ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    14f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    14f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    14f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    14f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    14f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    14fa:	b9 84       	ldd	r11, Y+9	; 0x09
    14fc:	c8 84       	ldd	r12, Y+8	; 0x08
    14fe:	df 80       	ldd	r13, Y+7	; 0x07
    1500:	ee 80       	ldd	r14, Y+6	; 0x06
    1502:	fd 80       	ldd	r15, Y+5	; 0x05
    1504:	0c 81       	ldd	r16, Y+4	; 0x04
    1506:	1b 81       	ldd	r17, Y+3	; 0x03
    1508:	aa 81       	ldd	r26, Y+2	; 0x02
    150a:	b9 81       	ldd	r27, Y+1	; 0x01
    150c:	ce 0f       	add	r28, r30
    150e:	d1 1d       	adc	r29, r1
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	ed 01       	movw	r28, r26
    151c:	08 95       	ret

0000151e <_exit>:
    151e:	f8 94       	cli

00001520 <__stop_program>:
    1520:	ff cf       	rjmp	.-2      	; 0x1520 <__stop_program>
