
Servo-Motor-Speed-Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000252  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000252  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004c9  00000000  00000000  000003c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000283  00000000  00000000  0000088f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e6  00000000  00000000  00000b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a4  00000000  00000000  00000cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000263  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b8  00000000  00000000  000010ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000013b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	a0 c0       	rjmp	.+320    	; 0x14a <__vector_4>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	e5 c0       	rjmp	.+458    	; 0x1f0 <__vector_18>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a4 30       	cpi	r26, 0x04	; 4
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	e5 d0       	rcall	.+458    	; 0x21c <main>
  52:	fd c0       	rjmp	.+506    	; 0x24e <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <setup_DDR>:
/* PRIVATE FUNCTIONS                                                    */
/************************************************************************/

void setup_DDR(){
	
	DDRB = 0x00;										// no output
  56:	14 b8       	out	0x04, r1	; 4
	DDRC = (1 << PC2) | (1 << PC1) | (1 << PC0);		// PC0-PC2 output
  58:	87 e0       	ldi	r24, 0x07	; 7
  5a:	87 b9       	out	0x07, r24	; 7
	DDRD = (1 << PD6) | (1 << PD5) | (1 << PD1);		// PD1, PD5 & PD6 output
  5c:	82 e6       	ldi	r24, 0x62	; 98
  5e:	8a b9       	out	0x0a, r24	; 10
  60:	08 95       	ret

00000062 <setup_PORT>:
	
}

void setup_PORT(){
		
	PORTB = 0x00;
  62:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;//(1 << PC2) | (1 << PC1) | (1 << PC0);		// Turns on LEDs
  64:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
  66:	1b b8       	out	0x0b, r1	; 11
  68:	08 95       	ret

0000006a <setup_PWM>:
}

// Sets up PWM on PD6
void setup_PWM(){
	
	TCCR0A = (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0) | (1 << WGM01) | (1 << WGM00);		// fast PWM, inverting (pg.113, 115)
  6a:	83 ef       	ldi	r24, 0xF3	; 243
  6c:	84 bd       	out	0x24, r24	; 36
	TCCR0B =  (0 << CS02) | (0 << CS01) | (1 << CS00);							// no pre scaling  (pg. 117)
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	85 bd       	out	0x25, r24	; 37
  72:	08 95       	ret

00000074 <setup_USART>:

}

void setup_USART(){
	
	DDRD |= (1 << PD1);
  74:	51 9a       	sbi	0x0a, 1	; 10
	unsigned int ubrr = (((F_CPU / (BAUD * 16UL))) - 1 );
	
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
  76:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
  7a:	89 e1       	ldi	r24, 0x19	; 25
  7c:	80 93 c4 00 	sts	0x00C4, r24
		
	// Enable reciever for interrupt and transmitter (pg. 202)
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0);
  80:	88 e9       	ldi	r24, 0x98	; 152
  82:	80 93 c1 00 	sts	0x00C1, r24
	
	// Set frame format: 8 data, 2 stop, 0 parity (pg. 204)
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  86:	86 e0       	ldi	r24, 0x06	; 6
  88:	80 93 c2 00 	sts	0x00C2, r24
  8c:	08 95       	ret

0000008e <setup_interrupts>:
}


void setup_interrupts(){
	
	PCICR = (1 << PCIE1);						// Enables possibility of interrupts on pins 14-8
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 = (1 << PCINT13) | (1 << PCINT12);	// Enables interrupts on pin PC5 & PC4
  94:	80 e3       	ldi	r24, 0x30	; 48
  96:	80 93 6c 00 	sts	0x006C, r24
  9a:	08 95       	ret

0000009c <turnOff_C>:
	
}

/* Turns off output on selected pin on PORTC */
void turnOff_C(int pin){
	PORTC &= ~(1 << pin);
  9c:	98 b1       	in	r25, 0x08	; 8
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <turnOff_C+0xc>
  a4:	22 0f       	add	r18, r18
  a6:	33 1f       	adc	r19, r19
  a8:	8a 95       	dec	r24
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <turnOff_C+0x8>
  ac:	20 95       	com	r18
  ae:	92 23       	and	r25, r18
  b0:	98 b9       	out	0x08, r25	; 8
  b2:	08 95       	ret

000000b4 <turnOn_C>:
	 
}
/* Turns on output on selected pin on PORTC */
void turnOn_C(int pin){
	PORTC |= (1 << pin);
  b4:	48 b1       	in	r20, 0x08	; 8
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	b9 01       	movw	r22, r18
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <turnOn_C+0xe>
  be:	66 0f       	add	r22, r22
  c0:	77 1f       	adc	r23, r23
  c2:	8a 95       	dec	r24
  c4:	e2 f7       	brpl	.-8      	; 0xbe <turnOn_C+0xa>
  c6:	cb 01       	movw	r24, r22
  c8:	84 2b       	or	r24, r20
  ca:	88 b9       	out	0x08, r24	; 8
  cc:	08 95       	ret

000000ce <clockwise>:
}

/* Routine for clockwise rotation of encoder */
void clockwise(){
	turnOff_C(PC2);
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	e4 df       	rcall	.-56     	; 0x9c <turnOff_C>
	turnOn_C(PC0);
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	ed df       	rcall	.-38     	; 0xb4 <turnOn_C>
	if(pwm < 245){
  da:	80 91 02 01 	lds	r24, 0x0102
  de:	90 91 03 01 	lds	r25, 0x0103
  e2:	85 3f       	cpi	r24, 0xF5	; 245
  e4:	91 05       	cpc	r25, r1
  e6:	30 f4       	brcc	.+12     	; 0xf4 <clockwise+0x26>
		pwm += 10;
  e8:	0a 96       	adiw	r24, 0x0a	; 10
  ea:	90 93 03 01 	sts	0x0103, r25
  ee:	80 93 02 01 	sts	0x0102, r24
  f2:	08 95       	ret
	}
	else{
		pwm = 255;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 03 01 	sts	0x0103, r25
  fc:	80 93 02 01 	sts	0x0102, r24
 100:	08 95       	ret

00000102 <counterclockwise>:
	}
}

/* Routine for counterclockwise rotation of encoder */
void counterclockwise(){
	turnOff_C(PC0);
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	ca df       	rcall	.-108    	; 0x9c <turnOff_C>
	turnOn_C(PC2);
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	d3 df       	rcall	.-90     	; 0xb4 <turnOn_C>
	if(pwm > 10){
 10e:	80 91 02 01 	lds	r24, 0x0102
 112:	90 91 03 01 	lds	r25, 0x0103
 116:	8b 30       	cpi	r24, 0x0B	; 11
 118:	91 05       	cpc	r25, r1
 11a:	30 f0       	brcs	.+12     	; 0x128 <counterclockwise+0x26>
		pwm -= 10;
 11c:	0a 97       	sbiw	r24, 0x0a	; 10
 11e:	90 93 03 01 	sts	0x0103, r25
 122:	80 93 02 01 	sts	0x0102, r24
 126:	08 95       	ret
	}
	else{
		pwm = 0;
 128:	10 92 03 01 	sts	0x0103, r1
 12c:	10 92 02 01 	sts	0x0102, r1
 130:	08 95       	ret

00000132 <setup_registers>:
/************************************************************************/

/* Initial setup of registers */ 
void setup_registers(){
	
	setup_DDR();
 132:	91 df       	rcall	.-222    	; 0x56 <setup_DDR>
	setup_PORT();	
 134:	96 df       	rcall	.-212    	; 0x62 <setup_PORT>
	setup_PWM();
 136:	99 df       	rcall	.-206    	; 0x6a <setup_PWM>
	setup_USART();
 138:	9d df       	rcall	.-198    	; 0x74 <setup_USART>
	setup_interrupts();
 13a:	a9 df       	rcall	.-174    	; 0x8e <setup_interrupts>
 13c:	08 95       	ret

0000013e <set_trigger>:
}

/* Sets the PWM trigger value*/ 
Registers* set_trigger(Registers* reg, int setValue){
	
	reg->setValue = setValue;
 13e:	fc 01       	movw	r30, r24
 140:	60 83       	st	Z, r22
 142:	71 83       	std	Z+1, r23	; 0x01
	OCR0A = setValue;
 144:	67 bd       	out	0x27, r22	; 39
	OCR0B = setValue;
 146:	68 bd       	out	0x28, r22	; 40
	
	return reg;
}
 148:	08 95       	ret

0000014a <__vector_4>:
/************************************************************************/
/* INTERRUPT SERVICE ROUTINES											*/
/************************************************************************/

/* ISR for PCINT14-8 */
ISR(PCINT1_vect){
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
	
	unsigned int ABnew = 0x00;
	unsigned int A = 0x00;
	unsigned int B = 0x00;
	
	A = (PINC & (1 << PC5));
 170:	c6 b1       	in	r28, 0x06	; 6
 172:	c0 72       	andi	r28, 0x20	; 32
 174:	d0 e0       	ldi	r29, 0x00	; 0
	A = (A >> (PC5 - 1));	// Sets A in pos 1
	
	B = (PINC & (1 << PC4));
 176:	26 b1       	in	r18, 0x06	; 6
	B = (B >> PC4);			// Sets B in pos 0
 178:	24 fb       	bst	r18, 4
 17a:	88 27       	eor	r24, r24
 17c:	80 f9       	bld	r24, 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
	unsigned int ABnew = 0x00;
	unsigned int A = 0x00;
	unsigned int B = 0x00;
	
	A = (PINC & (1 << PC5));
	A = (A >> (PC5 - 1));	// Sets A in pos 1
 180:	d2 95       	swap	r29
 182:	c2 95       	swap	r28
 184:	cf 70       	andi	r28, 0x0F	; 15
 186:	cd 27       	eor	r28, r29
 188:	df 70       	andi	r29, 0x0F	; 15
 18a:	cd 27       	eor	r28, r29
	
	B = (PINC & (1 << PC4));
	B = (B >> PC4);			// Sets B in pos 0
	
	ABnew = A | B;
 18c:	c8 2b       	or	r28, r24
 18e:	d9 2b       	or	r29, r25
	
	switch(ABnew){
 190:	20 97       	sbiw	r28, 0x00	; 0
 192:	21 f0       	breq	.+8      	; 0x19c <__vector_4+0x52>
 194:	c1 30       	cpi	r28, 0x01	; 1
 196:	d1 05       	cpc	r29, r1
 198:	59 f0       	breq	.+22     	; 0x1b0 <__vector_4+0x66>
 19a:	13 c0       	rjmp	.+38     	; 0x1c2 <__vector_4+0x78>
		case 0:	
			if(AB == 2){
 19c:	80 91 00 01 	lds	r24, 0x0100
 1a0:	90 91 01 01 	lds	r25, 0x0101
 1a4:	02 97       	sbiw	r24, 0x02	; 2
 1a6:	11 f4       	brne	.+4      	; 0x1ac <__vector_4+0x62>
				clockwise();
 1a8:	92 df       	rcall	.-220    	; 0xce <clockwise>
 1aa:	0b c0       	rjmp	.+22     	; 0x1c2 <__vector_4+0x78>
			}
			else{
				counterclockwise();
 1ac:	aa df       	rcall	.-172    	; 0x102 <counterclockwise>
 1ae:	09 c0       	rjmp	.+18     	; 0x1c2 <__vector_4+0x78>
			}
			break;
		
		case 1:
			if(AB == 0){
 1b0:	80 91 00 01 	lds	r24, 0x0100
 1b4:	90 91 01 01 	lds	r25, 0x0101
 1b8:	89 2b       	or	r24, r25
 1ba:	11 f4       	brne	.+4      	; 0x1c0 <__vector_4+0x76>
				clockwise();
 1bc:	88 df       	rcall	.-240    	; 0xce <clockwise>
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <__vector_4+0x78>
			}
			else{
				counterclockwise();
 1c0:	a0 df       	rcall	.-192    	; 0x102 <counterclockwise>
			}
			break;
	}
	AB = ABnew;
 1c2:	d0 93 01 01 	sts	0x0101, r29
 1c6:	c0 93 00 01 	sts	0x0100, r28

}
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__vector_18>:

/* ISR for serial receiver */
ISR(USART_RX_vect){
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	8f 93       	push	r24
 1fc:	ef 93       	push	r30
 1fe:	ff 93       	push	r31
	cli();
 200:	f8 94       	cli
	
	unsigned char recieved_byte;
	recieved_byte = UDR0;
 202:	e6 ec       	ldi	r30, 0xC6	; 198
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
	UDR0 = recieved_byte;
 208:	80 83       	st	Z, r24
	
	sei();
 20a:	78 94       	sei
}
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	8f 91       	pop	r24
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <main>:
/* Global variables */
unsigned int AB;
unsigned int pwm;


int main(void){
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	00 d0       	rcall	.+0      	; 0x222 <main+0x6>
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
	Registers registers;
	Registers *reg = &registers;
	AB = 0;
 226:	10 92 01 01 	sts	0x0101, r1
 22a:	10 92 00 01 	sts	0x0100, r1
	pwm = 50;
 22e:	82 e3       	ldi	r24, 0x32	; 50
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	90 93 03 01 	sts	0x0103, r25
 236:	80 93 02 01 	sts	0x0102, r24

	setup_registers();
 23a:	7b df       	rcall	.-266    	; 0x132 <setup_registers>
	sei();
 23c:	78 94       	sei
unsigned int pwm;


int main(void){
	Registers registers;
	Registers *reg = &registers;
 23e:	ce 01       	movw	r24, r28
 240:	01 96       	adiw	r24, 0x01	; 1
	setup_registers();
	sei();
	unsigned char serial_flag = 'a';
	while(1){
		
		reg = set_trigger(reg, pwm);
 242:	60 91 02 01 	lds	r22, 0x0102
 246:	70 91 03 01 	lds	r23, 0x0103
 24a:	79 df       	rcall	.-270    	; 0x13e <set_trigger>
 24c:	fa cf       	rjmp	.-12     	; 0x242 <main+0x26>

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
