
Servo-Motor-Speed-Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001426  000014ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001426  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800122  00800122  000014dc  2**0
                  ALLOC
  3 .stab         00000f3c  00000000  00000000  000014dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000356  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000276e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000198  00000000  00000000  0000279d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001cb0  00000000  00000000  00002935  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b2d  00000000  00000000  000045e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c23  00000000  00000000  00005112  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000052c  00000000  00000000  00005d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005cf  00000000  00000000  00006264  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001674  00000000  00000000  00006833  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000168  00000000  00000000  00007ea7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	23 c0       	rjmp	.+70     	; 0x48 <__ctors_end>
       2:	3d c0       	rjmp	.+122    	; 0x7e <__bad_interrupt>
       4:	3c c0       	rjmp	.+120    	; 0x7e <__bad_interrupt>
       6:	3b c0       	rjmp	.+118    	; 0x7e <__bad_interrupt>
       8:	9c c2       	rjmp	.+1336   	; 0x542 <__vector_4>
       a:	39 c0       	rjmp	.+114    	; 0x7e <__bad_interrupt>
       c:	38 c0       	rjmp	.+112    	; 0x7e <__bad_interrupt>
       e:	37 c0       	rjmp	.+110    	; 0x7e <__bad_interrupt>
      10:	36 c0       	rjmp	.+108    	; 0x7e <__bad_interrupt>
      12:	35 c0       	rjmp	.+106    	; 0x7e <__bad_interrupt>
      14:	34 c0       	rjmp	.+104    	; 0x7e <__bad_interrupt>
      16:	33 c0       	rjmp	.+102    	; 0x7e <__bad_interrupt>
      18:	32 c0       	rjmp	.+100    	; 0x7e <__bad_interrupt>
      1a:	31 c0       	rjmp	.+98     	; 0x7e <__bad_interrupt>
      1c:	30 c0       	rjmp	.+96     	; 0x7e <__bad_interrupt>
      1e:	2f c0       	rjmp	.+94     	; 0x7e <__bad_interrupt>
      20:	2e c0       	rjmp	.+92     	; 0x7e <__bad_interrupt>
      22:	2d c0       	rjmp	.+90     	; 0x7e <__bad_interrupt>
      24:	06 c3       	rjmp	.+1548   	; 0x632 <__vector_18>
      26:	2b c0       	rjmp	.+86     	; 0x7e <__bad_interrupt>
      28:	2a c0       	rjmp	.+84     	; 0x7e <__bad_interrupt>
      2a:	29 c0       	rjmp	.+82     	; 0x7e <__bad_interrupt>
      2c:	28 c0       	rjmp	.+80     	; 0x7e <__bad_interrupt>
      2e:	27 c0       	rjmp	.+78     	; 0x7e <__bad_interrupt>
      30:	26 c0       	rjmp	.+76     	; 0x7e <__bad_interrupt>
      32:	25 c0       	rjmp	.+74     	; 0x7e <__bad_interrupt>
      34:	8c c3       	rjmp	.+1816   	; 0x74e <main+0x6a>
      36:	8f c3       	rjmp	.+1822   	; 0x756 <main+0x72>
      38:	92 c3       	rjmp	.+1828   	; 0x75e <main+0x7a>
      3a:	95 c3       	rjmp	.+1834   	; 0x766 <main+0x82>
      3c:	98 c3       	rjmp	.+1840   	; 0x76e <main+0x8a>
      3e:	9b c3       	rjmp	.+1846   	; 0x776 <main+0x92>
      40:	9e c3       	rjmp	.+1852   	; 0x77e <main+0x9a>
      42:	a1 c3       	rjmp	.+1858   	; 0x786 <main+0xa2>
      44:	a4 c3       	rjmp	.+1864   	; 0x78e <main+0xaa>
      46:	a7 c3       	rjmp	.+1870   	; 0x796 <main+0xb2>

00000048 <__ctors_end>:
      48:	11 24       	eor	r1, r1
      4a:	1f be       	out	0x3f, r1	; 63
      4c:	cf ef       	ldi	r28, 0xFF	; 255
      4e:	d4 e0       	ldi	r29, 0x04	; 4
      50:	de bf       	out	0x3e, r29	; 62
      52:	cd bf       	out	0x3d, r28	; 61

00000054 <__do_copy_data>:
      54:	11 e0       	ldi	r17, 0x01	; 1
      56:	a0 e0       	ldi	r26, 0x00	; 0
      58:	b1 e0       	ldi	r27, 0x01	; 1
      5a:	e6 e2       	ldi	r30, 0x26	; 38
      5c:	f4 e1       	ldi	r31, 0x14	; 20
      5e:	02 c0       	rjmp	.+4      	; 0x64 <__do_copy_data+0x10>
      60:	05 90       	lpm	r0, Z+
      62:	0d 92       	st	X+, r0
      64:	a2 32       	cpi	r26, 0x22	; 34
      66:	b1 07       	cpc	r27, r17
      68:	d9 f7       	brne	.-10     	; 0x60 <__do_copy_data+0xc>

0000006a <__do_clear_bss>:
      6a:	21 e0       	ldi	r18, 0x01	; 1
      6c:	a2 e2       	ldi	r26, 0x22	; 34
      6e:	b1 e0       	ldi	r27, 0x01	; 1
      70:	01 c0       	rjmp	.+2      	; 0x74 <.do_clear_bss_start>

00000072 <.do_clear_bss_loop>:
      72:	1d 92       	st	X+, r1

00000074 <.do_clear_bss_start>:
      74:	af 32       	cpi	r26, 0x2F	; 47
      76:	b2 07       	cpc	r27, r18
      78:	e1 f7       	brne	.-8      	; 0x72 <.do_clear_bss_loop>
      7a:	34 d3       	rcall	.+1640   	; 0x6e4 <main>
      7c:	d2 c9       	rjmp	.-3164   	; 0xfffff422 <__eeprom_end+0xff7ef422>

0000007e <__bad_interrupt>:
      7e:	c0 cf       	rjmp	.-128    	; 0x0 <__vectors>

00000080 <init_shared_data>:
	unsigned long delta_time;
	long long integral;
	short error;
} Shared_Data;

void init_shared_data(Shared_Data* shared_ptr){
      80:	dc 01       	movw	r26, r24
	shared_ptr->speed_set = 0;
      82:	11 96       	adiw	r26, 0x01	; 1
      84:	1c 92       	st	X, r1
      86:	1e 92       	st	-X, r1
	shared_ptr->speed_actual = 0;
      88:	13 96       	adiw	r26, 0x03	; 3
      8a:	1c 92       	st	X, r1
      8c:	1e 92       	st	-X, r1
      8e:	12 97       	sbiw	r26, 0x02	; 2
	shared_ptr->curr_rpm = 0;
      90:	14 96       	adiw	r26, 0x04	; 4
      92:	1d 92       	st	X+, r1
      94:	1d 92       	st	X+, r1
      96:	1d 92       	st	X+, r1
      98:	1c 92       	st	X, r1
      9a:	17 97       	sbiw	r26, 0x07	; 7
	shared_ptr->rpm_avg = 0;
      9c:	18 96       	adiw	r26, 0x08	; 8
      9e:	1d 92       	st	X+, r1
      a0:	1d 92       	st	X+, r1
      a2:	1d 92       	st	X+, r1
      a4:	1c 92       	st	X, r1
      a6:	1b 97       	sbiw	r26, 0x0b	; 11
	shared_ptr->delta_time = 0;
      a8:	fc 01       	movw	r30, r24
      aa:	e4 57       	subi	r30, 0x74	; 116
      ac:	ff 4f       	sbci	r31, 0xFF	; 255
      ae:	10 82       	st	Z, r1
      b0:	11 82       	std	Z+1, r1	; 0x01
      b2:	12 82       	std	Z+2, r1	; 0x02
      b4:	13 82       	std	Z+3, r1	; 0x03
	shared_ptr->integral = 0;
      b6:	fc 01       	movw	r30, r24
      b8:	e0 57       	subi	r30, 0x70	; 112
      ba:	ff 4f       	sbci	r31, 0xFF	; 255
      bc:	10 82       	st	Z, r1
      be:	11 82       	std	Z+1, r1	; 0x01
      c0:	12 82       	std	Z+2, r1	; 0x02
      c2:	13 82       	std	Z+3, r1	; 0x03
      c4:	14 82       	std	Z+4, r1	; 0x04
      c6:	15 82       	std	Z+5, r1	; 0x05
      c8:	16 82       	std	Z+6, r1	; 0x06
      ca:	17 82       	std	Z+7, r1	; 0x07
	shared_ptr->error = 0;
      cc:	a8 56       	subi	r26, 0x68	; 104
      ce:	bf 4f       	sbci	r27, 0xFF	; 255
      d0:	1d 92       	st	X+, r1
      d2:	1c 92       	st	X, r1
      d4:	08 95       	ret

000000d6 <set_prescale>:
	}
	clk_prev = clk_curr;
}

static void set_prescale(int ps){
	if (ps == 1){
      d6:	81 30       	cpi	r24, 0x01	; 1
      d8:	91 05       	cpc	r25, r1
      da:	39 f4       	brne	.+14     	; 0xea <set_prescale+0x14>
		TCCR1B &= ~ 0xff;
      dc:	e1 e8       	ldi	r30, 0x81	; 129
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	10 82       	st	Z, r1
		TCCR1B = (1 << CS10);
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	80 83       	st	Z, r24
      e8:	08 95       	ret
	}
	else if(ps == 8){
      ea:	08 97       	sbiw	r24, 0x08	; 8
      ec:	31 f4       	brne	.+12     	; 0xfa <set_prescale+0x24>
		TCCR1B &= ~ 0xff;
      ee:	e1 e8       	ldi	r30, 0x81	; 129
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	80 81       	ld	r24, Z
      f4:	10 82       	st	Z, r1
		TCCR1B = (1 << CS11);
      f6:	82 e0       	ldi	r24, 0x02	; 2
      f8:	80 83       	st	Z, r24
      fa:	08 95       	ret

000000fc <calc_latest_rpm>:
}

/*	Calculates the speed between two encoder-interrupts, using fixed point arithmetics.
 *	Qm.n values defined in shared.h
*/
void calc_latest_rpm(Shared_Data* shared_ptr){
      fc:	4f 92       	push	r4
      fe:	5f 92       	push	r5
     100:	6f 92       	push	r6
     102:	7f 92       	push	r7
     104:	8f 92       	push	r8
     106:	9f 92       	push	r9
     108:	af 92       	push	r10
     10a:	bf 92       	push	r11
     10c:	cf 92       	push	r12
     10e:	df 92       	push	r13
     110:	ef 92       	push	r14
     112:	ff 92       	push	r15
     114:	0f 93       	push	r16
     116:	1f 93       	push	r17
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	28 97       	sbiw	r28, 0x08	; 8
     122:	0f b6       	in	r0, 0x3f	; 63
     124:	f8 94       	cli
     126:	de bf       	out	0x3e, r29	; 62
     128:	0f be       	out	0x3f, r0	; 63
     12a:	cd bf       	out	0x3d, r28	; 61
     12c:	4c 01       	movw	r8, r24
		TCCR1B = (1 << CS11);
	}
}
/*	Converts the difference in clk increments to microseconds */
static unsigned long calc_delta_time(Shared_Data* shared_ptr){
	unsigned short delta_clk = clk_elapsed;
     12e:	e0 90 2d 01 	lds	r14, 0x012D
     132:	f0 90 2e 01 	lds	r15, 0x012E

	// scales based on prescaling
	unsigned short prescale;
	
	if(shared_ptr->speed_set <= 20){
     136:	fc 01       	movw	r30, r24
     138:	80 81       	ld	r24, Z
     13a:	91 81       	ldd	r25, Z+1	; 0x01
     13c:	45 97       	sbiw	r24, 0x15	; 21
     13e:	34 f4       	brge	.+12     	; 0x14c <calc_latest_rpm+0x50>
		prescale = 8;
		set_prescale(8);
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	c8 df       	rcall	.-112    	; 0xd6 <set_prescale>

	// scales based on prescaling
	unsigned short prescale;
	
	if(shared_ptr->speed_set <= 20){
		prescale = 8;
     146:	28 e0       	ldi	r18, 0x08	; 8
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	05 c0       	rjmp	.+10     	; 0x156 <calc_latest_rpm+0x5a>
		set_prescale(8);
	}
	else{
		prescale = 1;
		set_prescale(1);
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	c2 df       	rcall	.-124    	; 0xd6 <set_prescale>
	if(shared_ptr->speed_set <= 20){
		prescale = 8;
		set_prescale(8);
	}
	else{
		prescale = 1;
     152:	21 e0       	ldi	r18, 0x01	; 1
     154:	30 e0       	ldi	r19, 0x00	; 0
		set_prescale(1);
	}

	unsigned long temp;

	temp = (unsigned long)delta_clk * prescale;
     156:	d7 01       	movw	r26, r14
     158:	6a d5       	rcall	.+2772   	; 0xc2e <__umulhisi3>
	unsigned long long denominator;
	unsigned long long rpm;
	
	delta_time = calc_delta_time(shared_ptr);
	
	delta_time = delta_time << N;
     15a:	2b 01       	movw	r4, r22
     15c:	3c 01       	movw	r6, r24
     15e:	44 0c       	add	r4, r4
     160:	55 1c       	adc	r5, r5
     162:	66 1c       	adc	r6, r6
     164:	77 1c       	adc	r7, r7
     166:	44 0c       	add	r4, r4
     168:	55 1c       	adc	r5, r5
     16a:	66 1c       	adc	r6, r6
     16c:	77 1c       	adc	r7, r7
     16e:	44 0c       	add	r4, r4
     170:	55 1c       	adc	r5, r5
     172:	66 1c       	adc	r6, r6
     174:	77 1c       	adc	r7, r7
     176:	44 0c       	add	r4, r4
     178:	55 1c       	adc	r5, r5
     17a:	66 1c       	adc	r6, r6
     17c:	77 1c       	adc	r7, r7
	S_TO_MIN = S_TO_MIN << N;

	numerator = (unsigned long long)MS_TO_S * S_TO_MIN;
	numerator = numerator >> N;

	denominator = (unsigned long long)delta_rev_inverse * delta_time;
     17e:	a3 01       	movw	r20, r6
     180:	92 01       	movw	r18, r4
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	cb 01       	movw	r24, r22
     188:	49 82       	std	Y+1, r4	; 0x01
     18a:	3a 83       	std	Y+2, r19	; 0x02
     18c:	4b 83       	std	Y+3, r20	; 0x03
     18e:	5c 83       	std	Y+4, r21	; 0x04
     190:	6d 83       	std	Y+5, r22	; 0x05
     192:	7e 83       	std	Y+6, r23	; 0x06
     194:	8f 83       	std	Y+7, r24	; 0x07
     196:	98 87       	std	Y+8, r25	; 0x08
     198:	a1 2c       	mov	r10, r1
     19a:	0f 2e       	mov	r0, r31
     19c:	f6 e0       	ldi	r31, 0x06	; 6
     19e:	bf 2e       	mov	r11, r31
     1a0:	f0 2d       	mov	r31, r0
     1a2:	c1 2c       	mov	r12, r1
     1a4:	d1 2c       	mov	r13, r1
     1a6:	e1 2c       	mov	r14, r1
     1a8:	f1 2c       	mov	r15, r1
     1aa:	00 e0       	ldi	r16, 0x00	; 0
     1ac:	10 e0       	ldi	r17, 0x00	; 0
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	5e d5       	rcall	.+2748   	; 0xc74 <__muldi3>
	denominator = denominator >> N;
     1b8:	04 e0       	ldi	r16, 0x04	; 4
     1ba:	0a d6       	rcall	.+3092   	; 0xdd0 <__lshrdi3>
     1bc:	a2 2e       	mov	r10, r18
     1be:	b3 2e       	mov	r11, r19
     1c0:	c4 2e       	mov	r12, r20
     1c2:	d5 2e       	mov	r13, r21
     1c4:	e6 2e       	mov	r14, r22
     1c6:	f7 2e       	mov	r15, r23
     1c8:	e8 2f       	mov	r30, r24
     1ca:	19 2f       	mov	r17, r25

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1);
     1cc:	01 e0       	ldi	r16, 0x01	; 1
     1ce:	00 d6       	rcall	.+3072   	; 0xdd0 <__lshrdi3>
     1d0:	49 57       	subi	r20, 0x79	; 121
     1d2:	5c 46       	sbci	r21, 0x6C	; 108
     1d4:	6c 4f       	sbci	r22, 0xFC	; 252
     1d6:	7f 4f       	sbci	r23, 0xFF	; 255
     1d8:	8f 4f       	sbci	r24, 0xFF	; 255
     1da:	9f 4f       	sbci	r25, 0xFF	; 255
	rpm = rpm / denominator;
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
     1dc:	d4 01       	movw	r26, r8
     1de:	a0 57       	subi	r26, 0x70	; 112
     1e0:	bf 4f       	sbci	r27, 0xFF	; 255
     1e2:	68 94       	set
     1e4:	13 f8       	bld	r1, 3
     1e6:	76 94       	lsr	r7
     1e8:	67 94       	ror	r6
     1ea:	57 94       	ror	r5
     1ec:	47 94       	ror	r4
     1ee:	16 94       	lsr	r1
     1f0:	d1 f7       	brne	.-12     	; 0x1e6 <calc_latest_rpm+0xea>
     1f2:	4d 92       	st	X+, r4
     1f4:	5d 92       	st	X+, r5
     1f6:	6d 92       	st	X+, r6
     1f8:	7c 92       	st	X, r7
     1fa:	13 97       	sbiw	r26, 0x03	; 3
	denominator = (unsigned long long)delta_rev_inverse * delta_time;
	denominator = denominator >> N;

	rpm = numerator << N;
	rpm = rpm + (denominator >> 1);
	rpm = rpm / denominator;
     1fc:	0e 2f       	mov	r16, r30
     1fe:	2f d5       	rcall	.+2654   	; 0xc5e <__udivdi3>
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
	shared_ptr->curr_rpm = (unsigned long)rpm >> N;	// Used for debugging
     200:	82 2f       	mov	r24, r18
     202:	93 2f       	mov	r25, r19
     204:	a4 2f       	mov	r26, r20
     206:	b5 2f       	mov	r27, r21
     208:	72 2f       	mov	r23, r18
     20a:	63 2f       	mov	r22, r19
     20c:	54 2f       	mov	r21, r20
     20e:	4b 2f       	mov	r20, r27
     210:	68 94       	set
     212:	13 f8       	bld	r1, 3
     214:	b6 95       	lsr	r27
     216:	a7 95       	ror	r26
     218:	97 95       	ror	r25
     21a:	87 95       	ror	r24
     21c:	16 94       	lsr	r1
     21e:	d1 f7       	brne	.-12     	; 0x214 <calc_latest_rpm+0x118>
     220:	f4 01       	movw	r30, r8
     222:	80 87       	std	Z+8, r24	; 0x08
     224:	91 87       	std	Z+9, r25	; 0x09
     226:	a2 87       	std	Z+10, r26	; 0x0a
     228:	b3 87       	std	Z+11, r27	; 0x0b
    int i;
    unsigned long temp;

    temp = rpm >> N;

    if(temp < 0 || temp > 200){
     22a:	89 3c       	cpi	r24, 0xC9	; 201
     22c:	91 05       	cpc	r25, r1
     22e:	a1 05       	cpc	r26, r1
     230:	b1 05       	cpc	r27, r1
     232:	b8 f4       	brcc	.+46     	; 0x262 <calc_latest_rpm+0x166>
}

/*	Calculates the speed between two encoder-interrupts, using fixed point arithmetics.
 *	Qm.n values defined in shared.h
*/
void calc_latest_rpm(Shared_Data* shared_ptr){
     234:	e4 57       	subi	r30, 0x74	; 116
     236:	ff 4f       	sbci	r31, 0xFF	; 255
     238:	2f e1       	ldi	r18, 0x1F	; 31
     23a:	30 e0       	ldi	r19, 0x00	; 0
    if(temp < 0 || temp > 200){
        return;
    }

    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
     23c:	21 50       	subi	r18, 0x01	; 1
     23e:	31 09       	sbc	r19, r1
     240:	b2 91       	ld	r27, -Z
     242:	a2 91       	ld	r26, -Z
     244:	92 91       	ld	r25, -Z
     246:	82 91       	ld	r24, -Z
     248:	84 83       	std	Z+4, r24	; 0x04
     24a:	95 83       	std	Z+5, r25	; 0x05
     24c:	a6 83       	std	Z+6, r26	; 0x06
     24e:	b7 83       	std	Z+7, r27	; 0x07

    if(temp < 0 || temp > 200){
        return;
    }

    for(i = MEASUREMENTS_SIZE - 1; i >= 0; i--){
     250:	2f 3f       	cpi	r18, 0xFF	; 255
     252:	8f ef       	ldi	r24, 0xFF	; 255
     254:	38 07       	cpc	r19, r24
     256:	91 f7       	brne	.-28     	; 0x23c <calc_latest_rpm+0x140>
        shared_ptr->rpm_measurements[i] = shared_ptr->rpm_measurements[i-1];
    }
    shared_ptr->rpm_measurements[0] = rpm;
     258:	f4 01       	movw	r30, r8
     25a:	70 8b       	std	Z+16, r23	; 0x10
     25c:	61 8b       	std	Z+17, r22	; 0x11
     25e:	52 8b       	std	Z+18, r21	; 0x12
     260:	43 8b       	std	Z+19, r20	; 0x13
	
	shared_ptr->delta_time = delta_time >> N;		// Used for debugging
	shared_ptr->curr_rpm = (unsigned long)rpm >> N;	// Used for debugging
	insert_rpm(shared_ptr, rpm);
	
}
     262:	28 96       	adiw	r28, 0x08	; 8
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	de bf       	out	0x3e, r29	; 62
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	1f 91       	pop	r17
     274:	0f 91       	pop	r16
     276:	ff 90       	pop	r15
     278:	ef 90       	pop	r14
     27a:	df 90       	pop	r13
     27c:	cf 90       	pop	r12
     27e:	bf 90       	pop	r11
     280:	af 90       	pop	r10
     282:	9f 90       	pop	r9
     284:	8f 90       	pop	r8
     286:	7f 90       	pop	r7
     288:	6f 90       	pop	r6
     28a:	5f 90       	pop	r5
     28c:	4f 90       	pop	r4
     28e:	08 95       	ret

00000290 <calc_avg_rpm>:


void calc_avg_rpm(Shared_Data* shared_ptr){
     290:	2f 92       	push	r2
     292:	3f 92       	push	r3
     294:	4f 92       	push	r4
     296:	5f 92       	push	r5
     298:	6f 92       	push	r6
     29a:	7f 92       	push	r7
     29c:	8f 92       	push	r8
     29e:	9f 92       	push	r9
     2a0:	af 92       	push	r10
     2a2:	bf 92       	push	r11
     2a4:	cf 92       	push	r12
     2a6:	df 92       	push	r13
     2a8:	ef 92       	push	r14
     2aa:	ff 92       	push	r15
     2ac:	0f 93       	push	r16
     2ae:	1f 93       	push	r17
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	ec 01       	movw	r28, r24
     2b6:	dc 01       	movw	r26, r24
     2b8:	50 96       	adiw	r26, 0x10	; 16
     2ba:	e0 e2       	ldi	r30, 0x20	; 32
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned long long temp = 0;
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	40 e0       	ldi	r20, 0x00	; 0
     2c4:	50 e0       	ldi	r21, 0x00	; 0
     2c6:	60 e0       	ldi	r22, 0x00	; 0
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
	int i;
	
	for(i = 0; i < MEASUREMENTS_SIZE; i++){
		temp = temp + shared_ptr->rpm_measurements[i];
     2ce:	cd 90       	ld	r12, X+
     2d0:	dd 90       	ld	r13, X+
     2d2:	ed 90       	ld	r14, X+
     2d4:	fd 90       	ld	r15, X+
     2d6:	16 01       	movw	r2, r12
     2d8:	27 01       	movw	r4, r14
     2da:	ac 2c       	mov	r10, r12
     2dc:	b3 2c       	mov	r11, r3
     2de:	c4 2c       	mov	r12, r4
     2e0:	d5 2c       	mov	r13, r5
     2e2:	e1 2c       	mov	r14, r1
     2e4:	f1 2c       	mov	r15, r1
     2e6:	00 e0       	ldi	r16, 0x00	; 0
     2e8:	10 e0       	ldi	r17, 0x00	; 0
     2ea:	81 d5       	rcall	.+2818   	; 0xdee <__adddi3>
     2ec:	31 97       	sbiw	r30, 0x01	; 1

void calc_avg_rpm(Shared_Data* shared_ptr){
	unsigned long long temp = 0;
	int i;
	
	for(i = 0; i < MEASUREMENTS_SIZE; i++){
     2ee:	79 f7       	brne	.-34     	; 0x2ce <calc_avg_rpm+0x3e>
		temp = temp + shared_ptr->rpm_measurements[i];
	}
	
	// Divide by MEASUREMENTS_SIZE (32)
	temp = temp >> 5;
     2f0:	05 e0       	ldi	r16, 0x05	; 5
     2f2:	6e d5       	rcall	.+2780   	; 0xdd0 <__lshrdi3>
	
	// convert back from Qm.n to normal int
	temp = temp >> N;
     2f4:	04 e0       	ldi	r16, 0x04	; 4
     2f6:	6c d5       	rcall	.+2776   	; 0xdd0 <__lshrdi3>
	shared_ptr->rpm_avg = temp;
     2f8:	2c 87       	std	Y+12, r18	; 0x0c
     2fa:	3d 87       	std	Y+13, r19	; 0x0d
     2fc:	4e 87       	std	Y+14, r20	; 0x0e
     2fe:	5f 87       	std	Y+15, r21	; 0x0f
	
}
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	ff 90       	pop	r15
     30a:	ef 90       	pop	r14
     30c:	df 90       	pop	r13
     30e:	cf 90       	pop	r12
     310:	bf 90       	pop	r11
     312:	af 90       	pop	r10
     314:	9f 90       	pop	r9
     316:	8f 90       	pop	r8
     318:	7f 90       	pop	r7
     31a:	6f 90       	pop	r6
     31c:	5f 90       	pop	r5
     31e:	4f 90       	pop	r4
     320:	3f 90       	pop	r3
     322:	2f 90       	pop	r2
     324:	08 95       	ret

00000326 <control>:


void control(Shared_Data* shared_ptr){
     326:	2f 92       	push	r2
     328:	3f 92       	push	r3
     32a:	4f 92       	push	r4
     32c:	5f 92       	push	r5
     32e:	6f 92       	push	r6
     330:	7f 92       	push	r7
     332:	8f 92       	push	r8
     334:	9f 92       	push	r9
     336:	af 92       	push	r10
     338:	bf 92       	push	r11
     33a:	cf 92       	push	r12
     33c:	df 92       	push	r13
     33e:	ef 92       	push	r14
     340:	ff 92       	push	r15
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	fc 01       	movw	r30, r24
	long Kp = 2;
	long Ki;
	long e = (long)shared_ptr->speed_set - (long)shared_ptr->rpm_avg;
     34c:	80 81       	ld	r24, Z
     34e:	91 81       	ldd	r25, Z+1	; 0x01
     350:	2c 01       	movw	r4, r24
     352:	66 24       	eor	r6, r6
     354:	57 fc       	sbrc	r5, 7
     356:	60 94       	com	r6
     358:	76 2c       	mov	r7, r6
     35a:	44 85       	ldd	r20, Z+12	; 0x0c
     35c:	55 85       	ldd	r21, Z+13	; 0x0d
     35e:	66 85       	ldd	r22, Z+14	; 0x0e
     360:	77 85       	ldd	r23, Z+15	; 0x0f
     362:	44 1a       	sub	r4, r20
     364:	55 0a       	sbc	r5, r21
     366:	66 0a       	sbc	r6, r22
     368:	77 0a       	sbc	r7, r23
	shared_ptr->error = (short)e;	// For debugging
     36a:	df 01       	movw	r26, r30
     36c:	a4 56       	subi	r26, 0x64	; 100
     36e:	bf 4f       	sbci	r27, 0xFF	; 255
     370:	4d 92       	st	X+, r4
     372:	5c 92       	st	X, r5
	
	e = e << N_CTRL;
     374:	44 0c       	add	r4, r4
     376:	55 1c       	adc	r5, r5
     378:	66 1c       	adc	r6, r6
     37a:	77 1c       	adc	r7, r7
     37c:	44 0c       	add	r4, r4
     37e:	55 1c       	adc	r5, r5
     380:	66 1c       	adc	r6, r6
     382:	77 1c       	adc	r7, r7
     384:	44 0c       	add	r4, r4
     386:	55 1c       	adc	r5, r5
     388:	66 1c       	adc	r6, r6
     38a:	77 1c       	adc	r7, r7
     38c:	44 0c       	add	r4, r4
     38e:	55 1c       	adc	r5, r5
     390:	66 1c       	adc	r6, r6
     392:	77 1c       	adc	r7, r7
     394:	44 0c       	add	r4, r4
     396:	55 1c       	adc	r5, r5
     398:	66 1c       	adc	r6, r6
     39a:	77 1c       	adc	r7, r7
     39c:	44 0c       	add	r4, r4
     39e:	55 1c       	adc	r5, r5
     3a0:	66 1c       	adc	r6, r6
     3a2:	77 1c       	adc	r7, r7
     3a4:	44 0c       	add	r4, r4
     3a6:	55 1c       	adc	r5, r5
     3a8:	66 1c       	adc	r6, r6
     3aa:	77 1c       	adc	r7, r7
	Kp = Kp << N_CTRL;
	
	if(shared_ptr->speed_set >= 80){
     3ac:	80 35       	cpi	r24, 0x50	; 80
     3ae:	91 05       	cpc	r25, r1
     3b0:	3c f4       	brge	.+14     	; 0x3c0 <control+0x9a>
		Ki = 170;
	}

	else if(shared_ptr->speed_set >= 40){
     3b2:	88 97       	sbiw	r24, 0x28	; 40
     3b4:	54 f0       	brlt	.+20     	; 0x3ca <control+0xa4>
		Ki = 120;
     3b6:	28 e7       	ldi	r18, 0x78	; 120
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	50 e0       	ldi	r21, 0x00	; 0
     3be:	09 c0       	rjmp	.+18     	; 0x3d2 <control+0xac>
	
	e = e << N_CTRL;
	Kp = Kp << N_CTRL;
	
	if(shared_ptr->speed_set >= 80){
		Ki = 170;
     3c0:	2a ea       	ldi	r18, 0xAA	; 170
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	40 e0       	ldi	r20, 0x00	; 0
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	04 c0       	rjmp	.+8      	; 0x3d2 <control+0xac>
	}/*
	else if(shared_ptr->speed_set >= 20){
		Ki = 37;
	}*/
	else{
		Ki = 60;
     3ca:	2c e3       	ldi	r18, 0x3C	; 60
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	50 e0       	ldi	r21, 0x00	; 0
	}
	
	long integral = Ki*e;
     3d2:	c3 01       	movw	r24, r6
     3d4:	b2 01       	movw	r22, r4
     3d6:	1c d4       	rcall	.+2104   	; 0xc10 <__mulsi3>
	integral = integral >> N_CTRL;
	shared_ptr->integral = shared_ptr->integral + integral;
     3d8:	df 01       	movw	r26, r30
     3da:	ac 56       	subi	r26, 0x6C	; 108
     3dc:	bf 4f       	sbci	r27, 0xFF	; 255
	else{
		Ki = 60;
	}
	
	long integral = Ki*e;
	integral = integral >> N_CTRL;
     3de:	4b 01       	movw	r8, r22
     3e0:	5c 01       	movw	r10, r24
     3e2:	68 94       	set
     3e4:	16 f8       	bld	r1, 6
     3e6:	b5 94       	asr	r11
     3e8:	a7 94       	ror	r10
     3ea:	97 94       	ror	r9
     3ec:	87 94       	ror	r8
     3ee:	16 94       	lsr	r1
     3f0:	d1 f7       	brne	.-12     	; 0x3e6 <control+0xc0>
	shared_ptr->integral = shared_ptr->integral + integral;
     3f2:	6b 01       	movw	r12, r22
     3f4:	7c 01       	movw	r14, r24
     3f6:	ff 0c       	add	r15, r15
     3f8:	cc 08       	sbc	r12, r12
     3fa:	dc 2c       	mov	r13, r12
     3fc:	76 01       	movw	r14, r12
     3fe:	28 2d       	mov	r18, r8
     400:	39 2d       	mov	r19, r9
     402:	4a 2d       	mov	r20, r10
     404:	5b 2d       	mov	r21, r11
     406:	6c 2d       	mov	r22, r12
     408:	7c 2d       	mov	r23, r12
     40a:	8c 2d       	mov	r24, r12
     40c:	9c 2d       	mov	r25, r12
     40e:	ac 90       	ld	r10, X
     410:	11 96       	adiw	r26, 0x01	; 1
     412:	bc 90       	ld	r11, X
     414:	11 97       	sbiw	r26, 0x01	; 1
     416:	12 96       	adiw	r26, 0x02	; 2
     418:	cc 90       	ld	r12, X
     41a:	12 97       	sbiw	r26, 0x02	; 2
     41c:	13 96       	adiw	r26, 0x03	; 3
     41e:	dc 90       	ld	r13, X
     420:	13 97       	sbiw	r26, 0x03	; 3
     422:	14 96       	adiw	r26, 0x04	; 4
     424:	ec 90       	ld	r14, X
     426:	14 97       	sbiw	r26, 0x04	; 4
     428:	15 96       	adiw	r26, 0x05	; 5
     42a:	fc 90       	ld	r15, X
     42c:	15 97       	sbiw	r26, 0x05	; 5
     42e:	16 96       	adiw	r26, 0x06	; 6
     430:	0c 91       	ld	r16, X
     432:	16 97       	sbiw	r26, 0x06	; 6
     434:	17 96       	adiw	r26, 0x07	; 7
     436:	1c 91       	ld	r17, X
     438:	17 97       	sbiw	r26, 0x07	; 7
     43a:	d9 d4       	rcall	.+2482   	; 0xdee <__adddi3>
     43c:	a2 2e       	mov	r10, r18
     43e:	b3 2e       	mov	r11, r19
     440:	24 2e       	mov	r2, r20
     442:	35 2e       	mov	r3, r21
     444:	d6 2f       	mov	r29, r22
     446:	87 2e       	mov	r8, r23
     448:	98 2e       	mov	r9, r24
     44a:	c9 2f       	mov	r28, r25
     44c:	2c 93       	st	X, r18
     44e:	11 96       	adiw	r26, 0x01	; 1
     450:	3c 93       	st	X, r19
     452:	11 97       	sbiw	r26, 0x01	; 1
     454:	12 96       	adiw	r26, 0x02	; 2
     456:	4c 93       	st	X, r20
     458:	12 97       	sbiw	r26, 0x02	; 2
     45a:	13 96       	adiw	r26, 0x03	; 3
     45c:	5c 93       	st	X, r21
     45e:	13 97       	sbiw	r26, 0x03	; 3
     460:	14 96       	adiw	r26, 0x04	; 4
     462:	6c 93       	st	X, r22
     464:	14 97       	sbiw	r26, 0x04	; 4
     466:	15 96       	adiw	r26, 0x05	; 5
     468:	7c 93       	st	X, r23
     46a:	15 97       	sbiw	r26, 0x05	; 5
     46c:	16 96       	adiw	r26, 0x06	; 6
     46e:	8c 93       	st	X, r24
     470:	16 97       	sbiw	r26, 0x06	; 6
     472:	17 96       	adiw	r26, 0x07	; 7
     474:	9c 93       	st	X, r25
	
	long long pwm = (long long)e * Kp + shared_ptr->integral;
     476:	73 01       	movw	r14, r6
     478:	62 01       	movw	r12, r4
     47a:	ff 0c       	add	r15, r15
     47c:	cc 08       	sbc	r12, r12
     47e:	dc 2c       	mov	r13, r12
     480:	76 01       	movw	r14, r12
     482:	24 2d       	mov	r18, r4
     484:	35 2d       	mov	r19, r5
     486:	46 2d       	mov	r20, r6
     488:	57 2d       	mov	r21, r7
     48a:	6c 2d       	mov	r22, r12
     48c:	7c 2d       	mov	r23, r12
     48e:	8c 2d       	mov	r24, r12
     490:	9c 2d       	mov	r25, r12
     492:	08 e0       	ldi	r16, 0x08	; 8
     494:	7f d4       	rcall	.+2302   	; 0xd94 <__ashldi3>
     496:	b2 2f       	mov	r27, r18
     498:	a3 2f       	mov	r26, r19
     49a:	c4 2e       	mov	r12, r20
     49c:	d5 2e       	mov	r13, r21
     49e:	e6 2e       	mov	r14, r22
     4a0:	f7 2e       	mov	r15, r23
     4a2:	08 2f       	mov	r16, r24
     4a4:	19 2f       	mov	r17, r25
     4a6:	2a 2d       	mov	r18, r10
     4a8:	3b 2d       	mov	r19, r11
     4aa:	42 2d       	mov	r20, r2
     4ac:	53 2d       	mov	r21, r3
     4ae:	6d 2f       	mov	r22, r29
     4b0:	78 2d       	mov	r23, r8
     4b2:	89 2d       	mov	r24, r9
     4b4:	9c 2f       	mov	r25, r28
     4b6:	ab 2e       	mov	r10, r27
     4b8:	ba 2e       	mov	r11, r26
     4ba:	99 d4       	rcall	.+2354   	; 0xdee <__adddi3>
	pwm = pwm >> N_CTRL;
     4bc:	07 e0       	ldi	r16, 0x07	; 7
     4be:	79 d4       	rcall	.+2290   	; 0xdb2 <__ashrdi3>
	
	
	
	pwm = pwm >> N_CTRL;	// Convert to regular number
     4c0:	78 d4       	rcall	.+2288   	; 0xdb2 <__ashrdi3>
     4c2:	c2 2f       	mov	r28, r18
     4c4:	a3 2f       	mov	r26, r19
     4c6:	a4 2e       	mov	r10, r20
     4c8:	b5 2e       	mov	r11, r21
     4ca:	c6 2e       	mov	r12, r22
     4cc:	d7 2e       	mov	r13, r23
     4ce:	e8 2e       	mov	r14, r24
     4d0:	f9 2e       	mov	r15, r25
     4d2:	2f 3f       	cpi	r18, 0xFF	; 255
     4d4:	31 05       	cpc	r19, r1
     4d6:	41 05       	cpc	r20, r1
     4d8:	51 05       	cpc	r21, r1
     4da:	61 05       	cpc	r22, r1
     4dc:	71 05       	cpc	r23, r1
     4de:	81 05       	cpc	r24, r1
     4e0:	91 05       	cpc	r25, r1
     4e2:	49 f0       	breq	.+18     	; 0x4f6 <control+0x1d0>
     4e4:	44 f0       	brlt	.+16     	; 0x4f6 <control+0x1d0>
     4e6:	cf ef       	ldi	r28, 0xFF	; 255
     4e8:	a0 e0       	ldi	r26, 0x00	; 0
     4ea:	a1 2c       	mov	r10, r1
     4ec:	b1 2c       	mov	r11, r1
     4ee:	c1 2c       	mov	r12, r1
     4f0:	d1 2c       	mov	r13, r1
     4f2:	e1 2c       	mov	r14, r1
     4f4:	f1 2c       	mov	r15, r1
     4f6:	bc 2f       	mov	r27, r28
     4f8:	da 2f       	mov	r29, r26
     4fa:	2c 2f       	mov	r18, r28
     4fc:	3a 2f       	mov	r19, r26
     4fe:	4a 2d       	mov	r20, r10
     500:	5b 2d       	mov	r21, r11
     502:	6c 2d       	mov	r22, r12
     504:	7d 2d       	mov	r23, r13
     506:	8e 2d       	mov	r24, r14
     508:	9f 2d       	mov	r25, r15
     50a:	a0 e0       	ldi	r26, 0x00	; 0
     50c:	79 d4       	rcall	.+2290   	; 0xe00 <__cmpdi2_s8>
     50e:	14 f4       	brge	.+4      	; 0x514 <__stack+0x15>
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	d0 e0       	ldi	r29, 0x00	; 0
		pwm = 0;		
	}
	else if(pwm > 255){
		pwm = 255;
	}
	shared_ptr->speed_actual = (int)pwm;
     514:	b2 83       	std	Z+2, r27	; 0x02
     516:	d3 83       	std	Z+3, r29	; 0x03
	OCR0A = pwm;
     518:	b7 bd       	out	0x27, r27	; 39
	OCR0B = pwm;
     51a:	b8 bd       	out	0x28, r27	; 40
	
}
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	ff 90       	pop	r15
     526:	ef 90       	pop	r14
     528:	df 90       	pop	r13
     52a:	cf 90       	pop	r12
     52c:	bf 90       	pop	r11
     52e:	af 90       	pop	r10
     530:	9f 90       	pop	r9
     532:	8f 90       	pop	r8
     534:	7f 90       	pop	r7
     536:	6f 90       	pop	r6
     538:	5f 90       	pop	r5
     53a:	4f 90       	pop	r4
     53c:	3f 90       	pop	r3
     53e:	2f 90       	pop	r2
     540:	08 95       	ret

00000542 <__vector_4>:

ISR(PCINT1_vect){
     542:	1f 92       	push	r1
     544:	0f 92       	push	r0
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	0f 92       	push	r0
     54a:	11 24       	eor	r1, r1
     54c:	2f 93       	push	r18
     54e:	3f 93       	push	r19
     550:	4f 93       	push	r20
     552:	5f 93       	push	r21
     554:	8f 93       	push	r24
     556:	9f 93       	push	r25
	cli();
     558:	f8 94       	cli
	
	clk_curr = TCNT1;
     55a:	80 91 84 00 	lds	r24, 0x0084
     55e:	90 91 85 00 	lds	r25, 0x0085
     562:	90 93 2b 01 	sts	0x012B, r25
     566:	80 93 2a 01 	sts	0x012A, r24
extern unsigned short clk_prev;
extern unsigned short clk_elapsed;

static void calc_clk_elapsed(){
	
	if(clk_curr < clk_prev){
     56a:	20 91 22 01 	lds	r18, 0x0122
     56e:	30 91 23 01 	lds	r19, 0x0123
     572:	82 17       	cp	r24, r18
     574:	93 07       	cpc	r25, r19
     576:	48 f4       	brcc	.+18     	; 0x58a <__vector_4+0x48>
		unsigned short temp = 0xFFFF;
		temp = temp - clk_prev;
     578:	20 95       	com	r18
     57a:	30 95       	com	r19
		temp = temp + clk_curr;
     57c:	28 0f       	add	r18, r24
     57e:	39 1f       	adc	r19, r25
		clk_elapsed = temp;
     580:	30 93 2e 01 	sts	0x012E, r19
     584:	20 93 2d 01 	sts	0x012D, r18
     588:	07 c0       	rjmp	.+14     	; 0x598 <__vector_4+0x56>
	}
	else{
		clk_elapsed = clk_curr - clk_prev;
     58a:	ac 01       	movw	r20, r24
     58c:	42 1b       	sub	r20, r18
     58e:	53 0b       	sbc	r21, r19
     590:	50 93 2e 01 	sts	0x012E, r21
     594:	40 93 2d 01 	sts	0x012D, r20
		
	}
	clk_prev = clk_curr;
     598:	90 93 23 01 	sts	0x0123, r25
     59c:	80 93 22 01 	sts	0x0122, r24
ISR(PCINT1_vect){
	cli();
	
	clk_curr = TCNT1;
	calc_clk_elapsed();
	newMeasurement = true;
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	80 93 2c 01 	sts	0x012C, r24
	
	sei();
     5a6:	78 94       	sei
     5a8:	9f 91       	pop	r25
     5aa:	8f 91       	pop	r24
     5ac:	5f 91       	pop	r21
     5ae:	4f 91       	pop	r20
     5b0:	3f 91       	pop	r19
     5b2:	2f 91       	pop	r18
     5b4:	0f 90       	pop	r0
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	0f 90       	pop	r0
     5ba:	1f 90       	pop	r1
     5bc:	18 95       	reti

000005be <USART_transmit>:
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with " "
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <USART_transmit+0x6>
     5c4:	00 d0       	rcall	.+0      	; 0x5c6 <USART_transmit+0x8>
     5c6:	00 d0       	rcall	.+0      	; 0x5c8 <USART_transmit+0xa>
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
	char buf[6];
	
	strcpy(buf,"%%%%%");
     5cc:	26 e0       	ldi	r18, 0x06	; 6
     5ce:	e0 e0       	ldi	r30, 0x00	; 0
     5d0:	f1 e0       	ldi	r31, 0x01	; 1
     5d2:	de 01       	movw	r26, r28
     5d4:	11 96       	adiw	r26, 0x01	; 1
     5d6:	01 90       	ld	r0, Z+
     5d8:	0d 92       	st	X+, r0
     5da:	2a 95       	dec	r18
     5dc:	e1 f7       	brne	.-8      	; 0x5d6 <USART_transmit+0x18>
	strncpy(buf, data, 5);
     5de:	45 e0       	ldi	r20, 0x05	; 5
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	bc 01       	movw	r22, r24
     5e4:	ce 01       	movw	r24, r28
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	34 d4       	rcall	.+2152   	; 0xe52 <strncpy>
     5ea:	be 01       	movw	r22, r28
     5ec:	6f 5f       	subi	r22, 0xFF	; 255
     5ee:	7f 4f       	sbci	r23, 0xFF	; 255
 * 	Transmits 5 characters over the USART.
 * 	If number of submitted chars < 5, the empty spots is padded with " "
 * 	*data: pointer to chars to be transmitted
 * 	See details in datasheet pg. 190
*/
void USART_transmit(char *data){
     5f0:	9e 01       	movw	r18, r28
     5f2:	2a 5f       	subi	r18, 0xFA	; 250
     5f4:	3f 4f       	sbci	r19, 0xFF	; 255
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
     5f6:	e0 ec       	ldi	r30, 0xC0	; 192
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = buf[i];
     5fa:	86 ec       	ldi	r24, 0xC6	; 198
     5fc:	90 e0       	ldi	r25, 0x00	; 0
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
     5fe:	40 81       	ld	r20, Z
     600:	45 ff       	sbrs	r20, 5
     602:	fd cf       	rjmp	.-6      	; 0x5fe <USART_transmit+0x40>
		UDR0 = buf[i];
     604:	db 01       	movw	r26, r22
     606:	4d 91       	ld	r20, X+
     608:	bd 01       	movw	r22, r26
     60a:	dc 01       	movw	r26, r24
     60c:	4c 93       	st	X, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     60e:	a1 ee       	ldi	r26, 0xE1	; 225
     610:	b4 e0       	ldi	r27, 0x04	; 4
     612:	11 97       	sbiw	r26, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <USART_transmit+0x54>
     616:	00 c0       	rjmp	.+0      	; 0x618 <USART_transmit+0x5a>
     618:	00 00       	nop
	char buf[6];
	
	strcpy(buf,"%%%%%");
	strncpy(buf, data, 5);

	for(i = 0; i < 5; i++){
     61a:	62 17       	cp	r22, r18
     61c:	73 07       	cpc	r23, r19
     61e:	79 f7       	brne	.-34     	; 0x5fe <USART_transmit+0x40>
		// Wait for empty transmit buffer
		while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = buf[i];
		_delay_ms(5);
	}
}
     620:	26 96       	adiw	r28, 0x06	; 6
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <__vector_18>:
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
     632:	1f 92       	push	r1
     634:	0f 92       	push	r0
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	0f 92       	push	r0
     63a:	11 24       	eor	r1, r1
     63c:	2f 93       	push	r18
     63e:	8f 93       	push	r24
     640:	9f 93       	push	r25
     642:	af 93       	push	r26
     644:	bf 93       	push	r27
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	ef 93       	push	r30
     64c:	ff 93       	push	r31
	cli();
     64e:	f8 94       	cli
	PORTC &= ~(1 << PC2);
     650:	42 98       	cbi	0x08, 2	; 8
	PORTC |= (1 << PC1);
     652:	41 9a       	sbi	0x08, 1	; 8
     654:	a4 e2       	ldi	r26, 0x24	; 36
     656:	b1 e0       	ldi	r27, 0x01	; 1
 * 	Interrupt service routine for the USART reciever.
 *	Listens on the RX pin for 5 bytes, and stores them in
 *	order in the global variable recieved_bytes.
 *	Global bool newCommand flags that a new message has been recieved.
*/
ISR(USART_RX_vect){
     658:	89 e2       	ldi	r24, 0x29	; 41
     65a:	91 e0       	ldi	r25, 0x01	; 1
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
     65c:	e0 ec       	ldi	r30, 0xC0	; 192
     65e:	f0 e0       	ldi	r31, 0x00	; 0
		recieved_bytes[i] = UDR0;
     660:	c6 ec       	ldi	r28, 0xC6	; 198
     662:	d0 e0       	ldi	r29, 0x00	; 0
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
		while( !(UCSR0A & (1 << RXC0)) );
     664:	20 81       	ld	r18, Z
     666:	22 23       	and	r18, r18
     668:	ec f7       	brge	.-6      	; 0x664 <__vector_18+0x32>
		recieved_bytes[i] = UDR0;
     66a:	28 81       	ld	r18, Y
     66c:	2d 93       	st	X+, r18
*/
ISR(USART_RX_vect){
	cli();
	PORTC &= ~(1 << PC2);
	PORTC |= (1 << PC1);
	for(int i = 0; i < 5; i++){
     66e:	a8 17       	cp	r26, r24
     670:	b9 07       	cpc	r27, r25
     672:	c1 f7       	brne	.-16     	; 0x664 <__vector_18+0x32>
		while( !(UCSR0A & (1 << RXC0)) );
		recieved_bytes[i] = UDR0;
	}
	PORTC &= ~(1 << PC1);
     674:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (1 << PC2);
     676:	42 9a       	sbi	0x08, 2	; 8
	newCommand = true;
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	80 93 29 01 	sts	0x0129, r24
	sei();
     67e:	78 94       	sei
}
     680:	ff 91       	pop	r31
     682:	ef 91       	pop	r30
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	bf 91       	pop	r27
     68a:	af 91       	pop	r26
     68c:	9f 91       	pop	r25
     68e:	8f 91       	pop	r24
     690:	2f 91       	pop	r18
     692:	0f 90       	pop	r0
     694:	0f be       	out	0x3f, r0	; 63
     696:	0f 90       	pop	r0
     698:	1f 90       	pop	r1
     69a:	18 95       	reti

0000069c <setup_registers>:
 *	PC1, PD5-PD6
 *	See details in datasheet pg. 99-100
*/
static void setup_DDR(){

	DDRB |= 0x00;
     69c:	84 b1       	in	r24, 0x04	; 4
     69e:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC2) | (1 << PC1) | (1 << PC0);
     6a0:	87 b1       	in	r24, 0x07	; 7
     6a2:	87 60       	ori	r24, 0x07	; 7
     6a4:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PD6) | (1 << PD5) | (1 << PD1);
     6a6:	8a b1       	in	r24, 0x0a	; 10
     6a8:	82 66       	ori	r24, 0x62	; 98
     6aa:	8a b9       	out	0x0a, r24	; 10
 *	PWM-mode: fast PWM, inverted, no prescaling.
 *	See details in datasheet pg. 113-117
*/
static void setup_PWM(){

	TCCR0A = (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0) | (1 << WGM01) | (1 << WGM00);
     6ac:	83 ef       	ldi	r24, 0xF3	; 243
     6ae:	84 bd       	out	0x24, r24	; 36
	TCCR0B =  (0 << CS02) | (0 << CS01) | (1 << CS00);
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	85 bd       	out	0x25, r24	; 37
 * 	Baud rate according to #define in shared.h
 * 	See details in datasheet pg. 201-205
*/
static void setup_USART(){

	DDRD |= (1 << PD1);
     6b4:	51 9a       	sbi	0x0a, 1	; 10
	unsigned int ubrr = (((F_CPU / (BAUD * 16UL))) - 1 );

	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
     6b6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
     6ba:	89 e1       	ldi	r24, 0x19	; 25
     6bc:	80 93 c4 00 	sts	0x00C4, r24

	// Enable reciever for interrupt and transmitter
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0);
     6c0:	88 e9       	ldi	r24, 0x98	; 152
     6c2:	80 93 c1 00 	sts	0x00C1, r24

	// Set frame format: 8 data, 2 stop, 0 parity
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     6c6:	86 e0       	ldi	r24, 0x06	; 6
     6c8:	80 93 c2 00 	sts	0x00C2, r24
 * 	See details in datasheet pg. 81-82
*/
static void setup_interrupts(){

	// Enables possibility of interrupts on pins 14-8
	PCICR = (1 << PCIE1);
     6cc:	82 e0       	ldi	r24, 0x02	; 2
     6ce:	80 93 68 00 	sts	0x0068, r24
	// Enables interrupts on pin PC4-PC5
	PCMSK1 = (1 << PCINT13) | (1 << PCINT12);
     6d2:	80 e3       	ldi	r24, 0x30	; 48
     6d4:	80 93 6c 00 	sts	0x006C, r24
/*	
 *	Sets up clk/8 prescaling on 16-bit timer OC1
 *	See details in datasheet pg. 141-147
*/	
static void setup_speed_clock(){
	TCCR1B |= (1 << CS11);
     6d8:	e1 e8       	ldi	r30, 0x81	; 129
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	80 81       	ld	r24, Z
     6de:	82 60       	ori	r24, 0x02	; 2
     6e0:	80 83       	st	Z, r24
     6e2:	08 95       	ret

000006e4 <main>:
unsigned short clk_curr;
char recieved_bytes[5];
unsigned short clk_prev;
unsigned short clk_elapsed;

int main(void){
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	ce 59       	subi	r28, 0x9E	; 158
     6ee:	d1 09       	sbc	r29, r1
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
	Shared_Data shared_data;
	Shared_Data* shared_ptr = &shared_data;
	init_shared_data(shared_ptr);
     6fa:	ce 01       	movw	r24, r28
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	c0 dc       	rcall	.-1664   	; 0x80 <init_shared_data>
	
	newCommand = false;
     700:	10 92 29 01 	sts	0x0129, r1
	newMeasurement = false;
     704:	10 92 2c 01 	sts	0x012C, r1
	clk_curr = 0;
     708:	10 92 2b 01 	sts	0x012B, r1
     70c:	10 92 2a 01 	sts	0x012A, r1
	clk_prev = 0;
     710:	10 92 23 01 	sts	0x0123, r1
     714:	10 92 22 01 	sts	0x0122, r1
	clk_elapsed = 0;
     718:	10 92 2e 01 	sts	0x012E, r1
     71c:	10 92 2d 01 	sts	0x012D, r1
	//OCR0A = 150;
	//OCR0B = 150;
	shared_ptr->speed_set = 30;
     720:	8e e1       	ldi	r24, 0x1E	; 30
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	9a 83       	std	Y+2, r25	; 0x02
     726:	89 83       	std	Y+1, r24	; 0x01
	
	setup_registers();
     728:	b9 df       	rcall	.-142    	; 0x69c <setup_registers>
	sei();
     72a:	78 94       	sei
			transmit_8(shared_ptr);
			transmit_0(shared_ptr);
			i = 0;
		}*/
		if(newCommand){
			switch(*recieved_bytes){
     72c:	04 e2       	ldi	r16, 0x24	; 36
     72e:	11 e0       	ldi	r17, 0x01	; 1
		if(i == 10000){
			transmit_8(shared_ptr);
			transmit_0(shared_ptr);
			i = 0;
		}*/
		if(newCommand){
     730:	80 91 29 01 	lds	r24, 0x0129
     734:	88 23       	and	r24, r24
     736:	b1 f1       	breq	.+108    	; 0x7a4 <main+0xc0>
			switch(*recieved_bytes){
     738:	f8 01       	movw	r30, r16
     73a:	80 81       	ld	r24, Z
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	fc 01       	movw	r30, r24
     740:	f0 97       	sbiw	r30, 0x30	; 48
     742:	ea 30       	cpi	r30, 0x0A	; 10
     744:	f1 05       	cpc	r31, r1
     746:	58 f5       	brcc	.+86     	; 0x79e <main+0xba>
     748:	e6 5e       	subi	r30, 0xE6	; 230
     74a:	ff 4f       	sbci	r31, 0xFF	; 255
     74c:	09 94       	ijmp
				case '0':
					transmit_0(shared_ptr);
     74e:	ce 01       	movw	r24, r28
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	38 d0       	rcall	.+112    	; 0x7c4 <transmit_0>
					break;
     754:	25 c0       	rjmp	.+74     	; 0x7a0 <main+0xbc>
				case '1':
					transmit_1(shared_ptr);
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	4e d0       	rcall	.+156    	; 0x7f8 <transmit_1>
					break;
     75c:	21 c0       	rjmp	.+66     	; 0x7a0 <main+0xbc>
				case '2':
					transmit_2(shared_ptr);
     75e:	ce 01       	movw	r24, r28
     760:	01 96       	adiw	r24, 0x01	; 1
     762:	8d d0       	rcall	.+282    	; 0x87e <transmit_2>
					break;
     764:	1d c0       	rjmp	.+58     	; 0x7a0 <main+0xbc>
				case '3':
					transmit_3(shared_ptr);
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	ba d0       	rcall	.+372    	; 0x8e0 <transmit_3>
					break;
     76c:	19 c0       	rjmp	.+50     	; 0x7a0 <main+0xbc>
				case '4':
					transmit_4(shared_ptr);
     76e:	ce 01       	movw	r24, r28
     770:	01 96       	adiw	r24, 0x01	; 1
     772:	e3 d0       	rcall	.+454    	; 0x93a <transmit_4>
					break;
     774:	15 c0       	rjmp	.+42     	; 0x7a0 <main+0xbc>
				case '5':
					transmit_5(shared_ptr);
     776:	ce 01       	movw	r24, r28
     778:	01 96       	adiw	r24, 0x01	; 1
     77a:	14 d1       	rcall	.+552    	; 0x9a4 <transmit_5>
					break;
     77c:	11 c0       	rjmp	.+34     	; 0x7a0 <main+0xbc>
				case '6':
					transmit_6(shared_ptr);
     77e:	ce 01       	movw	r24, r28
     780:	01 96       	adiw	r24, 0x01	; 1
     782:	46 d1       	rcall	.+652    	; 0xa10 <transmit_6>
					break;
     784:	0d c0       	rjmp	.+26     	; 0x7a0 <main+0xbc>
				case '7':
					transmit_7(shared_ptr);
     786:	ce 01       	movw	r24, r28
     788:	01 96       	adiw	r24, 0x01	; 1
     78a:	7d d1       	rcall	.+762    	; 0xa86 <transmit_7>
					break;
     78c:	09 c0       	rjmp	.+18     	; 0x7a0 <main+0xbc>
				case '8':
					transmit_8(shared_ptr);
     78e:	ce 01       	movw	r24, r28
     790:	01 96       	adiw	r24, 0x01	; 1
     792:	b0 d1       	rcall	.+864    	; 0xaf4 <transmit_8>
					break;
     794:	05 c0       	rjmp	.+10     	; 0x7a0 <main+0xbc>
				case '9':
					transmit_9(shared_ptr);
     796:	ce 01       	movw	r24, r28
     798:	01 96       	adiw	r24, 0x01	; 1
     79a:	e5 d1       	rcall	.+970    	; 0xb66 <transmit_9>
					break;
     79c:	01 c0       	rjmp	.+2      	; 0x7a0 <main+0xbc>
				default:
					transmit_empty();
     79e:	1c d2       	rcall	.+1080   	; 0xbd8 <transmit_empty>
			}
			newCommand = false;
     7a0:	10 92 29 01 	sts	0x0129, r1
		}
		if(newMeasurement){
     7a4:	80 91 2c 01 	lds	r24, 0x012C
     7a8:	88 23       	and	r24, r24
     7aa:	41 f0       	breq	.+16     	; 0x7bc <main+0xd8>
			calc_latest_rpm(shared_ptr);
     7ac:	ce 01       	movw	r24, r28
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	a5 dc       	rcall	.-1718   	; 0xfc <calc_latest_rpm>
			calc_avg_rpm(shared_ptr);
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	6c dd       	rcall	.-1320   	; 0x290 <calc_avg_rpm>
			newMeasurement = false;
     7b8:	10 92 2c 01 	sts	0x012C, r1
		}
		control(shared_ptr);
     7bc:	ce 01       	movw	r24, r28
     7be:	01 96       	adiw	r24, 0x01	; 1
     7c0:	b2 dd       	rcall	.-1180   	; 0x326 <control>
		
	}
     7c2:	b6 cf       	rjmp	.-148    	; 0x730 <main+0x4c>

000007c4 <transmit_0>:
extern bool newMeasurement;
extern unsigned short clk_curr;
extern char recieved_bytes[5];
extern unsigned short clk_elapsed;

void transmit_0(Shared_Data* shared_ptr){
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	00 d0       	rcall	.+0      	; 0x7ca <transmit_0+0x6>
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <transmit_0+0x8>
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <transmit_0+0xa>
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "\n", 5);
     7d2:	45 e0       	ldi	r20, 0x05	; 5
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	66 e0       	ldi	r22, 0x06	; 6
     7d8:	71 e0       	ldi	r23, 0x01	; 1
     7da:	ce 01       	movw	r24, r28
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	39 d3       	rcall	.+1650   	; 0xe52 <strncpy>
	USART_transmit(temp);
     7e0:	ce 01       	movw	r24, r28
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	ec de       	rcall	.-552    	; 0x5be <USART_transmit>
}
     7e6:	26 96       	adiw	r28, 0x06	; 6
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	f8 94       	cli
     7ec:	de bf       	out	0x3e, r29	; 62
     7ee:	0f be       	out	0x3f, r0	; 63
     7f0:	cd bf       	out	0x3d, r28	; 61
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	08 95       	ret

000007f8 <transmit_1>:

void transmit_1(Shared_Data* shared_ptr){
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	00 d0       	rcall	.+0      	; 0x802 <transmit_1+0xa>
     802:	00 d0       	rcall	.+0      	; 0x804 <transmit_1+0xc>
     804:	00 d0       	rcall	.+0      	; 0x806 <transmit_1+0xe>
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     80a:	25 e0       	ldi	r18, 0x05	; 5
     80c:	e8 e0       	ldi	r30, 0x08	; 8
     80e:	f1 e0       	ldi	r31, 0x01	; 1
     810:	8e 01       	movw	r16, r28
     812:	0f 5f       	subi	r16, 0xFF	; 255
     814:	1f 4f       	sbci	r17, 0xFF	; 255
     816:	d8 01       	movw	r26, r16
     818:	01 90       	ld	r0, Z+
     81a:	0d 92       	st	X+, r0
     81c:	2a 95       	dec	r18
     81e:	e1 f7       	brne	.-8      	; 0x818 <transmit_1+0x20>
	snprintf(temp, 6, "%lld", shared_ptr->integral);
     820:	fc 01       	movw	r30, r24
     822:	ec 56       	subi	r30, 0x6C	; 108
     824:	ff 4f       	sbci	r31, 0xFF	; 255
     826:	87 81       	ldd	r24, Z+7	; 0x07
     828:	8f 93       	push	r24
     82a:	86 81       	ldd	r24, Z+6	; 0x06
     82c:	8f 93       	push	r24
     82e:	85 81       	ldd	r24, Z+5	; 0x05
     830:	8f 93       	push	r24
     832:	84 81       	ldd	r24, Z+4	; 0x04
     834:	8f 93       	push	r24
     836:	83 81       	ldd	r24, Z+3	; 0x03
     838:	8f 93       	push	r24
     83a:	82 81       	ldd	r24, Z+2	; 0x02
     83c:	8f 93       	push	r24
     83e:	81 81       	ldd	r24, Z+1	; 0x01
     840:	8f 93       	push	r24
     842:	80 81       	ld	r24, Z
     844:	8f 93       	push	r24
     846:	8e e0       	ldi	r24, 0x0E	; 14
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	9f 93       	push	r25
     84c:	8f 93       	push	r24
     84e:	1f 92       	push	r1
     850:	86 e0       	ldi	r24, 0x06	; 6
     852:	8f 93       	push	r24
     854:	1f 93       	push	r17
     856:	0f 93       	push	r16
     858:	13 d3       	rcall	.+1574   	; 0xe80 <snprintf>
	USART_transmit(temp);
     85a:	c8 01       	movw	r24, r16
     85c:	b0 de       	rcall	.-672    	; 0x5be <USART_transmit>
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
}
     868:	26 96       	adiw	r28, 0x06	; 6
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	08 95       	ret

0000087e <transmit_2>:

/* Sets a new set value for the speed. Range: 0-120. Transmits an empty message. */
void transmit_2(Shared_Data* shared_ptr){
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
     88a:	2a 97       	sbiw	r28, 0x0a	; 10
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	8c 01       	movw	r16, r24
	char temp[6];
	char sub_str[4];
	int res;
	strncpy(temp, "     ", 5);
     898:	85 e0       	ldi	r24, 0x05	; 5
     89a:	e8 e0       	ldi	r30, 0x08	; 8
     89c:	f1 e0       	ldi	r31, 0x01	; 1
     89e:	de 01       	movw	r26, r28
     8a0:	11 96       	adiw	r26, 0x01	; 1
     8a2:	01 90       	ld	r0, Z+
     8a4:	0d 92       	st	X+, r0
     8a6:	8a 95       	dec	r24
     8a8:	e1 f7       	brne	.-8      	; 0x8a2 <transmit_2+0x24>
	strncpy(sub_str, recieved_bytes + 1, 3);
     8aa:	43 e0       	ldi	r20, 0x03	; 3
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	65 e2       	ldi	r22, 0x25	; 37
     8b0:	71 e0       	ldi	r23, 0x01	; 1
     8b2:	ce 01       	movw	r24, r28
     8b4:	07 96       	adiw	r24, 0x07	; 7
     8b6:	cd d2       	rcall	.+1434   	; 0xe52 <strncpy>
		
	res = atoi(sub_str);
     8b8:	ce 01       	movw	r24, r28
     8ba:	07 96       	adiw	r24, 0x07	; 7
     8bc:	ad d2       	rcall	.+1370   	; 0xe18 <atoi>
	shared_ptr->speed_set = res;
     8be:	f8 01       	movw	r30, r16
     8c0:	91 83       	std	Z+1, r25	; 0x01
     8c2:	80 83       	st	Z, r24
	//OCR0A = res;
	//OCR0B = res;
	USART_transmit(temp);
     8c4:	ce 01       	movw	r24, r28
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	7a de       	rcall	.-780    	; 0x5be <USART_transmit>

}
     8ca:	2a 96       	adiw	r28, 0x0a	; 10
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	f8 94       	cli
     8d0:	de bf       	out	0x3e, r29	; 62
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	cd bf       	out	0x3d, r28	; 61
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	08 95       	ret

000008e0 <transmit_3>:

/* Transmits the set speed. */
void transmit_3(Shared_Data* shared_ptr){
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	00 d0       	rcall	.+0      	; 0x8ea <transmit_3+0xa>
     8ea:	00 d0       	rcall	.+0      	; 0x8ec <transmit_3+0xc>
     8ec:	00 d0       	rcall	.+0      	; 0x8ee <transmit_3+0xe>
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	
	snprintf(temp, 6, "%hd",  shared_ptr->speed_set);
     8f2:	fc 01       	movw	r30, r24
     8f4:	21 81       	ldd	r18, Z+1	; 0x01
     8f6:	2f 93       	push	r18
     8f8:	80 81       	ld	r24, Z
     8fa:	8f 93       	push	r24
     8fc:	83 e1       	ldi	r24, 0x13	; 19
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	9f 93       	push	r25
     902:	8f 93       	push	r24
     904:	1f 92       	push	r1
     906:	86 e0       	ldi	r24, 0x06	; 6
     908:	8f 93       	push	r24
     90a:	8e 01       	movw	r16, r28
     90c:	0f 5f       	subi	r16, 0xFF	; 255
     90e:	1f 4f       	sbci	r17, 0xFF	; 255
     910:	1f 93       	push	r17
     912:	0f 93       	push	r16
     914:	b5 d2       	rcall	.+1386   	; 0xe80 <snprintf>
	USART_transmit(temp);
     916:	c8 01       	movw	r24, r16
     918:	52 de       	rcall	.-860    	; 0x5be <USART_transmit>
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	de bf       	out	0x3e, r29	; 62
     920:	0f be       	out	0x3f, r0	; 63
     922:	cd bf       	out	0x3d, r28	; 61
}
     924:	26 96       	adiw	r28, 0x06	; 6
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	08 95       	ret

0000093a <transmit_4>:


void transmit_4(Shared_Data* shared_ptr){
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	00 d0       	rcall	.+0      	; 0x944 <transmit_4+0xa>
     944:	00 d0       	rcall	.+0      	; 0x946 <transmit_4+0xc>
     946:	00 d0       	rcall	.+0      	; 0x948 <transmit_4+0xe>
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     94c:	25 e0       	ldi	r18, 0x05	; 5
     94e:	e8 e0       	ldi	r30, 0x08	; 8
     950:	f1 e0       	ldi	r31, 0x01	; 1
     952:	8e 01       	movw	r16, r28
     954:	0f 5f       	subi	r16, 0xFF	; 255
     956:	1f 4f       	sbci	r17, 0xFF	; 255
     958:	d8 01       	movw	r26, r16
     95a:	01 90       	ld	r0, Z+
     95c:	0d 92       	st	X+, r0
     95e:	2a 95       	dec	r18
     960:	e1 f7       	brne	.-8      	; 0x95a <transmit_4+0x20>
	
	snprintf(temp, 6, "%d", shared_ptr->speed_actual);
     962:	fc 01       	movw	r30, r24
     964:	23 81       	ldd	r18, Z+3	; 0x03
     966:	2f 93       	push	r18
     968:	82 81       	ldd	r24, Z+2	; 0x02
     96a:	8f 93       	push	r24
     96c:	87 e1       	ldi	r24, 0x17	; 23
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	9f 93       	push	r25
     972:	8f 93       	push	r24
     974:	1f 92       	push	r1
     976:	86 e0       	ldi	r24, 0x06	; 6
     978:	8f 93       	push	r24
     97a:	1f 93       	push	r17
     97c:	0f 93       	push	r16
     97e:	80 d2       	rcall	.+1280   	; 0xe80 <snprintf>
	USART_transmit(temp);
     980:	c8 01       	movw	r24, r16
     982:	1d de       	rcall	.-966    	; 0x5be <USART_transmit>
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	f8 94       	cli
     988:	de bf       	out	0x3e, r29	; 62
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	cd bf       	out	0x3d, r28	; 61
}
     98e:	26 96       	adiw	r28, 0x06	; 6
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	1f 91       	pop	r17
     9a0:	0f 91       	pop	r16
     9a2:	08 95       	ret

000009a4 <transmit_5>:

void transmit_5(Shared_Data* shared_ptr){
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	00 d0       	rcall	.+0      	; 0x9ae <transmit_5+0xa>
     9ae:	00 d0       	rcall	.+0      	; 0x9b0 <transmit_5+0xc>
     9b0:	00 d0       	rcall	.+0      	; 0x9b2 <transmit_5+0xe>
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     9b6:	85 e0       	ldi	r24, 0x05	; 5
     9b8:	e8 e0       	ldi	r30, 0x08	; 8
     9ba:	f1 e0       	ldi	r31, 0x01	; 1
     9bc:	8e 01       	movw	r16, r28
     9be:	0f 5f       	subi	r16, 0xFF	; 255
     9c0:	1f 4f       	sbci	r17, 0xFF	; 255
     9c2:	d8 01       	movw	r26, r16
     9c4:	01 90       	ld	r0, Z+
     9c6:	0d 92       	st	X+, r0
     9c8:	8a 95       	dec	r24
     9ca:	e1 f7       	brne	.-8      	; 0x9c4 <transmit_5+0x20>

	snprintf(temp, 6, "%hu", clk_elapsed);
     9cc:	80 91 2e 01 	lds	r24, 0x012E
     9d0:	8f 93       	push	r24
     9d2:	80 91 2d 01 	lds	r24, 0x012D
     9d6:	8f 93       	push	r24
     9d8:	8a e1       	ldi	r24, 0x1A	; 26
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	9f 93       	push	r25
     9de:	8f 93       	push	r24
     9e0:	1f 92       	push	r1
     9e2:	86 e0       	ldi	r24, 0x06	; 6
     9e4:	8f 93       	push	r24
     9e6:	1f 93       	push	r17
     9e8:	0f 93       	push	r16
     9ea:	4a d2       	rcall	.+1172   	; 0xe80 <snprintf>
	USART_transmit(temp);
     9ec:	c8 01       	movw	r24, r16
     9ee:	e7 dd       	rcall	.-1074   	; 0x5be <USART_transmit>
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	f8 94       	cli
     9f4:	de bf       	out	0x3e, r29	; 62
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	cd bf       	out	0x3d, r28	; 61
}
     9fa:	26 96       	adiw	r28, 0x06	; 6
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	de bf       	out	0x3e, r29	; 62
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	cd bf       	out	0x3d, r28	; 61
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	08 95       	ret

00000a10 <transmit_6>:

void transmit_6(Shared_Data* shared_ptr){
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	00 d0       	rcall	.+0      	; 0xa1a <transmit_6+0xa>
     a1a:	00 d0       	rcall	.+0      	; 0xa1c <transmit_6+0xc>
     a1c:	00 d0       	rcall	.+0      	; 0xa1e <transmit_6+0xe>
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     a22:	25 e0       	ldi	r18, 0x05	; 5
     a24:	e8 e0       	ldi	r30, 0x08	; 8
     a26:	f1 e0       	ldi	r31, 0x01	; 1
     a28:	8e 01       	movw	r16, r28
     a2a:	0f 5f       	subi	r16, 0xFF	; 255
     a2c:	1f 4f       	sbci	r17, 0xFF	; 255
     a2e:	d8 01       	movw	r26, r16
     a30:	01 90       	ld	r0, Z+
     a32:	0d 92       	st	X+, r0
     a34:	2a 95       	dec	r18
     a36:	e1 f7       	brne	.-8      	; 0xa30 <transmit_6+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->delta_time);
     a38:	fc 01       	movw	r30, r24
     a3a:	e0 57       	subi	r30, 0x70	; 112
     a3c:	ff 4f       	sbci	r31, 0xFF	; 255
     a3e:	83 81       	ldd	r24, Z+3	; 0x03
     a40:	8f 93       	push	r24
     a42:	82 81       	ldd	r24, Z+2	; 0x02
     a44:	8f 93       	push	r24
     a46:	81 81       	ldd	r24, Z+1	; 0x01
     a48:	8f 93       	push	r24
     a4a:	80 81       	ld	r24, Z
     a4c:	8f 93       	push	r24
     a4e:	8e e1       	ldi	r24, 0x1E	; 30
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	9f 93       	push	r25
     a54:	8f 93       	push	r24
     a56:	1f 92       	push	r1
     a58:	86 e0       	ldi	r24, 0x06	; 6
     a5a:	8f 93       	push	r24
     a5c:	1f 93       	push	r17
     a5e:	0f 93       	push	r16
     a60:	0f d2       	rcall	.+1054   	; 0xe80 <snprintf>
	USART_transmit(temp);
     a62:	c8 01       	movw	r24, r16
     a64:	ac dd       	rcall	.-1192   	; 0x5be <USART_transmit>
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	de bf       	out	0x3e, r29	; 62
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	cd bf       	out	0x3d, r28	; 61
}
     a70:	26 96       	adiw	r28, 0x06	; 6
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	08 95       	ret

00000a86 <transmit_7>:

void transmit_7(Shared_Data* shared_ptr){
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	00 d0       	rcall	.+0      	; 0xa90 <transmit_7+0xa>
     a90:	00 d0       	rcall	.+0      	; 0xa92 <transmit_7+0xc>
     a92:	00 d0       	rcall	.+0      	; 0xa94 <transmit_7+0xe>
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     a98:	25 e0       	ldi	r18, 0x05	; 5
     a9a:	e8 e0       	ldi	r30, 0x08	; 8
     a9c:	f1 e0       	ldi	r31, 0x01	; 1
     a9e:	8e 01       	movw	r16, r28
     aa0:	0f 5f       	subi	r16, 0xFF	; 255
     aa2:	1f 4f       	sbci	r17, 0xFF	; 255
     aa4:	d8 01       	movw	r26, r16
     aa6:	01 90       	ld	r0, Z+
     aa8:	0d 92       	st	X+, r0
     aaa:	2a 95       	dec	r18
     aac:	e1 f7       	brne	.-8      	; 0xaa6 <transmit_7+0x20>
	snprintf(temp, 6, "%hd", shared_ptr->error);
     aae:	fc 01       	movw	r30, r24
     ab0:	e4 56       	subi	r30, 0x64	; 100
     ab2:	ff 4f       	sbci	r31, 0xFF	; 255
     ab4:	81 81       	ldd	r24, Z+1	; 0x01
     ab6:	8f 93       	push	r24
     ab8:	80 81       	ld	r24, Z
     aba:	8f 93       	push	r24
     abc:	83 e1       	ldi	r24, 0x13	; 19
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	9f 93       	push	r25
     ac2:	8f 93       	push	r24
     ac4:	1f 92       	push	r1
     ac6:	86 e0       	ldi	r24, 0x06	; 6
     ac8:	8f 93       	push	r24
     aca:	1f 93       	push	r17
     acc:	0f 93       	push	r16
     ace:	d8 d1       	rcall	.+944    	; 0xe80 <snprintf>
	USART_transmit(temp);
     ad0:	c8 01       	movw	r24, r16
     ad2:	75 dd       	rcall	.-1302   	; 0x5be <USART_transmit>
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
}
     ade:	26 96       	adiw	r28, 0x06	; 6
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	f8 94       	cli
     ae4:	de bf       	out	0x3e, r29	; 62
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	cd bf       	out	0x3d, r28	; 61
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	08 95       	ret

00000af4 <transmit_8>:

void transmit_8(Shared_Data* shared_ptr){
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	00 d0       	rcall	.+0      	; 0xafe <transmit_8+0xa>
     afe:	00 d0       	rcall	.+0      	; 0xb00 <transmit_8+0xc>
     b00:	00 d0       	rcall	.+0      	; 0xb02 <transmit_8+0xe>
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     b06:	25 e0       	ldi	r18, 0x05	; 5
     b08:	e8 e0       	ldi	r30, 0x08	; 8
     b0a:	f1 e0       	ldi	r31, 0x01	; 1
     b0c:	8e 01       	movw	r16, r28
     b0e:	0f 5f       	subi	r16, 0xFF	; 255
     b10:	1f 4f       	sbci	r17, 0xFF	; 255
     b12:	d8 01       	movw	r26, r16
     b14:	01 90       	ld	r0, Z+
     b16:	0d 92       	st	X+, r0
     b18:	2a 95       	dec	r18
     b1a:	e1 f7       	brne	.-8      	; 0xb14 <transmit_8+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->rpm_avg);
     b1c:	fc 01       	movw	r30, r24
     b1e:	27 85       	ldd	r18, Z+15	; 0x0f
     b20:	2f 93       	push	r18
     b22:	26 85       	ldd	r18, Z+14	; 0x0e
     b24:	2f 93       	push	r18
     b26:	25 85       	ldd	r18, Z+13	; 0x0d
     b28:	2f 93       	push	r18
     b2a:	84 85       	ldd	r24, Z+12	; 0x0c
     b2c:	8f 93       	push	r24
     b2e:	8e e1       	ldi	r24, 0x1E	; 30
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	9f 93       	push	r25
     b34:	8f 93       	push	r24
     b36:	1f 92       	push	r1
     b38:	86 e0       	ldi	r24, 0x06	; 6
     b3a:	8f 93       	push	r24
     b3c:	1f 93       	push	r17
     b3e:	0f 93       	push	r16
     b40:	9f d1       	rcall	.+830    	; 0xe80 <snprintf>
	USART_transmit(temp);
     b42:	c8 01       	movw	r24, r16
     b44:	3c dd       	rcall	.-1416   	; 0x5be <USART_transmit>
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
}
     b50:	26 96       	adiw	r28, 0x06	; 6
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	08 95       	ret

00000b66 <transmit_9>:

void transmit_9(Shared_Data* shared_ptr){
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	00 d0       	rcall	.+0      	; 0xb70 <transmit_9+0xa>
     b70:	00 d0       	rcall	.+0      	; 0xb72 <transmit_9+0xc>
     b72:	00 d0       	rcall	.+0      	; 0xb74 <transmit_9+0xe>
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     b78:	25 e0       	ldi	r18, 0x05	; 5
     b7a:	e8 e0       	ldi	r30, 0x08	; 8
     b7c:	f1 e0       	ldi	r31, 0x01	; 1
     b7e:	8e 01       	movw	r16, r28
     b80:	0f 5f       	subi	r16, 0xFF	; 255
     b82:	1f 4f       	sbci	r17, 0xFF	; 255
     b84:	d8 01       	movw	r26, r16
     b86:	01 90       	ld	r0, Z+
     b88:	0d 92       	st	X+, r0
     b8a:	2a 95       	dec	r18
     b8c:	e1 f7       	brne	.-8      	; 0xb86 <transmit_9+0x20>
	snprintf(temp, 6, "%lu", shared_ptr->curr_rpm);
     b8e:	fc 01       	movw	r30, r24
     b90:	23 85       	ldd	r18, Z+11	; 0x0b
     b92:	2f 93       	push	r18
     b94:	22 85       	ldd	r18, Z+10	; 0x0a
     b96:	2f 93       	push	r18
     b98:	21 85       	ldd	r18, Z+9	; 0x09
     b9a:	2f 93       	push	r18
     b9c:	80 85       	ldd	r24, Z+8	; 0x08
     b9e:	8f 93       	push	r24
     ba0:	8e e1       	ldi	r24, 0x1E	; 30
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	9f 93       	push	r25
     ba6:	8f 93       	push	r24
     ba8:	1f 92       	push	r1
     baa:	86 e0       	ldi	r24, 0x06	; 6
     bac:	8f 93       	push	r24
     bae:	1f 93       	push	r17
     bb0:	0f 93       	push	r16
     bb2:	66 d1       	rcall	.+716    	; 0xe80 <snprintf>
	USART_transmit(temp);
     bb4:	c8 01       	movw	r24, r16
     bb6:	03 dd       	rcall	.-1530   	; 0x5be <USART_transmit>
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
}
     bc2:	26 96       	adiw	r28, 0x06	; 6
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	f8 94       	cli
     bc8:	de bf       	out	0x3e, r29	; 62
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	cd bf       	out	0x3d, r28	; 61
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	08 95       	ret

00000bd8 <transmit_empty>:

void transmit_empty(){
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	00 d0       	rcall	.+0      	; 0xbde <transmit_empty+0x6>
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <transmit_empty+0x8>
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <transmit_empty+0xa>
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
	char temp[6];
	strncpy(temp, "     ", 5);
     be6:	85 e0       	ldi	r24, 0x05	; 5
     be8:	e8 e0       	ldi	r30, 0x08	; 8
     bea:	f1 e0       	ldi	r31, 0x01	; 1
     bec:	de 01       	movw	r26, r28
     bee:	11 96       	adiw	r26, 0x01	; 1
     bf0:	01 90       	ld	r0, Z+
     bf2:	0d 92       	st	X+, r0
     bf4:	8a 95       	dec	r24
     bf6:	e1 f7       	brne	.-8      	; 0xbf0 <transmit_empty+0x18>
	USART_transmit(temp);
     bf8:	ce 01       	movw	r24, r28
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	e0 dc       	rcall	.-1600   	; 0x5be <USART_transmit>
}
     bfe:	26 96       	adiw	r28, 0x06	; 6
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	08 95       	ret

00000c10 <__mulsi3>:
     c10:	db 01       	movw	r26, r22
     c12:	8f 93       	push	r24
     c14:	9f 93       	push	r25
     c16:	17 d0       	rcall	.+46     	; 0xc46 <__muluhisi3>
     c18:	bf 91       	pop	r27
     c1a:	af 91       	pop	r26
     c1c:	a2 9f       	mul	r26, r18
     c1e:	80 0d       	add	r24, r0
     c20:	91 1d       	adc	r25, r1
     c22:	a3 9f       	mul	r26, r19
     c24:	90 0d       	add	r25, r0
     c26:	b2 9f       	mul	r27, r18
     c28:	90 0d       	add	r25, r0
     c2a:	11 24       	eor	r1, r1
     c2c:	08 95       	ret

00000c2e <__umulhisi3>:
     c2e:	a2 9f       	mul	r26, r18
     c30:	b0 01       	movw	r22, r0
     c32:	b3 9f       	mul	r27, r19
     c34:	c0 01       	movw	r24, r0
     c36:	a3 9f       	mul	r26, r19
     c38:	01 d0       	rcall	.+2      	; 0xc3c <__umulhisi3+0xe>
     c3a:	b2 9f       	mul	r27, r18
     c3c:	70 0d       	add	r23, r0
     c3e:	81 1d       	adc	r24, r1
     c40:	11 24       	eor	r1, r1
     c42:	91 1d       	adc	r25, r1
     c44:	08 95       	ret

00000c46 <__muluhisi3>:
     c46:	f3 df       	rcall	.-26     	; 0xc2e <__umulhisi3>
     c48:	a5 9f       	mul	r26, r21
     c4a:	90 0d       	add	r25, r0
     c4c:	b4 9f       	mul	r27, r20
     c4e:	90 0d       	add	r25, r0
     c50:	a4 9f       	mul	r26, r20
     c52:	80 0d       	add	r24, r0
     c54:	91 1d       	adc	r25, r1
     c56:	11 24       	eor	r1, r1
     c58:	08 95       	ret

00000c5a <__umoddi3>:
     c5a:	68 94       	set
     c5c:	01 c0       	rjmp	.+2      	; 0xc60 <__udivdi3_umoddi3>

00000c5e <__udivdi3>:
     c5e:	e8 94       	clt

00000c60 <__udivdi3_umoddi3>:
     c60:	8f 92       	push	r8
     c62:	9f 92       	push	r9
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	56 d0       	rcall	.+172    	; 0xd16 <__udivmod64>
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	9f 90       	pop	r9
     c70:	8f 90       	pop	r8
     c72:	08 95       	ret

00000c74 <__muldi3>:
     c74:	df 93       	push	r29
     c76:	cf 93       	push	r28
     c78:	1f 93       	push	r17
     c7a:	0f 93       	push	r16
     c7c:	9a 9d       	mul	r25, r10
     c7e:	f0 2d       	mov	r31, r0
     c80:	21 9f       	mul	r18, r17
     c82:	f0 0d       	add	r31, r0
     c84:	8b 9d       	mul	r24, r11
     c86:	f0 0d       	add	r31, r0
     c88:	8a 9d       	mul	r24, r10
     c8a:	e0 2d       	mov	r30, r0
     c8c:	f1 0d       	add	r31, r1
     c8e:	03 9f       	mul	r16, r19
     c90:	f0 0d       	add	r31, r0
     c92:	02 9f       	mul	r16, r18
     c94:	e0 0d       	add	r30, r0
     c96:	f1 1d       	adc	r31, r1
     c98:	4e 9d       	mul	r20, r14
     c9a:	e0 0d       	add	r30, r0
     c9c:	f1 1d       	adc	r31, r1
     c9e:	5e 9d       	mul	r21, r14
     ca0:	f0 0d       	add	r31, r0
     ca2:	4f 9d       	mul	r20, r15
     ca4:	f0 0d       	add	r31, r0
     ca6:	7f 93       	push	r23
     ca8:	6f 93       	push	r22
     caa:	bf 92       	push	r11
     cac:	af 92       	push	r10
     cae:	5f 93       	push	r21
     cb0:	4f 93       	push	r20
     cb2:	d5 01       	movw	r26, r10
     cb4:	bc df       	rcall	.-136    	; 0xc2e <__umulhisi3>
     cb6:	8b 01       	movw	r16, r22
     cb8:	ac 01       	movw	r20, r24
     cba:	d7 01       	movw	r26, r14
     cbc:	b8 df       	rcall	.-144    	; 0xc2e <__umulhisi3>
     cbe:	eb 01       	movw	r28, r22
     cc0:	e8 0f       	add	r30, r24
     cc2:	f9 1f       	adc	r31, r25
     cc4:	d6 01       	movw	r26, r12
     cc6:	1f d0       	rcall	.+62     	; 0xd06 <__muldi3_6>
     cc8:	2f 91       	pop	r18
     cca:	3f 91       	pop	r19
     ccc:	d6 01       	movw	r26, r12
     cce:	af df       	rcall	.-162    	; 0xc2e <__umulhisi3>
     cd0:	c6 0f       	add	r28, r22
     cd2:	d7 1f       	adc	r29, r23
     cd4:	e8 1f       	adc	r30, r24
     cd6:	f9 1f       	adc	r31, r25
     cd8:	af 91       	pop	r26
     cda:	bf 91       	pop	r27
     cdc:	14 d0       	rcall	.+40     	; 0xd06 <__muldi3_6>
     cde:	2f 91       	pop	r18
     ce0:	3f 91       	pop	r19
     ce2:	a5 df       	rcall	.-182    	; 0xc2e <__umulhisi3>
     ce4:	c6 0f       	add	r28, r22
     ce6:	d7 1f       	adc	r29, r23
     ce8:	e8 1f       	adc	r30, r24
     cea:	f9 1f       	adc	r31, r25
     cec:	d6 01       	movw	r26, r12
     cee:	9f df       	rcall	.-194    	; 0xc2e <__umulhisi3>
     cf0:	e6 0f       	add	r30, r22
     cf2:	f7 1f       	adc	r31, r23
     cf4:	98 01       	movw	r18, r16
     cf6:	be 01       	movw	r22, r28
     cf8:	cf 01       	movw	r24, r30
     cfa:	11 24       	eor	r1, r1
     cfc:	0f 91       	pop	r16
     cfe:	1f 91       	pop	r17
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	08 95       	ret

00000d06 <__muldi3_6>:
     d06:	93 df       	rcall	.-218    	; 0xc2e <__umulhisi3>
     d08:	46 0f       	add	r20, r22
     d0a:	57 1f       	adc	r21, r23
     d0c:	c8 1f       	adc	r28, r24
     d0e:	d9 1f       	adc	r29, r25
     d10:	08 f4       	brcc	.+2      	; 0xd14 <__muldi3_6+0xe>
     d12:	31 96       	adiw	r30, 0x01	; 1
     d14:	08 95       	ret

00000d16 <__udivmod64>:
     d16:	88 24       	eor	r8, r8
     d18:	99 24       	eor	r9, r9
     d1a:	f4 01       	movw	r30, r8
     d1c:	e4 01       	movw	r28, r8
     d1e:	b0 e4       	ldi	r27, 0x40	; 64
     d20:	1b 2e       	mov	r1, r27
     d22:	d4 01       	movw	r26, r8
     d24:	9d 15       	cp	r25, r13
     d26:	8e 04       	cpc	r8, r14
     d28:	9f 04       	cpc	r9, r15
     d2a:	e0 07       	cpc	r30, r16
     d2c:	f1 07       	cpc	r31, r17
     d2e:	38 f4       	brcc	.+14     	; 0xd3e <__udivmod64+0x28>
     d30:	fc 01       	movw	r30, r24
     d32:	4b 01       	movw	r8, r22
     d34:	ca 01       	movw	r24, r20
     d36:	b9 01       	movw	r22, r18
     d38:	ad 01       	movw	r20, r26
     d3a:	9e 01       	movw	r18, r28
     d3c:	16 94       	lsr	r1
     d3e:	22 0f       	add	r18, r18
     d40:	33 1f       	adc	r19, r19
     d42:	44 1f       	adc	r20, r20
     d44:	55 1f       	adc	r21, r21
     d46:	66 1f       	adc	r22, r22
     d48:	77 1f       	adc	r23, r23
     d4a:	88 1f       	adc	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	88 1c       	adc	r8, r8
     d50:	99 1c       	adc	r9, r9
     d52:	ee 1f       	adc	r30, r30
     d54:	ff 1f       	adc	r31, r31
     d56:	cc 1f       	adc	r28, r28
     d58:	dd 1f       	adc	r29, r29
     d5a:	aa 1f       	adc	r26, r26
     d5c:	bb 1f       	adc	r27, r27
     d5e:	8a 14       	cp	r8, r10
     d60:	9b 04       	cpc	r9, r11
     d62:	ec 05       	cpc	r30, r12
     d64:	fd 05       	cpc	r31, r13
     d66:	ce 05       	cpc	r28, r14
     d68:	df 05       	cpc	r29, r15
     d6a:	a0 07       	cpc	r26, r16
     d6c:	b1 07       	cpc	r27, r17
     d6e:	48 f0       	brcs	.+18     	; 0xd82 <__udivmod64+0x6c>
     d70:	8a 18       	sub	r8, r10
     d72:	9b 08       	sbc	r9, r11
     d74:	ec 09       	sbc	r30, r12
     d76:	fd 09       	sbc	r31, r13
     d78:	ce 09       	sbc	r28, r14
     d7a:	df 09       	sbc	r29, r15
     d7c:	a0 0b       	sbc	r26, r16
     d7e:	b1 0b       	sbc	r27, r17
     d80:	21 60       	ori	r18, 0x01	; 1
     d82:	1a 94       	dec	r1
     d84:	e1 f6       	brne	.-72     	; 0xd3e <__udivmod64+0x28>
     d86:	2e f4       	brtc	.+10     	; 0xd92 <__udivmod64+0x7c>
     d88:	94 01       	movw	r18, r8
     d8a:	af 01       	movw	r20, r30
     d8c:	be 01       	movw	r22, r28
     d8e:	cd 01       	movw	r24, r26
     d90:	00 0c       	add	r0, r0
     d92:	08 95       	ret

00000d94 <__ashldi3>:
     d94:	0f 93       	push	r16
     d96:	0f 73       	andi	r16, 0x3F	; 63
     d98:	51 f0       	breq	.+20     	; 0xdae <__ashldi3+0x1a>
     d9a:	22 0f       	add	r18, r18
     d9c:	33 1f       	adc	r19, r19
     d9e:	44 1f       	adc	r20, r20
     da0:	55 1f       	adc	r21, r21
     da2:	66 1f       	adc	r22, r22
     da4:	77 1f       	adc	r23, r23
     da6:	88 1f       	adc	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	0a 95       	dec	r16
     dac:	b1 f7       	brne	.-20     	; 0xd9a <__ashldi3+0x6>
     dae:	0f 91       	pop	r16
     db0:	08 95       	ret

00000db2 <__ashrdi3>:
     db2:	0f 93       	push	r16
     db4:	0f 73       	andi	r16, 0x3F	; 63
     db6:	51 f0       	breq	.+20     	; 0xdcc <__ashrdi3+0x1a>
     db8:	95 95       	asr	r25
     dba:	87 95       	ror	r24
     dbc:	77 95       	ror	r23
     dbe:	67 95       	ror	r22
     dc0:	57 95       	ror	r21
     dc2:	47 95       	ror	r20
     dc4:	37 95       	ror	r19
     dc6:	27 95       	ror	r18
     dc8:	0a 95       	dec	r16
     dca:	b1 f7       	brne	.-20     	; 0xdb8 <__ashrdi3+0x6>
     dcc:	0f 91       	pop	r16
     dce:	08 95       	ret

00000dd0 <__lshrdi3>:
     dd0:	0f 93       	push	r16
     dd2:	0f 73       	andi	r16, 0x3F	; 63
     dd4:	51 f0       	breq	.+20     	; 0xdea <__lshrdi3+0x1a>
     dd6:	96 95       	lsr	r25
     dd8:	87 95       	ror	r24
     dda:	77 95       	ror	r23
     ddc:	67 95       	ror	r22
     dde:	57 95       	ror	r21
     de0:	47 95       	ror	r20
     de2:	37 95       	ror	r19
     de4:	27 95       	ror	r18
     de6:	0a 95       	dec	r16
     de8:	b1 f7       	brne	.-20     	; 0xdd6 <__lshrdi3+0x6>
     dea:	0f 91       	pop	r16
     dec:	08 95       	ret

00000dee <__adddi3>:
     dee:	2a 0d       	add	r18, r10
     df0:	3b 1d       	adc	r19, r11
     df2:	4c 1d       	adc	r20, r12
     df4:	5d 1d       	adc	r21, r13
     df6:	6e 1d       	adc	r22, r14
     df8:	7f 1d       	adc	r23, r15
     dfa:	80 1f       	adc	r24, r16
     dfc:	91 1f       	adc	r25, r17
     dfe:	08 95       	ret

00000e00 <__cmpdi2_s8>:
     e00:	00 24       	eor	r0, r0
     e02:	a7 fd       	sbrc	r26, 7
     e04:	00 94       	com	r0
     e06:	2a 17       	cp	r18, r26
     e08:	30 05       	cpc	r19, r0
     e0a:	40 05       	cpc	r20, r0
     e0c:	50 05       	cpc	r21, r0
     e0e:	60 05       	cpc	r22, r0
     e10:	70 05       	cpc	r23, r0
     e12:	80 05       	cpc	r24, r0
     e14:	90 05       	cpc	r25, r0
     e16:	08 95       	ret

00000e18 <atoi>:
     e18:	fc 01       	movw	r30, r24
     e1a:	88 27       	eor	r24, r24
     e1c:	99 27       	eor	r25, r25
     e1e:	e8 94       	clt
     e20:	21 91       	ld	r18, Z+
     e22:	20 32       	cpi	r18, 0x20	; 32
     e24:	e9 f3       	breq	.-6      	; 0xe20 <atoi+0x8>
     e26:	29 30       	cpi	r18, 0x09	; 9
     e28:	10 f0       	brcs	.+4      	; 0xe2e <atoi+0x16>
     e2a:	2e 30       	cpi	r18, 0x0E	; 14
     e2c:	c8 f3       	brcs	.-14     	; 0xe20 <atoi+0x8>
     e2e:	2b 32       	cpi	r18, 0x2B	; 43
     e30:	39 f0       	breq	.+14     	; 0xe40 <atoi+0x28>
     e32:	2d 32       	cpi	r18, 0x2D	; 45
     e34:	31 f4       	brne	.+12     	; 0xe42 <atoi+0x2a>
     e36:	68 94       	set
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <atoi+0x28>
     e3a:	1a d0       	rcall	.+52     	; 0xe70 <__mulhi_const_10>
     e3c:	82 0f       	add	r24, r18
     e3e:	91 1d       	adc	r25, r1
     e40:	21 91       	ld	r18, Z+
     e42:	20 53       	subi	r18, 0x30	; 48
     e44:	2a 30       	cpi	r18, 0x0A	; 10
     e46:	c8 f3       	brcs	.-14     	; 0xe3a <atoi+0x22>
     e48:	1e f4       	brtc	.+6      	; 0xe50 <atoi+0x38>
     e4a:	90 95       	com	r25
     e4c:	81 95       	neg	r24
     e4e:	9f 4f       	sbci	r25, 0xFF	; 255
     e50:	08 95       	ret

00000e52 <strncpy>:
     e52:	fb 01       	movw	r30, r22
     e54:	dc 01       	movw	r26, r24
     e56:	41 50       	subi	r20, 0x01	; 1
     e58:	50 40       	sbci	r21, 0x00	; 0
     e5a:	48 f0       	brcs	.+18     	; 0xe6e <strncpy+0x1c>
     e5c:	01 90       	ld	r0, Z+
     e5e:	0d 92       	st	X+, r0
     e60:	00 20       	and	r0, r0
     e62:	c9 f7       	brne	.-14     	; 0xe56 <strncpy+0x4>
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <strncpy+0x16>
     e66:	1d 92       	st	X+, r1
     e68:	41 50       	subi	r20, 0x01	; 1
     e6a:	50 40       	sbci	r21, 0x00	; 0
     e6c:	e0 f7       	brcc	.-8      	; 0xe66 <strncpy+0x14>
     e6e:	08 95       	ret

00000e70 <__mulhi_const_10>:
     e70:	7a e0       	ldi	r23, 0x0A	; 10
     e72:	97 9f       	mul	r25, r23
     e74:	90 2d       	mov	r25, r0
     e76:	87 9f       	mul	r24, r23
     e78:	80 2d       	mov	r24, r0
     e7a:	91 0d       	add	r25, r1
     e7c:	11 24       	eor	r1, r1
     e7e:	08 95       	ret

00000e80 <snprintf>:
     e80:	ae e0       	ldi	r26, 0x0E	; 14
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e5 e4       	ldi	r30, 0x45	; 69
     e86:	f7 e0       	ldi	r31, 0x07	; 7
     e88:	a3 c2       	rjmp	.+1350   	; 0x13d0 <__prologue_saves__+0x1c>
     e8a:	0d 89       	ldd	r16, Y+21	; 0x15
     e8c:	1e 89       	ldd	r17, Y+22	; 0x16
     e8e:	8f 89       	ldd	r24, Y+23	; 0x17
     e90:	98 8d       	ldd	r25, Y+24	; 0x18
     e92:	26 e0       	ldi	r18, 0x06	; 6
     e94:	2c 83       	std	Y+4, r18	; 0x04
     e96:	1a 83       	std	Y+2, r17	; 0x02
     e98:	09 83       	std	Y+1, r16	; 0x01
     e9a:	97 ff       	sbrs	r25, 7
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <snprintf+0x22>
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e8       	ldi	r25, 0x80	; 128
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	9e 83       	std	Y+6, r25	; 0x06
     ea6:	8d 83       	std	Y+5, r24	; 0x05
     ea8:	ce 01       	movw	r24, r28
     eaa:	4b 96       	adiw	r24, 0x1b	; 27
     eac:	ac 01       	movw	r20, r24
     eae:	69 8d       	ldd	r22, Y+25	; 0x19
     eb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eb2:	ce 01       	movw	r24, r28
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	11 d0       	rcall	.+34     	; 0xeda <vfprintf>
     eb8:	4d 81       	ldd	r20, Y+5	; 0x05
     eba:	5e 81       	ldd	r21, Y+6	; 0x06
     ebc:	57 fd       	sbrc	r21, 7
     ebe:	0a c0       	rjmp	.+20     	; 0xed4 <snprintf+0x54>
     ec0:	2f 81       	ldd	r18, Y+7	; 0x07
     ec2:	38 85       	ldd	r19, Y+8	; 0x08
     ec4:	42 17       	cp	r20, r18
     ec6:	53 07       	cpc	r21, r19
     ec8:	0c f4       	brge	.+2      	; 0xecc <snprintf+0x4c>
     eca:	9a 01       	movw	r18, r20
     ecc:	f8 01       	movw	r30, r16
     ece:	e2 0f       	add	r30, r18
     ed0:	f3 1f       	adc	r31, r19
     ed2:	10 82       	st	Z, r1
     ed4:	2e 96       	adiw	r28, 0x0e	; 14
     ed6:	e4 e0       	ldi	r30, 0x04	; 4
     ed8:	97 c2       	rjmp	.+1326   	; 0x1408 <__epilogue_restores__+0x1c>

00000eda <vfprintf>:
     eda:	ac e0       	ldi	r26, 0x0C	; 12
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e2 e7       	ldi	r30, 0x72	; 114
     ee0:	f7 e0       	ldi	r31, 0x07	; 7
     ee2:	68 c2       	rjmp	.+1232   	; 0x13b4 <__prologue_saves__>
     ee4:	7c 01       	movw	r14, r24
     ee6:	6b 01       	movw	r12, r22
     ee8:	8a 01       	movw	r16, r20
     eea:	fc 01       	movw	r30, r24
     eec:	17 82       	std	Z+7, r1	; 0x07
     eee:	16 82       	std	Z+6, r1	; 0x06
     ef0:	83 81       	ldd	r24, Z+3	; 0x03
     ef2:	81 ff       	sbrs	r24, 1
     ef4:	b9 c1       	rjmp	.+882    	; 0x1268 <vfprintf+0x38e>
     ef6:	88 24       	eor	r8, r8
     ef8:	83 94       	inc	r8
     efa:	91 2c       	mov	r9, r1
     efc:	8c 0e       	add	r8, r28
     efe:	9d 1e       	adc	r9, r29
     f00:	f7 01       	movw	r30, r14
     f02:	93 81       	ldd	r25, Z+3	; 0x03
     f04:	f6 01       	movw	r30, r12
     f06:	93 fd       	sbrc	r25, 3
     f08:	85 91       	lpm	r24, Z+
     f0a:	93 ff       	sbrs	r25, 3
     f0c:	81 91       	ld	r24, Z+
     f0e:	6f 01       	movw	r12, r30
     f10:	88 23       	and	r24, r24
     f12:	09 f4       	brne	.+2      	; 0xf16 <vfprintf+0x3c>
     f14:	a5 c1       	rjmp	.+842    	; 0x1260 <vfprintf+0x386>
     f16:	85 32       	cpi	r24, 0x25	; 37
     f18:	39 f4       	brne	.+14     	; 0xf28 <vfprintf+0x4e>
     f1a:	93 fd       	sbrc	r25, 3
     f1c:	85 91       	lpm	r24, Z+
     f1e:	93 ff       	sbrs	r25, 3
     f20:	81 91       	ld	r24, Z+
     f22:	6f 01       	movw	r12, r30
     f24:	85 32       	cpi	r24, 0x25	; 37
     f26:	21 f4       	brne	.+8      	; 0xf30 <vfprintf+0x56>
     f28:	b7 01       	movw	r22, r14
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	b9 d1       	rcall	.+882    	; 0x12a0 <fputc>
     f2e:	e8 cf       	rjmp	.-48     	; 0xf00 <vfprintf+0x26>
     f30:	51 2c       	mov	r5, r1
     f32:	31 2c       	mov	r3, r1
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	20 32       	cpi	r18, 0x20	; 32
     f38:	a8 f4       	brcc	.+42     	; 0xf64 <vfprintf+0x8a>
     f3a:	8b 32       	cpi	r24, 0x2B	; 43
     f3c:	61 f0       	breq	.+24     	; 0xf56 <vfprintf+0x7c>
     f3e:	28 f4       	brcc	.+10     	; 0xf4a <vfprintf+0x70>
     f40:	80 32       	cpi	r24, 0x20	; 32
     f42:	51 f0       	breq	.+20     	; 0xf58 <vfprintf+0x7e>
     f44:	83 32       	cpi	r24, 0x23	; 35
     f46:	71 f4       	brne	.+28     	; 0xf64 <vfprintf+0x8a>
     f48:	0b c0       	rjmp	.+22     	; 0xf60 <vfprintf+0x86>
     f4a:	8d 32       	cpi	r24, 0x2D	; 45
     f4c:	39 f0       	breq	.+14     	; 0xf5c <vfprintf+0x82>
     f4e:	80 33       	cpi	r24, 0x30	; 48
     f50:	49 f4       	brne	.+18     	; 0xf64 <vfprintf+0x8a>
     f52:	21 60       	ori	r18, 0x01	; 1
     f54:	28 c0       	rjmp	.+80     	; 0xfa6 <vfprintf+0xcc>
     f56:	22 60       	ori	r18, 0x02	; 2
     f58:	24 60       	ori	r18, 0x04	; 4
     f5a:	25 c0       	rjmp	.+74     	; 0xfa6 <vfprintf+0xcc>
     f5c:	28 60       	ori	r18, 0x08	; 8
     f5e:	23 c0       	rjmp	.+70     	; 0xfa6 <vfprintf+0xcc>
     f60:	20 61       	ori	r18, 0x10	; 16
     f62:	21 c0       	rjmp	.+66     	; 0xfa6 <vfprintf+0xcc>
     f64:	27 fd       	sbrc	r18, 7
     f66:	27 c0       	rjmp	.+78     	; 0xfb6 <vfprintf+0xdc>
     f68:	38 2f       	mov	r19, r24
     f6a:	30 53       	subi	r19, 0x30	; 48
     f6c:	3a 30       	cpi	r19, 0x0A	; 10
     f6e:	78 f4       	brcc	.+30     	; 0xf8e <vfprintf+0xb4>
     f70:	26 ff       	sbrs	r18, 6
     f72:	06 c0       	rjmp	.+12     	; 0xf80 <vfprintf+0xa6>
     f74:	fa e0       	ldi	r31, 0x0A	; 10
     f76:	5f 9e       	mul	r5, r31
     f78:	30 0d       	add	r19, r0
     f7a:	11 24       	eor	r1, r1
     f7c:	53 2e       	mov	r5, r19
     f7e:	13 c0       	rjmp	.+38     	; 0xfa6 <vfprintf+0xcc>
     f80:	8a e0       	ldi	r24, 0x0A	; 10
     f82:	38 9e       	mul	r3, r24
     f84:	30 0d       	add	r19, r0
     f86:	11 24       	eor	r1, r1
     f88:	33 2e       	mov	r3, r19
     f8a:	20 62       	ori	r18, 0x20	; 32
     f8c:	0c c0       	rjmp	.+24     	; 0xfa6 <vfprintf+0xcc>
     f8e:	8e 32       	cpi	r24, 0x2E	; 46
     f90:	21 f4       	brne	.+8      	; 0xf9a <vfprintf+0xc0>
     f92:	26 fd       	sbrc	r18, 6
     f94:	65 c1       	rjmp	.+714    	; 0x1260 <vfprintf+0x386>
     f96:	20 64       	ori	r18, 0x40	; 64
     f98:	06 c0       	rjmp	.+12     	; 0xfa6 <vfprintf+0xcc>
     f9a:	8c 36       	cpi	r24, 0x6C	; 108
     f9c:	11 f4       	brne	.+4      	; 0xfa2 <vfprintf+0xc8>
     f9e:	20 68       	ori	r18, 0x80	; 128
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <vfprintf+0xcc>
     fa2:	88 36       	cpi	r24, 0x68	; 104
     fa4:	41 f4       	brne	.+16     	; 0xfb6 <vfprintf+0xdc>
     fa6:	f6 01       	movw	r30, r12
     fa8:	93 fd       	sbrc	r25, 3
     faa:	85 91       	lpm	r24, Z+
     fac:	93 ff       	sbrs	r25, 3
     fae:	81 91       	ld	r24, Z+
     fb0:	6f 01       	movw	r12, r30
     fb2:	81 11       	cpse	r24, r1
     fb4:	c0 cf       	rjmp	.-128    	; 0xf36 <vfprintf+0x5c>
     fb6:	98 2f       	mov	r25, r24
     fb8:	95 54       	subi	r25, 0x45	; 69
     fba:	93 30       	cpi	r25, 0x03	; 3
     fbc:	18 f0       	brcs	.+6      	; 0xfc4 <vfprintf+0xea>
     fbe:	90 52       	subi	r25, 0x20	; 32
     fc0:	93 30       	cpi	r25, 0x03	; 3
     fc2:	28 f4       	brcc	.+10     	; 0xfce <vfprintf+0xf4>
     fc4:	0c 5f       	subi	r16, 0xFC	; 252
     fc6:	1f 4f       	sbci	r17, 0xFF	; 255
     fc8:	ff e3       	ldi	r31, 0x3F	; 63
     fca:	f9 83       	std	Y+1, r31	; 0x01
     fcc:	0d c0       	rjmp	.+26     	; 0xfe8 <vfprintf+0x10e>
     fce:	83 36       	cpi	r24, 0x63	; 99
     fd0:	31 f0       	breq	.+12     	; 0xfde <vfprintf+0x104>
     fd2:	83 37       	cpi	r24, 0x73	; 115
     fd4:	71 f0       	breq	.+28     	; 0xff2 <vfprintf+0x118>
     fd6:	83 35       	cpi	r24, 0x53	; 83
     fd8:	09 f0       	breq	.+2      	; 0xfdc <vfprintf+0x102>
     fda:	5a c0       	rjmp	.+180    	; 0x1090 <vfprintf+0x1b6>
     fdc:	22 c0       	rjmp	.+68     	; 0x1022 <vfprintf+0x148>
     fde:	f8 01       	movw	r30, r16
     fe0:	80 81       	ld	r24, Z
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	0e 5f       	subi	r16, 0xFE	; 254
     fe6:	1f 4f       	sbci	r17, 0xFF	; 255
     fe8:	44 24       	eor	r4, r4
     fea:	43 94       	inc	r4
     fec:	51 2c       	mov	r5, r1
     fee:	54 01       	movw	r10, r8
     ff0:	14 c0       	rjmp	.+40     	; 0x101a <vfprintf+0x140>
     ff2:	38 01       	movw	r6, r16
     ff4:	f2 e0       	ldi	r31, 0x02	; 2
     ff6:	6f 0e       	add	r6, r31
     ff8:	71 1c       	adc	r7, r1
     ffa:	f8 01       	movw	r30, r16
     ffc:	a0 80       	ld	r10, Z
     ffe:	b1 80       	ldd	r11, Z+1	; 0x01
    1000:	26 ff       	sbrs	r18, 6
    1002:	03 c0       	rjmp	.+6      	; 0x100a <vfprintf+0x130>
    1004:	65 2d       	mov	r22, r5
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	02 c0       	rjmp	.+4      	; 0x100e <vfprintf+0x134>
    100a:	6f ef       	ldi	r22, 0xFF	; 255
    100c:	7f ef       	ldi	r23, 0xFF	; 255
    100e:	c5 01       	movw	r24, r10
    1010:	2c 87       	std	Y+12, r18	; 0x0c
    1012:	3b d1       	rcall	.+630    	; 0x128a <strnlen>
    1014:	2c 01       	movw	r4, r24
    1016:	83 01       	movw	r16, r6
    1018:	2c 85       	ldd	r18, Y+12	; 0x0c
    101a:	6f e7       	ldi	r22, 0x7F	; 127
    101c:	26 2e       	mov	r2, r22
    101e:	22 22       	and	r2, r18
    1020:	17 c0       	rjmp	.+46     	; 0x1050 <vfprintf+0x176>
    1022:	38 01       	movw	r6, r16
    1024:	f2 e0       	ldi	r31, 0x02	; 2
    1026:	6f 0e       	add	r6, r31
    1028:	71 1c       	adc	r7, r1
    102a:	f8 01       	movw	r30, r16
    102c:	a0 80       	ld	r10, Z
    102e:	b1 80       	ldd	r11, Z+1	; 0x01
    1030:	26 ff       	sbrs	r18, 6
    1032:	03 c0       	rjmp	.+6      	; 0x103a <vfprintf+0x160>
    1034:	65 2d       	mov	r22, r5
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	02 c0       	rjmp	.+4      	; 0x103e <vfprintf+0x164>
    103a:	6f ef       	ldi	r22, 0xFF	; 255
    103c:	7f ef       	ldi	r23, 0xFF	; 255
    103e:	c5 01       	movw	r24, r10
    1040:	2c 87       	std	Y+12, r18	; 0x0c
    1042:	18 d1       	rcall	.+560    	; 0x1274 <strnlen_P>
    1044:	2c 01       	movw	r4, r24
    1046:	2c 85       	ldd	r18, Y+12	; 0x0c
    1048:	50 e8       	ldi	r21, 0x80	; 128
    104a:	25 2e       	mov	r2, r21
    104c:	22 2a       	or	r2, r18
    104e:	83 01       	movw	r16, r6
    1050:	23 fc       	sbrc	r2, 3
    1052:	1a c0       	rjmp	.+52     	; 0x1088 <vfprintf+0x1ae>
    1054:	05 c0       	rjmp	.+10     	; 0x1060 <vfprintf+0x186>
    1056:	b7 01       	movw	r22, r14
    1058:	80 e2       	ldi	r24, 0x20	; 32
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	21 d1       	rcall	.+578    	; 0x12a0 <fputc>
    105e:	3a 94       	dec	r3
    1060:	83 2d       	mov	r24, r3
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	48 16       	cp	r4, r24
    1066:	59 06       	cpc	r5, r25
    1068:	b0 f3       	brcs	.-20     	; 0x1056 <vfprintf+0x17c>
    106a:	0e c0       	rjmp	.+28     	; 0x1088 <vfprintf+0x1ae>
    106c:	f5 01       	movw	r30, r10
    106e:	27 fc       	sbrc	r2, 7
    1070:	85 91       	lpm	r24, Z+
    1072:	27 fe       	sbrs	r2, 7
    1074:	81 91       	ld	r24, Z+
    1076:	5f 01       	movw	r10, r30
    1078:	b7 01       	movw	r22, r14
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	11 d1       	rcall	.+546    	; 0x12a0 <fputc>
    107e:	31 10       	cpse	r3, r1
    1080:	3a 94       	dec	r3
    1082:	f1 e0       	ldi	r31, 0x01	; 1
    1084:	4f 1a       	sub	r4, r31
    1086:	51 08       	sbc	r5, r1
    1088:	41 14       	cp	r4, r1
    108a:	51 04       	cpc	r5, r1
    108c:	79 f7       	brne	.-34     	; 0x106c <vfprintf+0x192>
    108e:	e5 c0       	rjmp	.+458    	; 0x125a <vfprintf+0x380>
    1090:	84 36       	cpi	r24, 0x64	; 100
    1092:	11 f0       	breq	.+4      	; 0x1098 <vfprintf+0x1be>
    1094:	89 36       	cpi	r24, 0x69	; 105
    1096:	39 f5       	brne	.+78     	; 0x10e6 <vfprintf+0x20c>
    1098:	f8 01       	movw	r30, r16
    109a:	27 ff       	sbrs	r18, 7
    109c:	07 c0       	rjmp	.+14     	; 0x10ac <vfprintf+0x1d2>
    109e:	60 81       	ld	r22, Z
    10a0:	71 81       	ldd	r23, Z+1	; 0x01
    10a2:	82 81       	ldd	r24, Z+2	; 0x02
    10a4:	93 81       	ldd	r25, Z+3	; 0x03
    10a6:	0c 5f       	subi	r16, 0xFC	; 252
    10a8:	1f 4f       	sbci	r17, 0xFF	; 255
    10aa:	08 c0       	rjmp	.+16     	; 0x10bc <vfprintf+0x1e2>
    10ac:	60 81       	ld	r22, Z
    10ae:	71 81       	ldd	r23, Z+1	; 0x01
    10b0:	88 27       	eor	r24, r24
    10b2:	77 fd       	sbrc	r23, 7
    10b4:	80 95       	com	r24
    10b6:	98 2f       	mov	r25, r24
    10b8:	0e 5f       	subi	r16, 0xFE	; 254
    10ba:	1f 4f       	sbci	r17, 0xFF	; 255
    10bc:	4f e6       	ldi	r20, 0x6F	; 111
    10be:	b4 2e       	mov	r11, r20
    10c0:	b2 22       	and	r11, r18
    10c2:	97 ff       	sbrs	r25, 7
    10c4:	09 c0       	rjmp	.+18     	; 0x10d8 <vfprintf+0x1fe>
    10c6:	90 95       	com	r25
    10c8:	80 95       	com	r24
    10ca:	70 95       	com	r23
    10cc:	61 95       	neg	r22
    10ce:	7f 4f       	sbci	r23, 0xFF	; 255
    10d0:	8f 4f       	sbci	r24, 0xFF	; 255
    10d2:	9f 4f       	sbci	r25, 0xFF	; 255
    10d4:	f0 e8       	ldi	r31, 0x80	; 128
    10d6:	bf 2a       	or	r11, r31
    10d8:	2a e0       	ldi	r18, 0x0A	; 10
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	a4 01       	movw	r20, r8
    10de:	0c d1       	rcall	.+536    	; 0x12f8 <__ultoa_invert>
    10e0:	a8 2e       	mov	r10, r24
    10e2:	a8 18       	sub	r10, r8
    10e4:	42 c0       	rjmp	.+132    	; 0x116a <vfprintf+0x290>
    10e6:	85 37       	cpi	r24, 0x75	; 117
    10e8:	31 f4       	brne	.+12     	; 0x10f6 <vfprintf+0x21c>
    10ea:	3f ee       	ldi	r19, 0xEF	; 239
    10ec:	b3 2e       	mov	r11, r19
    10ee:	b2 22       	and	r11, r18
    10f0:	2a e0       	ldi	r18, 0x0A	; 10
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	24 c0       	rjmp	.+72     	; 0x113e <vfprintf+0x264>
    10f6:	99 ef       	ldi	r25, 0xF9	; 249
    10f8:	b9 2e       	mov	r11, r25
    10fa:	b2 22       	and	r11, r18
    10fc:	8f 36       	cpi	r24, 0x6F	; 111
    10fe:	b9 f0       	breq	.+46     	; 0x112e <vfprintf+0x254>
    1100:	20 f4       	brcc	.+8      	; 0x110a <vfprintf+0x230>
    1102:	88 35       	cpi	r24, 0x58	; 88
    1104:	09 f0       	breq	.+2      	; 0x1108 <vfprintf+0x22e>
    1106:	ac c0       	rjmp	.+344    	; 0x1260 <vfprintf+0x386>
    1108:	0d c0       	rjmp	.+26     	; 0x1124 <vfprintf+0x24a>
    110a:	80 37       	cpi	r24, 0x70	; 112
    110c:	21 f0       	breq	.+8      	; 0x1116 <vfprintf+0x23c>
    110e:	88 37       	cpi	r24, 0x78	; 120
    1110:	09 f0       	breq	.+2      	; 0x1114 <vfprintf+0x23a>
    1112:	a6 c0       	rjmp	.+332    	; 0x1260 <vfprintf+0x386>
    1114:	02 c0       	rjmp	.+4      	; 0x111a <vfprintf+0x240>
    1116:	20 e1       	ldi	r18, 0x10	; 16
    1118:	b2 2a       	or	r11, r18
    111a:	b4 fe       	sbrs	r11, 4
    111c:	0b c0       	rjmp	.+22     	; 0x1134 <vfprintf+0x25a>
    111e:	84 e0       	ldi	r24, 0x04	; 4
    1120:	b8 2a       	or	r11, r24
    1122:	08 c0       	rjmp	.+16     	; 0x1134 <vfprintf+0x25a>
    1124:	24 ff       	sbrs	r18, 4
    1126:	09 c0       	rjmp	.+18     	; 0x113a <vfprintf+0x260>
    1128:	e6 e0       	ldi	r30, 0x06	; 6
    112a:	be 2a       	or	r11, r30
    112c:	06 c0       	rjmp	.+12     	; 0x113a <vfprintf+0x260>
    112e:	28 e0       	ldi	r18, 0x08	; 8
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	05 c0       	rjmp	.+10     	; 0x113e <vfprintf+0x264>
    1134:	20 e1       	ldi	r18, 0x10	; 16
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	02 c0       	rjmp	.+4      	; 0x113e <vfprintf+0x264>
    113a:	20 e1       	ldi	r18, 0x10	; 16
    113c:	32 e0       	ldi	r19, 0x02	; 2
    113e:	f8 01       	movw	r30, r16
    1140:	b7 fe       	sbrs	r11, 7
    1142:	07 c0       	rjmp	.+14     	; 0x1152 <vfprintf+0x278>
    1144:	60 81       	ld	r22, Z
    1146:	71 81       	ldd	r23, Z+1	; 0x01
    1148:	82 81       	ldd	r24, Z+2	; 0x02
    114a:	93 81       	ldd	r25, Z+3	; 0x03
    114c:	0c 5f       	subi	r16, 0xFC	; 252
    114e:	1f 4f       	sbci	r17, 0xFF	; 255
    1150:	06 c0       	rjmp	.+12     	; 0x115e <vfprintf+0x284>
    1152:	60 81       	ld	r22, Z
    1154:	71 81       	ldd	r23, Z+1	; 0x01
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 5f       	subi	r16, 0xFE	; 254
    115c:	1f 4f       	sbci	r17, 0xFF	; 255
    115e:	a4 01       	movw	r20, r8
    1160:	cb d0       	rcall	.+406    	; 0x12f8 <__ultoa_invert>
    1162:	a8 2e       	mov	r10, r24
    1164:	a8 18       	sub	r10, r8
    1166:	ff e7       	ldi	r31, 0x7F	; 127
    1168:	bf 22       	and	r11, r31
    116a:	b6 fe       	sbrs	r11, 6
    116c:	0b c0       	rjmp	.+22     	; 0x1184 <vfprintf+0x2aa>
    116e:	2b 2d       	mov	r18, r11
    1170:	2e 7f       	andi	r18, 0xFE	; 254
    1172:	a5 14       	cp	r10, r5
    1174:	50 f4       	brcc	.+20     	; 0x118a <vfprintf+0x2b0>
    1176:	b4 fe       	sbrs	r11, 4
    1178:	0a c0       	rjmp	.+20     	; 0x118e <vfprintf+0x2b4>
    117a:	b2 fc       	sbrc	r11, 2
    117c:	08 c0       	rjmp	.+16     	; 0x118e <vfprintf+0x2b4>
    117e:	2b 2d       	mov	r18, r11
    1180:	2e 7e       	andi	r18, 0xEE	; 238
    1182:	05 c0       	rjmp	.+10     	; 0x118e <vfprintf+0x2b4>
    1184:	7a 2c       	mov	r7, r10
    1186:	2b 2d       	mov	r18, r11
    1188:	03 c0       	rjmp	.+6      	; 0x1190 <vfprintf+0x2b6>
    118a:	7a 2c       	mov	r7, r10
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <vfprintf+0x2b6>
    118e:	75 2c       	mov	r7, r5
    1190:	24 ff       	sbrs	r18, 4
    1192:	0d c0       	rjmp	.+26     	; 0x11ae <vfprintf+0x2d4>
    1194:	fe 01       	movw	r30, r28
    1196:	ea 0d       	add	r30, r10
    1198:	f1 1d       	adc	r31, r1
    119a:	80 81       	ld	r24, Z
    119c:	80 33       	cpi	r24, 0x30	; 48
    119e:	11 f4       	brne	.+4      	; 0x11a4 <vfprintf+0x2ca>
    11a0:	29 7e       	andi	r18, 0xE9	; 233
    11a2:	09 c0       	rjmp	.+18     	; 0x11b6 <vfprintf+0x2dc>
    11a4:	22 ff       	sbrs	r18, 2
    11a6:	06 c0       	rjmp	.+12     	; 0x11b4 <vfprintf+0x2da>
    11a8:	73 94       	inc	r7
    11aa:	73 94       	inc	r7
    11ac:	04 c0       	rjmp	.+8      	; 0x11b6 <vfprintf+0x2dc>
    11ae:	82 2f       	mov	r24, r18
    11b0:	86 78       	andi	r24, 0x86	; 134
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <vfprintf+0x2dc>
    11b4:	73 94       	inc	r7
    11b6:	23 fd       	sbrc	r18, 3
    11b8:	13 c0       	rjmp	.+38     	; 0x11e0 <vfprintf+0x306>
    11ba:	20 ff       	sbrs	r18, 0
    11bc:	0e c0       	rjmp	.+28     	; 0x11da <vfprintf+0x300>
    11be:	5a 2c       	mov	r5, r10
    11c0:	73 14       	cp	r7, r3
    11c2:	58 f4       	brcc	.+22     	; 0x11da <vfprintf+0x300>
    11c4:	53 0c       	add	r5, r3
    11c6:	57 18       	sub	r5, r7
    11c8:	73 2c       	mov	r7, r3
    11ca:	07 c0       	rjmp	.+14     	; 0x11da <vfprintf+0x300>
    11cc:	b7 01       	movw	r22, r14
    11ce:	80 e2       	ldi	r24, 0x20	; 32
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	2c 87       	std	Y+12, r18	; 0x0c
    11d4:	65 d0       	rcall	.+202    	; 0x12a0 <fputc>
    11d6:	73 94       	inc	r7
    11d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    11da:	73 14       	cp	r7, r3
    11dc:	b8 f3       	brcs	.-18     	; 0x11cc <vfprintf+0x2f2>
    11de:	04 c0       	rjmp	.+8      	; 0x11e8 <vfprintf+0x30e>
    11e0:	73 14       	cp	r7, r3
    11e2:	10 f4       	brcc	.+4      	; 0x11e8 <vfprintf+0x30e>
    11e4:	37 18       	sub	r3, r7
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <vfprintf+0x310>
    11e8:	31 2c       	mov	r3, r1
    11ea:	24 ff       	sbrs	r18, 4
    11ec:	11 c0       	rjmp	.+34     	; 0x1210 <vfprintf+0x336>
    11ee:	b7 01       	movw	r22, r14
    11f0:	80 e3       	ldi	r24, 0x30	; 48
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	2c 87       	std	Y+12, r18	; 0x0c
    11f6:	54 d0       	rcall	.+168    	; 0x12a0 <fputc>
    11f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    11fa:	22 ff       	sbrs	r18, 2
    11fc:	1c c0       	rjmp	.+56     	; 0x1236 <vfprintf+0x35c>
    11fe:	21 ff       	sbrs	r18, 1
    1200:	03 c0       	rjmp	.+6      	; 0x1208 <vfprintf+0x32e>
    1202:	88 e5       	ldi	r24, 0x58	; 88
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 c0       	rjmp	.+4      	; 0x120c <vfprintf+0x332>
    1208:	88 e7       	ldi	r24, 0x78	; 120
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	b7 01       	movw	r22, r14
    120e:	0c c0       	rjmp	.+24     	; 0x1228 <vfprintf+0x34e>
    1210:	82 2f       	mov	r24, r18
    1212:	86 78       	andi	r24, 0x86	; 134
    1214:	81 f0       	breq	.+32     	; 0x1236 <vfprintf+0x35c>
    1216:	21 fd       	sbrc	r18, 1
    1218:	02 c0       	rjmp	.+4      	; 0x121e <vfprintf+0x344>
    121a:	80 e2       	ldi	r24, 0x20	; 32
    121c:	01 c0       	rjmp	.+2      	; 0x1220 <vfprintf+0x346>
    121e:	8b e2       	ldi	r24, 0x2B	; 43
    1220:	27 fd       	sbrc	r18, 7
    1222:	8d e2       	ldi	r24, 0x2D	; 45
    1224:	b7 01       	movw	r22, r14
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	3b d0       	rcall	.+118    	; 0x12a0 <fputc>
    122a:	05 c0       	rjmp	.+10     	; 0x1236 <vfprintf+0x35c>
    122c:	b7 01       	movw	r22, r14
    122e:	80 e3       	ldi	r24, 0x30	; 48
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	36 d0       	rcall	.+108    	; 0x12a0 <fputc>
    1234:	5a 94       	dec	r5
    1236:	a5 14       	cp	r10, r5
    1238:	c8 f3       	brcs	.-14     	; 0x122c <vfprintf+0x352>
    123a:	aa 94       	dec	r10
    123c:	f4 01       	movw	r30, r8
    123e:	ea 0d       	add	r30, r10
    1240:	f1 1d       	adc	r31, r1
    1242:	b7 01       	movw	r22, r14
    1244:	80 81       	ld	r24, Z
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	2b d0       	rcall	.+86     	; 0x12a0 <fputc>
    124a:	a1 10       	cpse	r10, r1
    124c:	f6 cf       	rjmp	.-20     	; 0x123a <vfprintf+0x360>
    124e:	05 c0       	rjmp	.+10     	; 0x125a <vfprintf+0x380>
    1250:	b7 01       	movw	r22, r14
    1252:	80 e2       	ldi	r24, 0x20	; 32
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	24 d0       	rcall	.+72     	; 0x12a0 <fputc>
    1258:	3a 94       	dec	r3
    125a:	31 10       	cpse	r3, r1
    125c:	f9 cf       	rjmp	.-14     	; 0x1250 <vfprintf+0x376>
    125e:	50 ce       	rjmp	.-864    	; 0xf00 <vfprintf+0x26>
    1260:	f7 01       	movw	r30, r14
    1262:	26 81       	ldd	r18, Z+6	; 0x06
    1264:	37 81       	ldd	r19, Z+7	; 0x07
    1266:	02 c0       	rjmp	.+4      	; 0x126c <vfprintf+0x392>
    1268:	2f ef       	ldi	r18, 0xFF	; 255
    126a:	3f ef       	ldi	r19, 0xFF	; 255
    126c:	c9 01       	movw	r24, r18
    126e:	2c 96       	adiw	r28, 0x0c	; 12
    1270:	e2 e1       	ldi	r30, 0x12	; 18
    1272:	bc c0       	rjmp	.+376    	; 0x13ec <__epilogue_restores__>

00001274 <strnlen_P>:
    1274:	fc 01       	movw	r30, r24
    1276:	05 90       	lpm	r0, Z+
    1278:	61 50       	subi	r22, 0x01	; 1
    127a:	70 40       	sbci	r23, 0x00	; 0
    127c:	01 10       	cpse	r0, r1
    127e:	d8 f7       	brcc	.-10     	; 0x1276 <strnlen_P+0x2>
    1280:	80 95       	com	r24
    1282:	90 95       	com	r25
    1284:	8e 0f       	add	r24, r30
    1286:	9f 1f       	adc	r25, r31
    1288:	08 95       	ret

0000128a <strnlen>:
    128a:	fc 01       	movw	r30, r24
    128c:	61 50       	subi	r22, 0x01	; 1
    128e:	70 40       	sbci	r23, 0x00	; 0
    1290:	01 90       	ld	r0, Z+
    1292:	01 10       	cpse	r0, r1
    1294:	d8 f7       	brcc	.-10     	; 0x128c <strnlen+0x2>
    1296:	80 95       	com	r24
    1298:	90 95       	com	r25
    129a:	8e 0f       	add	r24, r30
    129c:	9f 1f       	adc	r25, r31
    129e:	08 95       	ret

000012a0 <fputc>:
    12a0:	0f 93       	push	r16
    12a2:	1f 93       	push	r17
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	8c 01       	movw	r16, r24
    12aa:	eb 01       	movw	r28, r22
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	81 fd       	sbrc	r24, 1
    12b0:	03 c0       	rjmp	.+6      	; 0x12b8 <fputc+0x18>
    12b2:	0f ef       	ldi	r16, 0xFF	; 255
    12b4:	1f ef       	ldi	r17, 0xFF	; 255
    12b6:	1a c0       	rjmp	.+52     	; 0x12ec <fputc+0x4c>
    12b8:	82 ff       	sbrs	r24, 2
    12ba:	0d c0       	rjmp	.+26     	; 0x12d6 <fputc+0x36>
    12bc:	2e 81       	ldd	r18, Y+6	; 0x06
    12be:	3f 81       	ldd	r19, Y+7	; 0x07
    12c0:	8c 81       	ldd	r24, Y+4	; 0x04
    12c2:	9d 81       	ldd	r25, Y+5	; 0x05
    12c4:	28 17       	cp	r18, r24
    12c6:	39 07       	cpc	r19, r25
    12c8:	64 f4       	brge	.+24     	; 0x12e2 <fputc+0x42>
    12ca:	e8 81       	ld	r30, Y
    12cc:	f9 81       	ldd	r31, Y+1	; 0x01
    12ce:	01 93       	st	Z+, r16
    12d0:	f9 83       	std	Y+1, r31	; 0x01
    12d2:	e8 83       	st	Y, r30
    12d4:	06 c0       	rjmp	.+12     	; 0x12e2 <fputc+0x42>
    12d6:	e8 85       	ldd	r30, Y+8	; 0x08
    12d8:	f9 85       	ldd	r31, Y+9	; 0x09
    12da:	80 2f       	mov	r24, r16
    12dc:	09 95       	icall
    12de:	89 2b       	or	r24, r25
    12e0:	41 f7       	brne	.-48     	; 0x12b2 <fputc+0x12>
    12e2:	8e 81       	ldd	r24, Y+6	; 0x06
    12e4:	9f 81       	ldd	r25, Y+7	; 0x07
    12e6:	01 96       	adiw	r24, 0x01	; 1
    12e8:	9f 83       	std	Y+7, r25	; 0x07
    12ea:	8e 83       	std	Y+6, r24	; 0x06
    12ec:	c8 01       	movw	r24, r16
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	08 95       	ret

000012f8 <__ultoa_invert>:
    12f8:	fa 01       	movw	r30, r20
    12fa:	aa 27       	eor	r26, r26
    12fc:	28 30       	cpi	r18, 0x08	; 8
    12fe:	51 f1       	breq	.+84     	; 0x1354 <__ultoa_invert+0x5c>
    1300:	20 31       	cpi	r18, 0x10	; 16
    1302:	81 f1       	breq	.+96     	; 0x1364 <__ultoa_invert+0x6c>
    1304:	e8 94       	clt
    1306:	6f 93       	push	r22
    1308:	6e 7f       	andi	r22, 0xFE	; 254
    130a:	6e 5f       	subi	r22, 0xFE	; 254
    130c:	7f 4f       	sbci	r23, 0xFF	; 255
    130e:	8f 4f       	sbci	r24, 0xFF	; 255
    1310:	9f 4f       	sbci	r25, 0xFF	; 255
    1312:	af 4f       	sbci	r26, 0xFF	; 255
    1314:	b1 e0       	ldi	r27, 0x01	; 1
    1316:	3e d0       	rcall	.+124    	; 0x1394 <__ultoa_invert+0x9c>
    1318:	b4 e0       	ldi	r27, 0x04	; 4
    131a:	3c d0       	rcall	.+120    	; 0x1394 <__ultoa_invert+0x9c>
    131c:	67 0f       	add	r22, r23
    131e:	78 1f       	adc	r23, r24
    1320:	89 1f       	adc	r24, r25
    1322:	9a 1f       	adc	r25, r26
    1324:	a1 1d       	adc	r26, r1
    1326:	68 0f       	add	r22, r24
    1328:	79 1f       	adc	r23, r25
    132a:	8a 1f       	adc	r24, r26
    132c:	91 1d       	adc	r25, r1
    132e:	a1 1d       	adc	r26, r1
    1330:	6a 0f       	add	r22, r26
    1332:	71 1d       	adc	r23, r1
    1334:	81 1d       	adc	r24, r1
    1336:	91 1d       	adc	r25, r1
    1338:	a1 1d       	adc	r26, r1
    133a:	20 d0       	rcall	.+64     	; 0x137c <__ultoa_invert+0x84>
    133c:	09 f4       	brne	.+2      	; 0x1340 <__ultoa_invert+0x48>
    133e:	68 94       	set
    1340:	3f 91       	pop	r19
    1342:	2a e0       	ldi	r18, 0x0A	; 10
    1344:	26 9f       	mul	r18, r22
    1346:	11 24       	eor	r1, r1
    1348:	30 19       	sub	r19, r0
    134a:	30 5d       	subi	r19, 0xD0	; 208
    134c:	31 93       	st	Z+, r19
    134e:	de f6       	brtc	.-74     	; 0x1306 <__ultoa_invert+0xe>
    1350:	cf 01       	movw	r24, r30
    1352:	08 95       	ret
    1354:	46 2f       	mov	r20, r22
    1356:	47 70       	andi	r20, 0x07	; 7
    1358:	40 5d       	subi	r20, 0xD0	; 208
    135a:	41 93       	st	Z+, r20
    135c:	b3 e0       	ldi	r27, 0x03	; 3
    135e:	0f d0       	rcall	.+30     	; 0x137e <__ultoa_invert+0x86>
    1360:	c9 f7       	brne	.-14     	; 0x1354 <__ultoa_invert+0x5c>
    1362:	f6 cf       	rjmp	.-20     	; 0x1350 <__ultoa_invert+0x58>
    1364:	46 2f       	mov	r20, r22
    1366:	4f 70       	andi	r20, 0x0F	; 15
    1368:	40 5d       	subi	r20, 0xD0	; 208
    136a:	4a 33       	cpi	r20, 0x3A	; 58
    136c:	18 f0       	brcs	.+6      	; 0x1374 <__ultoa_invert+0x7c>
    136e:	49 5d       	subi	r20, 0xD9	; 217
    1370:	31 fd       	sbrc	r19, 1
    1372:	40 52       	subi	r20, 0x20	; 32
    1374:	41 93       	st	Z+, r20
    1376:	02 d0       	rcall	.+4      	; 0x137c <__ultoa_invert+0x84>
    1378:	a9 f7       	brne	.-22     	; 0x1364 <__ultoa_invert+0x6c>
    137a:	ea cf       	rjmp	.-44     	; 0x1350 <__ultoa_invert+0x58>
    137c:	b4 e0       	ldi	r27, 0x04	; 4
    137e:	a6 95       	lsr	r26
    1380:	97 95       	ror	r25
    1382:	87 95       	ror	r24
    1384:	77 95       	ror	r23
    1386:	67 95       	ror	r22
    1388:	ba 95       	dec	r27
    138a:	c9 f7       	brne	.-14     	; 0x137e <__ultoa_invert+0x86>
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	61 05       	cpc	r22, r1
    1390:	71 05       	cpc	r23, r1
    1392:	08 95       	ret
    1394:	9b 01       	movw	r18, r22
    1396:	ac 01       	movw	r20, r24
    1398:	0a 2e       	mov	r0, r26
    139a:	06 94       	lsr	r0
    139c:	57 95       	ror	r21
    139e:	47 95       	ror	r20
    13a0:	37 95       	ror	r19
    13a2:	27 95       	ror	r18
    13a4:	ba 95       	dec	r27
    13a6:	c9 f7       	brne	.-14     	; 0x139a <__ultoa_invert+0xa2>
    13a8:	62 0f       	add	r22, r18
    13aa:	73 1f       	adc	r23, r19
    13ac:	84 1f       	adc	r24, r20
    13ae:	95 1f       	adc	r25, r21
    13b0:	a0 1d       	adc	r26, r0
    13b2:	08 95       	ret

000013b4 <__prologue_saves__>:
    13b4:	2f 92       	push	r2
    13b6:	3f 92       	push	r3
    13b8:	4f 92       	push	r4
    13ba:	5f 92       	push	r5
    13bc:	6f 92       	push	r6
    13be:	7f 92       	push	r7
    13c0:	8f 92       	push	r8
    13c2:	9f 92       	push	r9
    13c4:	af 92       	push	r10
    13c6:	bf 92       	push	r11
    13c8:	cf 92       	push	r12
    13ca:	df 92       	push	r13
    13cc:	ef 92       	push	r14
    13ce:	ff 92       	push	r15
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	ca 1b       	sub	r28, r26
    13de:	db 0b       	sbc	r29, r27
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	09 94       	ijmp

000013ec <__epilogue_restores__>:
    13ec:	2a 88       	ldd	r2, Y+18	; 0x12
    13ee:	39 88       	ldd	r3, Y+17	; 0x11
    13f0:	48 88       	ldd	r4, Y+16	; 0x10
    13f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    13f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    13f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    13f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    13fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    13fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    13fe:	b9 84       	ldd	r11, Y+9	; 0x09
    1400:	c8 84       	ldd	r12, Y+8	; 0x08
    1402:	df 80       	ldd	r13, Y+7	; 0x07
    1404:	ee 80       	ldd	r14, Y+6	; 0x06
    1406:	fd 80       	ldd	r15, Y+5	; 0x05
    1408:	0c 81       	ldd	r16, Y+4	; 0x04
    140a:	1b 81       	ldd	r17, Y+3	; 0x03
    140c:	aa 81       	ldd	r26, Y+2	; 0x02
    140e:	b9 81       	ldd	r27, Y+1	; 0x01
    1410:	ce 0f       	add	r28, r30
    1412:	d1 1d       	adc	r29, r1
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	ed 01       	movw	r28, r26
    1420:	08 95       	ret

00001422 <_exit>:
    1422:	f8 94       	cli

00001424 <__stop_program>:
    1424:	ff cf       	rjmp	.-2      	; 0x1424 <__stop_program>
